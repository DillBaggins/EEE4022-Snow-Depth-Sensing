
Thesis_Nucleo_Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012c7c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ba0  08012e10  08012e10  00022e10  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080139b0  080139b0  00030220  2**0
                  CONTENTS
  4 .ARM          00000008  080139b0  080139b0  000239b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080139b8  080139b8  00030220  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080139b8  080139b8  000239b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080139bc  080139bc  000239bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000220  20000000  080139c0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000d30  20000220  08013be0  00030220  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000f50  08013be0  00030f50  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030220  2**0
                  CONTENTS, READONLY
 12 .debug_info   00034a7e  00000000  00000000  00030250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004691  00000000  00000000  00064cce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001e10  00000000  00000000  00069360  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001c28  00000000  00000000  0006b170  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002fef7  00000000  00000000  0006cd98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000268af  00000000  00000000  0009cc8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011a3f3  00000000  00000000  000c353e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001dd931  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000096e8  00000000  00000000  001dd984  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000220 	.word	0x20000220
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08012df4 	.word	0x08012df4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000224 	.word	0x20000224
 80001cc:	08012df4 	.word	0x08012df4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b974 	b.w	8000ee8 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	4604      	mov	r4, r0
 8000c20:	468e      	mov	lr, r1
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d14d      	bne.n	8000cc2 <__udivmoddi4+0xaa>
 8000c26:	428a      	cmp	r2, r1
 8000c28:	4694      	mov	ip, r2
 8000c2a:	d969      	bls.n	8000d00 <__udivmoddi4+0xe8>
 8000c2c:	fab2 f282 	clz	r2, r2
 8000c30:	b152      	cbz	r2, 8000c48 <__udivmoddi4+0x30>
 8000c32:	fa01 f302 	lsl.w	r3, r1, r2
 8000c36:	f1c2 0120 	rsb	r1, r2, #32
 8000c3a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c3e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c42:	ea41 0e03 	orr.w	lr, r1, r3
 8000c46:	4094      	lsls	r4, r2
 8000c48:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c4c:	0c21      	lsrs	r1, r4, #16
 8000c4e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c52:	fa1f f78c 	uxth.w	r7, ip
 8000c56:	fb08 e316 	mls	r3, r8, r6, lr
 8000c5a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c5e:	fb06 f107 	mul.w	r1, r6, r7
 8000c62:	4299      	cmp	r1, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x64>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c6e:	f080 811f 	bcs.w	8000eb0 <__udivmoddi4+0x298>
 8000c72:	4299      	cmp	r1, r3
 8000c74:	f240 811c 	bls.w	8000eb0 <__udivmoddi4+0x298>
 8000c78:	3e02      	subs	r6, #2
 8000c7a:	4463      	add	r3, ip
 8000c7c:	1a5b      	subs	r3, r3, r1
 8000c7e:	b2a4      	uxth	r4, r4
 8000c80:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c84:	fb08 3310 	mls	r3, r8, r0, r3
 8000c88:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c8c:	fb00 f707 	mul.w	r7, r0, r7
 8000c90:	42a7      	cmp	r7, r4
 8000c92:	d90a      	bls.n	8000caa <__udivmoddi4+0x92>
 8000c94:	eb1c 0404 	adds.w	r4, ip, r4
 8000c98:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c9c:	f080 810a 	bcs.w	8000eb4 <__udivmoddi4+0x29c>
 8000ca0:	42a7      	cmp	r7, r4
 8000ca2:	f240 8107 	bls.w	8000eb4 <__udivmoddi4+0x29c>
 8000ca6:	4464      	add	r4, ip
 8000ca8:	3802      	subs	r0, #2
 8000caa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cae:	1be4      	subs	r4, r4, r7
 8000cb0:	2600      	movs	r6, #0
 8000cb2:	b11d      	cbz	r5, 8000cbc <__udivmoddi4+0xa4>
 8000cb4:	40d4      	lsrs	r4, r2
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cbc:	4631      	mov	r1, r6
 8000cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d909      	bls.n	8000cda <__udivmoddi4+0xc2>
 8000cc6:	2d00      	cmp	r5, #0
 8000cc8:	f000 80ef 	beq.w	8000eaa <__udivmoddi4+0x292>
 8000ccc:	2600      	movs	r6, #0
 8000cce:	e9c5 0100 	strd	r0, r1, [r5]
 8000cd2:	4630      	mov	r0, r6
 8000cd4:	4631      	mov	r1, r6
 8000cd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cda:	fab3 f683 	clz	r6, r3
 8000cde:	2e00      	cmp	r6, #0
 8000ce0:	d14a      	bne.n	8000d78 <__udivmoddi4+0x160>
 8000ce2:	428b      	cmp	r3, r1
 8000ce4:	d302      	bcc.n	8000cec <__udivmoddi4+0xd4>
 8000ce6:	4282      	cmp	r2, r0
 8000ce8:	f200 80f9 	bhi.w	8000ede <__udivmoddi4+0x2c6>
 8000cec:	1a84      	subs	r4, r0, r2
 8000cee:	eb61 0303 	sbc.w	r3, r1, r3
 8000cf2:	2001      	movs	r0, #1
 8000cf4:	469e      	mov	lr, r3
 8000cf6:	2d00      	cmp	r5, #0
 8000cf8:	d0e0      	beq.n	8000cbc <__udivmoddi4+0xa4>
 8000cfa:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cfe:	e7dd      	b.n	8000cbc <__udivmoddi4+0xa4>
 8000d00:	b902      	cbnz	r2, 8000d04 <__udivmoddi4+0xec>
 8000d02:	deff      	udf	#255	; 0xff
 8000d04:	fab2 f282 	clz	r2, r2
 8000d08:	2a00      	cmp	r2, #0
 8000d0a:	f040 8092 	bne.w	8000e32 <__udivmoddi4+0x21a>
 8000d0e:	eba1 010c 	sub.w	r1, r1, ip
 8000d12:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d16:	fa1f fe8c 	uxth.w	lr, ip
 8000d1a:	2601      	movs	r6, #1
 8000d1c:	0c20      	lsrs	r0, r4, #16
 8000d1e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d22:	fb07 1113 	mls	r1, r7, r3, r1
 8000d26:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d2a:	fb0e f003 	mul.w	r0, lr, r3
 8000d2e:	4288      	cmp	r0, r1
 8000d30:	d908      	bls.n	8000d44 <__udivmoddi4+0x12c>
 8000d32:	eb1c 0101 	adds.w	r1, ip, r1
 8000d36:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d3a:	d202      	bcs.n	8000d42 <__udivmoddi4+0x12a>
 8000d3c:	4288      	cmp	r0, r1
 8000d3e:	f200 80cb 	bhi.w	8000ed8 <__udivmoddi4+0x2c0>
 8000d42:	4643      	mov	r3, r8
 8000d44:	1a09      	subs	r1, r1, r0
 8000d46:	b2a4      	uxth	r4, r4
 8000d48:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d4c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d50:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d54:	fb0e fe00 	mul.w	lr, lr, r0
 8000d58:	45a6      	cmp	lr, r4
 8000d5a:	d908      	bls.n	8000d6e <__udivmoddi4+0x156>
 8000d5c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d60:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d64:	d202      	bcs.n	8000d6c <__udivmoddi4+0x154>
 8000d66:	45a6      	cmp	lr, r4
 8000d68:	f200 80bb 	bhi.w	8000ee2 <__udivmoddi4+0x2ca>
 8000d6c:	4608      	mov	r0, r1
 8000d6e:	eba4 040e 	sub.w	r4, r4, lr
 8000d72:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d76:	e79c      	b.n	8000cb2 <__udivmoddi4+0x9a>
 8000d78:	f1c6 0720 	rsb	r7, r6, #32
 8000d7c:	40b3      	lsls	r3, r6
 8000d7e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d82:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d86:	fa20 f407 	lsr.w	r4, r0, r7
 8000d8a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d8e:	431c      	orrs	r4, r3
 8000d90:	40f9      	lsrs	r1, r7
 8000d92:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d96:	fa00 f306 	lsl.w	r3, r0, r6
 8000d9a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d9e:	0c20      	lsrs	r0, r4, #16
 8000da0:	fa1f fe8c 	uxth.w	lr, ip
 8000da4:	fb09 1118 	mls	r1, r9, r8, r1
 8000da8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dac:	fb08 f00e 	mul.w	r0, r8, lr
 8000db0:	4288      	cmp	r0, r1
 8000db2:	fa02 f206 	lsl.w	r2, r2, r6
 8000db6:	d90b      	bls.n	8000dd0 <__udivmoddi4+0x1b8>
 8000db8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dbc:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dc0:	f080 8088 	bcs.w	8000ed4 <__udivmoddi4+0x2bc>
 8000dc4:	4288      	cmp	r0, r1
 8000dc6:	f240 8085 	bls.w	8000ed4 <__udivmoddi4+0x2bc>
 8000dca:	f1a8 0802 	sub.w	r8, r8, #2
 8000dce:	4461      	add	r1, ip
 8000dd0:	1a09      	subs	r1, r1, r0
 8000dd2:	b2a4      	uxth	r4, r4
 8000dd4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000dd8:	fb09 1110 	mls	r1, r9, r0, r1
 8000ddc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000de0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000de4:	458e      	cmp	lr, r1
 8000de6:	d908      	bls.n	8000dfa <__udivmoddi4+0x1e2>
 8000de8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dec:	f100 34ff 	add.w	r4, r0, #4294967295
 8000df0:	d26c      	bcs.n	8000ecc <__udivmoddi4+0x2b4>
 8000df2:	458e      	cmp	lr, r1
 8000df4:	d96a      	bls.n	8000ecc <__udivmoddi4+0x2b4>
 8000df6:	3802      	subs	r0, #2
 8000df8:	4461      	add	r1, ip
 8000dfa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dfe:	fba0 9402 	umull	r9, r4, r0, r2
 8000e02:	eba1 010e 	sub.w	r1, r1, lr
 8000e06:	42a1      	cmp	r1, r4
 8000e08:	46c8      	mov	r8, r9
 8000e0a:	46a6      	mov	lr, r4
 8000e0c:	d356      	bcc.n	8000ebc <__udivmoddi4+0x2a4>
 8000e0e:	d053      	beq.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e10:	b15d      	cbz	r5, 8000e2a <__udivmoddi4+0x212>
 8000e12:	ebb3 0208 	subs.w	r2, r3, r8
 8000e16:	eb61 010e 	sbc.w	r1, r1, lr
 8000e1a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e1e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e22:	40f1      	lsrs	r1, r6
 8000e24:	431f      	orrs	r7, r3
 8000e26:	e9c5 7100 	strd	r7, r1, [r5]
 8000e2a:	2600      	movs	r6, #0
 8000e2c:	4631      	mov	r1, r6
 8000e2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e32:	f1c2 0320 	rsb	r3, r2, #32
 8000e36:	40d8      	lsrs	r0, r3
 8000e38:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e3c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e40:	4091      	lsls	r1, r2
 8000e42:	4301      	orrs	r1, r0
 8000e44:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e48:	fa1f fe8c 	uxth.w	lr, ip
 8000e4c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e50:	fb07 3610 	mls	r6, r7, r0, r3
 8000e54:	0c0b      	lsrs	r3, r1, #16
 8000e56:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e5a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e5e:	429e      	cmp	r6, r3
 8000e60:	fa04 f402 	lsl.w	r4, r4, r2
 8000e64:	d908      	bls.n	8000e78 <__udivmoddi4+0x260>
 8000e66:	eb1c 0303 	adds.w	r3, ip, r3
 8000e6a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e6e:	d22f      	bcs.n	8000ed0 <__udivmoddi4+0x2b8>
 8000e70:	429e      	cmp	r6, r3
 8000e72:	d92d      	bls.n	8000ed0 <__udivmoddi4+0x2b8>
 8000e74:	3802      	subs	r0, #2
 8000e76:	4463      	add	r3, ip
 8000e78:	1b9b      	subs	r3, r3, r6
 8000e7a:	b289      	uxth	r1, r1
 8000e7c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e80:	fb07 3316 	mls	r3, r7, r6, r3
 8000e84:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e88:	fb06 f30e 	mul.w	r3, r6, lr
 8000e8c:	428b      	cmp	r3, r1
 8000e8e:	d908      	bls.n	8000ea2 <__udivmoddi4+0x28a>
 8000e90:	eb1c 0101 	adds.w	r1, ip, r1
 8000e94:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e98:	d216      	bcs.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e9a:	428b      	cmp	r3, r1
 8000e9c:	d914      	bls.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e9e:	3e02      	subs	r6, #2
 8000ea0:	4461      	add	r1, ip
 8000ea2:	1ac9      	subs	r1, r1, r3
 8000ea4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ea8:	e738      	b.n	8000d1c <__udivmoddi4+0x104>
 8000eaa:	462e      	mov	r6, r5
 8000eac:	4628      	mov	r0, r5
 8000eae:	e705      	b.n	8000cbc <__udivmoddi4+0xa4>
 8000eb0:	4606      	mov	r6, r0
 8000eb2:	e6e3      	b.n	8000c7c <__udivmoddi4+0x64>
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	e6f8      	b.n	8000caa <__udivmoddi4+0x92>
 8000eb8:	454b      	cmp	r3, r9
 8000eba:	d2a9      	bcs.n	8000e10 <__udivmoddi4+0x1f8>
 8000ebc:	ebb9 0802 	subs.w	r8, r9, r2
 8000ec0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ec4:	3801      	subs	r0, #1
 8000ec6:	e7a3      	b.n	8000e10 <__udivmoddi4+0x1f8>
 8000ec8:	4646      	mov	r6, r8
 8000eca:	e7ea      	b.n	8000ea2 <__udivmoddi4+0x28a>
 8000ecc:	4620      	mov	r0, r4
 8000ece:	e794      	b.n	8000dfa <__udivmoddi4+0x1e2>
 8000ed0:	4640      	mov	r0, r8
 8000ed2:	e7d1      	b.n	8000e78 <__udivmoddi4+0x260>
 8000ed4:	46d0      	mov	r8, sl
 8000ed6:	e77b      	b.n	8000dd0 <__udivmoddi4+0x1b8>
 8000ed8:	3b02      	subs	r3, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	e732      	b.n	8000d44 <__udivmoddi4+0x12c>
 8000ede:	4630      	mov	r0, r6
 8000ee0:	e709      	b.n	8000cf6 <__udivmoddi4+0xde>
 8000ee2:	4464      	add	r4, ip
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	e742      	b.n	8000d6e <__udivmoddi4+0x156>

08000ee8 <__aeabi_idiv0>:
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop

08000eec <SetupCommscanIseeDevice>:
extern int uartTxBufLen;

/*
 * Simple functions which establishes i2c communication with the sensor
 */
void SetupCommscanIseeDevice(){
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b082      	sub	sp, #8
 8000ef0:	af00      	add	r7, sp, #0
	//these assignments happen on a global scale
	Dev->I2cDevAddr      = 0x52;
 8000ef2:	4b40      	ldr	r3, [pc, #256]	; (8000ff4 <SetupCommscanIseeDevice+0x108>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	2252      	movs	r2, #82	; 0x52
 8000ef8:	f883 2398 	strb.w	r2, [r3, #920]	; 0x398
	Dev->I2cHandle	   = &hi2c1;
 8000efc:	4b3d      	ldr	r3, [pc, #244]	; (8000ff4 <SetupCommscanIseeDevice+0x108>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4a3d      	ldr	r2, [pc, #244]	; (8000ff8 <SetupCommscanIseeDevice+0x10c>)
 8000f02:	f8c3 23a0 	str.w	r2, [r3, #928]	; 0x3a0
	Dev->comms_type      =  1;
 8000f06:	4b3b      	ldr	r3, [pc, #236]	; (8000ff4 <SetupCommscanIseeDevice+0x108>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	2201      	movs	r2, #1
 8000f0c:	f883 2399 	strb.w	r2, [r3, #921]	; 0x399
	Dev->comms_speed_khz =  100;
 8000f10:	4b38      	ldr	r3, [pc, #224]	; (8000ff4 <SetupCommscanIseeDevice+0x108>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	2264      	movs	r2, #100	; 0x64
 8000f16:	f8a3 239a 	strh.w	r2, [r3, #922]	; 0x39a

	uartTxBufLen=sprintf(uartTxBuf,"checking to see if can see laser sensor\r\n");
 8000f1a:	4938      	ldr	r1, [pc, #224]	; (8000ffc <SetupCommscanIseeDevice+0x110>)
 8000f1c:	4838      	ldr	r0, [pc, #224]	; (8001000 <SetupCommscanIseeDevice+0x114>)
 8000f1e:	f00d ffe9 	bl	800eef4 <siprintf>
 8000f22:	4603      	mov	r3, r0
 8000f24:	4a37      	ldr	r2, [pc, #220]	; (8001004 <SetupCommscanIseeDevice+0x118>)
 8000f26:	6013      	str	r3, [r2, #0]
	printToSerial();
 8000f28:	f000 fefa 	bl	8001d20 <printToSerial>

	uint8_t ret;
	ret = HAL_I2C_IsDeviceReady(&hi2c1, dev.I2cDevAddr, 3, 5);
 8000f2c:	4b36      	ldr	r3, [pc, #216]	; (8001008 <SetupCommscanIseeDevice+0x11c>)
 8000f2e:	f893 3398 	ldrb.w	r3, [r3, #920]	; 0x398
 8000f32:	b299      	uxth	r1, r3
 8000f34:	2305      	movs	r3, #5
 8000f36:	2203      	movs	r2, #3
 8000f38:	482f      	ldr	r0, [pc, #188]	; (8000ff8 <SetupCommscanIseeDevice+0x10c>)
 8000f3a:	f002 fe6b 	bl	8003c14 <HAL_I2C_IsDeviceReady>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	71fb      	strb	r3, [r7, #7]
	if (ret != HAL_OK) /* No ACK Received At That Address */
 8000f42:	79fb      	ldrb	r3, [r7, #7]
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d009      	beq.n	8000f5c <SetupCommscanIseeDevice+0x70>
	{
		uartTxBufLen=sprintf(uartTxBuf,"cant see laser sensor\r\n");
 8000f48:	4930      	ldr	r1, [pc, #192]	; (800100c <SetupCommscanIseeDevice+0x120>)
 8000f4a:	482d      	ldr	r0, [pc, #180]	; (8001000 <SetupCommscanIseeDevice+0x114>)
 8000f4c:	f00d ffd2 	bl	800eef4 <siprintf>
 8000f50:	4603      	mov	r3, r0
 8000f52:	4a2c      	ldr	r2, [pc, #176]	; (8001004 <SetupCommscanIseeDevice+0x118>)
 8000f54:	6013      	str	r3, [r2, #0]
		printToSerial();
 8000f56:	f000 fee3 	bl	8001d20 <printToSerial>
 8000f5a:	e00b      	b.n	8000f74 <SetupCommscanIseeDevice+0x88>
	}
	else if(ret == HAL_OK)
 8000f5c:	79fb      	ldrb	r3, [r7, #7]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d108      	bne.n	8000f74 <SetupCommscanIseeDevice+0x88>
	{
		uartTxBufLen=sprintf(uartTxBuf,"can see laser sensor:) \r\n");
 8000f62:	492b      	ldr	r1, [pc, #172]	; (8001010 <SetupCommscanIseeDevice+0x124>)
 8000f64:	4826      	ldr	r0, [pc, #152]	; (8001000 <SetupCommscanIseeDevice+0x114>)
 8000f66:	f00d ffc5 	bl	800eef4 <siprintf>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	4a25      	ldr	r2, [pc, #148]	; (8001004 <SetupCommscanIseeDevice+0x118>)
 8000f6e:	6013      	str	r3, [r2, #0]
		printToSerial();
 8000f70:	f000 fed6 	bl	8001d20 <printToSerial>
	}

	uartTxBufLen=sprintf(uartTxBuf,"performing DataInit function \r\n");
 8000f74:	4927      	ldr	r1, [pc, #156]	; (8001014 <SetupCommscanIseeDevice+0x128>)
 8000f76:	4822      	ldr	r0, [pc, #136]	; (8001000 <SetupCommscanIseeDevice+0x114>)
 8000f78:	f00d ffbc 	bl	800eef4 <siprintf>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	4a21      	ldr	r2, [pc, #132]	; (8001004 <SetupCommscanIseeDevice+0x118>)
 8000f80:	6013      	str	r3, [r2, #0]
	printToSerial();
 8000f82:	f000 fecd 	bl	8001d20 <printToSerial>
	Status = VL53L1_DataInit(Dev); // Data initialization
 8000f86:	4b1b      	ldr	r3, [pc, #108]	; (8000ff4 <SetupCommscanIseeDevice+0x108>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f006 fed9 	bl	8007d42 <VL53L1_DataInit>
 8000f90:	4603      	mov	r3, r0
 8000f92:	461a      	mov	r2, r3
 8000f94:	4b20      	ldr	r3, [pc, #128]	; (8001018 <SetupCommscanIseeDevice+0x12c>)
 8000f96:	701a      	strb	r2, [r3, #0]
	if(Status){print_pal_error(Status);}
 8000f98:	4b1f      	ldr	r3, [pc, #124]	; (8001018 <SetupCommscanIseeDevice+0x12c>)
 8000f9a:	f993 3000 	ldrsb.w	r3, [r3]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d006      	beq.n	8000fb0 <SetupCommscanIseeDevice+0xc4>
 8000fa2:	4b1d      	ldr	r3, [pc, #116]	; (8001018 <SetupCommscanIseeDevice+0x12c>)
 8000fa4:	f993 3000 	ldrsb.w	r3, [r3]
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f000 fb25 	bl	80015f8 <print_pal_error>
		uartTxBufLen=sprintf(uartTxBuf,"performing StaticInit function \r\n");
		printToSerial();
		Status = VL53L1_StaticInit(Dev); // Data initialization
		if (Status){print_pal_error(Status);}
	}
}
 8000fae:	e01c      	b.n	8000fea <SetupCommscanIseeDevice+0xfe>
		uartTxBufLen=sprintf(uartTxBuf,"performing StaticInit function \r\n");
 8000fb0:	491a      	ldr	r1, [pc, #104]	; (800101c <SetupCommscanIseeDevice+0x130>)
 8000fb2:	4813      	ldr	r0, [pc, #76]	; (8001000 <SetupCommscanIseeDevice+0x114>)
 8000fb4:	f00d ff9e 	bl	800eef4 <siprintf>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	4a12      	ldr	r2, [pc, #72]	; (8001004 <SetupCommscanIseeDevice+0x118>)
 8000fbc:	6013      	str	r3, [r2, #0]
		printToSerial();
 8000fbe:	f000 feaf 	bl	8001d20 <printToSerial>
		Status = VL53L1_StaticInit(Dev); // Data initialization
 8000fc2:	4b0c      	ldr	r3, [pc, #48]	; (8000ff4 <SetupCommscanIseeDevice+0x108>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f006 fef4 	bl	8007db4 <VL53L1_StaticInit>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	461a      	mov	r2, r3
 8000fd0:	4b11      	ldr	r3, [pc, #68]	; (8001018 <SetupCommscanIseeDevice+0x12c>)
 8000fd2:	701a      	strb	r2, [r3, #0]
		if (Status){print_pal_error(Status);}
 8000fd4:	4b10      	ldr	r3, [pc, #64]	; (8001018 <SetupCommscanIseeDevice+0x12c>)
 8000fd6:	f993 3000 	ldrsb.w	r3, [r3]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d005      	beq.n	8000fea <SetupCommscanIseeDevice+0xfe>
 8000fde:	4b0e      	ldr	r3, [pc, #56]	; (8001018 <SetupCommscanIseeDevice+0x12c>)
 8000fe0:	f993 3000 	ldrsb.w	r3, [r3]
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f000 fb07 	bl	80015f8 <print_pal_error>
}
 8000fea:	bf00      	nop
 8000fec:	3708      	adds	r7, #8
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	20000000 	.word	0x20000000
 8000ff8:	20000298 	.word	0x20000298
 8000ffc:	08012e10 	.word	0x08012e10
 8001000:	20000b14 	.word	0x20000b14
 8001004:	20000e34 	.word	0x20000e34
 8001008:	200003bc 	.word	0x200003bc
 800100c:	08012e3c 	.word	0x08012e3c
 8001010:	08012e54 	.word	0x08012e54
 8001014:	08012e70 	.word	0x08012e70
 8001018:	20000760 	.word	0x20000760
 800101c:	08012e90 	.word	0x08012e90

08001020 <setupDeviceForSingleRanging>:


void setupDeviceForSingleRanging(){
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0
	// setup for simple ranging
	uartTxBufLen=sprintf(uartTxBuf,"setting presetMode\r\n");
 8001024:	4929      	ldr	r1, [pc, #164]	; (80010cc <setupDeviceForSingleRanging+0xac>)
 8001026:	482a      	ldr	r0, [pc, #168]	; (80010d0 <setupDeviceForSingleRanging+0xb0>)
 8001028:	f00d ff64 	bl	800eef4 <siprintf>
 800102c:	4603      	mov	r3, r0
 800102e:	4a29      	ldr	r2, [pc, #164]	; (80010d4 <setupDeviceForSingleRanging+0xb4>)
 8001030:	6013      	str	r3, [r2, #0]
	printToSerial();
 8001032:	f000 fe75 	bl	8001d20 <printToSerial>
	Status=VL53L1_SetPresetMode(Dev,VL53L1_PRESETMODE_LITE_RANGING);
 8001036:	4b28      	ldr	r3, [pc, #160]	; (80010d8 <setupDeviceForSingleRanging+0xb8>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	2104      	movs	r1, #4
 800103c:	4618      	mov	r0, r3
 800103e:	f006 ffb0 	bl	8007fa2 <VL53L1_SetPresetMode>
 8001042:	4603      	mov	r3, r0
 8001044:	461a      	mov	r2, r3
 8001046:	4b25      	ldr	r3, [pc, #148]	; (80010dc <setupDeviceForSingleRanging+0xbc>)
 8001048:	701a      	strb	r2, [r3, #0]
	if (Status){
 800104a:	4b24      	ldr	r3, [pc, #144]	; (80010dc <setupDeviceForSingleRanging+0xbc>)
 800104c:	f993 3000 	ldrsb.w	r3, [r3]
 8001050:	2b00      	cmp	r3, #0
 8001052:	d008      	beq.n	8001066 <setupDeviceForSingleRanging+0x46>
		uartTxBufLen=sprintf(uartTxBuf,"something went wrong setting preset\r\n");
 8001054:	4922      	ldr	r1, [pc, #136]	; (80010e0 <setupDeviceForSingleRanging+0xc0>)
 8001056:	481e      	ldr	r0, [pc, #120]	; (80010d0 <setupDeviceForSingleRanging+0xb0>)
 8001058:	f00d ff4c 	bl	800eef4 <siprintf>
 800105c:	4603      	mov	r3, r0
 800105e:	4a1d      	ldr	r2, [pc, #116]	; (80010d4 <setupDeviceForSingleRanging+0xb4>)
 8001060:	6013      	str	r3, [r2, #0]
		printToSerial();
 8001062:	f000 fe5d 	bl	8001d20 <printToSerial>
	}


	// set distance range
	uartTxBufLen=sprintf(uartTxBuf,"setting distance mode\r\n");
 8001066:	491f      	ldr	r1, [pc, #124]	; (80010e4 <setupDeviceForSingleRanging+0xc4>)
 8001068:	4819      	ldr	r0, [pc, #100]	; (80010d0 <setupDeviceForSingleRanging+0xb0>)
 800106a:	f00d ff43 	bl	800eef4 <siprintf>
 800106e:	4603      	mov	r3, r0
 8001070:	4a18      	ldr	r2, [pc, #96]	; (80010d4 <setupDeviceForSingleRanging+0xb4>)
 8001072:	6013      	str	r3, [r2, #0]
	printToSerial();
 8001074:	f000 fe54 	bl	8001d20 <printToSerial>
	if (!Status){
 8001078:	4b18      	ldr	r3, [pc, #96]	; (80010dc <setupDeviceForSingleRanging+0xbc>)
 800107a:	f993 3000 	ldrsb.w	r3, [r3]
 800107e:	2b00      	cmp	r3, #0
 8001080:	d113      	bne.n	80010aa <setupDeviceForSingleRanging+0x8a>
		uartTxBufLen=sprintf(uartTxBuf,"setting mode to medium range\r\n");
 8001082:	4919      	ldr	r1, [pc, #100]	; (80010e8 <setupDeviceForSingleRanging+0xc8>)
 8001084:	4812      	ldr	r0, [pc, #72]	; (80010d0 <setupDeviceForSingleRanging+0xb0>)
 8001086:	f00d ff35 	bl	800eef4 <siprintf>
 800108a:	4603      	mov	r3, r0
 800108c:	4a11      	ldr	r2, [pc, #68]	; (80010d4 <setupDeviceForSingleRanging+0xb4>)
 800108e:	6013      	str	r3, [r2, #0]
		printToSerial();
 8001090:	f000 fe46 	bl	8001d20 <printToSerial>
		Status= VL53L1_SetDistanceMode(Dev, VL53L1_DISTANCEMODE_MEDIUM);
 8001094:	4b10      	ldr	r3, [pc, #64]	; (80010d8 <setupDeviceForSingleRanging+0xb8>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	2102      	movs	r1, #2
 800109a:	4618      	mov	r0, r3
 800109c:	f006 ffc6 	bl	800802c <VL53L1_SetDistanceMode>
 80010a0:	4603      	mov	r3, r0
 80010a2:	461a      	mov	r2, r3
 80010a4:	4b0d      	ldr	r3, [pc, #52]	; (80010dc <setupDeviceForSingleRanging+0xbc>)
 80010a6:	701a      	strb	r2, [r3, #0]
		print_pal_error(Status);

	}


}
 80010a8:	e00e      	b.n	80010c8 <setupDeviceForSingleRanging+0xa8>
		uartTxBufLen=sprintf(uartTxBuf,"error in setting distance mode\r\n");
 80010aa:	4910      	ldr	r1, [pc, #64]	; (80010ec <setupDeviceForSingleRanging+0xcc>)
 80010ac:	4808      	ldr	r0, [pc, #32]	; (80010d0 <setupDeviceForSingleRanging+0xb0>)
 80010ae:	f00d ff21 	bl	800eef4 <siprintf>
 80010b2:	4603      	mov	r3, r0
 80010b4:	4a07      	ldr	r2, [pc, #28]	; (80010d4 <setupDeviceForSingleRanging+0xb4>)
 80010b6:	6013      	str	r3, [r2, #0]
		printToSerial();
 80010b8:	f000 fe32 	bl	8001d20 <printToSerial>
		print_pal_error(Status);
 80010bc:	4b07      	ldr	r3, [pc, #28]	; (80010dc <setupDeviceForSingleRanging+0xbc>)
 80010be:	f993 3000 	ldrsb.w	r3, [r3]
 80010c2:	4618      	mov	r0, r3
 80010c4:	f000 fa98 	bl	80015f8 <print_pal_error>
}
 80010c8:	bf00      	nop
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	08012eb4 	.word	0x08012eb4
 80010d0:	20000b14 	.word	0x20000b14
 80010d4:	20000e34 	.word	0x20000e34
 80010d8:	20000000 	.word	0x20000000
 80010dc:	20000760 	.word	0x20000760
 80010e0:	08012ecc 	.word	0x08012ecc
 80010e4:	08012ef4 	.word	0x08012ef4
 80010e8:	08012f0c 	.word	0x08012f0c
 80010ec:	08012f2c 	.word	0x08012f2c

080010f0 <refSPADCalibration>:



void refSPADCalibration(){
 80010f0:	b580      	push	{r7, lr}
 80010f2:	af00      	add	r7, sp, #0
	uartTxBufLen=sprintf(uartTxBuf,"doing SPAD calibration\r\n");
 80010f4:	4920      	ldr	r1, [pc, #128]	; (8001178 <refSPADCalibration+0x88>)
 80010f6:	4821      	ldr	r0, [pc, #132]	; (800117c <refSPADCalibration+0x8c>)
 80010f8:	f00d fefc 	bl	800eef4 <siprintf>
 80010fc:	4603      	mov	r3, r0
 80010fe:	4a20      	ldr	r2, [pc, #128]	; (8001180 <refSPADCalibration+0x90>)
 8001100:	6013      	str	r3, [r2, #0]
	printToSerial();
 8001102:	f000 fe0d 	bl	8001d20 <printToSerial>
	Status=VL53L1_PerformRefSpadManagement(Dev);
 8001106:	4b1f      	ldr	r3, [pc, #124]	; (8001184 <refSPADCalibration+0x94>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	4618      	mov	r0, r3
 800110c:	f007 fd7c 	bl	8008c08 <VL53L1_PerformRefSpadManagement>
 8001110:	4603      	mov	r3, r0
 8001112:	461a      	mov	r2, r3
 8001114:	4b1c      	ldr	r3, [pc, #112]	; (8001188 <refSPADCalibration+0x98>)
 8001116:	701a      	strb	r2, [r3, #0]
	if(Status){
 8001118:	4b1b      	ldr	r3, [pc, #108]	; (8001188 <refSPADCalibration+0x98>)
 800111a:	f993 3000 	ldrsb.w	r3, [r3]
 800111e:	2b00      	cmp	r3, #0
 8001120:	d005      	beq.n	800112e <refSPADCalibration+0x3e>
			print_pal_error(Status);
 8001122:	4b19      	ldr	r3, [pc, #100]	; (8001188 <refSPADCalibration+0x98>)
 8001124:	f993 3000 	ldrsb.w	r3, [r3]
 8001128:	4618      	mov	r0, r3
 800112a:	f000 fa65 	bl	80015f8 <print_pal_error>
		}
	Status=VL53L1_GetCalibrationData(Dev, pCalibrationData);
 800112e:	4b15      	ldr	r3, [pc, #84]	; (8001184 <refSPADCalibration+0x94>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	4a16      	ldr	r2, [pc, #88]	; (800118c <refSPADCalibration+0x9c>)
 8001134:	6812      	ldr	r2, [r2, #0]
 8001136:	4611      	mov	r1, r2
 8001138:	4618      	mov	r0, r3
 800113a:	f007 ffa1 	bl	8009080 <VL53L1_GetCalibrationData>
 800113e:	4603      	mov	r3, r0
 8001140:	461a      	mov	r2, r3
 8001142:	4b11      	ldr	r3, [pc, #68]	; (8001188 <refSPADCalibration+0x98>)
 8001144:	701a      	strb	r2, [r3, #0]
	Status=VL53L1_SetCalibrationData(Dev, pCalibrationData);
 8001146:	4b0f      	ldr	r3, [pc, #60]	; (8001184 <refSPADCalibration+0x94>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	4a10      	ldr	r2, [pc, #64]	; (800118c <refSPADCalibration+0x9c>)
 800114c:	6812      	ldr	r2, [r2, #0]
 800114e:	4611      	mov	r1, r2
 8001150:	4618      	mov	r0, r3
 8001152:	f007 ff0b 	bl	8008f6c <VL53L1_SetCalibrationData>
 8001156:	4603      	mov	r3, r0
 8001158:	461a      	mov	r2, r3
 800115a:	4b0b      	ldr	r3, [pc, #44]	; (8001188 <refSPADCalibration+0x98>)
 800115c:	701a      	strb	r2, [r3, #0]
	if(Status){
 800115e:	4b0a      	ldr	r3, [pc, #40]	; (8001188 <refSPADCalibration+0x98>)
 8001160:	f993 3000 	ldrsb.w	r3, [r3]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d005      	beq.n	8001174 <refSPADCalibration+0x84>
		print_pal_error(Status);
 8001168:	4b07      	ldr	r3, [pc, #28]	; (8001188 <refSPADCalibration+0x98>)
 800116a:	f993 3000 	ldrsb.w	r3, [r3]
 800116e:	4618      	mov	r0, r3
 8001170:	f000 fa42 	bl	80015f8 <print_pal_error>
	}
}
 8001174:	bf00      	nop
 8001176:	bd80      	pop	{r7, pc}
 8001178:	08012f50 	.word	0x08012f50
 800117c:	20000b14 	.word	0x20000b14
 8001180:	20000e34 	.word	0x20000e34
 8001184:	20000000 	.word	0x20000000
 8001188:	20000760 	.word	0x20000760
 800118c:	20000004 	.word	0x20000004

08001190 <offsetCalibration>:

void offsetCalibration(int32_t calibrationDistance){
 8001190:	b580      	push	{r7, lr}
 8001192:	b082      	sub	sp, #8
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
	// set measurement budget as advised by datasheed
	Status = VL53L1_SetMeasurementTimingBudgetMicroSeconds(Dev, 30000);
 8001198:	4b30      	ldr	r3, [pc, #192]	; (800125c <offsetCalibration+0xcc>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	f247 5130 	movw	r1, #30000	; 0x7530
 80011a0:	4618      	mov	r0, r3
 80011a2:	f006 ffb9 	bl	8008118 <VL53L1_SetMeasurementTimingBudgetMicroSeconds>
 80011a6:	4603      	mov	r3, r0
 80011a8:	461a      	mov	r2, r3
 80011aa:	4b2d      	ldr	r3, [pc, #180]	; (8001260 <offsetCalibration+0xd0>)
 80011ac:	701a      	strb	r2, [r3, #0]
	Status = VL53L1_SetInterMeasurementPeriodMilliSeconds(Dev, 40000);
 80011ae:	4b2b      	ldr	r3, [pc, #172]	; (800125c <offsetCalibration+0xcc>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f649 4140 	movw	r1, #40000	; 0x9c40
 80011b6:	4618      	mov	r0, r3
 80011b8:	f007 f93a 	bl	8008430 <VL53L1_SetInterMeasurementPeriodMilliSeconds>
 80011bc:	4603      	mov	r3, r0
 80011be:	461a      	mov	r2, r3
 80011c0:	4b27      	ldr	r3, [pc, #156]	; (8001260 <offsetCalibration+0xd0>)
 80011c2:	701a      	strb	r2, [r3, #0]

	if (Status){
 80011c4:	4b26      	ldr	r3, [pc, #152]	; (8001260 <offsetCalibration+0xd0>)
 80011c6:	f993 3000 	ldrsb.w	r3, [r3]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d00f      	beq.n	80011ee <offsetCalibration+0x5e>
		uartTxBufLen=sprintf(uartTxBuf,"something went wrong setting timing budget for offset calibration\r\n");
 80011ce:	4925      	ldr	r1, [pc, #148]	; (8001264 <offsetCalibration+0xd4>)
 80011d0:	4825      	ldr	r0, [pc, #148]	; (8001268 <offsetCalibration+0xd8>)
 80011d2:	f00d fe8f 	bl	800eef4 <siprintf>
 80011d6:	4603      	mov	r3, r0
 80011d8:	4a24      	ldr	r2, [pc, #144]	; (800126c <offsetCalibration+0xdc>)
 80011da:	6013      	str	r3, [r2, #0]
		printToSerial();
 80011dc:	f000 fda0 	bl	8001d20 <printToSerial>
		print_pal_error(Status);
 80011e0:	4b1f      	ldr	r3, [pc, #124]	; (8001260 <offsetCalibration+0xd0>)
 80011e2:	f993 3000 	ldrsb.w	r3, [r3]
 80011e6:	4618      	mov	r0, r3
 80011e8:	f000 fa06 	bl	80015f8 <print_pal_error>
 80011ec:	e01b      	b.n	8001226 <offsetCalibration+0x96>
	}
	else{
		uartTxBufLen=sprintf(uartTxBuf,"timing budget set for calibration\r\n");
 80011ee:	4920      	ldr	r1, [pc, #128]	; (8001270 <offsetCalibration+0xe0>)
 80011f0:	481d      	ldr	r0, [pc, #116]	; (8001268 <offsetCalibration+0xd8>)
 80011f2:	f00d fe7f 	bl	800eef4 <siprintf>
 80011f6:	4603      	mov	r3, r0
 80011f8:	4a1c      	ldr	r2, [pc, #112]	; (800126c <offsetCalibration+0xdc>)
 80011fa:	6013      	str	r3, [r2, #0]
		printToSerial();
 80011fc:	f000 fd90 	bl	8001d20 <printToSerial>
		Status=VL53L1_PerformOffsetSimpleCalibration(Dev, calibrationDistance);
 8001200:	4b16      	ldr	r3, [pc, #88]	; (800125c <offsetCalibration+0xcc>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	6879      	ldr	r1, [r7, #4]
 8001206:	4618      	mov	r0, r3
 8001208:	f007 fda4 	bl	8008d54 <VL53L1_PerformOffsetSimpleCalibration>
 800120c:	4603      	mov	r3, r0
 800120e:	461a      	mov	r2, r3
 8001210:	4b13      	ldr	r3, [pc, #76]	; (8001260 <offsetCalibration+0xd0>)
 8001212:	701a      	strb	r2, [r3, #0]
		uartTxBufLen=sprintf(uartTxBuf,"done\r\n");
 8001214:	4917      	ldr	r1, [pc, #92]	; (8001274 <offsetCalibration+0xe4>)
 8001216:	4814      	ldr	r0, [pc, #80]	; (8001268 <offsetCalibration+0xd8>)
 8001218:	f00d fe6c 	bl	800eef4 <siprintf>
 800121c:	4603      	mov	r3, r0
 800121e:	4a13      	ldr	r2, [pc, #76]	; (800126c <offsetCalibration+0xdc>)
 8001220:	6013      	str	r3, [r2, #0]
		printToSerial();
 8001222:	f000 fd7d 	bl	8001d20 <printToSerial>

		//Status=VL53L1_PerformOffsetZeroDistanceCalibration (Dev);
	}

	// return measurement budget to my defaults
	if(Status){	setupDeviceForSingleRanging();}
 8001226:	4b0e      	ldr	r3, [pc, #56]	; (8001260 <offsetCalibration+0xd0>)
 8001228:	f993 3000 	ldrsb.w	r3, [r3]
 800122c:	2b00      	cmp	r3, #0
 800122e:	d002      	beq.n	8001236 <offsetCalibration+0xa6>
 8001230:	f7ff fef6 	bl	8001020 <setupDeviceForSingleRanging>
		uartTxBufLen=sprintf(uartTxBuf,"something went wrong with settup back to single ranging mode\r\n");
		printToSerial();
		print_pal_error(Status);
	}

}
 8001234:	e00e      	b.n	8001254 <offsetCalibration+0xc4>
		uartTxBufLen=sprintf(uartTxBuf,"something went wrong with settup back to single ranging mode\r\n");
 8001236:	4910      	ldr	r1, [pc, #64]	; (8001278 <offsetCalibration+0xe8>)
 8001238:	480b      	ldr	r0, [pc, #44]	; (8001268 <offsetCalibration+0xd8>)
 800123a:	f00d fe5b 	bl	800eef4 <siprintf>
 800123e:	4603      	mov	r3, r0
 8001240:	4a0a      	ldr	r2, [pc, #40]	; (800126c <offsetCalibration+0xdc>)
 8001242:	6013      	str	r3, [r2, #0]
		printToSerial();
 8001244:	f000 fd6c 	bl	8001d20 <printToSerial>
		print_pal_error(Status);
 8001248:	4b05      	ldr	r3, [pc, #20]	; (8001260 <offsetCalibration+0xd0>)
 800124a:	f993 3000 	ldrsb.w	r3, [r3]
 800124e:	4618      	mov	r0, r3
 8001250:	f000 f9d2 	bl	80015f8 <print_pal_error>
}
 8001254:	bf00      	nop
 8001256:	3708      	adds	r7, #8
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}
 800125c:	20000000 	.word	0x20000000
 8001260:	20000760 	.word	0x20000760
 8001264:	08012f6c 	.word	0x08012f6c
 8001268:	20000b14 	.word	0x20000b14
 800126c:	20000e34 	.word	0x20000e34
 8001270:	08012fb0 	.word	0x08012fb0
 8001274:	08012fd4 	.word	0x08012fd4
 8001278:	08012fdc 	.word	0x08012fdc

0800127c <crossTalkCalibration>:

void crossTalkCalibration(int32_t calibrationDistance){
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
	Status = VL53L1_PerformSingleTargetXTalkCalibration(Dev, calibrationDistance);
 8001284:	4b0b      	ldr	r3, [pc, #44]	; (80012b4 <crossTalkCalibration+0x38>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	6879      	ldr	r1, [r7, #4]
 800128a:	4618      	mov	r0, r3
 800128c:	f007 fd44 	bl	8008d18 <VL53L1_PerformSingleTargetXTalkCalibration>
 8001290:	4603      	mov	r3, r0
 8001292:	461a      	mov	r2, r3
 8001294:	4b08      	ldr	r3, [pc, #32]	; (80012b8 <crossTalkCalibration+0x3c>)
 8001296:	701a      	strb	r2, [r3, #0]
	Status=VL53L1_enable_xtalk_compensation(Dev);
 8001298:	4b06      	ldr	r3, [pc, #24]	; (80012b4 <crossTalkCalibration+0x38>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	4618      	mov	r0, r3
 800129e:	f008 ffc1 	bl	800a224 <VL53L1_enable_xtalk_compensation>
 80012a2:	4603      	mov	r3, r0
 80012a4:	461a      	mov	r2, r3
 80012a6:	4b04      	ldr	r3, [pc, #16]	; (80012b8 <crossTalkCalibration+0x3c>)
 80012a8:	701a      	strb	r2, [r3, #0]
}
 80012aa:	bf00      	nop
 80012ac:	3708      	adds	r7, #8
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	20000000 	.word	0x20000000
 80012b8:	20000760 	.word	0x20000760

080012bc <takeSinglePollingMeasurement>:

int takeSinglePollingMeasurement(){
 80012bc:	b580      	push	{r7, lr}
 80012be:	af00      	add	r7, sp, #0

	Status=VL53L1_StartMeasurement(Dev);
 80012c0:	4b32      	ldr	r3, [pc, #200]	; (800138c <takeSinglePollingMeasurement+0xd0>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4618      	mov	r0, r3
 80012c6:	f007 f9f1 	bl	80086ac <VL53L1_StartMeasurement>
 80012ca:	4603      	mov	r3, r0
 80012cc:	461a      	mov	r2, r3
 80012ce:	4b30      	ldr	r3, [pc, #192]	; (8001390 <takeSinglePollingMeasurement+0xd4>)
 80012d0:	701a      	strb	r2, [r3, #0]
		return -1;
	}
	*/

	// wait for the measurement to be complete
	while(measureMentDataReady==0){
 80012d2:	e012      	b.n	80012fa <takeSinglePollingMeasurement+0x3e>
		Status=VL53L1_GetMeasurementDataReady(Dev, &measureMentDataReady);
 80012d4:	4b2d      	ldr	r3, [pc, #180]	; (800138c <takeSinglePollingMeasurement+0xd0>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	492e      	ldr	r1, [pc, #184]	; (8001394 <takeSinglePollingMeasurement+0xd8>)
 80012da:	4618      	mov	r0, r3
 80012dc:	f007 fa8a 	bl	80087f4 <VL53L1_GetMeasurementDataReady>
 80012e0:	4603      	mov	r3, r0
 80012e2:	461a      	mov	r2, r3
 80012e4:	4b2a      	ldr	r3, [pc, #168]	; (8001390 <takeSinglePollingMeasurement+0xd4>)
 80012e6:	701a      	strb	r2, [r3, #0]
		//if(!Status){print_pal_error(Status);}
		uartTxBufLen=sprintf(uartTxBuf,"waiting...\r\n");
 80012e8:	492b      	ldr	r1, [pc, #172]	; (8001398 <takeSinglePollingMeasurement+0xdc>)
 80012ea:	482c      	ldr	r0, [pc, #176]	; (800139c <takeSinglePollingMeasurement+0xe0>)
 80012ec:	f00d fe02 	bl	800eef4 <siprintf>
 80012f0:	4603      	mov	r3, r0
 80012f2:	4a2b      	ldr	r2, [pc, #172]	; (80013a0 <takeSinglePollingMeasurement+0xe4>)
 80012f4:	6013      	str	r3, [r2, #0]
		printToSerial();
 80012f6:	f000 fd13 	bl	8001d20 <printToSerial>
	while(measureMentDataReady==0){
 80012fa:	4b26      	ldr	r3, [pc, #152]	; (8001394 <takeSinglePollingMeasurement+0xd8>)
 80012fc:	781b      	ldrb	r3, [r3, #0]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d0e8      	beq.n	80012d4 <takeSinglePollingMeasurement+0x18>
	}

	// stop measuring
	Status=VL53L1_ClearInterruptAndStartMeasurement (Dev);
 8001302:	4b22      	ldr	r3, [pc, #136]	; (800138c <takeSinglePollingMeasurement+0xd0>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	4618      	mov	r0, r3
 8001308:	f007 fa5e 	bl	80087c8 <VL53L1_ClearInterruptAndStartMeasurement>
 800130c:	4603      	mov	r3, r0
 800130e:	461a      	mov	r2, r3
 8001310:	4b1f      	ldr	r3, [pc, #124]	; (8001390 <takeSinglePollingMeasurement+0xd4>)
 8001312:	701a      	strb	r2, [r3, #0]
	if (!Status){print_pal_error(Status);}
 8001314:	4b1e      	ldr	r3, [pc, #120]	; (8001390 <takeSinglePollingMeasurement+0xd4>)
 8001316:	f993 3000 	ldrsb.w	r3, [r3]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d105      	bne.n	800132a <takeSinglePollingMeasurement+0x6e>
 800131e:	4b1c      	ldr	r3, [pc, #112]	; (8001390 <takeSinglePollingMeasurement+0xd4>)
 8001320:	f993 3000 	ldrsb.w	r3, [r3]
 8001324:	4618      	mov	r0, r3
 8001326:	f000 f967 	bl	80015f8 <print_pal_error>

	//get measurement data
	Status=VL53L1_GetRangingMeasurementData(Dev, &RangingData);
 800132a:	4b18      	ldr	r3, [pc, #96]	; (800138c <takeSinglePollingMeasurement+0xd0>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	491d      	ldr	r1, [pc, #116]	; (80013a4 <takeSinglePollingMeasurement+0xe8>)
 8001330:	4618      	mov	r0, r3
 8001332:	f007 fc2d 	bl	8008b90 <VL53L1_GetRangingMeasurementData>
 8001336:	4603      	mov	r3, r0
 8001338:	461a      	mov	r2, r3
 800133a:	4b15      	ldr	r3, [pc, #84]	; (8001390 <takeSinglePollingMeasurement+0xd4>)
 800133c:	701a      	strb	r2, [r3, #0]
	if (!Status){print_pal_error(Status);}
 800133e:	4b14      	ldr	r3, [pc, #80]	; (8001390 <takeSinglePollingMeasurement+0xd4>)
 8001340:	f993 3000 	ldrsb.w	r3, [r3]
 8001344:	2b00      	cmp	r3, #0
 8001346:	d105      	bne.n	8001354 <takeSinglePollingMeasurement+0x98>
 8001348:	4b11      	ldr	r3, [pc, #68]	; (8001390 <takeSinglePollingMeasurement+0xd4>)
 800134a:	f993 3000 	ldrsb.w	r3, [r3]
 800134e:	4618      	mov	r0, r3
 8001350:	f000 f952 	bl	80015f8 <print_pal_error>

	// print the ranging data to the console
	uartTxBufLen=sprintf(uartTxBuf,"Status:%d, Range in mm %d\r\n", RangingData.RangeStatus,RangingData.RangeMilliMeter);
 8001354:	4b13      	ldr	r3, [pc, #76]	; (80013a4 <takeSinglePollingMeasurement+0xe8>)
 8001356:	7edb      	ldrb	r3, [r3, #27]
 8001358:	461a      	mov	r2, r3
 800135a:	4b12      	ldr	r3, [pc, #72]	; (80013a4 <takeSinglePollingMeasurement+0xe8>)
 800135c:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8001360:	4911      	ldr	r1, [pc, #68]	; (80013a8 <takeSinglePollingMeasurement+0xec>)
 8001362:	480e      	ldr	r0, [pc, #56]	; (800139c <takeSinglePollingMeasurement+0xe0>)
 8001364:	f00d fdc6 	bl	800eef4 <siprintf>
 8001368:	4603      	mov	r3, r0
 800136a:	4a0d      	ldr	r2, [pc, #52]	; (80013a0 <takeSinglePollingMeasurement+0xe4>)
 800136c:	6013      	str	r3, [r2, #0]
	printToSerial();
 800136e:	f000 fcd7 	bl	8001d20 <printToSerial>

	// if the ranging status is not OK
	if(RangingData.RangeStatus!=0){
 8001372:	4b0c      	ldr	r3, [pc, #48]	; (80013a4 <takeSinglePollingMeasurement+0xe8>)
 8001374:	7edb      	ldrb	r3, [r3, #27]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d002      	beq.n	8001380 <takeSinglePollingMeasurement+0xc4>
		print_range_status(&RangingData);
 800137a:	480a      	ldr	r0, [pc, #40]	; (80013a4 <takeSinglePollingMeasurement+0xe8>)
 800137c:	f000 f96e 	bl	800165c <print_range_status>
	}

	return Status;
 8001380:	4b03      	ldr	r3, [pc, #12]	; (8001390 <takeSinglePollingMeasurement+0xd4>)
 8001382:	f993 3000 	ldrsb.w	r3, [r3]
	return 0;
}
 8001386:	4618      	mov	r0, r3
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	20000000 	.word	0x20000000
 8001390:	20000760 	.word	0x20000760
 8001394:	20000780 	.word	0x20000780
 8001398:	0801301c 	.word	0x0801301c
 800139c:	20000b14 	.word	0x20000b14
 80013a0:	20000e34 	.word	0x20000e34
 80013a4:	20000764 	.word	0x20000764
 80013a8:	0801302c 	.word	0x0801302c

080013ac <takeMultiplePollingMeasurements>:

int takeMultiplePollingMeasurements(int numReadings){
 80013ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80013b0:	b08d      	sub	sp, #52	; 0x34
 80013b2:	af00      	add	r7, sp, #0
 80013b4:	60f8      	str	r0, [r7, #12]
 80013b6:	466b      	mov	r3, sp
 80013b8:	461e      	mov	r6, r3
	uint8_t readingStatuses[numReadings];
 80013ba:	68f9      	ldr	r1, [r7, #12]
 80013bc:	1e4b      	subs	r3, r1, #1
 80013be:	61fb      	str	r3, [r7, #28]
 80013c0:	460a      	mov	r2, r1
 80013c2:	2300      	movs	r3, #0
 80013c4:	603a      	str	r2, [r7, #0]
 80013c6:	607b      	str	r3, [r7, #4]
 80013c8:	f04f 0200 	mov.w	r2, #0
 80013cc:	f04f 0300 	mov.w	r3, #0
 80013d0:	6878      	ldr	r0, [r7, #4]
 80013d2:	00c3      	lsls	r3, r0, #3
 80013d4:	6838      	ldr	r0, [r7, #0]
 80013d6:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80013da:	6838      	ldr	r0, [r7, #0]
 80013dc:	00c2      	lsls	r2, r0, #3
 80013de:	460a      	mov	r2, r1
 80013e0:	2300      	movs	r3, #0
 80013e2:	4692      	mov	sl, r2
 80013e4:	469b      	mov	fp, r3
 80013e6:	f04f 0200 	mov.w	r2, #0
 80013ea:	f04f 0300 	mov.w	r3, #0
 80013ee:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80013f2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80013f6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80013fa:	460b      	mov	r3, r1
 80013fc:	3307      	adds	r3, #7
 80013fe:	08db      	lsrs	r3, r3, #3
 8001400:	00db      	lsls	r3, r3, #3
 8001402:	ebad 0d03 	sub.w	sp, sp, r3
 8001406:	466b      	mov	r3, sp
 8001408:	3300      	adds	r3, #0
 800140a:	61bb      	str	r3, [r7, #24]
	int16_t readings[numReadings];
 800140c:	68f9      	ldr	r1, [r7, #12]
 800140e:	1e4b      	subs	r3, r1, #1
 8001410:	617b      	str	r3, [r7, #20]
 8001412:	460a      	mov	r2, r1
 8001414:	2300      	movs	r3, #0
 8001416:	4690      	mov	r8, r2
 8001418:	4699      	mov	r9, r3
 800141a:	f04f 0200 	mov.w	r2, #0
 800141e:	f04f 0300 	mov.w	r3, #0
 8001422:	ea4f 1309 	mov.w	r3, r9, lsl #4
 8001426:	ea43 7318 	orr.w	r3, r3, r8, lsr #28
 800142a:	ea4f 1208 	mov.w	r2, r8, lsl #4
 800142e:	460a      	mov	r2, r1
 8001430:	2300      	movs	r3, #0
 8001432:	4614      	mov	r4, r2
 8001434:	461d      	mov	r5, r3
 8001436:	f04f 0200 	mov.w	r2, #0
 800143a:	f04f 0300 	mov.w	r3, #0
 800143e:	012b      	lsls	r3, r5, #4
 8001440:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8001444:	0122      	lsls	r2, r4, #4
 8001446:	460b      	mov	r3, r1
 8001448:	005b      	lsls	r3, r3, #1
 800144a:	3307      	adds	r3, #7
 800144c:	08db      	lsrs	r3, r3, #3
 800144e:	00db      	lsls	r3, r3, #3
 8001450:	ebad 0d03 	sub.w	sp, sp, r3
 8001454:	466b      	mov	r3, sp
 8001456:	3301      	adds	r3, #1
 8001458:	085b      	lsrs	r3, r3, #1
 800145a:	005b      	lsls	r3, r3, #1
 800145c:	613b      	str	r3, [r7, #16]


	Status=VL53L1_StartMeasurement(Dev);
 800145e:	4b5b      	ldr	r3, [pc, #364]	; (80015cc <takeMultiplePollingMeasurements+0x220>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	4618      	mov	r0, r3
 8001464:	f007 f922 	bl	80086ac <VL53L1_StartMeasurement>
 8001468:	4603      	mov	r3, r0
 800146a:	461a      	mov	r2, r3
 800146c:	4b58      	ldr	r3, [pc, #352]	; (80015d0 <takeMultiplePollingMeasurements+0x224>)
 800146e:	701a      	strb	r2, [r3, #0]
		if (!Status){
 8001470:	4b57      	ldr	r3, [pc, #348]	; (80015d0 <takeMultiplePollingMeasurements+0x224>)
 8001472:	f993 3000 	ldrsb.w	r3, [r3]
 8001476:	2b00      	cmp	r3, #0
 8001478:	d10b      	bne.n	8001492 <takeMultiplePollingMeasurements+0xe6>
			uartTxBufLen=sprintf(uartTxBuf,"Error Starting Measurement\r\n");
 800147a:	4956      	ldr	r1, [pc, #344]	; (80015d4 <takeMultiplePollingMeasurements+0x228>)
 800147c:	4856      	ldr	r0, [pc, #344]	; (80015d8 <takeMultiplePollingMeasurements+0x22c>)
 800147e:	f00d fd39 	bl	800eef4 <siprintf>
 8001482:	4603      	mov	r3, r0
 8001484:	4a55      	ldr	r2, [pc, #340]	; (80015dc <takeMultiplePollingMeasurements+0x230>)
 8001486:	6013      	str	r3, [r2, #0]
			printToSerial();
 8001488:	f000 fc4a 	bl	8001d20 <printToSerial>
			return -1;
 800148c:	f04f 33ff 	mov.w	r3, #4294967295
 8001490:	e095      	b.n	80015be <takeMultiplePollingMeasurements+0x212>

		}

		for (int i=0;i<numReadings;i++){
 8001492:	2300      	movs	r3, #0
 8001494:	623b      	str	r3, [r7, #32]
 8001496:	e031      	b.n	80014fc <takeMultiplePollingMeasurements+0x150>
			// wait for the measurement to be complete
					while(measureMentDataReady==0){
						Status=VL53L1_GetMeasurementDataReady(Dev, &measureMentDataReady);
 8001498:	4b4c      	ldr	r3, [pc, #304]	; (80015cc <takeMultiplePollingMeasurements+0x220>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4950      	ldr	r1, [pc, #320]	; (80015e0 <takeMultiplePollingMeasurements+0x234>)
 800149e:	4618      	mov	r0, r3
 80014a0:	f007 f9a8 	bl	80087f4 <VL53L1_GetMeasurementDataReady>
 80014a4:	4603      	mov	r3, r0
 80014a6:	461a      	mov	r2, r3
 80014a8:	4b49      	ldr	r3, [pc, #292]	; (80015d0 <takeMultiplePollingMeasurements+0x224>)
 80014aa:	701a      	strb	r2, [r3, #0]
					while(measureMentDataReady==0){
 80014ac:	4b4c      	ldr	r3, [pc, #304]	; (80015e0 <takeMultiplePollingMeasurements+0x234>)
 80014ae:	781b      	ldrb	r3, [r3, #0]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d0f1      	beq.n	8001498 <takeMultiplePollingMeasurements+0xec>
					}



					//get measurement data
					Status=VL53L1_GetRangingMeasurementData(Dev, &RangingData);
 80014b4:	4b45      	ldr	r3, [pc, #276]	; (80015cc <takeMultiplePollingMeasurements+0x220>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	494a      	ldr	r1, [pc, #296]	; (80015e4 <takeMultiplePollingMeasurements+0x238>)
 80014ba:	4618      	mov	r0, r3
 80014bc:	f007 fb68 	bl	8008b90 <VL53L1_GetRangingMeasurementData>
 80014c0:	4603      	mov	r3, r0
 80014c2:	461a      	mov	r2, r3
 80014c4:	4b42      	ldr	r3, [pc, #264]	; (80015d0 <takeMultiplePollingMeasurements+0x224>)
 80014c6:	701a      	strb	r2, [r3, #0]

					// stop measuring
					Status=VL53L1_ClearInterruptAndStartMeasurement (Dev);
 80014c8:	4b40      	ldr	r3, [pc, #256]	; (80015cc <takeMultiplePollingMeasurements+0x220>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4618      	mov	r0, r3
 80014ce:	f007 f97b 	bl	80087c8 <VL53L1_ClearInterruptAndStartMeasurement>
 80014d2:	4603      	mov	r3, r0
 80014d4:	461a      	mov	r2, r3
 80014d6:	4b3e      	ldr	r3, [pc, #248]	; (80015d0 <takeMultiplePollingMeasurements+0x224>)
 80014d8:	701a      	strb	r2, [r3, #0]

					readings[i]=RangingData.RangeMilliMeter;
 80014da:	4b42      	ldr	r3, [pc, #264]	; (80015e4 <takeMultiplePollingMeasurements+0x238>)
 80014dc:	f9b3 1018 	ldrsh.w	r1, [r3, #24]
 80014e0:	693b      	ldr	r3, [r7, #16]
 80014e2:	6a3a      	ldr	r2, [r7, #32]
 80014e4:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
					readingStatuses[i]=RangingData.RangeStatus;
 80014e8:	4b3e      	ldr	r3, [pc, #248]	; (80015e4 <takeMultiplePollingMeasurements+0x238>)
 80014ea:	7ed9      	ldrb	r1, [r3, #27]
 80014ec:	69ba      	ldr	r2, [r7, #24]
 80014ee:	6a3b      	ldr	r3, [r7, #32]
 80014f0:	4413      	add	r3, r2
 80014f2:	460a      	mov	r2, r1
 80014f4:	701a      	strb	r2, [r3, #0]
		for (int i=0;i<numReadings;i++){
 80014f6:	6a3b      	ldr	r3, [r7, #32]
 80014f8:	3301      	adds	r3, #1
 80014fa:	623b      	str	r3, [r7, #32]
 80014fc:	6a3a      	ldr	r2, [r7, #32]
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	429a      	cmp	r2, r3
 8001502:	dbd3      	blt.n	80014ac <takeMultiplePollingMeasurements+0x100>

					// add reading and status to comma delimited string to send to PC

		}

		sprintf(uartTxBuf,""); //reset buffer
 8001504:	4938      	ldr	r1, [pc, #224]	; (80015e8 <takeMultiplePollingMeasurements+0x23c>)
 8001506:	4834      	ldr	r0, [pc, #208]	; (80015d8 <takeMultiplePollingMeasurements+0x22c>)
 8001508:	f00d fcf4 	bl	800eef4 <siprintf>
		uint16_t written=0;
 800150c:	2300      	movs	r3, #0
 800150e:	84fb      	strh	r3, [r7, #38]	; 0x26

		//first do data
		for(int i = 0; i < numReadings; i++) {
 8001510:	2300      	movs	r3, #0
 8001512:	62bb      	str	r3, [r7, #40]	; 0x28
 8001514:	e01b      	b.n	800154e <takeMultiplePollingMeasurements+0x1a2>
		        written += snprintf(uartTxBuf + written, uartOutputBuffLen - written, "%i,",*(readings + i));
 8001516:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001518:	4a2f      	ldr	r2, [pc, #188]	; (80015d8 <takeMultiplePollingMeasurements+0x22c>)
 800151a:	1898      	adds	r0, r3, r2
 800151c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800151e:	f5c3 7348 	rsb	r3, r3, #800	; 0x320
 8001522:	4619      	mov	r1, r3
 8001524:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001526:	005b      	lsls	r3, r3, #1
 8001528:	693a      	ldr	r2, [r7, #16]
 800152a:	4413      	add	r3, r2
 800152c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001530:	4a2e      	ldr	r2, [pc, #184]	; (80015ec <takeMultiplePollingMeasurements+0x240>)
 8001532:	f00d fcab 	bl	800ee8c <sniprintf>
 8001536:	4603      	mov	r3, r0
 8001538:	b29a      	uxth	r2, r3
 800153a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800153c:	4413      	add	r3, r2
 800153e:	84fb      	strh	r3, [r7, #38]	; 0x26
		        if(written == uartOutputBuffLen)
 8001540:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001542:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8001546:	d007      	beq.n	8001558 <takeMultiplePollingMeasurements+0x1ac>
		for(int i = 0; i < numReadings; i++) {
 8001548:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800154a:	3301      	adds	r3, #1
 800154c:	62bb      	str	r3, [r7, #40]	; 0x28
 800154e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	429a      	cmp	r2, r3
 8001554:	dbdf      	blt.n	8001516 <takeMultiplePollingMeasurements+0x16a>
 8001556:	e000      	b.n	800155a <takeMultiplePollingMeasurements+0x1ae>
		            break;
 8001558:	bf00      	nop
		}

		// then do statuses
		for(int i = 0; i < numReadings; i++) {
 800155a:	2300      	movs	r3, #0
 800155c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800155e:	e019      	b.n	8001594 <takeMultiplePollingMeasurements+0x1e8>
		        written += snprintf(uartTxBuf + written, uartOutputBuffLen - written, "%u,",*(readingStatuses + i));
 8001560:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001562:	4a1d      	ldr	r2, [pc, #116]	; (80015d8 <takeMultiplePollingMeasurements+0x22c>)
 8001564:	1898      	adds	r0, r3, r2
 8001566:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001568:	f5c3 7348 	rsb	r3, r3, #800	; 0x320
 800156c:	4619      	mov	r1, r3
 800156e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001570:	69ba      	ldr	r2, [r7, #24]
 8001572:	4413      	add	r3, r2
 8001574:	781b      	ldrb	r3, [r3, #0]
 8001576:	4a1e      	ldr	r2, [pc, #120]	; (80015f0 <takeMultiplePollingMeasurements+0x244>)
 8001578:	f00d fc88 	bl	800ee8c <sniprintf>
 800157c:	4603      	mov	r3, r0
 800157e:	b29a      	uxth	r2, r3
 8001580:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001582:	4413      	add	r3, r2
 8001584:	84fb      	strh	r3, [r7, #38]	; 0x26
		        if(written == uartOutputBuffLen)
 8001586:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001588:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 800158c:	d007      	beq.n	800159e <takeMultiplePollingMeasurements+0x1f2>
		for(int i = 0; i < numReadings; i++) {
 800158e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001590:	3301      	adds	r3, #1
 8001592:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001594:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	429a      	cmp	r2, r3
 800159a:	dbe1      	blt.n	8001560 <takeMultiplePollingMeasurements+0x1b4>
 800159c:	e000      	b.n	80015a0 <takeMultiplePollingMeasurements+0x1f4>
		            break;
 800159e:	bf00      	nop
		    }

		//print it
		uartTxBufLen=written;
 80015a0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80015a2:	4a0e      	ldr	r2, [pc, #56]	; (80015dc <takeMultiplePollingMeasurements+0x230>)
 80015a4:	6013      	str	r3, [r2, #0]
		printToSerial();
 80015a6:	f000 fbbb 	bl	8001d20 <printToSerial>
		uartTxBufLen=sprintf(uartTxBuf,"\r\n");
 80015aa:	4912      	ldr	r1, [pc, #72]	; (80015f4 <takeMultiplePollingMeasurements+0x248>)
 80015ac:	480a      	ldr	r0, [pc, #40]	; (80015d8 <takeMultiplePollingMeasurements+0x22c>)
 80015ae:	f00d fca1 	bl	800eef4 <siprintf>
 80015b2:	4603      	mov	r3, r0
 80015b4:	4a09      	ldr	r2, [pc, #36]	; (80015dc <takeMultiplePollingMeasurements+0x230>)
 80015b6:	6013      	str	r3, [r2, #0]
		printToSerial();
 80015b8:	f000 fbb2 	bl	8001d20 <printToSerial>
		return 0;
 80015bc:	2300      	movs	r3, #0
 80015be:	46b5      	mov	sp, r6
}
 80015c0:	4618      	mov	r0, r3
 80015c2:	3734      	adds	r7, #52	; 0x34
 80015c4:	46bd      	mov	sp, r7
 80015c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80015ca:	bf00      	nop
 80015cc:	20000000 	.word	0x20000000
 80015d0:	20000760 	.word	0x20000760
 80015d4:	08013048 	.word	0x08013048
 80015d8:	20000b14 	.word	0x20000b14
 80015dc:	20000e34 	.word	0x20000e34
 80015e0:	20000780 	.word	0x20000780
 80015e4:	20000764 	.word	0x20000764
 80015e8:	08013068 	.word	0x08013068
 80015ec:	0801306c 	.word	0x0801306c
 80015f0:	08013070 	.word	0x08013070
 80015f4:	08013074 	.word	0x08013074

080015f8 <print_pal_error>:

/*
 * An adaption of a function in an example from ST
 */
void print_pal_error(VL53L1_Error Status){
 80015f8:	b580      	push	{r7, lr}
 80015fa:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 80015fe:	af00      	add	r7, sp, #0
 8001600:	4602      	mov	r2, r0
 8001602:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001606:	f2a3 2301 	subw	r3, r3, #513	; 0x201
 800160a:	701a      	strb	r2, [r3, #0]
    char buf[VL53L1_MAX_STRING_LENGTH];
    VL53L1_GetPalErrorString(Status, buf);
 800160c:	f107 0208 	add.w	r2, r7, #8
 8001610:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001614:	f2a3 2301 	subw	r3, r3, #513	; 0x201
 8001618:	f993 3000 	ldrsb.w	r3, [r3]
 800161c:	4611      	mov	r1, r2
 800161e:	4618      	mov	r0, r3
 8001620:	f006 fb79 	bl	8007d16 <VL53L1_GetPalErrorString>
    uartTxBufLen=sprintf(uartTxBuf,"API Status: %i : %s\r\n", Status, buf);
 8001624:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001628:	f2a3 2301 	subw	r3, r3, #513	; 0x201
 800162c:	f993 2000 	ldrsb.w	r2, [r3]
 8001630:	f107 0308 	add.w	r3, r7, #8
 8001634:	4906      	ldr	r1, [pc, #24]	; (8001650 <print_pal_error+0x58>)
 8001636:	4807      	ldr	r0, [pc, #28]	; (8001654 <print_pal_error+0x5c>)
 8001638:	f00d fc5c 	bl	800eef4 <siprintf>
 800163c:	4603      	mov	r3, r0
 800163e:	4a06      	ldr	r2, [pc, #24]	; (8001658 <print_pal_error+0x60>)
 8001640:	6013      	str	r3, [r2, #0]
    printToSerial();
 8001642:	f000 fb6d 	bl	8001d20 <printToSerial>
}
 8001646:	bf00      	nop
 8001648:	f507 7702 	add.w	r7, r7, #520	; 0x208
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}
 8001650:	08013078 	.word	0x08013078
 8001654:	20000b14 	.word	0x20000b14
 8001658:	20000e34 	.word	0x20000e34

0800165c <print_range_status>:

/*
 * Prints a string to the console describing the ranging status
 */
void print_range_status(VL53L1_RangingMeasurementData_t* pRangingMeasurementData){
 800165c:	b580      	push	{r7, lr}
 800165e:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8001662:	af00      	add	r7, sp, #0
 8001664:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001668:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800166c:	6018      	str	r0, [r3, #0]
	char buf[VL53L1_MAX_STRING_LENGTH];
	VL53L1_GetRangeStatusString(pRangingMeasurementData->RangeStatus, buf);
 800166e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001672:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	7edb      	ldrb	r3, [r3, #27]
 800167a:	f107 0208 	add.w	r2, r7, #8
 800167e:	4611      	mov	r1, r2
 8001680:	4618      	mov	r0, r3
 8001682:	f006 fb33 	bl	8007cec <VL53L1_GetRangeStatusString>
	uartTxBufLen=sprintf(uartTxBuf,"Range Status: %i : %s\r\n", pRangingMeasurementData->RangeStatus, buf);
 8001686:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800168a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	7edb      	ldrb	r3, [r3, #27]
 8001692:	461a      	mov	r2, r3
 8001694:	f107 0308 	add.w	r3, r7, #8
 8001698:	4906      	ldr	r1, [pc, #24]	; (80016b4 <print_range_status+0x58>)
 800169a:	4807      	ldr	r0, [pc, #28]	; (80016b8 <print_range_status+0x5c>)
 800169c:	f00d fc2a 	bl	800eef4 <siprintf>
 80016a0:	4603      	mov	r3, r0
 80016a2:	4a06      	ldr	r2, [pc, #24]	; (80016bc <print_range_status+0x60>)
 80016a4:	6013      	str	r3, [r2, #0]
	printToSerial();
 80016a6:	f000 fb3b 	bl	8001d20 <printToSerial>
}
 80016aa:	bf00      	nop
 80016ac:	f507 7702 	add.w	r7, r7, #520	; 0x208
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}
 80016b4:	08013090 	.word	0x08013090
 80016b8:	20000b14 	.word	0x20000b14
 80016bc:	20000e34 	.word	0x20000e34

080016c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b084      	sub	sp, #16
 80016c4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016c6:	f000 fef5 	bl	80024b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016ca:	f000 f8b5 	bl	8001838 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016ce:	f000 fa11 	bl	8001af4 <MX_GPIO_Init>
  MX_DMA_Init();
 80016d2:	f000 f9f1 	bl	8001ab8 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80016d6:	f000 f9bf 	bl	8001a58 <MX_USART2_UART_Init>
  MX_DAC1_Init();
 80016da:	f000 f8ff 	bl	80018dc <MX_DAC1_Init>
  MX_TIM2_Init();
 80016de:	f000 f96f 	bl	80019c0 <MX_TIM2_Init>
  MX_I2C1_Init();
 80016e2:	f000 f92d 	bl	8001940 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  // for DAC signal generation
  HAL_TIM_Base_Start(&htim2);
 80016e6:	4843      	ldr	r0, [pc, #268]	; (80017f4 <main+0x134>)
 80016e8:	f004 fa24 	bl	8005b34 <HAL_TIM_Base_Start>
  calcsin();
 80016ec:	f000 fa80 	bl	8001bf0 <calcsin>

  // connecting to the VL53L1X
    SetupCommscanIseeDevice();
 80016f0:	f7ff fbfc 	bl	8000eec <SetupCommscanIseeDevice>
    if(Status){
 80016f4:	4b40      	ldr	r3, [pc, #256]	; (80017f8 <main+0x138>)
 80016f6:	f993 3000 	ldrsb.w	r3, [r3]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d008      	beq.n	8001710 <main+0x50>
    	uartTxBufLen=sprintf(uartTxBuf,"Connecting to device failed\r\n");
 80016fe:	493f      	ldr	r1, [pc, #252]	; (80017fc <main+0x13c>)
 8001700:	483f      	ldr	r0, [pc, #252]	; (8001800 <main+0x140>)
 8001702:	f00d fbf7 	bl	800eef4 <siprintf>
 8001706:	4603      	mov	r3, r0
 8001708:	4a3e      	ldr	r2, [pc, #248]	; (8001804 <main+0x144>)
 800170a:	6013      	str	r3, [r2, #0]
    	printToSerial();
 800170c:	f000 fb08 	bl	8001d20 <printToSerial>
    }



  //start receiving uart data
  HAL_UART_Receive_IT(&huart2, uartRxBuf, uartInputBuffLen);
 8001710:	2203      	movs	r2, #3
 8001712:	493d      	ldr	r1, [pc, #244]	; (8001808 <main+0x148>)
 8001714:	483d      	ldr	r0, [pc, #244]	; (800180c <main+0x14c>)
 8001716:	f004 fddd 	bl	80062d4 <HAL_UART_Receive_IT>
  HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 0x00);
 800171a:	2300      	movs	r3, #0
 800171c:	2200      	movs	r2, #0
 800171e:	2100      	movs	r1, #0
 8001720:	483b      	ldr	r0, [pc, #236]	; (8001810 <main+0x150>)
 8001722:	f001 f9ac 	bl	8002a7e <HAL_DAC_SetValue>


  //setup device for ranging
  if(!Status){
 8001726:	4b34      	ldr	r3, [pc, #208]	; (80017f8 <main+0x138>)
 8001728:	f993 3000 	ldrsb.w	r3, [r3]
 800172c:	2b00      	cmp	r3, #0
 800172e:	d108      	bne.n	8001742 <main+0x82>
	  uartTxBufLen=sprintf(uartTxBuf,"Setting device up for single ranging\r\n");
 8001730:	4938      	ldr	r1, [pc, #224]	; (8001814 <main+0x154>)
 8001732:	4833      	ldr	r0, [pc, #204]	; (8001800 <main+0x140>)
 8001734:	f00d fbde 	bl	800eef4 <siprintf>
 8001738:	4603      	mov	r3, r0
 800173a:	4a32      	ldr	r2, [pc, #200]	; (8001804 <main+0x144>)
 800173c:	6013      	str	r3, [r2, #0]
	  printToSerial();
 800173e:	f000 faef 	bl	8001d20 <printToSerial>
	  //setupDeviceForSingleRanging();
  }
  if (Status){
 8001742:	4b2d      	ldr	r3, [pc, #180]	; (80017f8 <main+0x138>)
 8001744:	f993 3000 	ldrsb.w	r3, [r3]
 8001748:	2b00      	cmp	r3, #0
 800174a:	d009      	beq.n	8001760 <main+0xa0>
	  uartTxBufLen=sprintf(uartTxBuf,"Setting up for single ranging failed\r\n");
 800174c:	4932      	ldr	r1, [pc, #200]	; (8001818 <main+0x158>)
 800174e:	482c      	ldr	r0, [pc, #176]	; (8001800 <main+0x140>)
 8001750:	f00d fbd0 	bl	800eef4 <siprintf>
 8001754:	4603      	mov	r3, r0
 8001756:	4a2b      	ldr	r2, [pc, #172]	; (8001804 <main+0x144>)
 8001758:	6013      	str	r3, [r2, #0]
	  printToSerial();
 800175a:	f000 fae1 	bl	8001d20 <printToSerial>
 800175e:	e008      	b.n	8001772 <main+0xb2>
  }
  else{
	  uartTxBufLen=sprintf(uartTxBuf,"VL53L1 should be ready to take measurements, push blue button to take measurements\r\n");
 8001760:	492e      	ldr	r1, [pc, #184]	; (800181c <main+0x15c>)
 8001762:	4827      	ldr	r0, [pc, #156]	; (8001800 <main+0x140>)
 8001764:	f00d fbc6 	bl	800eef4 <siprintf>
 8001768:	4603      	mov	r3, r0
 800176a:	4a26      	ldr	r2, [pc, #152]	; (8001804 <main+0x144>)
 800176c:	6013      	str	r3, [r2, #0]
	  printToSerial();
 800176e:	f000 fad7 	bl	8001d20 <printToSerial>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_5);
 8001772:	2120      	movs	r1, #32
 8001774:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001778:	f001 ffa0 	bl	80036bc <HAL_GPIO_TogglePin>
	  if (DAC_ON==1){
 800177c:	4b28      	ldr	r3, [pc, #160]	; (8001820 <main+0x160>)
 800177e:	781b      	ldrb	r3, [r3, #0]
 8001780:	2b01      	cmp	r3, #1
 8001782:	d1f6      	bne.n	8001772 <main+0xb2>
		 for (int i=0;i<numPulses;i++) {
 8001784:	2300      	movs	r3, #0
 8001786:	607b      	str	r3, [r7, #4]
 8001788:	e022      	b.n	80017d0 <main+0x110>
			  HAL_Delay(4);
 800178a:	2004      	movs	r0, #4
 800178c:	f000 ff0e 	bl	80025ac <HAL_Delay>
			  HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, sinWave, numDACSamples, DAC_ALIGN_12B_R);
 8001790:	2300      	movs	r3, #0
 8001792:	9300      	str	r3, [sp, #0]
 8001794:	23c8      	movs	r3, #200	; 0xc8
 8001796:	4a23      	ldr	r2, [pc, #140]	; (8001824 <main+0x164>)
 8001798:	2100      	movs	r1, #0
 800179a:	481d      	ldr	r0, [pc, #116]	; (8001810 <main+0x150>)
 800179c:	f001 f85e 	bl	800285c <HAL_DAC_Start_DMA>
			  HAL_Delay(pulseWidth);
 80017a0:	4b21      	ldr	r3, [pc, #132]	; (8001828 <main+0x168>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4618      	mov	r0, r3
 80017a6:	f000 ff01 	bl	80025ac <HAL_Delay>
			  HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
 80017aa:	2100      	movs	r1, #0
 80017ac:	4818      	ldr	r0, [pc, #96]	; (8001810 <main+0x150>)
 80017ae:	f001 f921 	bl	80029f4 <HAL_DAC_Stop_DMA>
			  HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 0x00);
 80017b2:	2300      	movs	r3, #0
 80017b4:	2200      	movs	r2, #0
 80017b6:	2100      	movs	r1, #0
 80017b8:	4815      	ldr	r0, [pc, #84]	; (8001810 <main+0x150>)
 80017ba:	f001 f960 	bl	8002a7e <HAL_DAC_SetValue>
			  HAL_Delay(pulseSpacing-4);
 80017be:	4b1b      	ldr	r3, [pc, #108]	; (800182c <main+0x16c>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	3b04      	subs	r3, #4
 80017c4:	4618      	mov	r0, r3
 80017c6:	f000 fef1 	bl	80025ac <HAL_Delay>
		 for (int i=0;i<numPulses;i++) {
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	3301      	adds	r3, #1
 80017ce:	607b      	str	r3, [r7, #4]
 80017d0:	4b17      	ldr	r3, [pc, #92]	; (8001830 <main+0x170>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	687a      	ldr	r2, [r7, #4]
 80017d6:	429a      	cmp	r2, r3
 80017d8:	dbd7      	blt.n	800178a <main+0xca>
		 }
		 DAC_ON=0;
 80017da:	4b11      	ldr	r3, [pc, #68]	; (8001820 <main+0x160>)
 80017dc:	2200      	movs	r2, #0
 80017de:	701a      	strb	r2, [r3, #0]
		 uartTxBufLen=sprintf(uartTxBuf,"pulses should have been sent\r\n");
 80017e0:	4914      	ldr	r1, [pc, #80]	; (8001834 <main+0x174>)
 80017e2:	4807      	ldr	r0, [pc, #28]	; (8001800 <main+0x140>)
 80017e4:	f00d fb86 	bl	800eef4 <siprintf>
 80017e8:	4603      	mov	r3, r0
 80017ea:	4a06      	ldr	r2, [pc, #24]	; (8001804 <main+0x144>)
 80017ec:	6013      	str	r3, [r2, #0]
		 printToSerial();
 80017ee:	f000 fa97 	bl	8001d20 <printToSerial>
	  HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_5);
 80017f2:	e7be      	b.n	8001772 <main+0xb2>
 80017f4:	200002ec 	.word	0x200002ec
 80017f8:	20000760 	.word	0x20000760
 80017fc:	080130a8 	.word	0x080130a8
 8001800:	20000b14 	.word	0x20000b14
 8001804:	20000e34 	.word	0x20000e34
 8001808:	20000b10 	.word	0x20000b10
 800180c:	20000338 	.word	0x20000338
 8001810:	2000023c 	.word	0x2000023c
 8001814:	080130c8 	.word	0x080130c8
 8001818:	080130f0 	.word	0x080130f0
 800181c:	08013118 	.word	0x08013118
 8001820:	20000b0c 	.word	0x20000b0c
 8001824:	200007ec 	.word	0x200007ec
 8001828:	20000010 	.word	0x20000010
 800182c:	2000000c 	.word	0x2000000c
 8001830:	20000008 	.word	0x20000008
 8001834:	08013170 	.word	0x08013170

08001838 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b096      	sub	sp, #88	; 0x58
 800183c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800183e:	f107 0314 	add.w	r3, r7, #20
 8001842:	2244      	movs	r2, #68	; 0x44
 8001844:	2100      	movs	r1, #0
 8001846:	4618      	mov	r0, r3
 8001848:	f00c feae 	bl	800e5a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800184c:	463b      	mov	r3, r7
 800184e:	2200      	movs	r2, #0
 8001850:	601a      	str	r2, [r3, #0]
 8001852:	605a      	str	r2, [r3, #4]
 8001854:	609a      	str	r2, [r3, #8]
 8001856:	60da      	str	r2, [r3, #12]
 8001858:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800185a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800185e:	f002 fdff 	bl	8004460 <HAL_PWREx_ControlVoltageScaling>
 8001862:	4603      	mov	r3, r0
 8001864:	2b00      	cmp	r3, #0
 8001866:	d001      	beq.n	800186c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001868:	f000 fb60 	bl	8001f2c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800186c:	2302      	movs	r3, #2
 800186e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001870:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001874:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001876:	2310      	movs	r3, #16
 8001878:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800187a:	2302      	movs	r3, #2
 800187c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800187e:	2302      	movs	r3, #2
 8001880:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001882:	2301      	movs	r3, #1
 8001884:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001886:	230a      	movs	r3, #10
 8001888:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800188a:	2307      	movs	r3, #7
 800188c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800188e:	2302      	movs	r3, #2
 8001890:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001892:	2302      	movs	r3, #2
 8001894:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001896:	f107 0314 	add.w	r3, r7, #20
 800189a:	4618      	mov	r0, r3
 800189c:	f002 fe36 	bl	800450c <HAL_RCC_OscConfig>
 80018a0:	4603      	mov	r3, r0
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d001      	beq.n	80018aa <SystemClock_Config+0x72>
  {
    Error_Handler();
 80018a6:	f000 fb41 	bl	8001f2c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018aa:	230f      	movs	r3, #15
 80018ac:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018ae:	2303      	movs	r3, #3
 80018b0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018b2:	2300      	movs	r3, #0
 80018b4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80018b6:	2300      	movs	r3, #0
 80018b8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80018ba:	2300      	movs	r3, #0
 80018bc:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80018be:	463b      	mov	r3, r7
 80018c0:	2104      	movs	r1, #4
 80018c2:	4618      	mov	r0, r3
 80018c4:	f003 f9fe 	bl	8004cc4 <HAL_RCC_ClockConfig>
 80018c8:	4603      	mov	r3, r0
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d001      	beq.n	80018d2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80018ce:	f000 fb2d 	bl	8001f2c <Error_Handler>
  }
}
 80018d2:	bf00      	nop
 80018d4:	3758      	adds	r7, #88	; 0x58
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}
	...

080018dc <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b08a      	sub	sp, #40	; 0x28
 80018e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80018e2:	1d3b      	adds	r3, r7, #4
 80018e4:	2224      	movs	r2, #36	; 0x24
 80018e6:	2100      	movs	r1, #0
 80018e8:	4618      	mov	r0, r3
 80018ea:	f00c fe5d 	bl	800e5a8 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80018ee:	4b12      	ldr	r3, [pc, #72]	; (8001938 <MX_DAC1_Init+0x5c>)
 80018f0:	4a12      	ldr	r2, [pc, #72]	; (800193c <MX_DAC1_Init+0x60>)
 80018f2:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80018f4:	4810      	ldr	r0, [pc, #64]	; (8001938 <MX_DAC1_Init+0x5c>)
 80018f6:	f000 ff8e 	bl	8002816 <HAL_DAC_Init>
 80018fa:	4603      	mov	r3, r0
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d001      	beq.n	8001904 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8001900:	f000 fb14 	bl	8001f2c <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001904:	2300      	movs	r3, #0
 8001906:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8001908:	2324      	movs	r3, #36	; 0x24
 800190a:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800190c:	2300      	movs	r3, #0
 800190e:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_ENABLE;
 8001910:	2301      	movs	r3, #1
 8001912:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001914:	2300      	movs	r3, #0
 8001916:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001918:	1d3b      	adds	r3, r7, #4
 800191a:	2200      	movs	r2, #0
 800191c:	4619      	mov	r1, r3
 800191e:	4806      	ldr	r0, [pc, #24]	; (8001938 <MX_DAC1_Init+0x5c>)
 8001920:	f001 f8f0 	bl	8002b04 <HAL_DAC_ConfigChannel>
 8001924:	4603      	mov	r3, r0
 8001926:	2b00      	cmp	r3, #0
 8001928:	d001      	beq.n	800192e <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 800192a:	f000 faff 	bl	8001f2c <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 800192e:	bf00      	nop
 8001930:	3728      	adds	r7, #40	; 0x28
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	2000023c 	.word	0x2000023c
 800193c:	40007400 	.word	0x40007400

08001940 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001944:	4b1b      	ldr	r3, [pc, #108]	; (80019b4 <MX_I2C1_Init+0x74>)
 8001946:	4a1c      	ldr	r2, [pc, #112]	; (80019b8 <MX_I2C1_Init+0x78>)
 8001948:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 800194a:	4b1a      	ldr	r3, [pc, #104]	; (80019b4 <MX_I2C1_Init+0x74>)
 800194c:	4a1b      	ldr	r2, [pc, #108]	; (80019bc <MX_I2C1_Init+0x7c>)
 800194e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001950:	4b18      	ldr	r3, [pc, #96]	; (80019b4 <MX_I2C1_Init+0x74>)
 8001952:	2200      	movs	r2, #0
 8001954:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001956:	4b17      	ldr	r3, [pc, #92]	; (80019b4 <MX_I2C1_Init+0x74>)
 8001958:	2201      	movs	r2, #1
 800195a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800195c:	4b15      	ldr	r3, [pc, #84]	; (80019b4 <MX_I2C1_Init+0x74>)
 800195e:	2200      	movs	r2, #0
 8001960:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001962:	4b14      	ldr	r3, [pc, #80]	; (80019b4 <MX_I2C1_Init+0x74>)
 8001964:	2200      	movs	r2, #0
 8001966:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001968:	4b12      	ldr	r3, [pc, #72]	; (80019b4 <MX_I2C1_Init+0x74>)
 800196a:	2200      	movs	r2, #0
 800196c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800196e:	4b11      	ldr	r3, [pc, #68]	; (80019b4 <MX_I2C1_Init+0x74>)
 8001970:	2200      	movs	r2, #0
 8001972:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001974:	4b0f      	ldr	r3, [pc, #60]	; (80019b4 <MX_I2C1_Init+0x74>)
 8001976:	2200      	movs	r2, #0
 8001978:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800197a:	480e      	ldr	r0, [pc, #56]	; (80019b4 <MX_I2C1_Init+0x74>)
 800197c:	f001 fed0 	bl	8003720 <HAL_I2C_Init>
 8001980:	4603      	mov	r3, r0
 8001982:	2b00      	cmp	r3, #0
 8001984:	d001      	beq.n	800198a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001986:	f000 fad1 	bl	8001f2c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800198a:	2100      	movs	r1, #0
 800198c:	4809      	ldr	r0, [pc, #36]	; (80019b4 <MX_I2C1_Init+0x74>)
 800198e:	f002 fcc1 	bl	8004314 <HAL_I2CEx_ConfigAnalogFilter>
 8001992:	4603      	mov	r3, r0
 8001994:	2b00      	cmp	r3, #0
 8001996:	d001      	beq.n	800199c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001998:	f000 fac8 	bl	8001f2c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800199c:	2100      	movs	r1, #0
 800199e:	4805      	ldr	r0, [pc, #20]	; (80019b4 <MX_I2C1_Init+0x74>)
 80019a0:	f002 fd03 	bl	80043aa <HAL_I2CEx_ConfigDigitalFilter>
 80019a4:	4603      	mov	r3, r0
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d001      	beq.n	80019ae <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80019aa:	f000 fabf 	bl	8001f2c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80019ae:	bf00      	nop
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	20000298 	.word	0x20000298
 80019b8:	40005400 	.word	0x40005400
 80019bc:	10909cec 	.word	0x10909cec

080019c0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b088      	sub	sp, #32
 80019c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019c6:	f107 0310 	add.w	r3, r7, #16
 80019ca:	2200      	movs	r2, #0
 80019cc:	601a      	str	r2, [r3, #0]
 80019ce:	605a      	str	r2, [r3, #4]
 80019d0:	609a      	str	r2, [r3, #8]
 80019d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019d4:	1d3b      	adds	r3, r7, #4
 80019d6:	2200      	movs	r2, #0
 80019d8:	601a      	str	r2, [r3, #0]
 80019da:	605a      	str	r2, [r3, #4]
 80019dc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80019de:	4b1d      	ldr	r3, [pc, #116]	; (8001a54 <MX_TIM2_Init+0x94>)
 80019e0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80019e4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80019e6:	4b1b      	ldr	r3, [pc, #108]	; (8001a54 <MX_TIM2_Init+0x94>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019ec:	4b19      	ldr	r3, [pc, #100]	; (8001a54 <MX_TIM2_Init+0x94>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10-1;
 80019f2:	4b18      	ldr	r3, [pc, #96]	; (8001a54 <MX_TIM2_Init+0x94>)
 80019f4:	2209      	movs	r2, #9
 80019f6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019f8:	4b16      	ldr	r3, [pc, #88]	; (8001a54 <MX_TIM2_Init+0x94>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019fe:	4b15      	ldr	r3, [pc, #84]	; (8001a54 <MX_TIM2_Init+0x94>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001a04:	4813      	ldr	r0, [pc, #76]	; (8001a54 <MX_TIM2_Init+0x94>)
 8001a06:	f004 f83d 	bl	8005a84 <HAL_TIM_Base_Init>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d001      	beq.n	8001a14 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001a10:	f000 fa8c 	bl	8001f2c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a18:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001a1a:	f107 0310 	add.w	r3, r7, #16
 8001a1e:	4619      	mov	r1, r3
 8001a20:	480c      	ldr	r0, [pc, #48]	; (8001a54 <MX_TIM2_Init+0x94>)
 8001a22:	f004 f8ef 	bl	8005c04 <HAL_TIM_ConfigClockSource>
 8001a26:	4603      	mov	r3, r0
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d001      	beq.n	8001a30 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001a2c:	f000 fa7e 	bl	8001f2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001a30:	2320      	movs	r3, #32
 8001a32:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a34:	2300      	movs	r3, #0
 8001a36:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001a38:	1d3b      	adds	r3, r7, #4
 8001a3a:	4619      	mov	r1, r3
 8001a3c:	4805      	ldr	r0, [pc, #20]	; (8001a54 <MX_TIM2_Init+0x94>)
 8001a3e:	f004 fadf 	bl	8006000 <HAL_TIMEx_MasterConfigSynchronization>
 8001a42:	4603      	mov	r3, r0
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d001      	beq.n	8001a4c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001a48:	f000 fa70 	bl	8001f2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001a4c:	bf00      	nop
 8001a4e:	3720      	adds	r7, #32
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bd80      	pop	{r7, pc}
 8001a54:	200002ec 	.word	0x200002ec

08001a58 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001a5c:	4b14      	ldr	r3, [pc, #80]	; (8001ab0 <MX_USART2_UART_Init+0x58>)
 8001a5e:	4a15      	ldr	r2, [pc, #84]	; (8001ab4 <MX_USART2_UART_Init+0x5c>)
 8001a60:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001a62:	4b13      	ldr	r3, [pc, #76]	; (8001ab0 <MX_USART2_UART_Init+0x58>)
 8001a64:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a68:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001a6a:	4b11      	ldr	r3, [pc, #68]	; (8001ab0 <MX_USART2_UART_Init+0x58>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001a70:	4b0f      	ldr	r3, [pc, #60]	; (8001ab0 <MX_USART2_UART_Init+0x58>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001a76:	4b0e      	ldr	r3, [pc, #56]	; (8001ab0 <MX_USART2_UART_Init+0x58>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001a7c:	4b0c      	ldr	r3, [pc, #48]	; (8001ab0 <MX_USART2_UART_Init+0x58>)
 8001a7e:	220c      	movs	r2, #12
 8001a80:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a82:	4b0b      	ldr	r3, [pc, #44]	; (8001ab0 <MX_USART2_UART_Init+0x58>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a88:	4b09      	ldr	r3, [pc, #36]	; (8001ab0 <MX_USART2_UART_Init+0x58>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a8e:	4b08      	ldr	r3, [pc, #32]	; (8001ab0 <MX_USART2_UART_Init+0x58>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a94:	4b06      	ldr	r3, [pc, #24]	; (8001ab0 <MX_USART2_UART_Init+0x58>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001a9a:	4805      	ldr	r0, [pc, #20]	; (8001ab0 <MX_USART2_UART_Init+0x58>)
 8001a9c:	f004 fb38 	bl	8006110 <HAL_UART_Init>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d001      	beq.n	8001aaa <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001aa6:	f000 fa41 	bl	8001f2c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001aaa:	bf00      	nop
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	20000338 	.word	0x20000338
 8001ab4:	40004400 	.word	0x40004400

08001ab8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b082      	sub	sp, #8
 8001abc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001abe:	4b0c      	ldr	r3, [pc, #48]	; (8001af0 <MX_DMA_Init+0x38>)
 8001ac0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ac2:	4a0b      	ldr	r2, [pc, #44]	; (8001af0 <MX_DMA_Init+0x38>)
 8001ac4:	f043 0301 	orr.w	r3, r3, #1
 8001ac8:	6493      	str	r3, [r2, #72]	; 0x48
 8001aca:	4b09      	ldr	r3, [pc, #36]	; (8001af0 <MX_DMA_Init+0x38>)
 8001acc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ace:	f003 0301 	and.w	r3, r3, #1
 8001ad2:	607b      	str	r3, [r7, #4]
 8001ad4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	2100      	movs	r1, #0
 8001ada:	200d      	movs	r0, #13
 8001adc:	f000 fe65 	bl	80027aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001ae0:	200d      	movs	r0, #13
 8001ae2:	f000 fe7e 	bl	80027e2 <HAL_NVIC_EnableIRQ>

}
 8001ae6:	bf00      	nop
 8001ae8:	3708      	adds	r7, #8
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	40021000 	.word	0x40021000

08001af4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b08a      	sub	sp, #40	; 0x28
 8001af8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001afa:	f107 0314 	add.w	r3, r7, #20
 8001afe:	2200      	movs	r2, #0
 8001b00:	601a      	str	r2, [r3, #0]
 8001b02:	605a      	str	r2, [r3, #4]
 8001b04:	609a      	str	r2, [r3, #8]
 8001b06:	60da      	str	r2, [r3, #12]
 8001b08:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b0a:	4b37      	ldr	r3, [pc, #220]	; (8001be8 <MX_GPIO_Init+0xf4>)
 8001b0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b0e:	4a36      	ldr	r2, [pc, #216]	; (8001be8 <MX_GPIO_Init+0xf4>)
 8001b10:	f043 0304 	orr.w	r3, r3, #4
 8001b14:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b16:	4b34      	ldr	r3, [pc, #208]	; (8001be8 <MX_GPIO_Init+0xf4>)
 8001b18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b1a:	f003 0304 	and.w	r3, r3, #4
 8001b1e:	613b      	str	r3, [r7, #16]
 8001b20:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001b22:	4b31      	ldr	r3, [pc, #196]	; (8001be8 <MX_GPIO_Init+0xf4>)
 8001b24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b26:	4a30      	ldr	r2, [pc, #192]	; (8001be8 <MX_GPIO_Init+0xf4>)
 8001b28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b2c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b2e:	4b2e      	ldr	r3, [pc, #184]	; (8001be8 <MX_GPIO_Init+0xf4>)
 8001b30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b36:	60fb      	str	r3, [r7, #12]
 8001b38:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b3a:	4b2b      	ldr	r3, [pc, #172]	; (8001be8 <MX_GPIO_Init+0xf4>)
 8001b3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b3e:	4a2a      	ldr	r2, [pc, #168]	; (8001be8 <MX_GPIO_Init+0xf4>)
 8001b40:	f043 0301 	orr.w	r3, r3, #1
 8001b44:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b46:	4b28      	ldr	r3, [pc, #160]	; (8001be8 <MX_GPIO_Init+0xf4>)
 8001b48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b4a:	f003 0301 	and.w	r3, r3, #1
 8001b4e:	60bb      	str	r3, [r7, #8]
 8001b50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b52:	4b25      	ldr	r3, [pc, #148]	; (8001be8 <MX_GPIO_Init+0xf4>)
 8001b54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b56:	4a24      	ldr	r2, [pc, #144]	; (8001be8 <MX_GPIO_Init+0xf4>)
 8001b58:	f043 0302 	orr.w	r3, r3, #2
 8001b5c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b5e:	4b22      	ldr	r3, [pc, #136]	; (8001be8 <MX_GPIO_Init+0xf4>)
 8001b60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b62:	f003 0302 	and.w	r3, r3, #2
 8001b66:	607b      	str	r3, [r7, #4]
 8001b68:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	2120      	movs	r1, #32
 8001b6e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b72:	f001 fd8b 	bl	800368c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001b76:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b7a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001b7c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001b80:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b82:	2300      	movs	r3, #0
 8001b84:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001b86:	f107 0314 	add.w	r3, r7, #20
 8001b8a:	4619      	mov	r1, r3
 8001b8c:	4817      	ldr	r0, [pc, #92]	; (8001bec <MX_GPIO_Init+0xf8>)
 8001b8e:	f001 fbd3 	bl	8003338 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001b92:	2320      	movs	r3, #32
 8001b94:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b96:	2301      	movs	r3, #1
 8001b98:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001ba2:	f107 0314 	add.w	r3, r7, #20
 8001ba6:	4619      	mov	r1, r3
 8001ba8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bac:	f001 fbc4 	bl	8003338 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001bb0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001bb4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001bb6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001bba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bc0:	f107 0314 	add.w	r3, r7, #20
 8001bc4:	4619      	mov	r1, r3
 8001bc6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bca:	f001 fbb5 	bl	8003338 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001bce:	2200      	movs	r2, #0
 8001bd0:	2100      	movs	r1, #0
 8001bd2:	2028      	movs	r0, #40	; 0x28
 8001bd4:	f000 fde9 	bl	80027aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001bd8:	2028      	movs	r0, #40	; 0x28
 8001bda:	f000 fe02 	bl	80027e2 <HAL_NVIC_EnableIRQ>

}
 8001bde:	bf00      	nop
 8001be0:	3728      	adds	r7, #40	; 0x28
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	bf00      	nop
 8001be8:	40021000 	.word	0x40021000
 8001bec:	48000800 	.word	0x48000800

08001bf0 <calcsin>:

/* USER CODE BEGIN 4 */
void calcsin(){
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b082      	sub	sp, #8
 8001bf4:	af00      	add	r7, sp, #0
	for (int i=0; i<numDACSamples; i++)
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	607b      	str	r3, [r7, #4]
 8001bfa:	e043      	b.n	8001c84 <calcsin+0x94>
		{
			sinWave[i] = 0.9*((sin(i*2*PI/numDACSamples) + 1.11)*((4096+1)/2));
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	005b      	lsls	r3, r3, #1
 8001c00:	4618      	mov	r0, r3
 8001c02:	f7fe fc8f 	bl	8000524 <__aeabi_i2d>
 8001c06:	a32b      	add	r3, pc, #172	; (adr r3, 8001cb4 <calcsin+0xc4>)
 8001c08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c0c:	f7fe fcf4 	bl	80005f8 <__aeabi_dmul>
 8001c10:	4602      	mov	r2, r0
 8001c12:	460b      	mov	r3, r1
 8001c14:	4610      	mov	r0, r2
 8001c16:	4619      	mov	r1, r3
 8001c18:	f04f 0200 	mov.w	r2, #0
 8001c1c:	4b22      	ldr	r3, [pc, #136]	; (8001ca8 <calcsin+0xb8>)
 8001c1e:	f7fe fe15 	bl	800084c <__aeabi_ddiv>
 8001c22:	4602      	mov	r2, r0
 8001c24:	460b      	mov	r3, r1
 8001c26:	ec43 2b17 	vmov	d7, r2, r3
 8001c2a:	eeb0 0a47 	vmov.f32	s0, s14
 8001c2e:	eef0 0a67 	vmov.f32	s1, s15
 8001c32:	f010 f895 	bl	8011d60 <sin>
 8001c36:	ec51 0b10 	vmov	r0, r1, d0
 8001c3a:	a317      	add	r3, pc, #92	; (adr r3, 8001c98 <calcsin+0xa8>)
 8001c3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c40:	f7fe fb24 	bl	800028c <__adddf3>
 8001c44:	4602      	mov	r2, r0
 8001c46:	460b      	mov	r3, r1
 8001c48:	4610      	mov	r0, r2
 8001c4a:	4619      	mov	r1, r3
 8001c4c:	f04f 0200 	mov.w	r2, #0
 8001c50:	4b16      	ldr	r3, [pc, #88]	; (8001cac <calcsin+0xbc>)
 8001c52:	f7fe fcd1 	bl	80005f8 <__aeabi_dmul>
 8001c56:	4602      	mov	r2, r0
 8001c58:	460b      	mov	r3, r1
 8001c5a:	4610      	mov	r0, r2
 8001c5c:	4619      	mov	r1, r3
 8001c5e:	a310      	add	r3, pc, #64	; (adr r3, 8001ca0 <calcsin+0xb0>)
 8001c60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c64:	f7fe fcc8 	bl	80005f8 <__aeabi_dmul>
 8001c68:	4602      	mov	r2, r0
 8001c6a:	460b      	mov	r3, r1
 8001c6c:	4610      	mov	r0, r2
 8001c6e:	4619      	mov	r1, r3
 8001c70:	f7fe ff9a 	bl	8000ba8 <__aeabi_d2uiz>
 8001c74:	4602      	mov	r2, r0
 8001c76:	490e      	ldr	r1, [pc, #56]	; (8001cb0 <calcsin+0xc0>)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (int i=0; i<numDACSamples; i++)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	3301      	adds	r3, #1
 8001c82:	607b      	str	r3, [r7, #4]
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2bc7      	cmp	r3, #199	; 0xc7
 8001c88:	ddb8      	ble.n	8001bfc <calcsin+0xc>
		}
}
 8001c8a:	bf00      	nop
 8001c8c:	bf00      	nop
 8001c8e:	3708      	adds	r7, #8
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd80      	pop	{r7, pc}
 8001c94:	f3af 8000 	nop.w
 8001c98:	5c28f5c3 	.word	0x5c28f5c3
 8001c9c:	3ff1c28f 	.word	0x3ff1c28f
 8001ca0:	cccccccd 	.word	0xcccccccd
 8001ca4:	3feccccc 	.word	0x3feccccc
 8001ca8:	40690000 	.word	0x40690000
 8001cac:	40a00000 	.word	0x40a00000
 8001cb0:	200007ec 	.word	0x200007ec
 8001cb4:	4d12d84a 	.word	0x4d12d84a
 8001cb8:	400921fb 	.word	0x400921fb

08001cbc <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b082      	sub	sp, #8
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	80fb      	strh	r3, [r7, #6]
	takeSinglePollingMeasurement();
 8001cc6:	f7ff faf9 	bl	80012bc <takeSinglePollingMeasurement>
}
 8001cca:	bf00      	nop
 8001ccc:	3708      	adds	r7, #8
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}
	...

08001cd4 <HAL_UART_RxCpltCallback>:

/*
 * called when a 4 character command is sent to the nucleo
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b084      	sub	sp, #16
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
	//collect command
	char* text=(char*)uartRxBuf;
 8001cdc:	4b0b      	ldr	r3, [pc, #44]	; (8001d0c <HAL_UART_RxCpltCallback+0x38>)
 8001cde:	60fb      	str	r3, [r7, #12]
	// return carraige for user
	uartTxBufLen=sprintf(uartTxBuf,"\n");
 8001ce0:	490b      	ldr	r1, [pc, #44]	; (8001d10 <HAL_UART_RxCpltCallback+0x3c>)
 8001ce2:	480c      	ldr	r0, [pc, #48]	; (8001d14 <HAL_UART_RxCpltCallback+0x40>)
 8001ce4:	f00d f906 	bl	800eef4 <siprintf>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	4a0b      	ldr	r2, [pc, #44]	; (8001d18 <HAL_UART_RxCpltCallback+0x44>)
 8001cec:	6013      	str	r3, [r2, #0]
	printToSerial();
 8001cee:	f000 f817 	bl	8001d20 <printToSerial>
	HAL_UART_Receive_IT(&huart2, uartRxBuf, uartInputBuffLen);
 8001cf2:	2203      	movs	r2, #3
 8001cf4:	4905      	ldr	r1, [pc, #20]	; (8001d0c <HAL_UART_RxCpltCallback+0x38>)
 8001cf6:	4809      	ldr	r0, [pc, #36]	; (8001d1c <HAL_UART_RxCpltCallback+0x48>)
 8001cf8:	f004 faec 	bl	80062d4 <HAL_UART_Receive_IT>
	parseCommand(text);
 8001cfc:	68f8      	ldr	r0, [r7, #12]
 8001cfe:	f000 f821 	bl	8001d44 <parseCommand>
}
 8001d02:	bf00      	nop
 8001d04:	3710      	adds	r7, #16
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	bf00      	nop
 8001d0c:	20000b10 	.word	0x20000b10
 8001d10:	08013190 	.word	0x08013190
 8001d14:	20000b14 	.word	0x20000b14
 8001d18:	20000e34 	.word	0x20000e34
 8001d1c:	20000338 	.word	0x20000338

08001d20 <printToSerial>:

/*
 * A small function I wrote to push a global text buffer out via serial
 */
void printToSerial(){
 8001d20:	b580      	push	{r7, lr}
 8001d22:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart2, (uint8_t*)uartTxBuf, uartTxBufLen, 100);
 8001d24:	4b04      	ldr	r3, [pc, #16]	; (8001d38 <printToSerial+0x18>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	b29a      	uxth	r2, r3
 8001d2a:	2364      	movs	r3, #100	; 0x64
 8001d2c:	4903      	ldr	r1, [pc, #12]	; (8001d3c <printToSerial+0x1c>)
 8001d2e:	4804      	ldr	r0, [pc, #16]	; (8001d40 <printToSerial+0x20>)
 8001d30:	f004 fa3c 	bl	80061ac <HAL_UART_Transmit>
}
 8001d34:	bf00      	nop
 8001d36:	bd80      	pop	{r7, pc}
 8001d38:	20000e34 	.word	0x20000e34
 8001d3c:	20000b14 	.word	0x20000b14
 8001d40:	20000338 	.word	0x20000338

08001d44 <parseCommand>:
 * Function that parses user command and executes relevant function
 *
 * there is no real error checking, since I am the only one for now who will be using
 * the system.
 */
void parseCommand(char* text){
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b086      	sub	sp, #24
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
		return;
	}
	*/

	//major choice:
	switch(text[0]){
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	781b      	ldrb	r3, [r3, #0]
 8001d50:	3b4d      	subs	r3, #77	; 0x4d
 8001d52:	2b2b      	cmp	r3, #43	; 0x2b
 8001d54:	f200 80c5 	bhi.w	8001ee2 <parseCommand+0x19e>
 8001d58:	a201      	add	r2, pc, #4	; (adr r2, 8001d60 <parseCommand+0x1c>)
 8001d5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d5e:	bf00      	nop
 8001d60:	08001e79 	.word	0x08001e79
 8001d64:	08001ee3 	.word	0x08001ee3
 8001d68:	08001e53 	.word	0x08001e53
 8001d6c:	08001e11 	.word	0x08001e11
 8001d70:	08001ee3 	.word	0x08001ee3
 8001d74:	08001e27 	.word	0x08001e27
 8001d78:	08001e93 	.word	0x08001e93
 8001d7c:	08001ee3 	.word	0x08001ee3
 8001d80:	08001ee3 	.word	0x08001ee3
 8001d84:	08001ee3 	.word	0x08001ee3
 8001d88:	08001ebb 	.word	0x08001ebb
 8001d8c:	08001e2d 	.word	0x08001e2d
 8001d90:	08001ee3 	.word	0x08001ee3
 8001d94:	08001ee3 	.word	0x08001ee3
 8001d98:	08001ee3 	.word	0x08001ee3
 8001d9c:	08001ee3 	.word	0x08001ee3
 8001da0:	08001ee3 	.word	0x08001ee3
 8001da4:	08001ee3 	.word	0x08001ee3
 8001da8:	08001ee3 	.word	0x08001ee3
 8001dac:	08001ee3 	.word	0x08001ee3
 8001db0:	08001ee3 	.word	0x08001ee3
 8001db4:	08001ee3 	.word	0x08001ee3
 8001db8:	08001ee3 	.word	0x08001ee3
 8001dbc:	08001ee3 	.word	0x08001ee3
 8001dc0:	08001ee3 	.word	0x08001ee3
 8001dc4:	08001ee3 	.word	0x08001ee3
 8001dc8:	08001ee3 	.word	0x08001ee3
 8001dcc:	08001ee3 	.word	0x08001ee3
 8001dd0:	08001ee3 	.word	0x08001ee3
 8001dd4:	08001ee3 	.word	0x08001ee3
 8001dd8:	08001ee3 	.word	0x08001ee3
 8001ddc:	08001ee3 	.word	0x08001ee3
 8001de0:	08001e79 	.word	0x08001e79
 8001de4:	08001ee3 	.word	0x08001ee3
 8001de8:	08001e53 	.word	0x08001e53
 8001dec:	08001e11 	.word	0x08001e11
 8001df0:	08001ee3 	.word	0x08001ee3
 8001df4:	08001e27 	.word	0x08001e27
 8001df8:	08001e93 	.word	0x08001e93
 8001dfc:	08001ee3 	.word	0x08001ee3
 8001e00:	08001ee3 	.word	0x08001ee3
 8001e04:	08001ee3 	.word	0x08001ee3
 8001e08:	08001ebb 	.word	0x08001ebb
 8001e0c:	08001e2d 	.word	0x08001e2d
	case 'P': // generates pulses
	case 'p':
		sscanf(&text[1],"%d",&numPulses);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	3301      	adds	r3, #1
 8001e14:	4a3a      	ldr	r2, [pc, #232]	; (8001f00 <parseCommand+0x1bc>)
 8001e16:	493b      	ldr	r1, [pc, #236]	; (8001f04 <parseCommand+0x1c0>)
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f00d f88b 	bl	800ef34 <siscanf>
		DAC_ON=1;
 8001e1e:	4b3a      	ldr	r3, [pc, #232]	; (8001f08 <parseCommand+0x1c4>)
 8001e20:	2201      	movs	r2, #1
 8001e22:	701a      	strb	r2, [r3, #0]
 8001e24:	e068      	b.n	8001ef8 <parseCommand+0x1b4>
		return;
		break;
	case 'r': // for refSPAD calibration
	case 'R':
		refSPADCalibration();
 8001e26:	f7ff f963 	bl	80010f0 <refSPADCalibration>
		break;
 8001e2a:	e065      	b.n	8001ef8 <parseCommand+0x1b4>
	case 'x': // for x-talk calibration
	case 'X':{
		int32_t distance;
		sscanf(&text[1],"%li",&distance);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	3301      	adds	r3, #1
 8001e30:	f107 0210 	add.w	r2, r7, #16
 8001e34:	4935      	ldr	r1, [pc, #212]	; (8001f0c <parseCommand+0x1c8>)
 8001e36:	4618      	mov	r0, r3
 8001e38:	f00d f87c 	bl	800ef34 <siscanf>
		distance=distance*10; //converting to mm
 8001e3c:	693a      	ldr	r2, [r7, #16]
 8001e3e:	4613      	mov	r3, r2
 8001e40:	009b      	lsls	r3, r3, #2
 8001e42:	4413      	add	r3, r2
 8001e44:	005b      	lsls	r3, r3, #1
 8001e46:	613b      	str	r3, [r7, #16]
		crossTalkCalibration(distance);
 8001e48:	693b      	ldr	r3, [r7, #16]
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f7ff fa16 	bl	800127c <crossTalkCalibration>
		break;
 8001e50:	e052      	b.n	8001ef8 <parseCommand+0x1b4>
	}
	case 'o': // for offset calibration
	case 'O':{
		int32_t distance;
		sscanf(&text[1],"%li",&distance);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	3301      	adds	r3, #1
 8001e56:	f107 020c 	add.w	r2, r7, #12
 8001e5a:	492c      	ldr	r1, [pc, #176]	; (8001f0c <parseCommand+0x1c8>)
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f00d f869 	bl	800ef34 <siscanf>
		distance=distance*10;
 8001e62:	68fa      	ldr	r2, [r7, #12]
 8001e64:	4613      	mov	r3, r2
 8001e66:	009b      	lsls	r3, r3, #2
 8001e68:	4413      	add	r3, r2
 8001e6a:	005b      	lsls	r3, r3, #1
 8001e6c:	60fb      	str	r3, [r7, #12]
		offsetCalibration(distance);
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	4618      	mov	r0, r3
 8001e72:	f7ff f98d 	bl	8001190 <offsetCalibration>
		break;
 8001e76:	e03f      	b.n	8001ef8 <parseCommand+0x1b4>
	}
	case 'M': // for taking laser distance measurements
	case 'm':;
		int numReadings;
		sscanf(&text[1],"%d",&numReadings);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	3301      	adds	r3, #1
 8001e7c:	f107 0214 	add.w	r2, r7, #20
 8001e80:	4920      	ldr	r1, [pc, #128]	; (8001f04 <parseCommand+0x1c0>)
 8001e82:	4618      	mov	r0, r3
 8001e84:	f00d f856 	bl	800ef34 <siscanf>
		takeMultiplePollingMeasurements( numReadings);
 8001e88:	697b      	ldr	r3, [r7, #20]
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f7ff fa8e 	bl	80013ac <takeMultiplePollingMeasurements>
		break;
 8001e90:	e032      	b.n	8001ef8 <parseCommand+0x1b4>
	case 'S': //changes the spacing between 40kHz pulses
	case 's':
		sscanf(&text[1],"%d",&pulseSpacing);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	3301      	adds	r3, #1
 8001e96:	4a1e      	ldr	r2, [pc, #120]	; (8001f10 <parseCommand+0x1cc>)
 8001e98:	491a      	ldr	r1, [pc, #104]	; (8001f04 <parseCommand+0x1c0>)
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f00d f84a 	bl	800ef34 <siscanf>
		uartTxBufLen=sprintf(uartTxBuf,"pulse spacing set to %d ms\r\n",pulseSpacing);
 8001ea0:	4b1b      	ldr	r3, [pc, #108]	; (8001f10 <parseCommand+0x1cc>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	461a      	mov	r2, r3
 8001ea6:	491b      	ldr	r1, [pc, #108]	; (8001f14 <parseCommand+0x1d0>)
 8001ea8:	481b      	ldr	r0, [pc, #108]	; (8001f18 <parseCommand+0x1d4>)
 8001eaa:	f00d f823 	bl	800eef4 <siprintf>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	4a1a      	ldr	r2, [pc, #104]	; (8001f1c <parseCommand+0x1d8>)
 8001eb2:	6013      	str	r3, [r2, #0]
		printToSerial();
 8001eb4:	f7ff ff34 	bl	8001d20 <printToSerial>
		break;
 8001eb8:	e01e      	b.n	8001ef8 <parseCommand+0x1b4>
	case 'w': // changes the 40kHz pulse length (width)
	case 'W':
		sscanf(&text[1],"%d",&pulseWidth);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	3301      	adds	r3, #1
 8001ebe:	4a18      	ldr	r2, [pc, #96]	; (8001f20 <parseCommand+0x1dc>)
 8001ec0:	4910      	ldr	r1, [pc, #64]	; (8001f04 <parseCommand+0x1c0>)
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f00d f836 	bl	800ef34 <siscanf>
		uartTxBufLen=sprintf(uartTxBuf,"pulse length set to %d ms\r\n",pulseWidth);
 8001ec8:	4b15      	ldr	r3, [pc, #84]	; (8001f20 <parseCommand+0x1dc>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	461a      	mov	r2, r3
 8001ece:	4915      	ldr	r1, [pc, #84]	; (8001f24 <parseCommand+0x1e0>)
 8001ed0:	4811      	ldr	r0, [pc, #68]	; (8001f18 <parseCommand+0x1d4>)
 8001ed2:	f00d f80f 	bl	800eef4 <siprintf>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	4a10      	ldr	r2, [pc, #64]	; (8001f1c <parseCommand+0x1d8>)
 8001eda:	6013      	str	r3, [r2, #0]
		printToSerial();
 8001edc:	f7ff ff20 	bl	8001d20 <printToSerial>
		break;
 8001ee0:	e00a      	b.n	8001ef8 <parseCommand+0x1b4>
	default:
		uartTxBufLen=sprintf(uartTxBuf,"invalid command: %s\r\n",text);
 8001ee2:	687a      	ldr	r2, [r7, #4]
 8001ee4:	4910      	ldr	r1, [pc, #64]	; (8001f28 <parseCommand+0x1e4>)
 8001ee6:	480c      	ldr	r0, [pc, #48]	; (8001f18 <parseCommand+0x1d4>)
 8001ee8:	f00d f804 	bl	800eef4 <siprintf>
 8001eec:	4603      	mov	r3, r0
 8001eee:	4a0b      	ldr	r2, [pc, #44]	; (8001f1c <parseCommand+0x1d8>)
 8001ef0:	6013      	str	r3, [r2, #0]
		printToSerial();
 8001ef2:	f7ff ff15 	bl	8001d20 <printToSerial>
		break;
 8001ef6:	bf00      	nop
	}
}
 8001ef8:	3718      	adds	r7, #24
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	bf00      	nop
 8001f00:	20000008 	.word	0x20000008
 8001f04:	08013194 	.word	0x08013194
 8001f08:	20000b0c 	.word	0x20000b0c
 8001f0c:	08013198 	.word	0x08013198
 8001f10:	2000000c 	.word	0x2000000c
 8001f14:	0801319c 	.word	0x0801319c
 8001f18:	20000b14 	.word	0x20000b14
 8001f1c:	20000e34 	.word	0x20000e34
 8001f20:	20000010 	.word	0x20000010
 8001f24:	080131bc 	.word	0x080131bc
 8001f28:	080131d8 	.word	0x080131d8

08001f2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f30:	b672      	cpsid	i
}
 8001f32:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f34:	e7fe      	b.n	8001f34 <Error_Handler+0x8>
	...

08001f38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	b083      	sub	sp, #12
 8001f3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f3e:	4b0f      	ldr	r3, [pc, #60]	; (8001f7c <HAL_MspInit+0x44>)
 8001f40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f42:	4a0e      	ldr	r2, [pc, #56]	; (8001f7c <HAL_MspInit+0x44>)
 8001f44:	f043 0301 	orr.w	r3, r3, #1
 8001f48:	6613      	str	r3, [r2, #96]	; 0x60
 8001f4a:	4b0c      	ldr	r3, [pc, #48]	; (8001f7c <HAL_MspInit+0x44>)
 8001f4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f4e:	f003 0301 	and.w	r3, r3, #1
 8001f52:	607b      	str	r3, [r7, #4]
 8001f54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f56:	4b09      	ldr	r3, [pc, #36]	; (8001f7c <HAL_MspInit+0x44>)
 8001f58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f5a:	4a08      	ldr	r2, [pc, #32]	; (8001f7c <HAL_MspInit+0x44>)
 8001f5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f60:	6593      	str	r3, [r2, #88]	; 0x58
 8001f62:	4b06      	ldr	r3, [pc, #24]	; (8001f7c <HAL_MspInit+0x44>)
 8001f64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f6a:	603b      	str	r3, [r7, #0]
 8001f6c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f6e:	bf00      	nop
 8001f70:	370c      	adds	r7, #12
 8001f72:	46bd      	mov	sp, r7
 8001f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f78:	4770      	bx	lr
 8001f7a:	bf00      	nop
 8001f7c:	40021000 	.word	0x40021000

08001f80 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b08a      	sub	sp, #40	; 0x28
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f88:	f107 0314 	add.w	r3, r7, #20
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	601a      	str	r2, [r3, #0]
 8001f90:	605a      	str	r2, [r3, #4]
 8001f92:	609a      	str	r2, [r3, #8]
 8001f94:	60da      	str	r2, [r3, #12]
 8001f96:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a2b      	ldr	r2, [pc, #172]	; (800204c <HAL_DAC_MspInit+0xcc>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d14f      	bne.n	8002042 <HAL_DAC_MspInit+0xc2>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8001fa2:	4b2b      	ldr	r3, [pc, #172]	; (8002050 <HAL_DAC_MspInit+0xd0>)
 8001fa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fa6:	4a2a      	ldr	r2, [pc, #168]	; (8002050 <HAL_DAC_MspInit+0xd0>)
 8001fa8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001fac:	6593      	str	r3, [r2, #88]	; 0x58
 8001fae:	4b28      	ldr	r3, [pc, #160]	; (8002050 <HAL_DAC_MspInit+0xd0>)
 8001fb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fb2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001fb6:	613b      	str	r3, [r7, #16]
 8001fb8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fba:	4b25      	ldr	r3, [pc, #148]	; (8002050 <HAL_DAC_MspInit+0xd0>)
 8001fbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fbe:	4a24      	ldr	r2, [pc, #144]	; (8002050 <HAL_DAC_MspInit+0xd0>)
 8001fc0:	f043 0301 	orr.w	r3, r3, #1
 8001fc4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fc6:	4b22      	ldr	r3, [pc, #136]	; (8002050 <HAL_DAC_MspInit+0xd0>)
 8001fc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fca:	f003 0301 	and.w	r3, r3, #1
 8001fce:	60fb      	str	r3, [r7, #12]
 8001fd0:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001fd2:	2310      	movs	r3, #16
 8001fd4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001fd6:	2303      	movs	r3, #3
 8001fd8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fde:	f107 0314 	add.w	r3, r7, #20
 8001fe2:	4619      	mov	r1, r3
 8001fe4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001fe8:	f001 f9a6 	bl	8003338 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC_CH1 Init */
    hdma_dac_ch1.Instance = DMA1_Channel3;
 8001fec:	4b19      	ldr	r3, [pc, #100]	; (8002054 <HAL_DAC_MspInit+0xd4>)
 8001fee:	4a1a      	ldr	r2, [pc, #104]	; (8002058 <HAL_DAC_MspInit+0xd8>)
 8001ff0:	601a      	str	r2, [r3, #0]
    hdma_dac_ch1.Init.Request = DMA_REQUEST_6;
 8001ff2:	4b18      	ldr	r3, [pc, #96]	; (8002054 <HAL_DAC_MspInit+0xd4>)
 8001ff4:	2206      	movs	r2, #6
 8001ff6:	605a      	str	r2, [r3, #4]
    hdma_dac_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001ff8:	4b16      	ldr	r3, [pc, #88]	; (8002054 <HAL_DAC_MspInit+0xd4>)
 8001ffa:	2210      	movs	r2, #16
 8001ffc:	609a      	str	r2, [r3, #8]
    hdma_dac_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ffe:	4b15      	ldr	r3, [pc, #84]	; (8002054 <HAL_DAC_MspInit+0xd4>)
 8002000:	2200      	movs	r2, #0
 8002002:	60da      	str	r2, [r3, #12]
    hdma_dac_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8002004:	4b13      	ldr	r3, [pc, #76]	; (8002054 <HAL_DAC_MspInit+0xd4>)
 8002006:	2280      	movs	r2, #128	; 0x80
 8002008:	611a      	str	r2, [r3, #16]
    hdma_dac_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800200a:	4b12      	ldr	r3, [pc, #72]	; (8002054 <HAL_DAC_MspInit+0xd4>)
 800200c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002010:	615a      	str	r2, [r3, #20]
    hdma_dac_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002012:	4b10      	ldr	r3, [pc, #64]	; (8002054 <HAL_DAC_MspInit+0xd4>)
 8002014:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002018:	619a      	str	r2, [r3, #24]
    hdma_dac_ch1.Init.Mode = DMA_CIRCULAR;
 800201a:	4b0e      	ldr	r3, [pc, #56]	; (8002054 <HAL_DAC_MspInit+0xd4>)
 800201c:	2220      	movs	r2, #32
 800201e:	61da      	str	r2, [r3, #28]
    hdma_dac_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8002020:	4b0c      	ldr	r3, [pc, #48]	; (8002054 <HAL_DAC_MspInit+0xd4>)
 8002022:	2200      	movs	r2, #0
 8002024:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac_ch1) != HAL_OK)
 8002026:	480b      	ldr	r0, [pc, #44]	; (8002054 <HAL_DAC_MspInit+0xd4>)
 8002028:	f000 ff10 	bl	8002e4c <HAL_DMA_Init>
 800202c:	4603      	mov	r3, r0
 800202e:	2b00      	cmp	r3, #0
 8002030:	d001      	beq.n	8002036 <HAL_DAC_MspInit+0xb6>
    {
      Error_Handler();
 8002032:	f7ff ff7b 	bl	8001f2c <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac_ch1);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	4a06      	ldr	r2, [pc, #24]	; (8002054 <HAL_DAC_MspInit+0xd4>)
 800203a:	609a      	str	r2, [r3, #8]
 800203c:	4a05      	ldr	r2, [pc, #20]	; (8002054 <HAL_DAC_MspInit+0xd4>)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8002042:	bf00      	nop
 8002044:	3728      	adds	r7, #40	; 0x28
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}
 800204a:	bf00      	nop
 800204c:	40007400 	.word	0x40007400
 8002050:	40021000 	.word	0x40021000
 8002054:	20000250 	.word	0x20000250
 8002058:	40020030 	.word	0x40020030

0800205c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b0ac      	sub	sp, #176	; 0xb0
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002064:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002068:	2200      	movs	r2, #0
 800206a:	601a      	str	r2, [r3, #0]
 800206c:	605a      	str	r2, [r3, #4]
 800206e:	609a      	str	r2, [r3, #8]
 8002070:	60da      	str	r2, [r3, #12]
 8002072:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002074:	f107 0314 	add.w	r3, r7, #20
 8002078:	2288      	movs	r2, #136	; 0x88
 800207a:	2100      	movs	r1, #0
 800207c:	4618      	mov	r0, r3
 800207e:	f00c fa93 	bl	800e5a8 <memset>
  if(hi2c->Instance==I2C1)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4a21      	ldr	r2, [pc, #132]	; (800210c <HAL_I2C_MspInit+0xb0>)
 8002088:	4293      	cmp	r3, r2
 800208a:	d13b      	bne.n	8002104 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800208c:	2340      	movs	r3, #64	; 0x40
 800208e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002090:	2300      	movs	r3, #0
 8002092:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002094:	f107 0314 	add.w	r3, r7, #20
 8002098:	4618      	mov	r0, r3
 800209a:	f003 f837 	bl	800510c <HAL_RCCEx_PeriphCLKConfig>
 800209e:	4603      	mov	r3, r0
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d001      	beq.n	80020a8 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80020a4:	f7ff ff42 	bl	8001f2c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020a8:	4b19      	ldr	r3, [pc, #100]	; (8002110 <HAL_I2C_MspInit+0xb4>)
 80020aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020ac:	4a18      	ldr	r2, [pc, #96]	; (8002110 <HAL_I2C_MspInit+0xb4>)
 80020ae:	f043 0302 	orr.w	r3, r3, #2
 80020b2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80020b4:	4b16      	ldr	r3, [pc, #88]	; (8002110 <HAL_I2C_MspInit+0xb4>)
 80020b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020b8:	f003 0302 	and.w	r3, r3, #2
 80020bc:	613b      	str	r3, [r7, #16]
 80020be:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80020c0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80020c4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80020c8:	2312      	movs	r3, #18
 80020ca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ce:	2300      	movs	r3, #0
 80020d0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020d4:	2303      	movs	r3, #3
 80020d6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80020da:	2304      	movs	r3, #4
 80020dc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020e0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80020e4:	4619      	mov	r1, r3
 80020e6:	480b      	ldr	r0, [pc, #44]	; (8002114 <HAL_I2C_MspInit+0xb8>)
 80020e8:	f001 f926 	bl	8003338 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80020ec:	4b08      	ldr	r3, [pc, #32]	; (8002110 <HAL_I2C_MspInit+0xb4>)
 80020ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020f0:	4a07      	ldr	r2, [pc, #28]	; (8002110 <HAL_I2C_MspInit+0xb4>)
 80020f2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80020f6:	6593      	str	r3, [r2, #88]	; 0x58
 80020f8:	4b05      	ldr	r3, [pc, #20]	; (8002110 <HAL_I2C_MspInit+0xb4>)
 80020fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002100:	60fb      	str	r3, [r7, #12]
 8002102:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002104:	bf00      	nop
 8002106:	37b0      	adds	r7, #176	; 0xb0
 8002108:	46bd      	mov	sp, r7
 800210a:	bd80      	pop	{r7, pc}
 800210c:	40005400 	.word	0x40005400
 8002110:	40021000 	.word	0x40021000
 8002114:	48000400 	.word	0x48000400

08002118 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002118:	b480      	push	{r7}
 800211a:	b085      	sub	sp, #20
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002128:	d10b      	bne.n	8002142 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800212a:	4b09      	ldr	r3, [pc, #36]	; (8002150 <HAL_TIM_Base_MspInit+0x38>)
 800212c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800212e:	4a08      	ldr	r2, [pc, #32]	; (8002150 <HAL_TIM_Base_MspInit+0x38>)
 8002130:	f043 0301 	orr.w	r3, r3, #1
 8002134:	6593      	str	r3, [r2, #88]	; 0x58
 8002136:	4b06      	ldr	r3, [pc, #24]	; (8002150 <HAL_TIM_Base_MspInit+0x38>)
 8002138:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800213a:	f003 0301 	and.w	r3, r3, #1
 800213e:	60fb      	str	r3, [r7, #12]
 8002140:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002142:	bf00      	nop
 8002144:	3714      	adds	r7, #20
 8002146:	46bd      	mov	sp, r7
 8002148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214c:	4770      	bx	lr
 800214e:	bf00      	nop
 8002150:	40021000 	.word	0x40021000

08002154 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b0ac      	sub	sp, #176	; 0xb0
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800215c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002160:	2200      	movs	r2, #0
 8002162:	601a      	str	r2, [r3, #0]
 8002164:	605a      	str	r2, [r3, #4]
 8002166:	609a      	str	r2, [r3, #8]
 8002168:	60da      	str	r2, [r3, #12]
 800216a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800216c:	f107 0314 	add.w	r3, r7, #20
 8002170:	2288      	movs	r2, #136	; 0x88
 8002172:	2100      	movs	r1, #0
 8002174:	4618      	mov	r0, r3
 8002176:	f00c fa17 	bl	800e5a8 <memset>
  if(huart->Instance==USART2)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4a25      	ldr	r2, [pc, #148]	; (8002214 <HAL_UART_MspInit+0xc0>)
 8002180:	4293      	cmp	r3, r2
 8002182:	d143      	bne.n	800220c <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002184:	2302      	movs	r3, #2
 8002186:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002188:	2300      	movs	r3, #0
 800218a:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800218c:	f107 0314 	add.w	r3, r7, #20
 8002190:	4618      	mov	r0, r3
 8002192:	f002 ffbb 	bl	800510c <HAL_RCCEx_PeriphCLKConfig>
 8002196:	4603      	mov	r3, r0
 8002198:	2b00      	cmp	r3, #0
 800219a:	d001      	beq.n	80021a0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800219c:	f7ff fec6 	bl	8001f2c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80021a0:	4b1d      	ldr	r3, [pc, #116]	; (8002218 <HAL_UART_MspInit+0xc4>)
 80021a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021a4:	4a1c      	ldr	r2, [pc, #112]	; (8002218 <HAL_UART_MspInit+0xc4>)
 80021a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021aa:	6593      	str	r3, [r2, #88]	; 0x58
 80021ac:	4b1a      	ldr	r3, [pc, #104]	; (8002218 <HAL_UART_MspInit+0xc4>)
 80021ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021b4:	613b      	str	r3, [r7, #16]
 80021b6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021b8:	4b17      	ldr	r3, [pc, #92]	; (8002218 <HAL_UART_MspInit+0xc4>)
 80021ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021bc:	4a16      	ldr	r2, [pc, #88]	; (8002218 <HAL_UART_MspInit+0xc4>)
 80021be:	f043 0301 	orr.w	r3, r3, #1
 80021c2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80021c4:	4b14      	ldr	r3, [pc, #80]	; (8002218 <HAL_UART_MspInit+0xc4>)
 80021c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021c8:	f003 0301 	and.w	r3, r3, #1
 80021cc:	60fb      	str	r3, [r7, #12]
 80021ce:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80021d0:	230c      	movs	r3, #12
 80021d2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021d6:	2302      	movs	r3, #2
 80021d8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021dc:	2300      	movs	r3, #0
 80021de:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021e2:	2303      	movs	r3, #3
 80021e4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80021e8:	2307      	movs	r3, #7
 80021ea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021ee:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80021f2:	4619      	mov	r1, r3
 80021f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021f8:	f001 f89e 	bl	8003338 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80021fc:	2200      	movs	r2, #0
 80021fe:	2100      	movs	r1, #0
 8002200:	2026      	movs	r0, #38	; 0x26
 8002202:	f000 fad2 	bl	80027aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002206:	2026      	movs	r0, #38	; 0x26
 8002208:	f000 faeb 	bl	80027e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800220c:	bf00      	nop
 800220e:	37b0      	adds	r7, #176	; 0xb0
 8002210:	46bd      	mov	sp, r7
 8002212:	bd80      	pop	{r7, pc}
 8002214:	40004400 	.word	0x40004400
 8002218:	40021000 	.word	0x40021000

0800221c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800221c:	b480      	push	{r7}
 800221e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002220:	e7fe      	b.n	8002220 <NMI_Handler+0x4>

08002222 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002222:	b480      	push	{r7}
 8002224:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002226:	e7fe      	b.n	8002226 <HardFault_Handler+0x4>

08002228 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002228:	b480      	push	{r7}
 800222a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800222c:	e7fe      	b.n	800222c <MemManage_Handler+0x4>

0800222e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800222e:	b480      	push	{r7}
 8002230:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002232:	e7fe      	b.n	8002232 <BusFault_Handler+0x4>

08002234 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002234:	b480      	push	{r7}
 8002236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002238:	e7fe      	b.n	8002238 <UsageFault_Handler+0x4>

0800223a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800223a:	b480      	push	{r7}
 800223c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800223e:	bf00      	nop
 8002240:	46bd      	mov	sp, r7
 8002242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002246:	4770      	bx	lr

08002248 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002248:	b480      	push	{r7}
 800224a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800224c:	bf00      	nop
 800224e:	46bd      	mov	sp, r7
 8002250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002254:	4770      	bx	lr

08002256 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002256:	b480      	push	{r7}
 8002258:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800225a:	bf00      	nop
 800225c:	46bd      	mov	sp, r7
 800225e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002262:	4770      	bx	lr

08002264 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002268:	f000 f980 	bl	800256c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800226c:	bf00      	nop
 800226e:	bd80      	pop	{r7, pc}

08002270 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch1);
 8002274:	4802      	ldr	r0, [pc, #8]	; (8002280 <DMA1_Channel3_IRQHandler+0x10>)
 8002276:	f000 ff80 	bl	800317a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800227a:	bf00      	nop
 800227c:	bd80      	pop	{r7, pc}
 800227e:	bf00      	nop
 8002280:	20000250 	.word	0x20000250

08002284 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002288:	4802      	ldr	r0, [pc, #8]	; (8002294 <USART2_IRQHandler+0x10>)
 800228a:	f004 f879 	bl	8006380 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800228e:	bf00      	nop
 8002290:	bd80      	pop	{r7, pc}
 8002292:	bf00      	nop
 8002294:	20000338 	.word	0x20000338

08002298 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 800229c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80022a0:	f001 fa26 	bl	80036f0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80022a4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80022a8:	f001 fa22 	bl	80036f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80022ac:	bf00      	nop
 80022ae:	bd80      	pop	{r7, pc}

080022b0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80022b0:	b480      	push	{r7}
 80022b2:	af00      	add	r7, sp, #0
	return 1;
 80022b4:	2301      	movs	r3, #1
}
 80022b6:	4618      	mov	r0, r3
 80022b8:	46bd      	mov	sp, r7
 80022ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022be:	4770      	bx	lr

080022c0 <_kill>:

int _kill(int pid, int sig)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b082      	sub	sp, #8
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
 80022c8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80022ca:	f00c f935 	bl	800e538 <__errno>
 80022ce:	4603      	mov	r3, r0
 80022d0:	2216      	movs	r2, #22
 80022d2:	601a      	str	r2, [r3, #0]
	return -1;
 80022d4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80022d8:	4618      	mov	r0, r3
 80022da:	3708      	adds	r7, #8
 80022dc:	46bd      	mov	sp, r7
 80022de:	bd80      	pop	{r7, pc}

080022e0 <_exit>:

void _exit (int status)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b082      	sub	sp, #8
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80022e8:	f04f 31ff 	mov.w	r1, #4294967295
 80022ec:	6878      	ldr	r0, [r7, #4]
 80022ee:	f7ff ffe7 	bl	80022c0 <_kill>
	while (1) {}		/* Make sure we hang here */
 80022f2:	e7fe      	b.n	80022f2 <_exit+0x12>

080022f4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b086      	sub	sp, #24
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	60f8      	str	r0, [r7, #12]
 80022fc:	60b9      	str	r1, [r7, #8]
 80022fe:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002300:	2300      	movs	r3, #0
 8002302:	617b      	str	r3, [r7, #20]
 8002304:	e00a      	b.n	800231c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002306:	f3af 8000 	nop.w
 800230a:	4601      	mov	r1, r0
 800230c:	68bb      	ldr	r3, [r7, #8]
 800230e:	1c5a      	adds	r2, r3, #1
 8002310:	60ba      	str	r2, [r7, #8]
 8002312:	b2ca      	uxtb	r2, r1
 8002314:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002316:	697b      	ldr	r3, [r7, #20]
 8002318:	3301      	adds	r3, #1
 800231a:	617b      	str	r3, [r7, #20]
 800231c:	697a      	ldr	r2, [r7, #20]
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	429a      	cmp	r2, r3
 8002322:	dbf0      	blt.n	8002306 <_read+0x12>
	}

return len;
 8002324:	687b      	ldr	r3, [r7, #4]
}
 8002326:	4618      	mov	r0, r3
 8002328:	3718      	adds	r7, #24
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}

0800232e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800232e:	b580      	push	{r7, lr}
 8002330:	b086      	sub	sp, #24
 8002332:	af00      	add	r7, sp, #0
 8002334:	60f8      	str	r0, [r7, #12]
 8002336:	60b9      	str	r1, [r7, #8]
 8002338:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800233a:	2300      	movs	r3, #0
 800233c:	617b      	str	r3, [r7, #20]
 800233e:	e009      	b.n	8002354 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002340:	68bb      	ldr	r3, [r7, #8]
 8002342:	1c5a      	adds	r2, r3, #1
 8002344:	60ba      	str	r2, [r7, #8]
 8002346:	781b      	ldrb	r3, [r3, #0]
 8002348:	4618      	mov	r0, r3
 800234a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800234e:	697b      	ldr	r3, [r7, #20]
 8002350:	3301      	adds	r3, #1
 8002352:	617b      	str	r3, [r7, #20]
 8002354:	697a      	ldr	r2, [r7, #20]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	429a      	cmp	r2, r3
 800235a:	dbf1      	blt.n	8002340 <_write+0x12>
	}
	return len;
 800235c:	687b      	ldr	r3, [r7, #4]
}
 800235e:	4618      	mov	r0, r3
 8002360:	3718      	adds	r7, #24
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}

08002366 <_close>:

int _close(int file)
{
 8002366:	b480      	push	{r7}
 8002368:	b083      	sub	sp, #12
 800236a:	af00      	add	r7, sp, #0
 800236c:	6078      	str	r0, [r7, #4]
	return -1;
 800236e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002372:	4618      	mov	r0, r3
 8002374:	370c      	adds	r7, #12
 8002376:	46bd      	mov	sp, r7
 8002378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237c:	4770      	bx	lr

0800237e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800237e:	b480      	push	{r7}
 8002380:	b083      	sub	sp, #12
 8002382:	af00      	add	r7, sp, #0
 8002384:	6078      	str	r0, [r7, #4]
 8002386:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800238e:	605a      	str	r2, [r3, #4]
	return 0;
 8002390:	2300      	movs	r3, #0
}
 8002392:	4618      	mov	r0, r3
 8002394:	370c      	adds	r7, #12
 8002396:	46bd      	mov	sp, r7
 8002398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239c:	4770      	bx	lr

0800239e <_isatty>:

int _isatty(int file)
{
 800239e:	b480      	push	{r7}
 80023a0:	b083      	sub	sp, #12
 80023a2:	af00      	add	r7, sp, #0
 80023a4:	6078      	str	r0, [r7, #4]
	return 1;
 80023a6:	2301      	movs	r3, #1
}
 80023a8:	4618      	mov	r0, r3
 80023aa:	370c      	adds	r7, #12
 80023ac:	46bd      	mov	sp, r7
 80023ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b2:	4770      	bx	lr

080023b4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80023b4:	b480      	push	{r7}
 80023b6:	b085      	sub	sp, #20
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	60f8      	str	r0, [r7, #12]
 80023bc:	60b9      	str	r1, [r7, #8]
 80023be:	607a      	str	r2, [r7, #4]
	return 0;
 80023c0:	2300      	movs	r3, #0
}
 80023c2:	4618      	mov	r0, r3
 80023c4:	3714      	adds	r7, #20
 80023c6:	46bd      	mov	sp, r7
 80023c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023cc:	4770      	bx	lr
	...

080023d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b086      	sub	sp, #24
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80023d8:	4a14      	ldr	r2, [pc, #80]	; (800242c <_sbrk+0x5c>)
 80023da:	4b15      	ldr	r3, [pc, #84]	; (8002430 <_sbrk+0x60>)
 80023dc:	1ad3      	subs	r3, r2, r3
 80023de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80023e0:	697b      	ldr	r3, [r7, #20]
 80023e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80023e4:	4b13      	ldr	r3, [pc, #76]	; (8002434 <_sbrk+0x64>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d102      	bne.n	80023f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80023ec:	4b11      	ldr	r3, [pc, #68]	; (8002434 <_sbrk+0x64>)
 80023ee:	4a12      	ldr	r2, [pc, #72]	; (8002438 <_sbrk+0x68>)
 80023f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80023f2:	4b10      	ldr	r3, [pc, #64]	; (8002434 <_sbrk+0x64>)
 80023f4:	681a      	ldr	r2, [r3, #0]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	4413      	add	r3, r2
 80023fa:	693a      	ldr	r2, [r7, #16]
 80023fc:	429a      	cmp	r2, r3
 80023fe:	d207      	bcs.n	8002410 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002400:	f00c f89a 	bl	800e538 <__errno>
 8002404:	4603      	mov	r3, r0
 8002406:	220c      	movs	r2, #12
 8002408:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800240a:	f04f 33ff 	mov.w	r3, #4294967295
 800240e:	e009      	b.n	8002424 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002410:	4b08      	ldr	r3, [pc, #32]	; (8002434 <_sbrk+0x64>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002416:	4b07      	ldr	r3, [pc, #28]	; (8002434 <_sbrk+0x64>)
 8002418:	681a      	ldr	r2, [r3, #0]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	4413      	add	r3, r2
 800241e:	4a05      	ldr	r2, [pc, #20]	; (8002434 <_sbrk+0x64>)
 8002420:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002422:	68fb      	ldr	r3, [r7, #12]
}
 8002424:	4618      	mov	r0, r3
 8002426:	3718      	adds	r7, #24
 8002428:	46bd      	mov	sp, r7
 800242a:	bd80      	pop	{r7, pc}
 800242c:	20018000 	.word	0x20018000
 8002430:	00000400 	.word	0x00000400
 8002434:	20000e38 	.word	0x20000e38
 8002438:	20000f50 	.word	0x20000f50

0800243c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800243c:	b480      	push	{r7}
 800243e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002440:	4b06      	ldr	r3, [pc, #24]	; (800245c <SystemInit+0x20>)
 8002442:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002446:	4a05      	ldr	r2, [pc, #20]	; (800245c <SystemInit+0x20>)
 8002448:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800244c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002450:	bf00      	nop
 8002452:	46bd      	mov	sp, r7
 8002454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002458:	4770      	bx	lr
 800245a:	bf00      	nop
 800245c:	e000ed00 	.word	0xe000ed00

08002460 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002460:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002498 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002464:	f7ff ffea 	bl	800243c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002468:	480c      	ldr	r0, [pc, #48]	; (800249c <LoopForever+0x6>)
  ldr r1, =_edata
 800246a:	490d      	ldr	r1, [pc, #52]	; (80024a0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800246c:	4a0d      	ldr	r2, [pc, #52]	; (80024a4 <LoopForever+0xe>)
  movs r3, #0
 800246e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002470:	e002      	b.n	8002478 <LoopCopyDataInit>

08002472 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002472:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002474:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002476:	3304      	adds	r3, #4

08002478 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002478:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800247a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800247c:	d3f9      	bcc.n	8002472 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800247e:	4a0a      	ldr	r2, [pc, #40]	; (80024a8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002480:	4c0a      	ldr	r4, [pc, #40]	; (80024ac <LoopForever+0x16>)
  movs r3, #0
 8002482:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002484:	e001      	b.n	800248a <LoopFillZerobss>

08002486 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002486:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002488:	3204      	adds	r2, #4

0800248a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800248a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800248c:	d3fb      	bcc.n	8002486 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800248e:	f00c f859 	bl	800e544 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002492:	f7ff f915 	bl	80016c0 <main>

08002496 <LoopForever>:

LoopForever:
    b LoopForever
 8002496:	e7fe      	b.n	8002496 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002498:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800249c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80024a0:	20000220 	.word	0x20000220
  ldr r2, =_sidata
 80024a4:	080139c0 	.word	0x080139c0
  ldr r2, =_sbss
 80024a8:	20000220 	.word	0x20000220
  ldr r4, =_ebss
 80024ac:	20000f50 	.word	0x20000f50

080024b0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80024b0:	e7fe      	b.n	80024b0 <ADC1_2_IRQHandler>
	...

080024b4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b082      	sub	sp, #8
 80024b8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80024ba:	2300      	movs	r3, #0
 80024bc:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80024be:	4b0c      	ldr	r3, [pc, #48]	; (80024f0 <HAL_Init+0x3c>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4a0b      	ldr	r2, [pc, #44]	; (80024f0 <HAL_Init+0x3c>)
 80024c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024c8:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024ca:	2003      	movs	r0, #3
 80024cc:	f000 f962 	bl	8002794 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80024d0:	2000      	movs	r0, #0
 80024d2:	f000 f80f 	bl	80024f4 <HAL_InitTick>
 80024d6:	4603      	mov	r3, r0
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d002      	beq.n	80024e2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80024dc:	2301      	movs	r3, #1
 80024de:	71fb      	strb	r3, [r7, #7]
 80024e0:	e001      	b.n	80024e6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80024e2:	f7ff fd29 	bl	8001f38 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80024e6:	79fb      	ldrb	r3, [r7, #7]
}
 80024e8:	4618      	mov	r0, r3
 80024ea:	3708      	adds	r7, #8
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bd80      	pop	{r7, pc}
 80024f0:	40022000 	.word	0x40022000

080024f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b084      	sub	sp, #16
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80024fc:	2300      	movs	r3, #0
 80024fe:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002500:	4b17      	ldr	r3, [pc, #92]	; (8002560 <HAL_InitTick+0x6c>)
 8002502:	781b      	ldrb	r3, [r3, #0]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d023      	beq.n	8002550 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002508:	4b16      	ldr	r3, [pc, #88]	; (8002564 <HAL_InitTick+0x70>)
 800250a:	681a      	ldr	r2, [r3, #0]
 800250c:	4b14      	ldr	r3, [pc, #80]	; (8002560 <HAL_InitTick+0x6c>)
 800250e:	781b      	ldrb	r3, [r3, #0]
 8002510:	4619      	mov	r1, r3
 8002512:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002516:	fbb3 f3f1 	udiv	r3, r3, r1
 800251a:	fbb2 f3f3 	udiv	r3, r2, r3
 800251e:	4618      	mov	r0, r3
 8002520:	f000 f96d 	bl	80027fe <HAL_SYSTICK_Config>
 8002524:	4603      	mov	r3, r0
 8002526:	2b00      	cmp	r3, #0
 8002528:	d10f      	bne.n	800254a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2b0f      	cmp	r3, #15
 800252e:	d809      	bhi.n	8002544 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002530:	2200      	movs	r2, #0
 8002532:	6879      	ldr	r1, [r7, #4]
 8002534:	f04f 30ff 	mov.w	r0, #4294967295
 8002538:	f000 f937 	bl	80027aa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800253c:	4a0a      	ldr	r2, [pc, #40]	; (8002568 <HAL_InitTick+0x74>)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6013      	str	r3, [r2, #0]
 8002542:	e007      	b.n	8002554 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002544:	2301      	movs	r3, #1
 8002546:	73fb      	strb	r3, [r7, #15]
 8002548:	e004      	b.n	8002554 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800254a:	2301      	movs	r3, #1
 800254c:	73fb      	strb	r3, [r7, #15]
 800254e:	e001      	b.n	8002554 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002550:	2301      	movs	r3, #1
 8002552:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002554:	7bfb      	ldrb	r3, [r7, #15]
}
 8002556:	4618      	mov	r0, r3
 8002558:	3710      	adds	r7, #16
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}
 800255e:	bf00      	nop
 8002560:	2000001c 	.word	0x2000001c
 8002564:	20000014 	.word	0x20000014
 8002568:	20000018 	.word	0x20000018

0800256c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800256c:	b480      	push	{r7}
 800256e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002570:	4b06      	ldr	r3, [pc, #24]	; (800258c <HAL_IncTick+0x20>)
 8002572:	781b      	ldrb	r3, [r3, #0]
 8002574:	461a      	mov	r2, r3
 8002576:	4b06      	ldr	r3, [pc, #24]	; (8002590 <HAL_IncTick+0x24>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4413      	add	r3, r2
 800257c:	4a04      	ldr	r2, [pc, #16]	; (8002590 <HAL_IncTick+0x24>)
 800257e:	6013      	str	r3, [r2, #0]
}
 8002580:	bf00      	nop
 8002582:	46bd      	mov	sp, r7
 8002584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002588:	4770      	bx	lr
 800258a:	bf00      	nop
 800258c:	2000001c 	.word	0x2000001c
 8002590:	20000e3c 	.word	0x20000e3c

08002594 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002594:	b480      	push	{r7}
 8002596:	af00      	add	r7, sp, #0
  return uwTick;
 8002598:	4b03      	ldr	r3, [pc, #12]	; (80025a8 <HAL_GetTick+0x14>)
 800259a:	681b      	ldr	r3, [r3, #0]
}
 800259c:	4618      	mov	r0, r3
 800259e:	46bd      	mov	sp, r7
 80025a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a4:	4770      	bx	lr
 80025a6:	bf00      	nop
 80025a8:	20000e3c 	.word	0x20000e3c

080025ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b084      	sub	sp, #16
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80025b4:	f7ff ffee 	bl	8002594 <HAL_GetTick>
 80025b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025c4:	d005      	beq.n	80025d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80025c6:	4b0a      	ldr	r3, [pc, #40]	; (80025f0 <HAL_Delay+0x44>)
 80025c8:	781b      	ldrb	r3, [r3, #0]
 80025ca:	461a      	mov	r2, r3
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	4413      	add	r3, r2
 80025d0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80025d2:	bf00      	nop
 80025d4:	f7ff ffde 	bl	8002594 <HAL_GetTick>
 80025d8:	4602      	mov	r2, r0
 80025da:	68bb      	ldr	r3, [r7, #8]
 80025dc:	1ad3      	subs	r3, r2, r3
 80025de:	68fa      	ldr	r2, [r7, #12]
 80025e0:	429a      	cmp	r2, r3
 80025e2:	d8f7      	bhi.n	80025d4 <HAL_Delay+0x28>
  {
  }
}
 80025e4:	bf00      	nop
 80025e6:	bf00      	nop
 80025e8:	3710      	adds	r7, #16
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}
 80025ee:	bf00      	nop
 80025f0:	2000001c 	.word	0x2000001c

080025f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025f4:	b480      	push	{r7}
 80025f6:	b085      	sub	sp, #20
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	f003 0307 	and.w	r3, r3, #7
 8002602:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002604:	4b0c      	ldr	r3, [pc, #48]	; (8002638 <__NVIC_SetPriorityGrouping+0x44>)
 8002606:	68db      	ldr	r3, [r3, #12]
 8002608:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800260a:	68ba      	ldr	r2, [r7, #8]
 800260c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002610:	4013      	ands	r3, r2
 8002612:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002618:	68bb      	ldr	r3, [r7, #8]
 800261a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800261c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002620:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002624:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002626:	4a04      	ldr	r2, [pc, #16]	; (8002638 <__NVIC_SetPriorityGrouping+0x44>)
 8002628:	68bb      	ldr	r3, [r7, #8]
 800262a:	60d3      	str	r3, [r2, #12]
}
 800262c:	bf00      	nop
 800262e:	3714      	adds	r7, #20
 8002630:	46bd      	mov	sp, r7
 8002632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002636:	4770      	bx	lr
 8002638:	e000ed00 	.word	0xe000ed00

0800263c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800263c:	b480      	push	{r7}
 800263e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002640:	4b04      	ldr	r3, [pc, #16]	; (8002654 <__NVIC_GetPriorityGrouping+0x18>)
 8002642:	68db      	ldr	r3, [r3, #12]
 8002644:	0a1b      	lsrs	r3, r3, #8
 8002646:	f003 0307 	and.w	r3, r3, #7
}
 800264a:	4618      	mov	r0, r3
 800264c:	46bd      	mov	sp, r7
 800264e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002652:	4770      	bx	lr
 8002654:	e000ed00 	.word	0xe000ed00

08002658 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002658:	b480      	push	{r7}
 800265a:	b083      	sub	sp, #12
 800265c:	af00      	add	r7, sp, #0
 800265e:	4603      	mov	r3, r0
 8002660:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002662:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002666:	2b00      	cmp	r3, #0
 8002668:	db0b      	blt.n	8002682 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800266a:	79fb      	ldrb	r3, [r7, #7]
 800266c:	f003 021f 	and.w	r2, r3, #31
 8002670:	4907      	ldr	r1, [pc, #28]	; (8002690 <__NVIC_EnableIRQ+0x38>)
 8002672:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002676:	095b      	lsrs	r3, r3, #5
 8002678:	2001      	movs	r0, #1
 800267a:	fa00 f202 	lsl.w	r2, r0, r2
 800267e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002682:	bf00      	nop
 8002684:	370c      	adds	r7, #12
 8002686:	46bd      	mov	sp, r7
 8002688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268c:	4770      	bx	lr
 800268e:	bf00      	nop
 8002690:	e000e100 	.word	0xe000e100

08002694 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002694:	b480      	push	{r7}
 8002696:	b083      	sub	sp, #12
 8002698:	af00      	add	r7, sp, #0
 800269a:	4603      	mov	r3, r0
 800269c:	6039      	str	r1, [r7, #0]
 800269e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	db0a      	blt.n	80026be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	b2da      	uxtb	r2, r3
 80026ac:	490c      	ldr	r1, [pc, #48]	; (80026e0 <__NVIC_SetPriority+0x4c>)
 80026ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026b2:	0112      	lsls	r2, r2, #4
 80026b4:	b2d2      	uxtb	r2, r2
 80026b6:	440b      	add	r3, r1
 80026b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80026bc:	e00a      	b.n	80026d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	b2da      	uxtb	r2, r3
 80026c2:	4908      	ldr	r1, [pc, #32]	; (80026e4 <__NVIC_SetPriority+0x50>)
 80026c4:	79fb      	ldrb	r3, [r7, #7]
 80026c6:	f003 030f 	and.w	r3, r3, #15
 80026ca:	3b04      	subs	r3, #4
 80026cc:	0112      	lsls	r2, r2, #4
 80026ce:	b2d2      	uxtb	r2, r2
 80026d0:	440b      	add	r3, r1
 80026d2:	761a      	strb	r2, [r3, #24]
}
 80026d4:	bf00      	nop
 80026d6:	370c      	adds	r7, #12
 80026d8:	46bd      	mov	sp, r7
 80026da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026de:	4770      	bx	lr
 80026e0:	e000e100 	.word	0xe000e100
 80026e4:	e000ed00 	.word	0xe000ed00

080026e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026e8:	b480      	push	{r7}
 80026ea:	b089      	sub	sp, #36	; 0x24
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	60f8      	str	r0, [r7, #12]
 80026f0:	60b9      	str	r1, [r7, #8]
 80026f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	f003 0307 	and.w	r3, r3, #7
 80026fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026fc:	69fb      	ldr	r3, [r7, #28]
 80026fe:	f1c3 0307 	rsb	r3, r3, #7
 8002702:	2b04      	cmp	r3, #4
 8002704:	bf28      	it	cs
 8002706:	2304      	movcs	r3, #4
 8002708:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800270a:	69fb      	ldr	r3, [r7, #28]
 800270c:	3304      	adds	r3, #4
 800270e:	2b06      	cmp	r3, #6
 8002710:	d902      	bls.n	8002718 <NVIC_EncodePriority+0x30>
 8002712:	69fb      	ldr	r3, [r7, #28]
 8002714:	3b03      	subs	r3, #3
 8002716:	e000      	b.n	800271a <NVIC_EncodePriority+0x32>
 8002718:	2300      	movs	r3, #0
 800271a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800271c:	f04f 32ff 	mov.w	r2, #4294967295
 8002720:	69bb      	ldr	r3, [r7, #24]
 8002722:	fa02 f303 	lsl.w	r3, r2, r3
 8002726:	43da      	mvns	r2, r3
 8002728:	68bb      	ldr	r3, [r7, #8]
 800272a:	401a      	ands	r2, r3
 800272c:	697b      	ldr	r3, [r7, #20]
 800272e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002730:	f04f 31ff 	mov.w	r1, #4294967295
 8002734:	697b      	ldr	r3, [r7, #20]
 8002736:	fa01 f303 	lsl.w	r3, r1, r3
 800273a:	43d9      	mvns	r1, r3
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002740:	4313      	orrs	r3, r2
         );
}
 8002742:	4618      	mov	r0, r3
 8002744:	3724      	adds	r7, #36	; 0x24
 8002746:	46bd      	mov	sp, r7
 8002748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274c:	4770      	bx	lr
	...

08002750 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b082      	sub	sp, #8
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	3b01      	subs	r3, #1
 800275c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002760:	d301      	bcc.n	8002766 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002762:	2301      	movs	r3, #1
 8002764:	e00f      	b.n	8002786 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002766:	4a0a      	ldr	r2, [pc, #40]	; (8002790 <SysTick_Config+0x40>)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	3b01      	subs	r3, #1
 800276c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800276e:	210f      	movs	r1, #15
 8002770:	f04f 30ff 	mov.w	r0, #4294967295
 8002774:	f7ff ff8e 	bl	8002694 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002778:	4b05      	ldr	r3, [pc, #20]	; (8002790 <SysTick_Config+0x40>)
 800277a:	2200      	movs	r2, #0
 800277c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800277e:	4b04      	ldr	r3, [pc, #16]	; (8002790 <SysTick_Config+0x40>)
 8002780:	2207      	movs	r2, #7
 8002782:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002784:	2300      	movs	r3, #0
}
 8002786:	4618      	mov	r0, r3
 8002788:	3708      	adds	r7, #8
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}
 800278e:	bf00      	nop
 8002790:	e000e010 	.word	0xe000e010

08002794 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b082      	sub	sp, #8
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800279c:	6878      	ldr	r0, [r7, #4]
 800279e:	f7ff ff29 	bl	80025f4 <__NVIC_SetPriorityGrouping>
}
 80027a2:	bf00      	nop
 80027a4:	3708      	adds	r7, #8
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}

080027aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027aa:	b580      	push	{r7, lr}
 80027ac:	b086      	sub	sp, #24
 80027ae:	af00      	add	r7, sp, #0
 80027b0:	4603      	mov	r3, r0
 80027b2:	60b9      	str	r1, [r7, #8]
 80027b4:	607a      	str	r2, [r7, #4]
 80027b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80027b8:	2300      	movs	r3, #0
 80027ba:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80027bc:	f7ff ff3e 	bl	800263c <__NVIC_GetPriorityGrouping>
 80027c0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027c2:	687a      	ldr	r2, [r7, #4]
 80027c4:	68b9      	ldr	r1, [r7, #8]
 80027c6:	6978      	ldr	r0, [r7, #20]
 80027c8:	f7ff ff8e 	bl	80026e8 <NVIC_EncodePriority>
 80027cc:	4602      	mov	r2, r0
 80027ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027d2:	4611      	mov	r1, r2
 80027d4:	4618      	mov	r0, r3
 80027d6:	f7ff ff5d 	bl	8002694 <__NVIC_SetPriority>
}
 80027da:	bf00      	nop
 80027dc:	3718      	adds	r7, #24
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}

080027e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027e2:	b580      	push	{r7, lr}
 80027e4:	b082      	sub	sp, #8
 80027e6:	af00      	add	r7, sp, #0
 80027e8:	4603      	mov	r3, r0
 80027ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027f0:	4618      	mov	r0, r3
 80027f2:	f7ff ff31 	bl	8002658 <__NVIC_EnableIRQ>
}
 80027f6:	bf00      	nop
 80027f8:	3708      	adds	r7, #8
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}

080027fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027fe:	b580      	push	{r7, lr}
 8002800:	b082      	sub	sp, #8
 8002802:	af00      	add	r7, sp, #0
 8002804:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002806:	6878      	ldr	r0, [r7, #4]
 8002808:	f7ff ffa2 	bl	8002750 <SysTick_Config>
 800280c:	4603      	mov	r3, r0
}
 800280e:	4618      	mov	r0, r3
 8002810:	3708      	adds	r7, #8
 8002812:	46bd      	mov	sp, r7
 8002814:	bd80      	pop	{r7, pc}

08002816 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002816:	b580      	push	{r7, lr}
 8002818:	b082      	sub	sp, #8
 800281a:	af00      	add	r7, sp, #0
 800281c:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d101      	bne.n	8002828 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8002824:	2301      	movs	r3, #1
 8002826:	e014      	b.n	8002852 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	791b      	ldrb	r3, [r3, #4]
 800282c:	b2db      	uxtb	r3, r3
 800282e:	2b00      	cmp	r3, #0
 8002830:	d105      	bne.n	800283e <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2200      	movs	r2, #0
 8002836:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002838:	6878      	ldr	r0, [r7, #4]
 800283a:	f7ff fba1 	bl	8001f80 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2202      	movs	r2, #2
 8002842:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2200      	movs	r2, #0
 8002848:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2201      	movs	r2, #1
 800284e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002850:	2300      	movs	r3, #0
}
 8002852:	4618      	mov	r0, r3
 8002854:	3708      	adds	r7, #8
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}
	...

0800285c <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b086      	sub	sp, #24
 8002860:	af00      	add	r7, sp, #0
 8002862:	60f8      	str	r0, [r7, #12]
 8002864:	60b9      	str	r1, [r7, #8]
 8002866:	607a      	str	r2, [r7, #4]
 8002868:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 800286a:	2300      	movs	r3, #0
 800286c:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	795b      	ldrb	r3, [r3, #5]
 8002872:	2b01      	cmp	r3, #1
 8002874:	d101      	bne.n	800287a <HAL_DAC_Start_DMA+0x1e>
 8002876:	2302      	movs	r3, #2
 8002878:	e0ab      	b.n	80029d2 <HAL_DAC_Start_DMA+0x176>
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	2201      	movs	r2, #1
 800287e:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	2202      	movs	r2, #2
 8002884:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8002886:	68bb      	ldr	r3, [r7, #8]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d12f      	bne.n	80028ec <HAL_DAC_Start_DMA+0x90>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	689b      	ldr	r3, [r3, #8]
 8002890:	4a52      	ldr	r2, [pc, #328]	; (80029dc <HAL_DAC_Start_DMA+0x180>)
 8002892:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	689b      	ldr	r3, [r3, #8]
 8002898:	4a51      	ldr	r2, [pc, #324]	; (80029e0 <HAL_DAC_Start_DMA+0x184>)
 800289a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	689b      	ldr	r3, [r3, #8]
 80028a0:	4a50      	ldr	r2, [pc, #320]	; (80029e4 <HAL_DAC_Start_DMA+0x188>)
 80028a2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	681a      	ldr	r2, [r3, #0]
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80028b2:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 80028b4:	6a3b      	ldr	r3, [r7, #32]
 80028b6:	2b08      	cmp	r3, #8
 80028b8:	d013      	beq.n	80028e2 <HAL_DAC_Start_DMA+0x86>
 80028ba:	6a3b      	ldr	r3, [r7, #32]
 80028bc:	2b08      	cmp	r3, #8
 80028be:	d845      	bhi.n	800294c <HAL_DAC_Start_DMA+0xf0>
 80028c0:	6a3b      	ldr	r3, [r7, #32]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d003      	beq.n	80028ce <HAL_DAC_Start_DMA+0x72>
 80028c6:	6a3b      	ldr	r3, [r7, #32]
 80028c8:	2b04      	cmp	r3, #4
 80028ca:	d005      	beq.n	80028d8 <HAL_DAC_Start_DMA+0x7c>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 80028cc:	e03e      	b.n	800294c <HAL_DAC_Start_DMA+0xf0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	3308      	adds	r3, #8
 80028d4:	613b      	str	r3, [r7, #16]
        break;
 80028d6:	e03c      	b.n	8002952 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	330c      	adds	r3, #12
 80028de:	613b      	str	r3, [r7, #16]
        break;
 80028e0:	e037      	b.n	8002952 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	3310      	adds	r3, #16
 80028e8:	613b      	str	r3, [r7, #16]
        break;
 80028ea:	e032      	b.n	8002952 <HAL_DAC_Start_DMA+0xf6>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	68db      	ldr	r3, [r3, #12]
 80028f0:	4a3d      	ldr	r2, [pc, #244]	; (80029e8 <HAL_DAC_Start_DMA+0x18c>)
 80028f2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	68db      	ldr	r3, [r3, #12]
 80028f8:	4a3c      	ldr	r2, [pc, #240]	; (80029ec <HAL_DAC_Start_DMA+0x190>)
 80028fa:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	68db      	ldr	r3, [r3, #12]
 8002900:	4a3b      	ldr	r2, [pc, #236]	; (80029f0 <HAL_DAC_Start_DMA+0x194>)
 8002902:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	681a      	ldr	r2, [r3, #0]
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002912:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8002914:	6a3b      	ldr	r3, [r7, #32]
 8002916:	2b08      	cmp	r3, #8
 8002918:	d013      	beq.n	8002942 <HAL_DAC_Start_DMA+0xe6>
 800291a:	6a3b      	ldr	r3, [r7, #32]
 800291c:	2b08      	cmp	r3, #8
 800291e:	d817      	bhi.n	8002950 <HAL_DAC_Start_DMA+0xf4>
 8002920:	6a3b      	ldr	r3, [r7, #32]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d003      	beq.n	800292e <HAL_DAC_Start_DMA+0xd2>
 8002926:	6a3b      	ldr	r3, [r7, #32]
 8002928:	2b04      	cmp	r3, #4
 800292a:	d005      	beq.n	8002938 <HAL_DAC_Start_DMA+0xdc>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 800292c:	e010      	b.n	8002950 <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	3314      	adds	r3, #20
 8002934:	613b      	str	r3, [r7, #16]
        break;
 8002936:	e00c      	b.n	8002952 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	3318      	adds	r3, #24
 800293e:	613b      	str	r3, [r7, #16]
        break;
 8002940:	e007      	b.n	8002952 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	331c      	adds	r3, #28
 8002948:	613b      	str	r3, [r7, #16]
        break;
 800294a:	e002      	b.n	8002952 <HAL_DAC_Start_DMA+0xf6>
        break;
 800294c:	bf00      	nop
 800294e:	e000      	b.n	8002952 <HAL_DAC_Start_DMA+0xf6>
        break;
 8002950:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 8002952:	68bb      	ldr	r3, [r7, #8]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d111      	bne.n	800297c <HAL_DAC_Start_DMA+0x120>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	681a      	ldr	r2, [r3, #0]
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002966:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	6898      	ldr	r0, [r3, #8]
 800296c:	6879      	ldr	r1, [r7, #4]
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	693a      	ldr	r2, [r7, #16]
 8002972:	f000 fb23 	bl	8002fbc <HAL_DMA_Start_IT>
 8002976:	4603      	mov	r3, r0
 8002978:	75fb      	strb	r3, [r7, #23]
 800297a:	e010      	b.n	800299e <HAL_DAC_Start_DMA+0x142>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	681a      	ldr	r2, [r3, #0]
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800298a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	68d8      	ldr	r0, [r3, #12]
 8002990:	6879      	ldr	r1, [r7, #4]
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	693a      	ldr	r2, [r7, #16]
 8002996:	f000 fb11 	bl	8002fbc <HAL_DMA_Start_IT>
 800299a:	4603      	mov	r3, r0
 800299c:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	2200      	movs	r2, #0
 80029a2:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 80029a4:	7dfb      	ldrb	r3, [r7, #23]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d10c      	bne.n	80029c4 <HAL_DAC_Start_DMA+0x168>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	6819      	ldr	r1, [r3, #0]
 80029b0:	68bb      	ldr	r3, [r7, #8]
 80029b2:	f003 0310 	and.w	r3, r3, #16
 80029b6:	2201      	movs	r2, #1
 80029b8:	409a      	lsls	r2, r3
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	430a      	orrs	r2, r1
 80029c0:	601a      	str	r2, [r3, #0]
 80029c2:	e005      	b.n	80029d0 <HAL_DAC_Start_DMA+0x174>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	691b      	ldr	r3, [r3, #16]
 80029c8:	f043 0204 	orr.w	r2, r3, #4
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 80029d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80029d2:	4618      	mov	r0, r3
 80029d4:	3718      	adds	r7, #24
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}
 80029da:	bf00      	nop
 80029dc:	08002d39 	.word	0x08002d39
 80029e0:	08002d5b 	.word	0x08002d5b
 80029e4:	08002d77 	.word	0x08002d77
 80029e8:	08002de1 	.word	0x08002de1
 80029ec:	08002e03 	.word	0x08002e03
 80029f0:	08002e1f 	.word	0x08002e1f

080029f4 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b082      	sub	sp, #8
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
 80029fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	6819      	ldr	r1, [r3, #0]
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	f003 0310 	and.w	r3, r3, #16
 8002a0a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a12:	43da      	mvns	r2, r3
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	400a      	ands	r2, r1
 8002a1a:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	6819      	ldr	r1, [r3, #0]
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	f003 0310 	and.w	r3, r3, #16
 8002a28:	2201      	movs	r2, #1
 8002a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a2e:	43da      	mvns	r2, r3
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	400a      	ands	r2, r1
 8002a36:	601a      	str	r2, [r3, #0]
#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d10d      	bne.n	8002a5a <HAL_DAC_Stop_DMA+0x66>
  {
    /* Disable the DMA channel */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	689b      	ldr	r3, [r3, #8]
 8002a42:	4618      	mov	r0, r3
 8002a44:	f000 fb1a 	bl	800307c <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	681a      	ldr	r2, [r3, #0]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002a56:	601a      	str	r2, [r3, #0]
 8002a58:	e00c      	b.n	8002a74 <HAL_DAC_Stop_DMA+0x80>
  }
  else /* Channel2 is used for */
  {
    /* Disable the DMA channel */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	68db      	ldr	r3, [r3, #12]
 8002a5e:	4618      	mov	r0, r3
 8002a60:	f000 fb0c 	bl	800307c <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	681a      	ldr	r2, [r3, #0]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8002a72:	601a      	str	r2, [r3, #0]
  /* Disable the DAC DMA underrun interrupt */
  __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
#endif /* STM32L451xx STM32L452xx STM32L462xx */

  /* Return function status */
  return HAL_OK;
 8002a74:	2300      	movs	r3, #0
}
 8002a76:	4618      	mov	r0, r3
 8002a78:	3708      	adds	r7, #8
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}

08002a7e <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8002a7e:	b480      	push	{r7}
 8002a80:	b087      	sub	sp, #28
 8002a82:	af00      	add	r7, sp, #0
 8002a84:	60f8      	str	r0, [r7, #12]
 8002a86:	60b9      	str	r1, [r7, #8]
 8002a88:	607a      	str	r2, [r7, #4]
 8002a8a:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8002a96:	68bb      	ldr	r3, [r7, #8]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d105      	bne.n	8002aa8 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8002a9c:	697a      	ldr	r2, [r7, #20]
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	4413      	add	r3, r2
 8002aa2:	3308      	adds	r3, #8
 8002aa4:	617b      	str	r3, [r7, #20]
 8002aa6:	e004      	b.n	8002ab2 <HAL_DAC_SetValue+0x34>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8002aa8:	697a      	ldr	r2, [r7, #20]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	4413      	add	r3, r2
 8002aae:	3314      	adds	r3, #20
 8002ab0:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8002ab2:	697b      	ldr	r3, [r7, #20]
 8002ab4:	461a      	mov	r2, r3
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8002aba:	2300      	movs	r3, #0
}
 8002abc:	4618      	mov	r0, r3
 8002abe:	371c      	adds	r7, #28
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac6:	4770      	bx	lr

08002ac8 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	b083      	sub	sp, #12
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8002ad0:	bf00      	nop
 8002ad2:	370c      	adds	r7, #12
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ada:	4770      	bx	lr

08002adc <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002adc:	b480      	push	{r7}
 8002ade:	b083      	sub	sp, #12
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8002ae4:	bf00      	nop
 8002ae6:	370c      	adds	r7, #12
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aee:	4770      	bx	lr

08002af0 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002af0:	b480      	push	{r7}
 8002af2:	b083      	sub	sp, #12
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8002af8:	bf00      	nop
 8002afa:	370c      	adds	r7, #12
 8002afc:	46bd      	mov	sp, r7
 8002afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b02:	4770      	bx	lr

08002b04 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b088      	sub	sp, #32
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	60f8      	str	r0, [r7, #12]
 8002b0c:	60b9      	str	r1, [r7, #8]
 8002b0e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8002b10:	2300      	movs	r3, #0
 8002b12:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	795b      	ldrb	r3, [r3, #5]
 8002b18:	2b01      	cmp	r3, #1
 8002b1a:	d101      	bne.n	8002b20 <HAL_DAC_ConfigChannel+0x1c>
 8002b1c:	2302      	movs	r3, #2
 8002b1e:	e107      	b.n	8002d30 <HAL_DAC_ConfigChannel+0x22c>
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	2201      	movs	r2, #1
 8002b24:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	2202      	movs	r2, #2
 8002b2a:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8002b2c:	68bb      	ldr	r3, [r7, #8]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	2b04      	cmp	r3, #4
 8002b32:	d174      	bne.n	8002c1e <HAL_DAC_ConfigChannel+0x11a>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8002b34:	f7ff fd2e 	bl	8002594 <HAL_GetTick>
 8002b38:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d134      	bne.n	8002baa <HAL_DAC_ConfigChannel+0xa6>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002b40:	e011      	b.n	8002b66 <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002b42:	f7ff fd27 	bl	8002594 <HAL_GetTick>
 8002b46:	4602      	mov	r2, r0
 8002b48:	69fb      	ldr	r3, [r7, #28]
 8002b4a:	1ad3      	subs	r3, r2, r3
 8002b4c:	2b01      	cmp	r3, #1
 8002b4e:	d90a      	bls.n	8002b66 <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	691b      	ldr	r3, [r3, #16]
 8002b54:	f043 0208 	orr.w	r2, r3, #8
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	2203      	movs	r2, #3
 8002b60:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8002b62:	2303      	movs	r3, #3
 8002b64:	e0e4      	b.n	8002d30 <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b6c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d1e6      	bne.n	8002b42 <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 8002b74:	2001      	movs	r0, #1
 8002b76:	f7ff fd19 	bl	80025ac <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	68ba      	ldr	r2, [r7, #8]
 8002b80:	6992      	ldr	r2, [r2, #24]
 8002b82:	641a      	str	r2, [r3, #64]	; 0x40
 8002b84:	e01e      	b.n	8002bc4 <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002b86:	f7ff fd05 	bl	8002594 <HAL_GetTick>
 8002b8a:	4602      	mov	r2, r0
 8002b8c:	69fb      	ldr	r3, [r7, #28]
 8002b8e:	1ad3      	subs	r3, r2, r3
 8002b90:	2b01      	cmp	r3, #1
 8002b92:	d90a      	bls.n	8002baa <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	691b      	ldr	r3, [r3, #16]
 8002b98:	f043 0208 	orr.w	r2, r3, #8
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	2203      	movs	r2, #3
 8002ba4:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8002ba6:	2303      	movs	r3, #3
 8002ba8:	e0c2      	b.n	8002d30 <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	dbe8      	blt.n	8002b86 <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 8002bb4:	2001      	movs	r0, #1
 8002bb6:	f7ff fcf9 	bl	80025ac <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	68ba      	ldr	r2, [r7, #8]
 8002bc0:	6992      	ldr	r2, [r2, #24]
 8002bc2:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	f003 0310 	and.w	r3, r3, #16
 8002bd0:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8002bd4:	fa01 f303 	lsl.w	r3, r1, r3
 8002bd8:	43db      	mvns	r3, r3
 8002bda:	ea02 0103 	and.w	r1, r2, r3
 8002bde:	68bb      	ldr	r3, [r7, #8]
 8002be0:	69da      	ldr	r2, [r3, #28]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	f003 0310 	and.w	r3, r3, #16
 8002be8:	409a      	lsls	r2, r3
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	430a      	orrs	r2, r1
 8002bf0:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	f003 0310 	and.w	r3, r3, #16
 8002bfe:	21ff      	movs	r1, #255	; 0xff
 8002c00:	fa01 f303 	lsl.w	r3, r1, r3
 8002c04:	43db      	mvns	r3, r3
 8002c06:	ea02 0103 	and.w	r1, r2, r3
 8002c0a:	68bb      	ldr	r3, [r7, #8]
 8002c0c:	6a1a      	ldr	r2, [r3, #32]
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	f003 0310 	and.w	r3, r3, #16
 8002c14:	409a      	lsls	r2, r3
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	430a      	orrs	r2, r1
 8002c1c:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8002c1e:	68bb      	ldr	r3, [r7, #8]
 8002c20:	691b      	ldr	r3, [r3, #16]
 8002c22:	2b01      	cmp	r3, #1
 8002c24:	d11d      	bne.n	8002c62 <HAL_DAC_ConfigChannel+0x15e>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c2c:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	f003 0310 	and.w	r3, r3, #16
 8002c34:	221f      	movs	r2, #31
 8002c36:	fa02 f303 	lsl.w	r3, r2, r3
 8002c3a:	43db      	mvns	r3, r3
 8002c3c:	69ba      	ldr	r2, [r7, #24]
 8002c3e:	4013      	ands	r3, r2
 8002c40:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8002c42:	68bb      	ldr	r3, [r7, #8]
 8002c44:	695b      	ldr	r3, [r3, #20]
 8002c46:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	f003 0310 	and.w	r3, r3, #16
 8002c4e:	697a      	ldr	r2, [r7, #20]
 8002c50:	fa02 f303 	lsl.w	r3, r2, r3
 8002c54:	69ba      	ldr	r2, [r7, #24]
 8002c56:	4313      	orrs	r3, r2
 8002c58:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	69ba      	ldr	r2, [r7, #24]
 8002c60:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c68:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	f003 0310 	and.w	r3, r3, #16
 8002c70:	2207      	movs	r2, #7
 8002c72:	fa02 f303 	lsl.w	r3, r2, r3
 8002c76:	43db      	mvns	r3, r3
 8002c78:	69ba      	ldr	r2, [r7, #24]
 8002c7a:	4013      	ands	r3, r2
 8002c7c:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8002c7e:	68bb      	ldr	r3, [r7, #8]
 8002c80:	681a      	ldr	r2, [r3, #0]
 8002c82:	68bb      	ldr	r3, [r7, #8]
 8002c84:	689b      	ldr	r3, [r3, #8]
 8002c86:	431a      	orrs	r2, r3
 8002c88:	68bb      	ldr	r3, [r7, #8]
 8002c8a:	68db      	ldr	r3, [r3, #12]
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	f003 0310 	and.w	r3, r3, #16
 8002c96:	697a      	ldr	r2, [r7, #20]
 8002c98:	fa02 f303 	lsl.w	r3, r2, r3
 8002c9c:	69ba      	ldr	r2, [r7, #24]
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	69ba      	ldr	r2, [r7, #24]
 8002ca8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	6819      	ldr	r1, [r3, #0]
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	f003 0310 	and.w	r3, r3, #16
 8002cb6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002cba:	fa02 f303 	lsl.w	r3, r2, r3
 8002cbe:	43da      	mvns	r2, r3
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	400a      	ands	r2, r1
 8002cc6:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	f003 0310 	and.w	r3, r3, #16
 8002cd6:	f640 72fc 	movw	r2, #4092	; 0xffc
 8002cda:	fa02 f303 	lsl.w	r3, r2, r3
 8002cde:	43db      	mvns	r3, r3
 8002ce0:	69ba      	ldr	r2, [r7, #24]
 8002ce2:	4013      	ands	r3, r2
 8002ce4:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8002ce6:	68bb      	ldr	r3, [r7, #8]
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	f003 0310 	and.w	r3, r3, #16
 8002cf2:	697a      	ldr	r2, [r7, #20]
 8002cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf8:	69ba      	ldr	r2, [r7, #24]
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	69ba      	ldr	r2, [r7, #24]
 8002d04:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	6819      	ldr	r1, [r3, #0]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	f003 0310 	and.w	r3, r3, #16
 8002d12:	22c0      	movs	r2, #192	; 0xc0
 8002d14:	fa02 f303 	lsl.w	r3, r2, r3
 8002d18:	43da      	mvns	r2, r3
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	400a      	ands	r2, r1
 8002d20:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	2201      	movs	r2, #1
 8002d26:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002d2e:	2300      	movs	r3, #0
}
 8002d30:	4618      	mov	r0, r3
 8002d32:	3720      	adds	r7, #32
 8002d34:	46bd      	mov	sp, r7
 8002d36:	bd80      	pop	{r7, pc}

08002d38 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b084      	sub	sp, #16
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d44:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8002d46:	68f8      	ldr	r0, [r7, #12]
 8002d48:	f7ff febe 	bl	8002ac8 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	2201      	movs	r2, #1
 8002d50:	711a      	strb	r2, [r3, #4]
}
 8002d52:	bf00      	nop
 8002d54:	3710      	adds	r7, #16
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd80      	pop	{r7, pc}

08002d5a <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8002d5a:	b580      	push	{r7, lr}
 8002d5c:	b084      	sub	sp, #16
 8002d5e:	af00      	add	r7, sp, #0
 8002d60:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d66:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8002d68:	68f8      	ldr	r0, [r7, #12]
 8002d6a:	f7ff feb7 	bl	8002adc <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8002d6e:	bf00      	nop
 8002d70:	3710      	adds	r7, #16
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd80      	pop	{r7, pc}

08002d76 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8002d76:	b580      	push	{r7, lr}
 8002d78:	b084      	sub	sp, #16
 8002d7a:	af00      	add	r7, sp, #0
 8002d7c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d82:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	691b      	ldr	r3, [r3, #16]
 8002d88:	f043 0204 	orr.w	r2, r3, #4
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8002d90:	68f8      	ldr	r0, [r7, #12]
 8002d92:	f7ff fead 	bl	8002af0 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	2201      	movs	r2, #1
 8002d9a:	711a      	strb	r2, [r3, #4]
}
 8002d9c:	bf00      	nop
 8002d9e:	3710      	adds	r7, #16
 8002da0:	46bd      	mov	sp, r7
 8002da2:	bd80      	pop	{r7, pc}

08002da4 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002da4:	b480      	push	{r7}
 8002da6:	b083      	sub	sp, #12
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8002dac:	bf00      	nop
 8002dae:	370c      	adds	r7, #12
 8002db0:	46bd      	mov	sp, r7
 8002db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db6:	4770      	bx	lr

08002db8 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002db8:	b480      	push	{r7}
 8002dba:	b083      	sub	sp, #12
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8002dc0:	bf00      	nop
 8002dc2:	370c      	adds	r7, #12
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dca:	4770      	bx	lr

08002dcc <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	b083      	sub	sp, #12
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8002dd4:	bf00      	nop
 8002dd6:	370c      	adds	r7, #12
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dde:	4770      	bx	lr

08002de0 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b084      	sub	sp, #16
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dec:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8002dee:	68f8      	ldr	r0, [r7, #12]
 8002df0:	f7ff ffd8 	bl	8002da4 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	2201      	movs	r2, #1
 8002df8:	711a      	strb	r2, [r3, #4]
}
 8002dfa:	bf00      	nop
 8002dfc:	3710      	adds	r7, #16
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bd80      	pop	{r7, pc}

08002e02 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8002e02:	b580      	push	{r7, lr}
 8002e04:	b084      	sub	sp, #16
 8002e06:	af00      	add	r7, sp, #0
 8002e08:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e0e:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8002e10:	68f8      	ldr	r0, [r7, #12]
 8002e12:	f7ff ffd1 	bl	8002db8 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8002e16:	bf00      	nop
 8002e18:	3710      	adds	r7, #16
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bd80      	pop	{r7, pc}

08002e1e <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8002e1e:	b580      	push	{r7, lr}
 8002e20:	b084      	sub	sp, #16
 8002e22:	af00      	add	r7, sp, #0
 8002e24:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e2a:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	691b      	ldr	r3, [r3, #16]
 8002e30:	f043 0204 	orr.w	r2, r3, #4
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8002e38:	68f8      	ldr	r0, [r7, #12]
 8002e3a:	f7ff ffc7 	bl	8002dcc <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	2201      	movs	r2, #1
 8002e42:	711a      	strb	r2, [r3, #4]
}
 8002e44:	bf00      	nop
 8002e46:	3710      	adds	r7, #16
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd80      	pop	{r7, pc}

08002e4c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	b085      	sub	sp, #20
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d101      	bne.n	8002e5e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	e098      	b.n	8002f90 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	461a      	mov	r2, r3
 8002e64:	4b4d      	ldr	r3, [pc, #308]	; (8002f9c <HAL_DMA_Init+0x150>)
 8002e66:	429a      	cmp	r2, r3
 8002e68:	d80f      	bhi.n	8002e8a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	461a      	mov	r2, r3
 8002e70:	4b4b      	ldr	r3, [pc, #300]	; (8002fa0 <HAL_DMA_Init+0x154>)
 8002e72:	4413      	add	r3, r2
 8002e74:	4a4b      	ldr	r2, [pc, #300]	; (8002fa4 <HAL_DMA_Init+0x158>)
 8002e76:	fba2 2303 	umull	r2, r3, r2, r3
 8002e7a:	091b      	lsrs	r3, r3, #4
 8002e7c:	009a      	lsls	r2, r3, #2
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	4a48      	ldr	r2, [pc, #288]	; (8002fa8 <HAL_DMA_Init+0x15c>)
 8002e86:	641a      	str	r2, [r3, #64]	; 0x40
 8002e88:	e00e      	b.n	8002ea8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	461a      	mov	r2, r3
 8002e90:	4b46      	ldr	r3, [pc, #280]	; (8002fac <HAL_DMA_Init+0x160>)
 8002e92:	4413      	add	r3, r2
 8002e94:	4a43      	ldr	r2, [pc, #268]	; (8002fa4 <HAL_DMA_Init+0x158>)
 8002e96:	fba2 2303 	umull	r2, r3, r2, r3
 8002e9a:	091b      	lsrs	r3, r3, #4
 8002e9c:	009a      	lsls	r2, r3, #2
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	4a42      	ldr	r2, [pc, #264]	; (8002fb0 <HAL_DMA_Init+0x164>)
 8002ea6:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2202      	movs	r2, #2
 8002eac:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002ebe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ec2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002ecc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	691b      	ldr	r3, [r3, #16]
 8002ed2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ed8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	699b      	ldr	r3, [r3, #24]
 8002ede:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ee4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6a1b      	ldr	r3, [r3, #32]
 8002eea:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002eec:	68fa      	ldr	r2, [r7, #12]
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	68fa      	ldr	r2, [r7, #12]
 8002ef8:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	689b      	ldr	r3, [r3, #8]
 8002efe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002f02:	d039      	beq.n	8002f78 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f08:	4a27      	ldr	r2, [pc, #156]	; (8002fa8 <HAL_DMA_Init+0x15c>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d11a      	bne.n	8002f44 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002f0e:	4b29      	ldr	r3, [pc, #164]	; (8002fb4 <HAL_DMA_Init+0x168>)
 8002f10:	681a      	ldr	r2, [r3, #0]
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f16:	f003 031c 	and.w	r3, r3, #28
 8002f1a:	210f      	movs	r1, #15
 8002f1c:	fa01 f303 	lsl.w	r3, r1, r3
 8002f20:	43db      	mvns	r3, r3
 8002f22:	4924      	ldr	r1, [pc, #144]	; (8002fb4 <HAL_DMA_Init+0x168>)
 8002f24:	4013      	ands	r3, r2
 8002f26:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002f28:	4b22      	ldr	r3, [pc, #136]	; (8002fb4 <HAL_DMA_Init+0x168>)
 8002f2a:	681a      	ldr	r2, [r3, #0]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6859      	ldr	r1, [r3, #4]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f34:	f003 031c 	and.w	r3, r3, #28
 8002f38:	fa01 f303 	lsl.w	r3, r1, r3
 8002f3c:	491d      	ldr	r1, [pc, #116]	; (8002fb4 <HAL_DMA_Init+0x168>)
 8002f3e:	4313      	orrs	r3, r2
 8002f40:	600b      	str	r3, [r1, #0]
 8002f42:	e019      	b.n	8002f78 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002f44:	4b1c      	ldr	r3, [pc, #112]	; (8002fb8 <HAL_DMA_Init+0x16c>)
 8002f46:	681a      	ldr	r2, [r3, #0]
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f4c:	f003 031c 	and.w	r3, r3, #28
 8002f50:	210f      	movs	r1, #15
 8002f52:	fa01 f303 	lsl.w	r3, r1, r3
 8002f56:	43db      	mvns	r3, r3
 8002f58:	4917      	ldr	r1, [pc, #92]	; (8002fb8 <HAL_DMA_Init+0x16c>)
 8002f5a:	4013      	ands	r3, r2
 8002f5c:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002f5e:	4b16      	ldr	r3, [pc, #88]	; (8002fb8 <HAL_DMA_Init+0x16c>)
 8002f60:	681a      	ldr	r2, [r3, #0]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6859      	ldr	r1, [r3, #4]
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f6a:	f003 031c 	and.w	r3, r3, #28
 8002f6e:	fa01 f303 	lsl.w	r3, r1, r3
 8002f72:	4911      	ldr	r1, [pc, #68]	; (8002fb8 <HAL_DMA_Init+0x16c>)
 8002f74:	4313      	orrs	r3, r2
 8002f76:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2201      	movs	r2, #1
 8002f82:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2200      	movs	r2, #0
 8002f8a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002f8e:	2300      	movs	r3, #0
}
 8002f90:	4618      	mov	r0, r3
 8002f92:	3714      	adds	r7, #20
 8002f94:	46bd      	mov	sp, r7
 8002f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9a:	4770      	bx	lr
 8002f9c:	40020407 	.word	0x40020407
 8002fa0:	bffdfff8 	.word	0xbffdfff8
 8002fa4:	cccccccd 	.word	0xcccccccd
 8002fa8:	40020000 	.word	0x40020000
 8002fac:	bffdfbf8 	.word	0xbffdfbf8
 8002fb0:	40020400 	.word	0x40020400
 8002fb4:	400200a8 	.word	0x400200a8
 8002fb8:	400204a8 	.word	0x400204a8

08002fbc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b086      	sub	sp, #24
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	60f8      	str	r0, [r7, #12]
 8002fc4:	60b9      	str	r1, [r7, #8]
 8002fc6:	607a      	str	r2, [r7, #4]
 8002fc8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002fca:	2300      	movs	r3, #0
 8002fcc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002fd4:	2b01      	cmp	r3, #1
 8002fd6:	d101      	bne.n	8002fdc <HAL_DMA_Start_IT+0x20>
 8002fd8:	2302      	movs	r3, #2
 8002fda:	e04b      	b.n	8003074 <HAL_DMA_Start_IT+0xb8>
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	2201      	movs	r2, #1
 8002fe0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002fea:	b2db      	uxtb	r3, r3
 8002fec:	2b01      	cmp	r3, #1
 8002fee:	d13a      	bne.n	8003066 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	2202      	movs	r2, #2
 8002ff4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	681a      	ldr	r2, [r3, #0]
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f022 0201 	bic.w	r2, r2, #1
 800300c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	687a      	ldr	r2, [r7, #4]
 8003012:	68b9      	ldr	r1, [r7, #8]
 8003014:	68f8      	ldr	r0, [r7, #12]
 8003016:	f000 f95f 	bl	80032d8 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800301e:	2b00      	cmp	r3, #0
 8003020:	d008      	beq.n	8003034 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	681a      	ldr	r2, [r3, #0]
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f042 020e 	orr.w	r2, r2, #14
 8003030:	601a      	str	r2, [r3, #0]
 8003032:	e00f      	b.n	8003054 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	681a      	ldr	r2, [r3, #0]
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f022 0204 	bic.w	r2, r2, #4
 8003042:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	681a      	ldr	r2, [r3, #0]
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f042 020a 	orr.w	r2, r2, #10
 8003052:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	681a      	ldr	r2, [r3, #0]
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f042 0201 	orr.w	r2, r2, #1
 8003062:	601a      	str	r2, [r3, #0]
 8003064:	e005      	b.n	8003072 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	2200      	movs	r2, #0
 800306a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800306e:	2302      	movs	r3, #2
 8003070:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003072:	7dfb      	ldrb	r3, [r7, #23]
}
 8003074:	4618      	mov	r0, r3
 8003076:	3718      	adds	r7, #24
 8003078:	46bd      	mov	sp, r7
 800307a:	bd80      	pop	{r7, pc}

0800307c <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800307c:	b480      	push	{r7}
 800307e:	b085      	sub	sp, #20
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003084:	2300      	movs	r3, #0
 8003086:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800308e:	b2db      	uxtb	r3, r3
 8003090:	2b02      	cmp	r3, #2
 8003092:	d008      	beq.n	80030a6 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2204      	movs	r2, #4
 8003098:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2200      	movs	r2, #0
 800309e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80030a2:	2301      	movs	r3, #1
 80030a4:	e022      	b.n	80030ec <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	681a      	ldr	r2, [r3, #0]
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f022 020e 	bic.w	r2, r2, #14
 80030b4:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	681a      	ldr	r2, [r3, #0]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f022 0201 	bic.w	r2, r2, #1
 80030c4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030ca:	f003 021c 	and.w	r2, r3, #28
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030d2:	2101      	movs	r1, #1
 80030d4:	fa01 f202 	lsl.w	r2, r1, r2
 80030d8:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2201      	movs	r2, #1
 80030de:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2200      	movs	r2, #0
 80030e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80030ea:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80030ec:	4618      	mov	r0, r3
 80030ee:	3714      	adds	r7, #20
 80030f0:	46bd      	mov	sp, r7
 80030f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f6:	4770      	bx	lr

080030f8 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b084      	sub	sp, #16
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003100:	2300      	movs	r3, #0
 8003102:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800310a:	b2db      	uxtb	r3, r3
 800310c:	2b02      	cmp	r3, #2
 800310e:	d005      	beq.n	800311c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2204      	movs	r2, #4
 8003114:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003116:	2301      	movs	r3, #1
 8003118:	73fb      	strb	r3, [r7, #15]
 800311a:	e029      	b.n	8003170 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	681a      	ldr	r2, [r3, #0]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f022 020e 	bic.w	r2, r2, #14
 800312a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	681a      	ldr	r2, [r3, #0]
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f022 0201 	bic.w	r2, r2, #1
 800313a:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003140:	f003 021c 	and.w	r2, r3, #28
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003148:	2101      	movs	r1, #1
 800314a:	fa01 f202 	lsl.w	r2, r1, r2
 800314e:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2201      	movs	r2, #1
 8003154:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2200      	movs	r2, #0
 800315c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003164:	2b00      	cmp	r3, #0
 8003166:	d003      	beq.n	8003170 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800316c:	6878      	ldr	r0, [r7, #4]
 800316e:	4798      	blx	r3
    }
  }
  return status;
 8003170:	7bfb      	ldrb	r3, [r7, #15]
}
 8003172:	4618      	mov	r0, r3
 8003174:	3710      	adds	r7, #16
 8003176:	46bd      	mov	sp, r7
 8003178:	bd80      	pop	{r7, pc}

0800317a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800317a:	b580      	push	{r7, lr}
 800317c:	b084      	sub	sp, #16
 800317e:	af00      	add	r7, sp, #0
 8003180:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003196:	f003 031c 	and.w	r3, r3, #28
 800319a:	2204      	movs	r2, #4
 800319c:	409a      	lsls	r2, r3
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	4013      	ands	r3, r2
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d026      	beq.n	80031f4 <HAL_DMA_IRQHandler+0x7a>
 80031a6:	68bb      	ldr	r3, [r7, #8]
 80031a8:	f003 0304 	and.w	r3, r3, #4
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d021      	beq.n	80031f4 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f003 0320 	and.w	r3, r3, #32
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d107      	bne.n	80031ce <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	681a      	ldr	r2, [r3, #0]
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f022 0204 	bic.w	r2, r2, #4
 80031cc:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031d2:	f003 021c 	and.w	r2, r3, #28
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031da:	2104      	movs	r1, #4
 80031dc:	fa01 f202 	lsl.w	r2, r1, r2
 80031e0:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d071      	beq.n	80032ce <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ee:	6878      	ldr	r0, [r7, #4]
 80031f0:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 80031f2:	e06c      	b.n	80032ce <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031f8:	f003 031c 	and.w	r3, r3, #28
 80031fc:	2202      	movs	r2, #2
 80031fe:	409a      	lsls	r2, r3
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	4013      	ands	r3, r2
 8003204:	2b00      	cmp	r3, #0
 8003206:	d02e      	beq.n	8003266 <HAL_DMA_IRQHandler+0xec>
 8003208:	68bb      	ldr	r3, [r7, #8]
 800320a:	f003 0302 	and.w	r3, r3, #2
 800320e:	2b00      	cmp	r3, #0
 8003210:	d029      	beq.n	8003266 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f003 0320 	and.w	r3, r3, #32
 800321c:	2b00      	cmp	r3, #0
 800321e:	d10b      	bne.n	8003238 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	681a      	ldr	r2, [r3, #0]
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f022 020a 	bic.w	r2, r2, #10
 800322e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2201      	movs	r2, #1
 8003234:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800323c:	f003 021c 	and.w	r2, r3, #28
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003244:	2102      	movs	r1, #2
 8003246:	fa01 f202 	lsl.w	r2, r1, r2
 800324a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2200      	movs	r2, #0
 8003250:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003258:	2b00      	cmp	r3, #0
 800325a:	d038      	beq.n	80032ce <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003260:	6878      	ldr	r0, [r7, #4]
 8003262:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003264:	e033      	b.n	80032ce <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800326a:	f003 031c 	and.w	r3, r3, #28
 800326e:	2208      	movs	r2, #8
 8003270:	409a      	lsls	r2, r3
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	4013      	ands	r3, r2
 8003276:	2b00      	cmp	r3, #0
 8003278:	d02a      	beq.n	80032d0 <HAL_DMA_IRQHandler+0x156>
 800327a:	68bb      	ldr	r3, [r7, #8]
 800327c:	f003 0308 	and.w	r3, r3, #8
 8003280:	2b00      	cmp	r3, #0
 8003282:	d025      	beq.n	80032d0 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	681a      	ldr	r2, [r3, #0]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f022 020e 	bic.w	r2, r2, #14
 8003292:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003298:	f003 021c 	and.w	r2, r3, #28
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a0:	2101      	movs	r1, #1
 80032a2:	fa01 f202 	lsl.w	r2, r1, r2
 80032a6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2201      	movs	r2, #1
 80032ac:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2201      	movs	r2, #1
 80032b2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2200      	movs	r2, #0
 80032ba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d004      	beq.n	80032d0 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032ca:	6878      	ldr	r0, [r7, #4]
 80032cc:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80032ce:	bf00      	nop
 80032d0:	bf00      	nop
}
 80032d2:	3710      	adds	r7, #16
 80032d4:	46bd      	mov	sp, r7
 80032d6:	bd80      	pop	{r7, pc}

080032d8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80032d8:	b480      	push	{r7}
 80032da:	b085      	sub	sp, #20
 80032dc:	af00      	add	r7, sp, #0
 80032de:	60f8      	str	r0, [r7, #12]
 80032e0:	60b9      	str	r1, [r7, #8]
 80032e2:	607a      	str	r2, [r7, #4]
 80032e4:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032ea:	f003 021c 	and.w	r2, r3, #28
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032f2:	2101      	movs	r1, #1
 80032f4:	fa01 f202 	lsl.w	r2, r1, r2
 80032f8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	683a      	ldr	r2, [r7, #0]
 8003300:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	689b      	ldr	r3, [r3, #8]
 8003306:	2b10      	cmp	r3, #16
 8003308:	d108      	bne.n	800331c <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	687a      	ldr	r2, [r7, #4]
 8003310:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	68ba      	ldr	r2, [r7, #8]
 8003318:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800331a:	e007      	b.n	800332c <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	68ba      	ldr	r2, [r7, #8]
 8003322:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	687a      	ldr	r2, [r7, #4]
 800332a:	60da      	str	r2, [r3, #12]
}
 800332c:	bf00      	nop
 800332e:	3714      	adds	r7, #20
 8003330:	46bd      	mov	sp, r7
 8003332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003336:	4770      	bx	lr

08003338 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003338:	b480      	push	{r7}
 800333a:	b087      	sub	sp, #28
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
 8003340:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003342:	2300      	movs	r3, #0
 8003344:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003346:	e17f      	b.n	8003648 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	681a      	ldr	r2, [r3, #0]
 800334c:	2101      	movs	r1, #1
 800334e:	697b      	ldr	r3, [r7, #20]
 8003350:	fa01 f303 	lsl.w	r3, r1, r3
 8003354:	4013      	ands	r3, r2
 8003356:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	2b00      	cmp	r3, #0
 800335c:	f000 8171 	beq.w	8003642 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	f003 0303 	and.w	r3, r3, #3
 8003368:	2b01      	cmp	r3, #1
 800336a:	d005      	beq.n	8003378 <HAL_GPIO_Init+0x40>
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	f003 0303 	and.w	r3, r3, #3
 8003374:	2b02      	cmp	r3, #2
 8003376:	d130      	bne.n	80033da <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	689b      	ldr	r3, [r3, #8]
 800337c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800337e:	697b      	ldr	r3, [r7, #20]
 8003380:	005b      	lsls	r3, r3, #1
 8003382:	2203      	movs	r2, #3
 8003384:	fa02 f303 	lsl.w	r3, r2, r3
 8003388:	43db      	mvns	r3, r3
 800338a:	693a      	ldr	r2, [r7, #16]
 800338c:	4013      	ands	r3, r2
 800338e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	68da      	ldr	r2, [r3, #12]
 8003394:	697b      	ldr	r3, [r7, #20]
 8003396:	005b      	lsls	r3, r3, #1
 8003398:	fa02 f303 	lsl.w	r3, r2, r3
 800339c:	693a      	ldr	r2, [r7, #16]
 800339e:	4313      	orrs	r3, r2
 80033a0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	693a      	ldr	r2, [r7, #16]
 80033a6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80033ae:	2201      	movs	r2, #1
 80033b0:	697b      	ldr	r3, [r7, #20]
 80033b2:	fa02 f303 	lsl.w	r3, r2, r3
 80033b6:	43db      	mvns	r3, r3
 80033b8:	693a      	ldr	r2, [r7, #16]
 80033ba:	4013      	ands	r3, r2
 80033bc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	091b      	lsrs	r3, r3, #4
 80033c4:	f003 0201 	and.w	r2, r3, #1
 80033c8:	697b      	ldr	r3, [r7, #20]
 80033ca:	fa02 f303 	lsl.w	r3, r2, r3
 80033ce:	693a      	ldr	r2, [r7, #16]
 80033d0:	4313      	orrs	r3, r2
 80033d2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	693a      	ldr	r2, [r7, #16]
 80033d8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	f003 0303 	and.w	r3, r3, #3
 80033e2:	2b03      	cmp	r3, #3
 80033e4:	d118      	bne.n	8003418 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ea:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80033ec:	2201      	movs	r2, #1
 80033ee:	697b      	ldr	r3, [r7, #20]
 80033f0:	fa02 f303 	lsl.w	r3, r2, r3
 80033f4:	43db      	mvns	r3, r3
 80033f6:	693a      	ldr	r2, [r7, #16]
 80033f8:	4013      	ands	r3, r2
 80033fa:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	08db      	lsrs	r3, r3, #3
 8003402:	f003 0201 	and.w	r2, r3, #1
 8003406:	697b      	ldr	r3, [r7, #20]
 8003408:	fa02 f303 	lsl.w	r3, r2, r3
 800340c:	693a      	ldr	r2, [r7, #16]
 800340e:	4313      	orrs	r3, r2
 8003410:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	693a      	ldr	r2, [r7, #16]
 8003416:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	f003 0303 	and.w	r3, r3, #3
 8003420:	2b03      	cmp	r3, #3
 8003422:	d017      	beq.n	8003454 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	68db      	ldr	r3, [r3, #12]
 8003428:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800342a:	697b      	ldr	r3, [r7, #20]
 800342c:	005b      	lsls	r3, r3, #1
 800342e:	2203      	movs	r2, #3
 8003430:	fa02 f303 	lsl.w	r3, r2, r3
 8003434:	43db      	mvns	r3, r3
 8003436:	693a      	ldr	r2, [r7, #16]
 8003438:	4013      	ands	r3, r2
 800343a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	689a      	ldr	r2, [r3, #8]
 8003440:	697b      	ldr	r3, [r7, #20]
 8003442:	005b      	lsls	r3, r3, #1
 8003444:	fa02 f303 	lsl.w	r3, r2, r3
 8003448:	693a      	ldr	r2, [r7, #16]
 800344a:	4313      	orrs	r3, r2
 800344c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	693a      	ldr	r2, [r7, #16]
 8003452:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	f003 0303 	and.w	r3, r3, #3
 800345c:	2b02      	cmp	r3, #2
 800345e:	d123      	bne.n	80034a8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	08da      	lsrs	r2, r3, #3
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	3208      	adds	r2, #8
 8003468:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800346c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800346e:	697b      	ldr	r3, [r7, #20]
 8003470:	f003 0307 	and.w	r3, r3, #7
 8003474:	009b      	lsls	r3, r3, #2
 8003476:	220f      	movs	r2, #15
 8003478:	fa02 f303 	lsl.w	r3, r2, r3
 800347c:	43db      	mvns	r3, r3
 800347e:	693a      	ldr	r2, [r7, #16]
 8003480:	4013      	ands	r3, r2
 8003482:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	691a      	ldr	r2, [r3, #16]
 8003488:	697b      	ldr	r3, [r7, #20]
 800348a:	f003 0307 	and.w	r3, r3, #7
 800348e:	009b      	lsls	r3, r3, #2
 8003490:	fa02 f303 	lsl.w	r3, r2, r3
 8003494:	693a      	ldr	r2, [r7, #16]
 8003496:	4313      	orrs	r3, r2
 8003498:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800349a:	697b      	ldr	r3, [r7, #20]
 800349c:	08da      	lsrs	r2, r3, #3
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	3208      	adds	r2, #8
 80034a2:	6939      	ldr	r1, [r7, #16]
 80034a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80034ae:	697b      	ldr	r3, [r7, #20]
 80034b0:	005b      	lsls	r3, r3, #1
 80034b2:	2203      	movs	r2, #3
 80034b4:	fa02 f303 	lsl.w	r3, r2, r3
 80034b8:	43db      	mvns	r3, r3
 80034ba:	693a      	ldr	r2, [r7, #16]
 80034bc:	4013      	ands	r3, r2
 80034be:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	f003 0203 	and.w	r2, r3, #3
 80034c8:	697b      	ldr	r3, [r7, #20]
 80034ca:	005b      	lsls	r3, r3, #1
 80034cc:	fa02 f303 	lsl.w	r3, r2, r3
 80034d0:	693a      	ldr	r2, [r7, #16]
 80034d2:	4313      	orrs	r3, r2
 80034d4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	693a      	ldr	r2, [r7, #16]
 80034da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	f000 80ac 	beq.w	8003642 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034ea:	4b5f      	ldr	r3, [pc, #380]	; (8003668 <HAL_GPIO_Init+0x330>)
 80034ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034ee:	4a5e      	ldr	r2, [pc, #376]	; (8003668 <HAL_GPIO_Init+0x330>)
 80034f0:	f043 0301 	orr.w	r3, r3, #1
 80034f4:	6613      	str	r3, [r2, #96]	; 0x60
 80034f6:	4b5c      	ldr	r3, [pc, #368]	; (8003668 <HAL_GPIO_Init+0x330>)
 80034f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034fa:	f003 0301 	and.w	r3, r3, #1
 80034fe:	60bb      	str	r3, [r7, #8]
 8003500:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003502:	4a5a      	ldr	r2, [pc, #360]	; (800366c <HAL_GPIO_Init+0x334>)
 8003504:	697b      	ldr	r3, [r7, #20]
 8003506:	089b      	lsrs	r3, r3, #2
 8003508:	3302      	adds	r3, #2
 800350a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800350e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003510:	697b      	ldr	r3, [r7, #20]
 8003512:	f003 0303 	and.w	r3, r3, #3
 8003516:	009b      	lsls	r3, r3, #2
 8003518:	220f      	movs	r2, #15
 800351a:	fa02 f303 	lsl.w	r3, r2, r3
 800351e:	43db      	mvns	r3, r3
 8003520:	693a      	ldr	r2, [r7, #16]
 8003522:	4013      	ands	r3, r2
 8003524:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800352c:	d025      	beq.n	800357a <HAL_GPIO_Init+0x242>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	4a4f      	ldr	r2, [pc, #316]	; (8003670 <HAL_GPIO_Init+0x338>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d01f      	beq.n	8003576 <HAL_GPIO_Init+0x23e>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	4a4e      	ldr	r2, [pc, #312]	; (8003674 <HAL_GPIO_Init+0x33c>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d019      	beq.n	8003572 <HAL_GPIO_Init+0x23a>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	4a4d      	ldr	r2, [pc, #308]	; (8003678 <HAL_GPIO_Init+0x340>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d013      	beq.n	800356e <HAL_GPIO_Init+0x236>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	4a4c      	ldr	r2, [pc, #304]	; (800367c <HAL_GPIO_Init+0x344>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d00d      	beq.n	800356a <HAL_GPIO_Init+0x232>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	4a4b      	ldr	r2, [pc, #300]	; (8003680 <HAL_GPIO_Init+0x348>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d007      	beq.n	8003566 <HAL_GPIO_Init+0x22e>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	4a4a      	ldr	r2, [pc, #296]	; (8003684 <HAL_GPIO_Init+0x34c>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d101      	bne.n	8003562 <HAL_GPIO_Init+0x22a>
 800355e:	2306      	movs	r3, #6
 8003560:	e00c      	b.n	800357c <HAL_GPIO_Init+0x244>
 8003562:	2307      	movs	r3, #7
 8003564:	e00a      	b.n	800357c <HAL_GPIO_Init+0x244>
 8003566:	2305      	movs	r3, #5
 8003568:	e008      	b.n	800357c <HAL_GPIO_Init+0x244>
 800356a:	2304      	movs	r3, #4
 800356c:	e006      	b.n	800357c <HAL_GPIO_Init+0x244>
 800356e:	2303      	movs	r3, #3
 8003570:	e004      	b.n	800357c <HAL_GPIO_Init+0x244>
 8003572:	2302      	movs	r3, #2
 8003574:	e002      	b.n	800357c <HAL_GPIO_Init+0x244>
 8003576:	2301      	movs	r3, #1
 8003578:	e000      	b.n	800357c <HAL_GPIO_Init+0x244>
 800357a:	2300      	movs	r3, #0
 800357c:	697a      	ldr	r2, [r7, #20]
 800357e:	f002 0203 	and.w	r2, r2, #3
 8003582:	0092      	lsls	r2, r2, #2
 8003584:	4093      	lsls	r3, r2
 8003586:	693a      	ldr	r2, [r7, #16]
 8003588:	4313      	orrs	r3, r2
 800358a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800358c:	4937      	ldr	r1, [pc, #220]	; (800366c <HAL_GPIO_Init+0x334>)
 800358e:	697b      	ldr	r3, [r7, #20]
 8003590:	089b      	lsrs	r3, r3, #2
 8003592:	3302      	adds	r3, #2
 8003594:	693a      	ldr	r2, [r7, #16]
 8003596:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800359a:	4b3b      	ldr	r3, [pc, #236]	; (8003688 <HAL_GPIO_Init+0x350>)
 800359c:	689b      	ldr	r3, [r3, #8]
 800359e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	43db      	mvns	r3, r3
 80035a4:	693a      	ldr	r2, [r7, #16]
 80035a6:	4013      	ands	r3, r2
 80035a8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d003      	beq.n	80035be <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80035b6:	693a      	ldr	r2, [r7, #16]
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	4313      	orrs	r3, r2
 80035bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80035be:	4a32      	ldr	r2, [pc, #200]	; (8003688 <HAL_GPIO_Init+0x350>)
 80035c0:	693b      	ldr	r3, [r7, #16]
 80035c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80035c4:	4b30      	ldr	r3, [pc, #192]	; (8003688 <HAL_GPIO_Init+0x350>)
 80035c6:	68db      	ldr	r3, [r3, #12]
 80035c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	43db      	mvns	r3, r3
 80035ce:	693a      	ldr	r2, [r7, #16]
 80035d0:	4013      	ands	r3, r2
 80035d2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d003      	beq.n	80035e8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80035e0:	693a      	ldr	r2, [r7, #16]
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	4313      	orrs	r3, r2
 80035e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80035e8:	4a27      	ldr	r2, [pc, #156]	; (8003688 <HAL_GPIO_Init+0x350>)
 80035ea:	693b      	ldr	r3, [r7, #16]
 80035ec:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80035ee:	4b26      	ldr	r3, [pc, #152]	; (8003688 <HAL_GPIO_Init+0x350>)
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	43db      	mvns	r3, r3
 80035f8:	693a      	ldr	r2, [r7, #16]
 80035fa:	4013      	ands	r3, r2
 80035fc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003606:	2b00      	cmp	r3, #0
 8003608:	d003      	beq.n	8003612 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800360a:	693a      	ldr	r2, [r7, #16]
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	4313      	orrs	r3, r2
 8003610:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003612:	4a1d      	ldr	r2, [pc, #116]	; (8003688 <HAL_GPIO_Init+0x350>)
 8003614:	693b      	ldr	r3, [r7, #16]
 8003616:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003618:	4b1b      	ldr	r3, [pc, #108]	; (8003688 <HAL_GPIO_Init+0x350>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	43db      	mvns	r3, r3
 8003622:	693a      	ldr	r2, [r7, #16]
 8003624:	4013      	ands	r3, r2
 8003626:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003630:	2b00      	cmp	r3, #0
 8003632:	d003      	beq.n	800363c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003634:	693a      	ldr	r2, [r7, #16]
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	4313      	orrs	r3, r2
 800363a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800363c:	4a12      	ldr	r2, [pc, #72]	; (8003688 <HAL_GPIO_Init+0x350>)
 800363e:	693b      	ldr	r3, [r7, #16]
 8003640:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003642:	697b      	ldr	r3, [r7, #20]
 8003644:	3301      	adds	r3, #1
 8003646:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	681a      	ldr	r2, [r3, #0]
 800364c:	697b      	ldr	r3, [r7, #20]
 800364e:	fa22 f303 	lsr.w	r3, r2, r3
 8003652:	2b00      	cmp	r3, #0
 8003654:	f47f ae78 	bne.w	8003348 <HAL_GPIO_Init+0x10>
  }
}
 8003658:	bf00      	nop
 800365a:	bf00      	nop
 800365c:	371c      	adds	r7, #28
 800365e:	46bd      	mov	sp, r7
 8003660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003664:	4770      	bx	lr
 8003666:	bf00      	nop
 8003668:	40021000 	.word	0x40021000
 800366c:	40010000 	.word	0x40010000
 8003670:	48000400 	.word	0x48000400
 8003674:	48000800 	.word	0x48000800
 8003678:	48000c00 	.word	0x48000c00
 800367c:	48001000 	.word	0x48001000
 8003680:	48001400 	.word	0x48001400
 8003684:	48001800 	.word	0x48001800
 8003688:	40010400 	.word	0x40010400

0800368c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800368c:	b480      	push	{r7}
 800368e:	b083      	sub	sp, #12
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
 8003694:	460b      	mov	r3, r1
 8003696:	807b      	strh	r3, [r7, #2]
 8003698:	4613      	mov	r3, r2
 800369a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800369c:	787b      	ldrb	r3, [r7, #1]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d003      	beq.n	80036aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80036a2:	887a      	ldrh	r2, [r7, #2]
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80036a8:	e002      	b.n	80036b0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80036aa:	887a      	ldrh	r2, [r7, #2]
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	629a      	str	r2, [r3, #40]	; 0x28
}
 80036b0:	bf00      	nop
 80036b2:	370c      	adds	r7, #12
 80036b4:	46bd      	mov	sp, r7
 80036b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ba:	4770      	bx	lr

080036bc <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80036bc:	b480      	push	{r7}
 80036be:	b085      	sub	sp, #20
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
 80036c4:	460b      	mov	r3, r1
 80036c6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	695b      	ldr	r3, [r3, #20]
 80036cc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80036ce:	887a      	ldrh	r2, [r7, #2]
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	4013      	ands	r3, r2
 80036d4:	041a      	lsls	r2, r3, #16
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	43d9      	mvns	r1, r3
 80036da:	887b      	ldrh	r3, [r7, #2]
 80036dc:	400b      	ands	r3, r1
 80036de:	431a      	orrs	r2, r3
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	619a      	str	r2, [r3, #24]
}
 80036e4:	bf00      	nop
 80036e6:	3714      	adds	r7, #20
 80036e8:	46bd      	mov	sp, r7
 80036ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ee:	4770      	bx	lr

080036f0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b082      	sub	sp, #8
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	4603      	mov	r3, r0
 80036f8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80036fa:	4b08      	ldr	r3, [pc, #32]	; (800371c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80036fc:	695a      	ldr	r2, [r3, #20]
 80036fe:	88fb      	ldrh	r3, [r7, #6]
 8003700:	4013      	ands	r3, r2
 8003702:	2b00      	cmp	r3, #0
 8003704:	d006      	beq.n	8003714 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003706:	4a05      	ldr	r2, [pc, #20]	; (800371c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003708:	88fb      	ldrh	r3, [r7, #6]
 800370a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800370c:	88fb      	ldrh	r3, [r7, #6]
 800370e:	4618      	mov	r0, r3
 8003710:	f7fe fad4 	bl	8001cbc <HAL_GPIO_EXTI_Callback>
  }
}
 8003714:	bf00      	nop
 8003716:	3708      	adds	r7, #8
 8003718:	46bd      	mov	sp, r7
 800371a:	bd80      	pop	{r7, pc}
 800371c:	40010400 	.word	0x40010400

08003720 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b082      	sub	sp, #8
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d101      	bne.n	8003732 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800372e:	2301      	movs	r3, #1
 8003730:	e081      	b.n	8003836 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003738:	b2db      	uxtb	r3, r3
 800373a:	2b00      	cmp	r3, #0
 800373c:	d106      	bne.n	800374c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2200      	movs	r2, #0
 8003742:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003746:	6878      	ldr	r0, [r7, #4]
 8003748:	f7fe fc88 	bl	800205c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2224      	movs	r2, #36	; 0x24
 8003750:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	681a      	ldr	r2, [r3, #0]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f022 0201 	bic.w	r2, r2, #1
 8003762:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	685a      	ldr	r2, [r3, #4]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003770:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	689a      	ldr	r2, [r3, #8]
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003780:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	68db      	ldr	r3, [r3, #12]
 8003786:	2b01      	cmp	r3, #1
 8003788:	d107      	bne.n	800379a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	689a      	ldr	r2, [r3, #8]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003796:	609a      	str	r2, [r3, #8]
 8003798:	e006      	b.n	80037a8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	689a      	ldr	r2, [r3, #8]
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80037a6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	68db      	ldr	r3, [r3, #12]
 80037ac:	2b02      	cmp	r3, #2
 80037ae:	d104      	bne.n	80037ba <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80037b8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	685b      	ldr	r3, [r3, #4]
 80037c0:	687a      	ldr	r2, [r7, #4]
 80037c2:	6812      	ldr	r2, [r2, #0]
 80037c4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80037c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80037cc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	68da      	ldr	r2, [r3, #12]
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80037dc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	691a      	ldr	r2, [r3, #16]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	695b      	ldr	r3, [r3, #20]
 80037e6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	699b      	ldr	r3, [r3, #24]
 80037ee:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	430a      	orrs	r2, r1
 80037f6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	69d9      	ldr	r1, [r3, #28]
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6a1a      	ldr	r2, [r3, #32]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	430a      	orrs	r2, r1
 8003806:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	681a      	ldr	r2, [r3, #0]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f042 0201 	orr.w	r2, r2, #1
 8003816:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2200      	movs	r2, #0
 800381c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2220      	movs	r2, #32
 8003822:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2200      	movs	r2, #0
 800382a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2200      	movs	r2, #0
 8003830:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003834:	2300      	movs	r3, #0
}
 8003836:	4618      	mov	r0, r3
 8003838:	3708      	adds	r7, #8
 800383a:	46bd      	mov	sp, r7
 800383c:	bd80      	pop	{r7, pc}
	...

08003840 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b088      	sub	sp, #32
 8003844:	af02      	add	r7, sp, #8
 8003846:	60f8      	str	r0, [r7, #12]
 8003848:	607a      	str	r2, [r7, #4]
 800384a:	461a      	mov	r2, r3
 800384c:	460b      	mov	r3, r1
 800384e:	817b      	strh	r3, [r7, #10]
 8003850:	4613      	mov	r3, r2
 8003852:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800385a:	b2db      	uxtb	r3, r3
 800385c:	2b20      	cmp	r3, #32
 800385e:	f040 80da 	bne.w	8003a16 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003868:	2b01      	cmp	r3, #1
 800386a:	d101      	bne.n	8003870 <HAL_I2C_Master_Transmit+0x30>
 800386c:	2302      	movs	r3, #2
 800386e:	e0d3      	b.n	8003a18 <HAL_I2C_Master_Transmit+0x1d8>
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	2201      	movs	r2, #1
 8003874:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003878:	f7fe fe8c 	bl	8002594 <HAL_GetTick>
 800387c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800387e:	697b      	ldr	r3, [r7, #20]
 8003880:	9300      	str	r3, [sp, #0]
 8003882:	2319      	movs	r3, #25
 8003884:	2201      	movs	r2, #1
 8003886:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800388a:	68f8      	ldr	r0, [r7, #12]
 800388c:	f000 faed 	bl	8003e6a <I2C_WaitOnFlagUntilTimeout>
 8003890:	4603      	mov	r3, r0
 8003892:	2b00      	cmp	r3, #0
 8003894:	d001      	beq.n	800389a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8003896:	2301      	movs	r3, #1
 8003898:	e0be      	b.n	8003a18 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	2221      	movs	r2, #33	; 0x21
 800389e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	2210      	movs	r2, #16
 80038a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	2200      	movs	r2, #0
 80038ae:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	687a      	ldr	r2, [r7, #4]
 80038b4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	893a      	ldrh	r2, [r7, #8]
 80038ba:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	2200      	movs	r2, #0
 80038c0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038c6:	b29b      	uxth	r3, r3
 80038c8:	2bff      	cmp	r3, #255	; 0xff
 80038ca:	d90e      	bls.n	80038ea <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	22ff      	movs	r2, #255	; 0xff
 80038d0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038d6:	b2da      	uxtb	r2, r3
 80038d8:	8979      	ldrh	r1, [r7, #10]
 80038da:	4b51      	ldr	r3, [pc, #324]	; (8003a20 <HAL_I2C_Master_Transmit+0x1e0>)
 80038dc:	9300      	str	r3, [sp, #0]
 80038de:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80038e2:	68f8      	ldr	r0, [r7, #12]
 80038e4:	f000 fce4 	bl	80042b0 <I2C_TransferConfig>
 80038e8:	e06c      	b.n	80039c4 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038ee:	b29a      	uxth	r2, r3
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038f8:	b2da      	uxtb	r2, r3
 80038fa:	8979      	ldrh	r1, [r7, #10]
 80038fc:	4b48      	ldr	r3, [pc, #288]	; (8003a20 <HAL_I2C_Master_Transmit+0x1e0>)
 80038fe:	9300      	str	r3, [sp, #0]
 8003900:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003904:	68f8      	ldr	r0, [r7, #12]
 8003906:	f000 fcd3 	bl	80042b0 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800390a:	e05b      	b.n	80039c4 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800390c:	697a      	ldr	r2, [r7, #20]
 800390e:	6a39      	ldr	r1, [r7, #32]
 8003910:	68f8      	ldr	r0, [r7, #12]
 8003912:	f000 faea 	bl	8003eea <I2C_WaitOnTXISFlagUntilTimeout>
 8003916:	4603      	mov	r3, r0
 8003918:	2b00      	cmp	r3, #0
 800391a:	d001      	beq.n	8003920 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 800391c:	2301      	movs	r3, #1
 800391e:	e07b      	b.n	8003a18 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003924:	781a      	ldrb	r2, [r3, #0]
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003930:	1c5a      	adds	r2, r3, #1
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800393a:	b29b      	uxth	r3, r3
 800393c:	3b01      	subs	r3, #1
 800393e:	b29a      	uxth	r2, r3
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003948:	3b01      	subs	r3, #1
 800394a:	b29a      	uxth	r2, r3
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003954:	b29b      	uxth	r3, r3
 8003956:	2b00      	cmp	r3, #0
 8003958:	d034      	beq.n	80039c4 <HAL_I2C_Master_Transmit+0x184>
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800395e:	2b00      	cmp	r3, #0
 8003960:	d130      	bne.n	80039c4 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003962:	697b      	ldr	r3, [r7, #20]
 8003964:	9300      	str	r3, [sp, #0]
 8003966:	6a3b      	ldr	r3, [r7, #32]
 8003968:	2200      	movs	r2, #0
 800396a:	2180      	movs	r1, #128	; 0x80
 800396c:	68f8      	ldr	r0, [r7, #12]
 800396e:	f000 fa7c 	bl	8003e6a <I2C_WaitOnFlagUntilTimeout>
 8003972:	4603      	mov	r3, r0
 8003974:	2b00      	cmp	r3, #0
 8003976:	d001      	beq.n	800397c <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8003978:	2301      	movs	r3, #1
 800397a:	e04d      	b.n	8003a18 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003980:	b29b      	uxth	r3, r3
 8003982:	2bff      	cmp	r3, #255	; 0xff
 8003984:	d90e      	bls.n	80039a4 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	22ff      	movs	r2, #255	; 0xff
 800398a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003990:	b2da      	uxtb	r2, r3
 8003992:	8979      	ldrh	r1, [r7, #10]
 8003994:	2300      	movs	r3, #0
 8003996:	9300      	str	r3, [sp, #0]
 8003998:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800399c:	68f8      	ldr	r0, [r7, #12]
 800399e:	f000 fc87 	bl	80042b0 <I2C_TransferConfig>
 80039a2:	e00f      	b.n	80039c4 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039a8:	b29a      	uxth	r2, r3
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039b2:	b2da      	uxtb	r2, r3
 80039b4:	8979      	ldrh	r1, [r7, #10]
 80039b6:	2300      	movs	r3, #0
 80039b8:	9300      	str	r3, [sp, #0]
 80039ba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80039be:	68f8      	ldr	r0, [r7, #12]
 80039c0:	f000 fc76 	bl	80042b0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039c8:	b29b      	uxth	r3, r3
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d19e      	bne.n	800390c <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80039ce:	697a      	ldr	r2, [r7, #20]
 80039d0:	6a39      	ldr	r1, [r7, #32]
 80039d2:	68f8      	ldr	r0, [r7, #12]
 80039d4:	f000 fac9 	bl	8003f6a <I2C_WaitOnSTOPFlagUntilTimeout>
 80039d8:	4603      	mov	r3, r0
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d001      	beq.n	80039e2 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80039de:	2301      	movs	r3, #1
 80039e0:	e01a      	b.n	8003a18 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	2220      	movs	r2, #32
 80039e8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	6859      	ldr	r1, [r3, #4]
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681a      	ldr	r2, [r3, #0]
 80039f4:	4b0b      	ldr	r3, [pc, #44]	; (8003a24 <HAL_I2C_Master_Transmit+0x1e4>)
 80039f6:	400b      	ands	r3, r1
 80039f8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	2220      	movs	r2, #32
 80039fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	2200      	movs	r2, #0
 8003a06:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003a12:	2300      	movs	r3, #0
 8003a14:	e000      	b.n	8003a18 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8003a16:	2302      	movs	r3, #2
  }
}
 8003a18:	4618      	mov	r0, r3
 8003a1a:	3718      	adds	r7, #24
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	bd80      	pop	{r7, pc}
 8003a20:	80002000 	.word	0x80002000
 8003a24:	fe00e800 	.word	0xfe00e800

08003a28 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b088      	sub	sp, #32
 8003a2c:	af02      	add	r7, sp, #8
 8003a2e:	60f8      	str	r0, [r7, #12]
 8003a30:	607a      	str	r2, [r7, #4]
 8003a32:	461a      	mov	r2, r3
 8003a34:	460b      	mov	r3, r1
 8003a36:	817b      	strh	r3, [r7, #10]
 8003a38:	4613      	mov	r3, r2
 8003a3a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a42:	b2db      	uxtb	r3, r3
 8003a44:	2b20      	cmp	r3, #32
 8003a46:	f040 80db 	bne.w	8003c00 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003a50:	2b01      	cmp	r3, #1
 8003a52:	d101      	bne.n	8003a58 <HAL_I2C_Master_Receive+0x30>
 8003a54:	2302      	movs	r3, #2
 8003a56:	e0d4      	b.n	8003c02 <HAL_I2C_Master_Receive+0x1da>
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	2201      	movs	r2, #1
 8003a5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003a60:	f7fe fd98 	bl	8002594 <HAL_GetTick>
 8003a64:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003a66:	697b      	ldr	r3, [r7, #20]
 8003a68:	9300      	str	r3, [sp, #0]
 8003a6a:	2319      	movs	r3, #25
 8003a6c:	2201      	movs	r2, #1
 8003a6e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003a72:	68f8      	ldr	r0, [r7, #12]
 8003a74:	f000 f9f9 	bl	8003e6a <I2C_WaitOnFlagUntilTimeout>
 8003a78:	4603      	mov	r3, r0
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d001      	beq.n	8003a82 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	e0bf      	b.n	8003c02 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	2222      	movs	r2, #34	; 0x22
 8003a86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	2210      	movs	r2, #16
 8003a8e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	2200      	movs	r2, #0
 8003a96:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	687a      	ldr	r2, [r7, #4]
 8003a9c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	893a      	ldrh	r2, [r7, #8]
 8003aa2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003aae:	b29b      	uxth	r3, r3
 8003ab0:	2bff      	cmp	r3, #255	; 0xff
 8003ab2:	d90e      	bls.n	8003ad2 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	22ff      	movs	r2, #255	; 0xff
 8003ab8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003abe:	b2da      	uxtb	r2, r3
 8003ac0:	8979      	ldrh	r1, [r7, #10]
 8003ac2:	4b52      	ldr	r3, [pc, #328]	; (8003c0c <HAL_I2C_Master_Receive+0x1e4>)
 8003ac4:	9300      	str	r3, [sp, #0]
 8003ac6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003aca:	68f8      	ldr	r0, [r7, #12]
 8003acc:	f000 fbf0 	bl	80042b0 <I2C_TransferConfig>
 8003ad0:	e06d      	b.n	8003bae <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ad6:	b29a      	uxth	r2, r3
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ae0:	b2da      	uxtb	r2, r3
 8003ae2:	8979      	ldrh	r1, [r7, #10]
 8003ae4:	4b49      	ldr	r3, [pc, #292]	; (8003c0c <HAL_I2C_Master_Receive+0x1e4>)
 8003ae6:	9300      	str	r3, [sp, #0]
 8003ae8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003aec:	68f8      	ldr	r0, [r7, #12]
 8003aee:	f000 fbdf 	bl	80042b0 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8003af2:	e05c      	b.n	8003bae <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003af4:	697a      	ldr	r2, [r7, #20]
 8003af6:	6a39      	ldr	r1, [r7, #32]
 8003af8:	68f8      	ldr	r0, [r7, #12]
 8003afa:	f000 fa73 	bl	8003fe4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003afe:	4603      	mov	r3, r0
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d001      	beq.n	8003b08 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8003b04:	2301      	movs	r3, #1
 8003b06:	e07c      	b.n	8003c02 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b12:	b2d2      	uxtb	r2, r2
 8003b14:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b1a:	1c5a      	adds	r2, r3, #1
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b24:	3b01      	subs	r3, #1
 8003b26:	b29a      	uxth	r2, r3
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b30:	b29b      	uxth	r3, r3
 8003b32:	3b01      	subs	r3, #1
 8003b34:	b29a      	uxth	r2, r3
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b3e:	b29b      	uxth	r3, r3
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d034      	beq.n	8003bae <HAL_I2C_Master_Receive+0x186>
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d130      	bne.n	8003bae <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003b4c:	697b      	ldr	r3, [r7, #20]
 8003b4e:	9300      	str	r3, [sp, #0]
 8003b50:	6a3b      	ldr	r3, [r7, #32]
 8003b52:	2200      	movs	r2, #0
 8003b54:	2180      	movs	r1, #128	; 0x80
 8003b56:	68f8      	ldr	r0, [r7, #12]
 8003b58:	f000 f987 	bl	8003e6a <I2C_WaitOnFlagUntilTimeout>
 8003b5c:	4603      	mov	r3, r0
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d001      	beq.n	8003b66 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8003b62:	2301      	movs	r3, #1
 8003b64:	e04d      	b.n	8003c02 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b6a:	b29b      	uxth	r3, r3
 8003b6c:	2bff      	cmp	r3, #255	; 0xff
 8003b6e:	d90e      	bls.n	8003b8e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	22ff      	movs	r2, #255	; 0xff
 8003b74:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b7a:	b2da      	uxtb	r2, r3
 8003b7c:	8979      	ldrh	r1, [r7, #10]
 8003b7e:	2300      	movs	r3, #0
 8003b80:	9300      	str	r3, [sp, #0]
 8003b82:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003b86:	68f8      	ldr	r0, [r7, #12]
 8003b88:	f000 fb92 	bl	80042b0 <I2C_TransferConfig>
 8003b8c:	e00f      	b.n	8003bae <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b92:	b29a      	uxth	r2, r3
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b9c:	b2da      	uxtb	r2, r3
 8003b9e:	8979      	ldrh	r1, [r7, #10]
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	9300      	str	r3, [sp, #0]
 8003ba4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003ba8:	68f8      	ldr	r0, [r7, #12]
 8003baa:	f000 fb81 	bl	80042b0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bb2:	b29b      	uxth	r3, r3
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d19d      	bne.n	8003af4 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003bb8:	697a      	ldr	r2, [r7, #20]
 8003bba:	6a39      	ldr	r1, [r7, #32]
 8003bbc:	68f8      	ldr	r0, [r7, #12]
 8003bbe:	f000 f9d4 	bl	8003f6a <I2C_WaitOnSTOPFlagUntilTimeout>
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d001      	beq.n	8003bcc <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8003bc8:	2301      	movs	r3, #1
 8003bca:	e01a      	b.n	8003c02 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	2220      	movs	r2, #32
 8003bd2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	6859      	ldr	r1, [r3, #4]
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681a      	ldr	r2, [r3, #0]
 8003bde:	4b0c      	ldr	r3, [pc, #48]	; (8003c10 <HAL_I2C_Master_Receive+0x1e8>)
 8003be0:	400b      	ands	r3, r1
 8003be2:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	2220      	movs	r2, #32
 8003be8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	2200      	movs	r2, #0
 8003bf0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	e000      	b.n	8003c02 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8003c00:	2302      	movs	r3, #2
  }
}
 8003c02:	4618      	mov	r0, r3
 8003c04:	3718      	adds	r7, #24
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bd80      	pop	{r7, pc}
 8003c0a:	bf00      	nop
 8003c0c:	80002400 	.word	0x80002400
 8003c10:	fe00e800 	.word	0xfe00e800

08003c14 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b08a      	sub	sp, #40	; 0x28
 8003c18:	af02      	add	r7, sp, #8
 8003c1a:	60f8      	str	r0, [r7, #12]
 8003c1c:	607a      	str	r2, [r7, #4]
 8003c1e:	603b      	str	r3, [r7, #0]
 8003c20:	460b      	mov	r3, r1
 8003c22:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8003c24:	2300      	movs	r3, #0
 8003c26:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c2e:	b2db      	uxtb	r3, r3
 8003c30:	2b20      	cmp	r3, #32
 8003c32:	f040 80f1 	bne.w	8003e18 <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	699b      	ldr	r3, [r3, #24]
 8003c3c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003c40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c44:	d101      	bne.n	8003c4a <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8003c46:	2302      	movs	r3, #2
 8003c48:	e0e7      	b.n	8003e1a <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003c50:	2b01      	cmp	r3, #1
 8003c52:	d101      	bne.n	8003c58 <HAL_I2C_IsDeviceReady+0x44>
 8003c54:	2302      	movs	r3, #2
 8003c56:	e0e0      	b.n	8003e1a <HAL_I2C_IsDeviceReady+0x206>
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	2201      	movs	r2, #1
 8003c5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	2224      	movs	r2, #36	; 0x24
 8003c64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	68db      	ldr	r3, [r3, #12]
 8003c72:	2b01      	cmp	r3, #1
 8003c74:	d107      	bne.n	8003c86 <HAL_I2C_IsDeviceReady+0x72>
 8003c76:	897b      	ldrh	r3, [r7, #10]
 8003c78:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003c7c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003c80:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003c84:	e004      	b.n	8003c90 <HAL_I2C_IsDeviceReady+0x7c>
 8003c86:	897b      	ldrh	r3, [r7, #10]
 8003c88:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003c8c:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8003c90:	68fa      	ldr	r2, [r7, #12]
 8003c92:	6812      	ldr	r2, [r2, #0]
 8003c94:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8003c96:	f7fe fc7d 	bl	8002594 <HAL_GetTick>
 8003c9a:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	699b      	ldr	r3, [r3, #24]
 8003ca2:	f003 0320 	and.w	r3, r3, #32
 8003ca6:	2b20      	cmp	r3, #32
 8003ca8:	bf0c      	ite	eq
 8003caa:	2301      	moveq	r3, #1
 8003cac:	2300      	movne	r3, #0
 8003cae:	b2db      	uxtb	r3, r3
 8003cb0:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	699b      	ldr	r3, [r3, #24]
 8003cb8:	f003 0310 	and.w	r3, r3, #16
 8003cbc:	2b10      	cmp	r3, #16
 8003cbe:	bf0c      	ite	eq
 8003cc0:	2301      	moveq	r3, #1
 8003cc2:	2300      	movne	r3, #0
 8003cc4:	b2db      	uxtb	r3, r3
 8003cc6:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8003cc8:	e034      	b.n	8003d34 <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cd0:	d01a      	beq.n	8003d08 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003cd2:	f7fe fc5f 	bl	8002594 <HAL_GetTick>
 8003cd6:	4602      	mov	r2, r0
 8003cd8:	69bb      	ldr	r3, [r7, #24]
 8003cda:	1ad3      	subs	r3, r2, r3
 8003cdc:	683a      	ldr	r2, [r7, #0]
 8003cde:	429a      	cmp	r2, r3
 8003ce0:	d302      	bcc.n	8003ce8 <HAL_I2C_IsDeviceReady+0xd4>
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d10f      	bne.n	8003d08 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	2220      	movs	r2, #32
 8003cec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cf4:	f043 0220 	orr.w	r2, r3, #32
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	2200      	movs	r2, #0
 8003d00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8003d04:	2301      	movs	r3, #1
 8003d06:	e088      	b.n	8003e1a <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	699b      	ldr	r3, [r3, #24]
 8003d0e:	f003 0320 	and.w	r3, r3, #32
 8003d12:	2b20      	cmp	r3, #32
 8003d14:	bf0c      	ite	eq
 8003d16:	2301      	moveq	r3, #1
 8003d18:	2300      	movne	r3, #0
 8003d1a:	b2db      	uxtb	r3, r3
 8003d1c:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	699b      	ldr	r3, [r3, #24]
 8003d24:	f003 0310 	and.w	r3, r3, #16
 8003d28:	2b10      	cmp	r3, #16
 8003d2a:	bf0c      	ite	eq
 8003d2c:	2301      	moveq	r3, #1
 8003d2e:	2300      	movne	r3, #0
 8003d30:	b2db      	uxtb	r3, r3
 8003d32:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8003d34:	7ffb      	ldrb	r3, [r7, #31]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d102      	bne.n	8003d40 <HAL_I2C_IsDeviceReady+0x12c>
 8003d3a:	7fbb      	ldrb	r3, [r7, #30]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d0c4      	beq.n	8003cca <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	699b      	ldr	r3, [r3, #24]
 8003d46:	f003 0310 	and.w	r3, r3, #16
 8003d4a:	2b10      	cmp	r3, #16
 8003d4c:	d01a      	beq.n	8003d84 <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8003d4e:	69bb      	ldr	r3, [r7, #24]
 8003d50:	9300      	str	r3, [sp, #0]
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	2200      	movs	r2, #0
 8003d56:	2120      	movs	r1, #32
 8003d58:	68f8      	ldr	r0, [r7, #12]
 8003d5a:	f000 f886 	bl	8003e6a <I2C_WaitOnFlagUntilTimeout>
 8003d5e:	4603      	mov	r3, r0
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d001      	beq.n	8003d68 <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 8003d64:	2301      	movs	r3, #1
 8003d66:	e058      	b.n	8003e1a <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	2220      	movs	r2, #32
 8003d6e:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	2220      	movs	r2, #32
 8003d74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8003d80:	2300      	movs	r3, #0
 8003d82:	e04a      	b.n	8003e1a <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8003d84:	69bb      	ldr	r3, [r7, #24]
 8003d86:	9300      	str	r3, [sp, #0]
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	2120      	movs	r1, #32
 8003d8e:	68f8      	ldr	r0, [r7, #12]
 8003d90:	f000 f86b 	bl	8003e6a <I2C_WaitOnFlagUntilTimeout>
 8003d94:	4603      	mov	r3, r0
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d001      	beq.n	8003d9e <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	e03d      	b.n	8003e1a <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	2210      	movs	r2, #16
 8003da4:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	2220      	movs	r2, #32
 8003dac:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8003dae:	697b      	ldr	r3, [r7, #20]
 8003db0:	687a      	ldr	r2, [r7, #4]
 8003db2:	429a      	cmp	r2, r3
 8003db4:	d118      	bne.n	8003de8 <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	685a      	ldr	r2, [r3, #4]
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003dc4:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8003dc6:	69bb      	ldr	r3, [r7, #24]
 8003dc8:	9300      	str	r3, [sp, #0]
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	2200      	movs	r2, #0
 8003dce:	2120      	movs	r1, #32
 8003dd0:	68f8      	ldr	r0, [r7, #12]
 8003dd2:	f000 f84a 	bl	8003e6a <I2C_WaitOnFlagUntilTimeout>
 8003dd6:	4603      	mov	r3, r0
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d001      	beq.n	8003de0 <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 8003ddc:	2301      	movs	r3, #1
 8003dde:	e01c      	b.n	8003e1a <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	2220      	movs	r2, #32
 8003de6:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8003de8:	697b      	ldr	r3, [r7, #20]
 8003dea:	3301      	adds	r3, #1
 8003dec:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8003dee:	697b      	ldr	r3, [r7, #20]
 8003df0:	687a      	ldr	r2, [r7, #4]
 8003df2:	429a      	cmp	r2, r3
 8003df4:	f63f af3b 	bhi.w	8003c6e <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	2220      	movs	r2, #32
 8003dfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e04:	f043 0220 	orr.w	r2, r3, #32
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	2200      	movs	r2, #0
 8003e10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8003e14:	2301      	movs	r3, #1
 8003e16:	e000      	b.n	8003e1a <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 8003e18:	2302      	movs	r3, #2
  }
}
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	3720      	adds	r7, #32
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	bd80      	pop	{r7, pc}

08003e22 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003e22:	b480      	push	{r7}
 8003e24:	b083      	sub	sp, #12
 8003e26:	af00      	add	r7, sp, #0
 8003e28:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	699b      	ldr	r3, [r3, #24]
 8003e30:	f003 0302 	and.w	r3, r3, #2
 8003e34:	2b02      	cmp	r3, #2
 8003e36:	d103      	bne.n	8003e40 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	699b      	ldr	r3, [r3, #24]
 8003e46:	f003 0301 	and.w	r3, r3, #1
 8003e4a:	2b01      	cmp	r3, #1
 8003e4c:	d007      	beq.n	8003e5e <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	699a      	ldr	r2, [r3, #24]
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f042 0201 	orr.w	r2, r2, #1
 8003e5c:	619a      	str	r2, [r3, #24]
  }
}
 8003e5e:	bf00      	nop
 8003e60:	370c      	adds	r7, #12
 8003e62:	46bd      	mov	sp, r7
 8003e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e68:	4770      	bx	lr

08003e6a <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003e6a:	b580      	push	{r7, lr}
 8003e6c:	b084      	sub	sp, #16
 8003e6e:	af00      	add	r7, sp, #0
 8003e70:	60f8      	str	r0, [r7, #12]
 8003e72:	60b9      	str	r1, [r7, #8]
 8003e74:	603b      	str	r3, [r7, #0]
 8003e76:	4613      	mov	r3, r2
 8003e78:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e7a:	e022      	b.n	8003ec2 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e82:	d01e      	beq.n	8003ec2 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e84:	f7fe fb86 	bl	8002594 <HAL_GetTick>
 8003e88:	4602      	mov	r2, r0
 8003e8a:	69bb      	ldr	r3, [r7, #24]
 8003e8c:	1ad3      	subs	r3, r2, r3
 8003e8e:	683a      	ldr	r2, [r7, #0]
 8003e90:	429a      	cmp	r2, r3
 8003e92:	d302      	bcc.n	8003e9a <I2C_WaitOnFlagUntilTimeout+0x30>
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d113      	bne.n	8003ec2 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e9e:	f043 0220 	orr.w	r2, r3, #32
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	2220      	movs	r2, #32
 8003eaa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	2200      	movs	r2, #0
 8003eba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	e00f      	b.n	8003ee2 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	699a      	ldr	r2, [r3, #24]
 8003ec8:	68bb      	ldr	r3, [r7, #8]
 8003eca:	4013      	ands	r3, r2
 8003ecc:	68ba      	ldr	r2, [r7, #8]
 8003ece:	429a      	cmp	r2, r3
 8003ed0:	bf0c      	ite	eq
 8003ed2:	2301      	moveq	r3, #1
 8003ed4:	2300      	movne	r3, #0
 8003ed6:	b2db      	uxtb	r3, r3
 8003ed8:	461a      	mov	r2, r3
 8003eda:	79fb      	ldrb	r3, [r7, #7]
 8003edc:	429a      	cmp	r2, r3
 8003ede:	d0cd      	beq.n	8003e7c <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003ee0:	2300      	movs	r3, #0
}
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	3710      	adds	r7, #16
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	bd80      	pop	{r7, pc}

08003eea <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003eea:	b580      	push	{r7, lr}
 8003eec:	b084      	sub	sp, #16
 8003eee:	af00      	add	r7, sp, #0
 8003ef0:	60f8      	str	r0, [r7, #12]
 8003ef2:	60b9      	str	r1, [r7, #8]
 8003ef4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003ef6:	e02c      	b.n	8003f52 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ef8:	687a      	ldr	r2, [r7, #4]
 8003efa:	68b9      	ldr	r1, [r7, #8]
 8003efc:	68f8      	ldr	r0, [r7, #12]
 8003efe:	f000 f8eb 	bl	80040d8 <I2C_IsErrorOccurred>
 8003f02:	4603      	mov	r3, r0
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d001      	beq.n	8003f0c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003f08:	2301      	movs	r3, #1
 8003f0a:	e02a      	b.n	8003f62 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f0c:	68bb      	ldr	r3, [r7, #8]
 8003f0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f12:	d01e      	beq.n	8003f52 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f14:	f7fe fb3e 	bl	8002594 <HAL_GetTick>
 8003f18:	4602      	mov	r2, r0
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	1ad3      	subs	r3, r2, r3
 8003f1e:	68ba      	ldr	r2, [r7, #8]
 8003f20:	429a      	cmp	r2, r3
 8003f22:	d302      	bcc.n	8003f2a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003f24:	68bb      	ldr	r3, [r7, #8]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d113      	bne.n	8003f52 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f2e:	f043 0220 	orr.w	r2, r3, #32
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	2220      	movs	r2, #32
 8003f3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	2200      	movs	r2, #0
 8003f42:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	2200      	movs	r2, #0
 8003f4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003f4e:	2301      	movs	r3, #1
 8003f50:	e007      	b.n	8003f62 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	699b      	ldr	r3, [r3, #24]
 8003f58:	f003 0302 	and.w	r3, r3, #2
 8003f5c:	2b02      	cmp	r3, #2
 8003f5e:	d1cb      	bne.n	8003ef8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003f60:	2300      	movs	r3, #0
}
 8003f62:	4618      	mov	r0, r3
 8003f64:	3710      	adds	r7, #16
 8003f66:	46bd      	mov	sp, r7
 8003f68:	bd80      	pop	{r7, pc}

08003f6a <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003f6a:	b580      	push	{r7, lr}
 8003f6c:	b084      	sub	sp, #16
 8003f6e:	af00      	add	r7, sp, #0
 8003f70:	60f8      	str	r0, [r7, #12]
 8003f72:	60b9      	str	r1, [r7, #8]
 8003f74:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003f76:	e028      	b.n	8003fca <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f78:	687a      	ldr	r2, [r7, #4]
 8003f7a:	68b9      	ldr	r1, [r7, #8]
 8003f7c:	68f8      	ldr	r0, [r7, #12]
 8003f7e:	f000 f8ab 	bl	80040d8 <I2C_IsErrorOccurred>
 8003f82:	4603      	mov	r3, r0
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d001      	beq.n	8003f8c <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003f88:	2301      	movs	r3, #1
 8003f8a:	e026      	b.n	8003fda <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f8c:	f7fe fb02 	bl	8002594 <HAL_GetTick>
 8003f90:	4602      	mov	r2, r0
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	1ad3      	subs	r3, r2, r3
 8003f96:	68ba      	ldr	r2, [r7, #8]
 8003f98:	429a      	cmp	r2, r3
 8003f9a:	d302      	bcc.n	8003fa2 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003f9c:	68bb      	ldr	r3, [r7, #8]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d113      	bne.n	8003fca <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fa6:	f043 0220 	orr.w	r2, r3, #32
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	2220      	movs	r2, #32
 8003fb2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	2200      	movs	r2, #0
 8003fba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	e007      	b.n	8003fda <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	699b      	ldr	r3, [r3, #24]
 8003fd0:	f003 0320 	and.w	r3, r3, #32
 8003fd4:	2b20      	cmp	r3, #32
 8003fd6:	d1cf      	bne.n	8003f78 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003fd8:	2300      	movs	r3, #0
}
 8003fda:	4618      	mov	r0, r3
 8003fdc:	3710      	adds	r7, #16
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	bd80      	pop	{r7, pc}
	...

08003fe4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b084      	sub	sp, #16
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	60f8      	str	r0, [r7, #12]
 8003fec:	60b9      	str	r1, [r7, #8]
 8003fee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003ff0:	e064      	b.n	80040bc <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ff2:	687a      	ldr	r2, [r7, #4]
 8003ff4:	68b9      	ldr	r1, [r7, #8]
 8003ff6:	68f8      	ldr	r0, [r7, #12]
 8003ff8:	f000 f86e 	bl	80040d8 <I2C_IsErrorOccurred>
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d001      	beq.n	8004006 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004002:	2301      	movs	r3, #1
 8004004:	e062      	b.n	80040cc <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	699b      	ldr	r3, [r3, #24]
 800400c:	f003 0320 	and.w	r3, r3, #32
 8004010:	2b20      	cmp	r3, #32
 8004012:	d138      	bne.n	8004086 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	699b      	ldr	r3, [r3, #24]
 800401a:	f003 0304 	and.w	r3, r3, #4
 800401e:	2b04      	cmp	r3, #4
 8004020:	d105      	bne.n	800402e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004026:	2b00      	cmp	r3, #0
 8004028:	d001      	beq.n	800402e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800402a:	2300      	movs	r3, #0
 800402c:	e04e      	b.n	80040cc <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	699b      	ldr	r3, [r3, #24]
 8004034:	f003 0310 	and.w	r3, r3, #16
 8004038:	2b10      	cmp	r3, #16
 800403a:	d107      	bne.n	800404c <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	2210      	movs	r2, #16
 8004042:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	2204      	movs	r2, #4
 8004048:	645a      	str	r2, [r3, #68]	; 0x44
 800404a:	e002      	b.n	8004052 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	2200      	movs	r2, #0
 8004050:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	2220      	movs	r2, #32
 8004058:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	6859      	ldr	r1, [r3, #4]
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681a      	ldr	r2, [r3, #0]
 8004064:	4b1b      	ldr	r3, [pc, #108]	; (80040d4 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8004066:	400b      	ands	r3, r1
 8004068:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	2220      	movs	r2, #32
 800406e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	2200      	movs	r2, #0
 8004076:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	2200      	movs	r2, #0
 800407e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004082:	2301      	movs	r3, #1
 8004084:	e022      	b.n	80040cc <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004086:	f7fe fa85 	bl	8002594 <HAL_GetTick>
 800408a:	4602      	mov	r2, r0
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	1ad3      	subs	r3, r2, r3
 8004090:	68ba      	ldr	r2, [r7, #8]
 8004092:	429a      	cmp	r2, r3
 8004094:	d302      	bcc.n	800409c <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8004096:	68bb      	ldr	r3, [r7, #8]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d10f      	bne.n	80040bc <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040a0:	f043 0220 	orr.w	r2, r3, #32
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	2220      	movs	r2, #32
 80040ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	2200      	movs	r2, #0
 80040b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80040b8:	2301      	movs	r3, #1
 80040ba:	e007      	b.n	80040cc <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	699b      	ldr	r3, [r3, #24]
 80040c2:	f003 0304 	and.w	r3, r3, #4
 80040c6:	2b04      	cmp	r3, #4
 80040c8:	d193      	bne.n	8003ff2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80040ca:	2300      	movs	r3, #0
}
 80040cc:	4618      	mov	r0, r3
 80040ce:	3710      	adds	r7, #16
 80040d0:	46bd      	mov	sp, r7
 80040d2:	bd80      	pop	{r7, pc}
 80040d4:	fe00e800 	.word	0xfe00e800

080040d8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b08a      	sub	sp, #40	; 0x28
 80040dc:	af00      	add	r7, sp, #0
 80040de:	60f8      	str	r0, [r7, #12]
 80040e0:	60b9      	str	r1, [r7, #8]
 80040e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80040e4:	2300      	movs	r3, #0
 80040e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	699b      	ldr	r3, [r3, #24]
 80040f0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80040f2:	2300      	movs	r3, #0
 80040f4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80040fa:	69bb      	ldr	r3, [r7, #24]
 80040fc:	f003 0310 	and.w	r3, r3, #16
 8004100:	2b00      	cmp	r3, #0
 8004102:	d075      	beq.n	80041f0 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	2210      	movs	r2, #16
 800410a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800410c:	e056      	b.n	80041bc <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800410e:	68bb      	ldr	r3, [r7, #8]
 8004110:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004114:	d052      	beq.n	80041bc <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004116:	f7fe fa3d 	bl	8002594 <HAL_GetTick>
 800411a:	4602      	mov	r2, r0
 800411c:	69fb      	ldr	r3, [r7, #28]
 800411e:	1ad3      	subs	r3, r2, r3
 8004120:	68ba      	ldr	r2, [r7, #8]
 8004122:	429a      	cmp	r2, r3
 8004124:	d302      	bcc.n	800412c <I2C_IsErrorOccurred+0x54>
 8004126:	68bb      	ldr	r3, [r7, #8]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d147      	bne.n	80041bc <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	685b      	ldr	r3, [r3, #4]
 8004132:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004136:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800413e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	699b      	ldr	r3, [r3, #24]
 8004146:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800414a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800414e:	d12e      	bne.n	80041ae <I2C_IsErrorOccurred+0xd6>
 8004150:	697b      	ldr	r3, [r7, #20]
 8004152:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004156:	d02a      	beq.n	80041ae <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8004158:	7cfb      	ldrb	r3, [r7, #19]
 800415a:	2b20      	cmp	r3, #32
 800415c:	d027      	beq.n	80041ae <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	685a      	ldr	r2, [r3, #4]
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800416c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800416e:	f7fe fa11 	bl	8002594 <HAL_GetTick>
 8004172:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004174:	e01b      	b.n	80041ae <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004176:	f7fe fa0d 	bl	8002594 <HAL_GetTick>
 800417a:	4602      	mov	r2, r0
 800417c:	69fb      	ldr	r3, [r7, #28]
 800417e:	1ad3      	subs	r3, r2, r3
 8004180:	2b19      	cmp	r3, #25
 8004182:	d914      	bls.n	80041ae <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004188:	f043 0220 	orr.w	r2, r3, #32
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	2220      	movs	r2, #32
 8004194:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	2200      	movs	r2, #0
 800419c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	2200      	movs	r2, #0
 80041a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 80041a8:	2301      	movs	r3, #1
 80041aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	699b      	ldr	r3, [r3, #24]
 80041b4:	f003 0320 	and.w	r3, r3, #32
 80041b8:	2b20      	cmp	r3, #32
 80041ba:	d1dc      	bne.n	8004176 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	699b      	ldr	r3, [r3, #24]
 80041c2:	f003 0320 	and.w	r3, r3, #32
 80041c6:	2b20      	cmp	r3, #32
 80041c8:	d003      	beq.n	80041d2 <I2C_IsErrorOccurred+0xfa>
 80041ca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d09d      	beq.n	800410e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80041d2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d103      	bne.n	80041e2 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	2220      	movs	r2, #32
 80041e0:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80041e2:	6a3b      	ldr	r3, [r7, #32]
 80041e4:	f043 0304 	orr.w	r3, r3, #4
 80041e8:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80041ea:	2301      	movs	r3, #1
 80041ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	699b      	ldr	r3, [r3, #24]
 80041f6:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80041f8:	69bb      	ldr	r3, [r7, #24]
 80041fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d00b      	beq.n	800421a <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004202:	6a3b      	ldr	r3, [r7, #32]
 8004204:	f043 0301 	orr.w	r3, r3, #1
 8004208:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004212:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004214:	2301      	movs	r3, #1
 8004216:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800421a:	69bb      	ldr	r3, [r7, #24]
 800421c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004220:	2b00      	cmp	r3, #0
 8004222:	d00b      	beq.n	800423c <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004224:	6a3b      	ldr	r3, [r7, #32]
 8004226:	f043 0308 	orr.w	r3, r3, #8
 800422a:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004234:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004236:	2301      	movs	r3, #1
 8004238:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800423c:	69bb      	ldr	r3, [r7, #24]
 800423e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004242:	2b00      	cmp	r3, #0
 8004244:	d00b      	beq.n	800425e <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004246:	6a3b      	ldr	r3, [r7, #32]
 8004248:	f043 0302 	orr.w	r3, r3, #2
 800424c:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004256:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004258:	2301      	movs	r3, #1
 800425a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800425e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004262:	2b00      	cmp	r3, #0
 8004264:	d01c      	beq.n	80042a0 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004266:	68f8      	ldr	r0, [r7, #12]
 8004268:	f7ff fddb 	bl	8003e22 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	6859      	ldr	r1, [r3, #4]
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681a      	ldr	r2, [r3, #0]
 8004276:	4b0d      	ldr	r3, [pc, #52]	; (80042ac <I2C_IsErrorOccurred+0x1d4>)
 8004278:	400b      	ands	r3, r1
 800427a:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004280:	6a3b      	ldr	r3, [r7, #32]
 8004282:	431a      	orrs	r2, r3
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	2220      	movs	r2, #32
 800428c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	2200      	movs	r2, #0
 8004294:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	2200      	movs	r2, #0
 800429c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80042a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80042a4:	4618      	mov	r0, r3
 80042a6:	3728      	adds	r7, #40	; 0x28
 80042a8:	46bd      	mov	sp, r7
 80042aa:	bd80      	pop	{r7, pc}
 80042ac:	fe00e800 	.word	0xfe00e800

080042b0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80042b0:	b480      	push	{r7}
 80042b2:	b087      	sub	sp, #28
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	60f8      	str	r0, [r7, #12]
 80042b8:	607b      	str	r3, [r7, #4]
 80042ba:	460b      	mov	r3, r1
 80042bc:	817b      	strh	r3, [r7, #10]
 80042be:	4613      	mov	r3, r2
 80042c0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80042c2:	897b      	ldrh	r3, [r7, #10]
 80042c4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80042c8:	7a7b      	ldrb	r3, [r7, #9]
 80042ca:	041b      	lsls	r3, r3, #16
 80042cc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80042d0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80042d6:	6a3b      	ldr	r3, [r7, #32]
 80042d8:	4313      	orrs	r3, r2
 80042da:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80042de:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	685a      	ldr	r2, [r3, #4]
 80042e6:	6a3b      	ldr	r3, [r7, #32]
 80042e8:	0d5b      	lsrs	r3, r3, #21
 80042ea:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80042ee:	4b08      	ldr	r3, [pc, #32]	; (8004310 <I2C_TransferConfig+0x60>)
 80042f0:	430b      	orrs	r3, r1
 80042f2:	43db      	mvns	r3, r3
 80042f4:	ea02 0103 	and.w	r1, r2, r3
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	697a      	ldr	r2, [r7, #20]
 80042fe:	430a      	orrs	r2, r1
 8004300:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004302:	bf00      	nop
 8004304:	371c      	adds	r7, #28
 8004306:	46bd      	mov	sp, r7
 8004308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430c:	4770      	bx	lr
 800430e:	bf00      	nop
 8004310:	03ff63ff 	.word	0x03ff63ff

08004314 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004314:	b480      	push	{r7}
 8004316:	b083      	sub	sp, #12
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
 800431c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004324:	b2db      	uxtb	r3, r3
 8004326:	2b20      	cmp	r3, #32
 8004328:	d138      	bne.n	800439c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004330:	2b01      	cmp	r3, #1
 8004332:	d101      	bne.n	8004338 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004334:	2302      	movs	r3, #2
 8004336:	e032      	b.n	800439e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2201      	movs	r2, #1
 800433c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2224      	movs	r2, #36	; 0x24
 8004344:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	681a      	ldr	r2, [r3, #0]
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f022 0201 	bic.w	r2, r2, #1
 8004356:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	681a      	ldr	r2, [r3, #0]
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004366:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	6819      	ldr	r1, [r3, #0]
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	683a      	ldr	r2, [r7, #0]
 8004374:	430a      	orrs	r2, r1
 8004376:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	681a      	ldr	r2, [r3, #0]
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f042 0201 	orr.w	r2, r2, #1
 8004386:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2220      	movs	r2, #32
 800438c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2200      	movs	r2, #0
 8004394:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004398:	2300      	movs	r3, #0
 800439a:	e000      	b.n	800439e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800439c:	2302      	movs	r3, #2
  }
}
 800439e:	4618      	mov	r0, r3
 80043a0:	370c      	adds	r7, #12
 80043a2:	46bd      	mov	sp, r7
 80043a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a8:	4770      	bx	lr

080043aa <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80043aa:	b480      	push	{r7}
 80043ac:	b085      	sub	sp, #20
 80043ae:	af00      	add	r7, sp, #0
 80043b0:	6078      	str	r0, [r7, #4]
 80043b2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80043ba:	b2db      	uxtb	r3, r3
 80043bc:	2b20      	cmp	r3, #32
 80043be:	d139      	bne.n	8004434 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80043c6:	2b01      	cmp	r3, #1
 80043c8:	d101      	bne.n	80043ce <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80043ca:	2302      	movs	r3, #2
 80043cc:	e033      	b.n	8004436 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2201      	movs	r2, #1
 80043d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2224      	movs	r2, #36	; 0x24
 80043da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	681a      	ldr	r2, [r3, #0]
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f022 0201 	bic.w	r2, r2, #1
 80043ec:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80043fc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	021b      	lsls	r3, r3, #8
 8004402:	68fa      	ldr	r2, [r7, #12]
 8004404:	4313      	orrs	r3, r2
 8004406:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	68fa      	ldr	r2, [r7, #12]
 800440e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	681a      	ldr	r2, [r3, #0]
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f042 0201 	orr.w	r2, r2, #1
 800441e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2220      	movs	r2, #32
 8004424:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2200      	movs	r2, #0
 800442c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004430:	2300      	movs	r3, #0
 8004432:	e000      	b.n	8004436 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004434:	2302      	movs	r3, #2
  }
}
 8004436:	4618      	mov	r0, r3
 8004438:	3714      	adds	r7, #20
 800443a:	46bd      	mov	sp, r7
 800443c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004440:	4770      	bx	lr
	...

08004444 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004444:	b480      	push	{r7}
 8004446:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004448:	4b04      	ldr	r3, [pc, #16]	; (800445c <HAL_PWREx_GetVoltageRange+0x18>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8004450:	4618      	mov	r0, r3
 8004452:	46bd      	mov	sp, r7
 8004454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004458:	4770      	bx	lr
 800445a:	bf00      	nop
 800445c:	40007000 	.word	0x40007000

08004460 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004460:	b480      	push	{r7}
 8004462:	b085      	sub	sp, #20
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800446e:	d130      	bne.n	80044d2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004470:	4b23      	ldr	r3, [pc, #140]	; (8004500 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004478:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800447c:	d038      	beq.n	80044f0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800447e:	4b20      	ldr	r3, [pc, #128]	; (8004500 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004486:	4a1e      	ldr	r2, [pc, #120]	; (8004500 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004488:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800448c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800448e:	4b1d      	ldr	r3, [pc, #116]	; (8004504 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	2232      	movs	r2, #50	; 0x32
 8004494:	fb02 f303 	mul.w	r3, r2, r3
 8004498:	4a1b      	ldr	r2, [pc, #108]	; (8004508 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800449a:	fba2 2303 	umull	r2, r3, r2, r3
 800449e:	0c9b      	lsrs	r3, r3, #18
 80044a0:	3301      	adds	r3, #1
 80044a2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80044a4:	e002      	b.n	80044ac <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	3b01      	subs	r3, #1
 80044aa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80044ac:	4b14      	ldr	r3, [pc, #80]	; (8004500 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80044ae:	695b      	ldr	r3, [r3, #20]
 80044b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044b8:	d102      	bne.n	80044c0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d1f2      	bne.n	80044a6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80044c0:	4b0f      	ldr	r3, [pc, #60]	; (8004500 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80044c2:	695b      	ldr	r3, [r3, #20]
 80044c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044cc:	d110      	bne.n	80044f0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80044ce:	2303      	movs	r3, #3
 80044d0:	e00f      	b.n	80044f2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80044d2:	4b0b      	ldr	r3, [pc, #44]	; (8004500 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80044da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044de:	d007      	beq.n	80044f0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80044e0:	4b07      	ldr	r3, [pc, #28]	; (8004500 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80044e8:	4a05      	ldr	r2, [pc, #20]	; (8004500 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80044ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80044ee:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80044f0:	2300      	movs	r3, #0
}
 80044f2:	4618      	mov	r0, r3
 80044f4:	3714      	adds	r7, #20
 80044f6:	46bd      	mov	sp, r7
 80044f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fc:	4770      	bx	lr
 80044fe:	bf00      	nop
 8004500:	40007000 	.word	0x40007000
 8004504:	20000014 	.word	0x20000014
 8004508:	431bde83 	.word	0x431bde83

0800450c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b088      	sub	sp, #32
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d101      	bne.n	800451e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800451a:	2301      	movs	r3, #1
 800451c:	e3ca      	b.n	8004cb4 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800451e:	4b97      	ldr	r3, [pc, #604]	; (800477c <HAL_RCC_OscConfig+0x270>)
 8004520:	689b      	ldr	r3, [r3, #8]
 8004522:	f003 030c 	and.w	r3, r3, #12
 8004526:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004528:	4b94      	ldr	r3, [pc, #592]	; (800477c <HAL_RCC_OscConfig+0x270>)
 800452a:	68db      	ldr	r3, [r3, #12]
 800452c:	f003 0303 	and.w	r3, r3, #3
 8004530:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f003 0310 	and.w	r3, r3, #16
 800453a:	2b00      	cmp	r3, #0
 800453c:	f000 80e4 	beq.w	8004708 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004540:	69bb      	ldr	r3, [r7, #24]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d007      	beq.n	8004556 <HAL_RCC_OscConfig+0x4a>
 8004546:	69bb      	ldr	r3, [r7, #24]
 8004548:	2b0c      	cmp	r3, #12
 800454a:	f040 808b 	bne.w	8004664 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800454e:	697b      	ldr	r3, [r7, #20]
 8004550:	2b01      	cmp	r3, #1
 8004552:	f040 8087 	bne.w	8004664 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004556:	4b89      	ldr	r3, [pc, #548]	; (800477c <HAL_RCC_OscConfig+0x270>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f003 0302 	and.w	r3, r3, #2
 800455e:	2b00      	cmp	r3, #0
 8004560:	d005      	beq.n	800456e <HAL_RCC_OscConfig+0x62>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	699b      	ldr	r3, [r3, #24]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d101      	bne.n	800456e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800456a:	2301      	movs	r3, #1
 800456c:	e3a2      	b.n	8004cb4 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6a1a      	ldr	r2, [r3, #32]
 8004572:	4b82      	ldr	r3, [pc, #520]	; (800477c <HAL_RCC_OscConfig+0x270>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f003 0308 	and.w	r3, r3, #8
 800457a:	2b00      	cmp	r3, #0
 800457c:	d004      	beq.n	8004588 <HAL_RCC_OscConfig+0x7c>
 800457e:	4b7f      	ldr	r3, [pc, #508]	; (800477c <HAL_RCC_OscConfig+0x270>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004586:	e005      	b.n	8004594 <HAL_RCC_OscConfig+0x88>
 8004588:	4b7c      	ldr	r3, [pc, #496]	; (800477c <HAL_RCC_OscConfig+0x270>)
 800458a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800458e:	091b      	lsrs	r3, r3, #4
 8004590:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004594:	4293      	cmp	r3, r2
 8004596:	d223      	bcs.n	80045e0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6a1b      	ldr	r3, [r3, #32]
 800459c:	4618      	mov	r0, r3
 800459e:	f000 fd55 	bl	800504c <RCC_SetFlashLatencyFromMSIRange>
 80045a2:	4603      	mov	r3, r0
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d001      	beq.n	80045ac <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80045a8:	2301      	movs	r3, #1
 80045aa:	e383      	b.n	8004cb4 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80045ac:	4b73      	ldr	r3, [pc, #460]	; (800477c <HAL_RCC_OscConfig+0x270>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4a72      	ldr	r2, [pc, #456]	; (800477c <HAL_RCC_OscConfig+0x270>)
 80045b2:	f043 0308 	orr.w	r3, r3, #8
 80045b6:	6013      	str	r3, [r2, #0]
 80045b8:	4b70      	ldr	r3, [pc, #448]	; (800477c <HAL_RCC_OscConfig+0x270>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6a1b      	ldr	r3, [r3, #32]
 80045c4:	496d      	ldr	r1, [pc, #436]	; (800477c <HAL_RCC_OscConfig+0x270>)
 80045c6:	4313      	orrs	r3, r2
 80045c8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80045ca:	4b6c      	ldr	r3, [pc, #432]	; (800477c <HAL_RCC_OscConfig+0x270>)
 80045cc:	685b      	ldr	r3, [r3, #4]
 80045ce:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	69db      	ldr	r3, [r3, #28]
 80045d6:	021b      	lsls	r3, r3, #8
 80045d8:	4968      	ldr	r1, [pc, #416]	; (800477c <HAL_RCC_OscConfig+0x270>)
 80045da:	4313      	orrs	r3, r2
 80045dc:	604b      	str	r3, [r1, #4]
 80045de:	e025      	b.n	800462c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80045e0:	4b66      	ldr	r3, [pc, #408]	; (800477c <HAL_RCC_OscConfig+0x270>)
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	4a65      	ldr	r2, [pc, #404]	; (800477c <HAL_RCC_OscConfig+0x270>)
 80045e6:	f043 0308 	orr.w	r3, r3, #8
 80045ea:	6013      	str	r3, [r2, #0]
 80045ec:	4b63      	ldr	r3, [pc, #396]	; (800477c <HAL_RCC_OscConfig+0x270>)
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6a1b      	ldr	r3, [r3, #32]
 80045f8:	4960      	ldr	r1, [pc, #384]	; (800477c <HAL_RCC_OscConfig+0x270>)
 80045fa:	4313      	orrs	r3, r2
 80045fc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80045fe:	4b5f      	ldr	r3, [pc, #380]	; (800477c <HAL_RCC_OscConfig+0x270>)
 8004600:	685b      	ldr	r3, [r3, #4]
 8004602:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	69db      	ldr	r3, [r3, #28]
 800460a:	021b      	lsls	r3, r3, #8
 800460c:	495b      	ldr	r1, [pc, #364]	; (800477c <HAL_RCC_OscConfig+0x270>)
 800460e:	4313      	orrs	r3, r2
 8004610:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004612:	69bb      	ldr	r3, [r7, #24]
 8004614:	2b00      	cmp	r3, #0
 8004616:	d109      	bne.n	800462c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6a1b      	ldr	r3, [r3, #32]
 800461c:	4618      	mov	r0, r3
 800461e:	f000 fd15 	bl	800504c <RCC_SetFlashLatencyFromMSIRange>
 8004622:	4603      	mov	r3, r0
 8004624:	2b00      	cmp	r3, #0
 8004626:	d001      	beq.n	800462c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8004628:	2301      	movs	r3, #1
 800462a:	e343      	b.n	8004cb4 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800462c:	f000 fc4a 	bl	8004ec4 <HAL_RCC_GetSysClockFreq>
 8004630:	4602      	mov	r2, r0
 8004632:	4b52      	ldr	r3, [pc, #328]	; (800477c <HAL_RCC_OscConfig+0x270>)
 8004634:	689b      	ldr	r3, [r3, #8]
 8004636:	091b      	lsrs	r3, r3, #4
 8004638:	f003 030f 	and.w	r3, r3, #15
 800463c:	4950      	ldr	r1, [pc, #320]	; (8004780 <HAL_RCC_OscConfig+0x274>)
 800463e:	5ccb      	ldrb	r3, [r1, r3]
 8004640:	f003 031f 	and.w	r3, r3, #31
 8004644:	fa22 f303 	lsr.w	r3, r2, r3
 8004648:	4a4e      	ldr	r2, [pc, #312]	; (8004784 <HAL_RCC_OscConfig+0x278>)
 800464a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800464c:	4b4e      	ldr	r3, [pc, #312]	; (8004788 <HAL_RCC_OscConfig+0x27c>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4618      	mov	r0, r3
 8004652:	f7fd ff4f 	bl	80024f4 <HAL_InitTick>
 8004656:	4603      	mov	r3, r0
 8004658:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800465a:	7bfb      	ldrb	r3, [r7, #15]
 800465c:	2b00      	cmp	r3, #0
 800465e:	d052      	beq.n	8004706 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8004660:	7bfb      	ldrb	r3, [r7, #15]
 8004662:	e327      	b.n	8004cb4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	699b      	ldr	r3, [r3, #24]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d032      	beq.n	80046d2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800466c:	4b43      	ldr	r3, [pc, #268]	; (800477c <HAL_RCC_OscConfig+0x270>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4a42      	ldr	r2, [pc, #264]	; (800477c <HAL_RCC_OscConfig+0x270>)
 8004672:	f043 0301 	orr.w	r3, r3, #1
 8004676:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004678:	f7fd ff8c 	bl	8002594 <HAL_GetTick>
 800467c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800467e:	e008      	b.n	8004692 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004680:	f7fd ff88 	bl	8002594 <HAL_GetTick>
 8004684:	4602      	mov	r2, r0
 8004686:	693b      	ldr	r3, [r7, #16]
 8004688:	1ad3      	subs	r3, r2, r3
 800468a:	2b02      	cmp	r3, #2
 800468c:	d901      	bls.n	8004692 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800468e:	2303      	movs	r3, #3
 8004690:	e310      	b.n	8004cb4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004692:	4b3a      	ldr	r3, [pc, #232]	; (800477c <HAL_RCC_OscConfig+0x270>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f003 0302 	and.w	r3, r3, #2
 800469a:	2b00      	cmp	r3, #0
 800469c:	d0f0      	beq.n	8004680 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800469e:	4b37      	ldr	r3, [pc, #220]	; (800477c <HAL_RCC_OscConfig+0x270>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	4a36      	ldr	r2, [pc, #216]	; (800477c <HAL_RCC_OscConfig+0x270>)
 80046a4:	f043 0308 	orr.w	r3, r3, #8
 80046a8:	6013      	str	r3, [r2, #0]
 80046aa:	4b34      	ldr	r3, [pc, #208]	; (800477c <HAL_RCC_OscConfig+0x270>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6a1b      	ldr	r3, [r3, #32]
 80046b6:	4931      	ldr	r1, [pc, #196]	; (800477c <HAL_RCC_OscConfig+0x270>)
 80046b8:	4313      	orrs	r3, r2
 80046ba:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80046bc:	4b2f      	ldr	r3, [pc, #188]	; (800477c <HAL_RCC_OscConfig+0x270>)
 80046be:	685b      	ldr	r3, [r3, #4]
 80046c0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	69db      	ldr	r3, [r3, #28]
 80046c8:	021b      	lsls	r3, r3, #8
 80046ca:	492c      	ldr	r1, [pc, #176]	; (800477c <HAL_RCC_OscConfig+0x270>)
 80046cc:	4313      	orrs	r3, r2
 80046ce:	604b      	str	r3, [r1, #4]
 80046d0:	e01a      	b.n	8004708 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80046d2:	4b2a      	ldr	r3, [pc, #168]	; (800477c <HAL_RCC_OscConfig+0x270>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4a29      	ldr	r2, [pc, #164]	; (800477c <HAL_RCC_OscConfig+0x270>)
 80046d8:	f023 0301 	bic.w	r3, r3, #1
 80046dc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80046de:	f7fd ff59 	bl	8002594 <HAL_GetTick>
 80046e2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80046e4:	e008      	b.n	80046f8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80046e6:	f7fd ff55 	bl	8002594 <HAL_GetTick>
 80046ea:	4602      	mov	r2, r0
 80046ec:	693b      	ldr	r3, [r7, #16]
 80046ee:	1ad3      	subs	r3, r2, r3
 80046f0:	2b02      	cmp	r3, #2
 80046f2:	d901      	bls.n	80046f8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80046f4:	2303      	movs	r3, #3
 80046f6:	e2dd      	b.n	8004cb4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80046f8:	4b20      	ldr	r3, [pc, #128]	; (800477c <HAL_RCC_OscConfig+0x270>)
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f003 0302 	and.w	r3, r3, #2
 8004700:	2b00      	cmp	r3, #0
 8004702:	d1f0      	bne.n	80046e6 <HAL_RCC_OscConfig+0x1da>
 8004704:	e000      	b.n	8004708 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004706:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f003 0301 	and.w	r3, r3, #1
 8004710:	2b00      	cmp	r3, #0
 8004712:	d074      	beq.n	80047fe <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004714:	69bb      	ldr	r3, [r7, #24]
 8004716:	2b08      	cmp	r3, #8
 8004718:	d005      	beq.n	8004726 <HAL_RCC_OscConfig+0x21a>
 800471a:	69bb      	ldr	r3, [r7, #24]
 800471c:	2b0c      	cmp	r3, #12
 800471e:	d10e      	bne.n	800473e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004720:	697b      	ldr	r3, [r7, #20]
 8004722:	2b03      	cmp	r3, #3
 8004724:	d10b      	bne.n	800473e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004726:	4b15      	ldr	r3, [pc, #84]	; (800477c <HAL_RCC_OscConfig+0x270>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800472e:	2b00      	cmp	r3, #0
 8004730:	d064      	beq.n	80047fc <HAL_RCC_OscConfig+0x2f0>
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d160      	bne.n	80047fc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800473a:	2301      	movs	r3, #1
 800473c:	e2ba      	b.n	8004cb4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	685b      	ldr	r3, [r3, #4]
 8004742:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004746:	d106      	bne.n	8004756 <HAL_RCC_OscConfig+0x24a>
 8004748:	4b0c      	ldr	r3, [pc, #48]	; (800477c <HAL_RCC_OscConfig+0x270>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4a0b      	ldr	r2, [pc, #44]	; (800477c <HAL_RCC_OscConfig+0x270>)
 800474e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004752:	6013      	str	r3, [r2, #0]
 8004754:	e026      	b.n	80047a4 <HAL_RCC_OscConfig+0x298>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	685b      	ldr	r3, [r3, #4]
 800475a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800475e:	d115      	bne.n	800478c <HAL_RCC_OscConfig+0x280>
 8004760:	4b06      	ldr	r3, [pc, #24]	; (800477c <HAL_RCC_OscConfig+0x270>)
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4a05      	ldr	r2, [pc, #20]	; (800477c <HAL_RCC_OscConfig+0x270>)
 8004766:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800476a:	6013      	str	r3, [r2, #0]
 800476c:	4b03      	ldr	r3, [pc, #12]	; (800477c <HAL_RCC_OscConfig+0x270>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	4a02      	ldr	r2, [pc, #8]	; (800477c <HAL_RCC_OscConfig+0x270>)
 8004772:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004776:	6013      	str	r3, [r2, #0]
 8004778:	e014      	b.n	80047a4 <HAL_RCC_OscConfig+0x298>
 800477a:	bf00      	nop
 800477c:	40021000 	.word	0x40021000
 8004780:	08013390 	.word	0x08013390
 8004784:	20000014 	.word	0x20000014
 8004788:	20000018 	.word	0x20000018
 800478c:	4ba0      	ldr	r3, [pc, #640]	; (8004a10 <HAL_RCC_OscConfig+0x504>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4a9f      	ldr	r2, [pc, #636]	; (8004a10 <HAL_RCC_OscConfig+0x504>)
 8004792:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004796:	6013      	str	r3, [r2, #0]
 8004798:	4b9d      	ldr	r3, [pc, #628]	; (8004a10 <HAL_RCC_OscConfig+0x504>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4a9c      	ldr	r2, [pc, #624]	; (8004a10 <HAL_RCC_OscConfig+0x504>)
 800479e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80047a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	685b      	ldr	r3, [r3, #4]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d013      	beq.n	80047d4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047ac:	f7fd fef2 	bl	8002594 <HAL_GetTick>
 80047b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80047b2:	e008      	b.n	80047c6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80047b4:	f7fd feee 	bl	8002594 <HAL_GetTick>
 80047b8:	4602      	mov	r2, r0
 80047ba:	693b      	ldr	r3, [r7, #16]
 80047bc:	1ad3      	subs	r3, r2, r3
 80047be:	2b64      	cmp	r3, #100	; 0x64
 80047c0:	d901      	bls.n	80047c6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80047c2:	2303      	movs	r3, #3
 80047c4:	e276      	b.n	8004cb4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80047c6:	4b92      	ldr	r3, [pc, #584]	; (8004a10 <HAL_RCC_OscConfig+0x504>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d0f0      	beq.n	80047b4 <HAL_RCC_OscConfig+0x2a8>
 80047d2:	e014      	b.n	80047fe <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047d4:	f7fd fede 	bl	8002594 <HAL_GetTick>
 80047d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80047da:	e008      	b.n	80047ee <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80047dc:	f7fd feda 	bl	8002594 <HAL_GetTick>
 80047e0:	4602      	mov	r2, r0
 80047e2:	693b      	ldr	r3, [r7, #16]
 80047e4:	1ad3      	subs	r3, r2, r3
 80047e6:	2b64      	cmp	r3, #100	; 0x64
 80047e8:	d901      	bls.n	80047ee <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80047ea:	2303      	movs	r3, #3
 80047ec:	e262      	b.n	8004cb4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80047ee:	4b88      	ldr	r3, [pc, #544]	; (8004a10 <HAL_RCC_OscConfig+0x504>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d1f0      	bne.n	80047dc <HAL_RCC_OscConfig+0x2d0>
 80047fa:	e000      	b.n	80047fe <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f003 0302 	and.w	r3, r3, #2
 8004806:	2b00      	cmp	r3, #0
 8004808:	d060      	beq.n	80048cc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800480a:	69bb      	ldr	r3, [r7, #24]
 800480c:	2b04      	cmp	r3, #4
 800480e:	d005      	beq.n	800481c <HAL_RCC_OscConfig+0x310>
 8004810:	69bb      	ldr	r3, [r7, #24]
 8004812:	2b0c      	cmp	r3, #12
 8004814:	d119      	bne.n	800484a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004816:	697b      	ldr	r3, [r7, #20]
 8004818:	2b02      	cmp	r3, #2
 800481a:	d116      	bne.n	800484a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800481c:	4b7c      	ldr	r3, [pc, #496]	; (8004a10 <HAL_RCC_OscConfig+0x504>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004824:	2b00      	cmp	r3, #0
 8004826:	d005      	beq.n	8004834 <HAL_RCC_OscConfig+0x328>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	68db      	ldr	r3, [r3, #12]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d101      	bne.n	8004834 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004830:	2301      	movs	r3, #1
 8004832:	e23f      	b.n	8004cb4 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004834:	4b76      	ldr	r3, [pc, #472]	; (8004a10 <HAL_RCC_OscConfig+0x504>)
 8004836:	685b      	ldr	r3, [r3, #4]
 8004838:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	691b      	ldr	r3, [r3, #16]
 8004840:	061b      	lsls	r3, r3, #24
 8004842:	4973      	ldr	r1, [pc, #460]	; (8004a10 <HAL_RCC_OscConfig+0x504>)
 8004844:	4313      	orrs	r3, r2
 8004846:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004848:	e040      	b.n	80048cc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	68db      	ldr	r3, [r3, #12]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d023      	beq.n	800489a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004852:	4b6f      	ldr	r3, [pc, #444]	; (8004a10 <HAL_RCC_OscConfig+0x504>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4a6e      	ldr	r2, [pc, #440]	; (8004a10 <HAL_RCC_OscConfig+0x504>)
 8004858:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800485c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800485e:	f7fd fe99 	bl	8002594 <HAL_GetTick>
 8004862:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004864:	e008      	b.n	8004878 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004866:	f7fd fe95 	bl	8002594 <HAL_GetTick>
 800486a:	4602      	mov	r2, r0
 800486c:	693b      	ldr	r3, [r7, #16]
 800486e:	1ad3      	subs	r3, r2, r3
 8004870:	2b02      	cmp	r3, #2
 8004872:	d901      	bls.n	8004878 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004874:	2303      	movs	r3, #3
 8004876:	e21d      	b.n	8004cb4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004878:	4b65      	ldr	r3, [pc, #404]	; (8004a10 <HAL_RCC_OscConfig+0x504>)
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004880:	2b00      	cmp	r3, #0
 8004882:	d0f0      	beq.n	8004866 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004884:	4b62      	ldr	r3, [pc, #392]	; (8004a10 <HAL_RCC_OscConfig+0x504>)
 8004886:	685b      	ldr	r3, [r3, #4]
 8004888:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	691b      	ldr	r3, [r3, #16]
 8004890:	061b      	lsls	r3, r3, #24
 8004892:	495f      	ldr	r1, [pc, #380]	; (8004a10 <HAL_RCC_OscConfig+0x504>)
 8004894:	4313      	orrs	r3, r2
 8004896:	604b      	str	r3, [r1, #4]
 8004898:	e018      	b.n	80048cc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800489a:	4b5d      	ldr	r3, [pc, #372]	; (8004a10 <HAL_RCC_OscConfig+0x504>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	4a5c      	ldr	r2, [pc, #368]	; (8004a10 <HAL_RCC_OscConfig+0x504>)
 80048a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80048a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048a6:	f7fd fe75 	bl	8002594 <HAL_GetTick>
 80048aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80048ac:	e008      	b.n	80048c0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80048ae:	f7fd fe71 	bl	8002594 <HAL_GetTick>
 80048b2:	4602      	mov	r2, r0
 80048b4:	693b      	ldr	r3, [r7, #16]
 80048b6:	1ad3      	subs	r3, r2, r3
 80048b8:	2b02      	cmp	r3, #2
 80048ba:	d901      	bls.n	80048c0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80048bc:	2303      	movs	r3, #3
 80048be:	e1f9      	b.n	8004cb4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80048c0:	4b53      	ldr	r3, [pc, #332]	; (8004a10 <HAL_RCC_OscConfig+0x504>)
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d1f0      	bne.n	80048ae <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f003 0308 	and.w	r3, r3, #8
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d03c      	beq.n	8004952 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	695b      	ldr	r3, [r3, #20]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d01c      	beq.n	800491a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80048e0:	4b4b      	ldr	r3, [pc, #300]	; (8004a10 <HAL_RCC_OscConfig+0x504>)
 80048e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80048e6:	4a4a      	ldr	r2, [pc, #296]	; (8004a10 <HAL_RCC_OscConfig+0x504>)
 80048e8:	f043 0301 	orr.w	r3, r3, #1
 80048ec:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048f0:	f7fd fe50 	bl	8002594 <HAL_GetTick>
 80048f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80048f6:	e008      	b.n	800490a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80048f8:	f7fd fe4c 	bl	8002594 <HAL_GetTick>
 80048fc:	4602      	mov	r2, r0
 80048fe:	693b      	ldr	r3, [r7, #16]
 8004900:	1ad3      	subs	r3, r2, r3
 8004902:	2b02      	cmp	r3, #2
 8004904:	d901      	bls.n	800490a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004906:	2303      	movs	r3, #3
 8004908:	e1d4      	b.n	8004cb4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800490a:	4b41      	ldr	r3, [pc, #260]	; (8004a10 <HAL_RCC_OscConfig+0x504>)
 800490c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004910:	f003 0302 	and.w	r3, r3, #2
 8004914:	2b00      	cmp	r3, #0
 8004916:	d0ef      	beq.n	80048f8 <HAL_RCC_OscConfig+0x3ec>
 8004918:	e01b      	b.n	8004952 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800491a:	4b3d      	ldr	r3, [pc, #244]	; (8004a10 <HAL_RCC_OscConfig+0x504>)
 800491c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004920:	4a3b      	ldr	r2, [pc, #236]	; (8004a10 <HAL_RCC_OscConfig+0x504>)
 8004922:	f023 0301 	bic.w	r3, r3, #1
 8004926:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800492a:	f7fd fe33 	bl	8002594 <HAL_GetTick>
 800492e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004930:	e008      	b.n	8004944 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004932:	f7fd fe2f 	bl	8002594 <HAL_GetTick>
 8004936:	4602      	mov	r2, r0
 8004938:	693b      	ldr	r3, [r7, #16]
 800493a:	1ad3      	subs	r3, r2, r3
 800493c:	2b02      	cmp	r3, #2
 800493e:	d901      	bls.n	8004944 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004940:	2303      	movs	r3, #3
 8004942:	e1b7      	b.n	8004cb4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004944:	4b32      	ldr	r3, [pc, #200]	; (8004a10 <HAL_RCC_OscConfig+0x504>)
 8004946:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800494a:	f003 0302 	and.w	r3, r3, #2
 800494e:	2b00      	cmp	r3, #0
 8004950:	d1ef      	bne.n	8004932 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f003 0304 	and.w	r3, r3, #4
 800495a:	2b00      	cmp	r3, #0
 800495c:	f000 80a6 	beq.w	8004aac <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004960:	2300      	movs	r3, #0
 8004962:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004964:	4b2a      	ldr	r3, [pc, #168]	; (8004a10 <HAL_RCC_OscConfig+0x504>)
 8004966:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004968:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800496c:	2b00      	cmp	r3, #0
 800496e:	d10d      	bne.n	800498c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004970:	4b27      	ldr	r3, [pc, #156]	; (8004a10 <HAL_RCC_OscConfig+0x504>)
 8004972:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004974:	4a26      	ldr	r2, [pc, #152]	; (8004a10 <HAL_RCC_OscConfig+0x504>)
 8004976:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800497a:	6593      	str	r3, [r2, #88]	; 0x58
 800497c:	4b24      	ldr	r3, [pc, #144]	; (8004a10 <HAL_RCC_OscConfig+0x504>)
 800497e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004980:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004984:	60bb      	str	r3, [r7, #8]
 8004986:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004988:	2301      	movs	r3, #1
 800498a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800498c:	4b21      	ldr	r3, [pc, #132]	; (8004a14 <HAL_RCC_OscConfig+0x508>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004994:	2b00      	cmp	r3, #0
 8004996:	d118      	bne.n	80049ca <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004998:	4b1e      	ldr	r3, [pc, #120]	; (8004a14 <HAL_RCC_OscConfig+0x508>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4a1d      	ldr	r2, [pc, #116]	; (8004a14 <HAL_RCC_OscConfig+0x508>)
 800499e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049a2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80049a4:	f7fd fdf6 	bl	8002594 <HAL_GetTick>
 80049a8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80049aa:	e008      	b.n	80049be <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80049ac:	f7fd fdf2 	bl	8002594 <HAL_GetTick>
 80049b0:	4602      	mov	r2, r0
 80049b2:	693b      	ldr	r3, [r7, #16]
 80049b4:	1ad3      	subs	r3, r2, r3
 80049b6:	2b02      	cmp	r3, #2
 80049b8:	d901      	bls.n	80049be <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80049ba:	2303      	movs	r3, #3
 80049bc:	e17a      	b.n	8004cb4 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80049be:	4b15      	ldr	r3, [pc, #84]	; (8004a14 <HAL_RCC_OscConfig+0x508>)
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d0f0      	beq.n	80049ac <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	689b      	ldr	r3, [r3, #8]
 80049ce:	2b01      	cmp	r3, #1
 80049d0:	d108      	bne.n	80049e4 <HAL_RCC_OscConfig+0x4d8>
 80049d2:	4b0f      	ldr	r3, [pc, #60]	; (8004a10 <HAL_RCC_OscConfig+0x504>)
 80049d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049d8:	4a0d      	ldr	r2, [pc, #52]	; (8004a10 <HAL_RCC_OscConfig+0x504>)
 80049da:	f043 0301 	orr.w	r3, r3, #1
 80049de:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80049e2:	e029      	b.n	8004a38 <HAL_RCC_OscConfig+0x52c>
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	689b      	ldr	r3, [r3, #8]
 80049e8:	2b05      	cmp	r3, #5
 80049ea:	d115      	bne.n	8004a18 <HAL_RCC_OscConfig+0x50c>
 80049ec:	4b08      	ldr	r3, [pc, #32]	; (8004a10 <HAL_RCC_OscConfig+0x504>)
 80049ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049f2:	4a07      	ldr	r2, [pc, #28]	; (8004a10 <HAL_RCC_OscConfig+0x504>)
 80049f4:	f043 0304 	orr.w	r3, r3, #4
 80049f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80049fc:	4b04      	ldr	r3, [pc, #16]	; (8004a10 <HAL_RCC_OscConfig+0x504>)
 80049fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a02:	4a03      	ldr	r2, [pc, #12]	; (8004a10 <HAL_RCC_OscConfig+0x504>)
 8004a04:	f043 0301 	orr.w	r3, r3, #1
 8004a08:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004a0c:	e014      	b.n	8004a38 <HAL_RCC_OscConfig+0x52c>
 8004a0e:	bf00      	nop
 8004a10:	40021000 	.word	0x40021000
 8004a14:	40007000 	.word	0x40007000
 8004a18:	4b9c      	ldr	r3, [pc, #624]	; (8004c8c <HAL_RCC_OscConfig+0x780>)
 8004a1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a1e:	4a9b      	ldr	r2, [pc, #620]	; (8004c8c <HAL_RCC_OscConfig+0x780>)
 8004a20:	f023 0301 	bic.w	r3, r3, #1
 8004a24:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004a28:	4b98      	ldr	r3, [pc, #608]	; (8004c8c <HAL_RCC_OscConfig+0x780>)
 8004a2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a2e:	4a97      	ldr	r2, [pc, #604]	; (8004c8c <HAL_RCC_OscConfig+0x780>)
 8004a30:	f023 0304 	bic.w	r3, r3, #4
 8004a34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	689b      	ldr	r3, [r3, #8]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d016      	beq.n	8004a6e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a40:	f7fd fda8 	bl	8002594 <HAL_GetTick>
 8004a44:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a46:	e00a      	b.n	8004a5e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a48:	f7fd fda4 	bl	8002594 <HAL_GetTick>
 8004a4c:	4602      	mov	r2, r0
 8004a4e:	693b      	ldr	r3, [r7, #16]
 8004a50:	1ad3      	subs	r3, r2, r3
 8004a52:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d901      	bls.n	8004a5e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004a5a:	2303      	movs	r3, #3
 8004a5c:	e12a      	b.n	8004cb4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a5e:	4b8b      	ldr	r3, [pc, #556]	; (8004c8c <HAL_RCC_OscConfig+0x780>)
 8004a60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a64:	f003 0302 	and.w	r3, r3, #2
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d0ed      	beq.n	8004a48 <HAL_RCC_OscConfig+0x53c>
 8004a6c:	e015      	b.n	8004a9a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a6e:	f7fd fd91 	bl	8002594 <HAL_GetTick>
 8004a72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004a74:	e00a      	b.n	8004a8c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a76:	f7fd fd8d 	bl	8002594 <HAL_GetTick>
 8004a7a:	4602      	mov	r2, r0
 8004a7c:	693b      	ldr	r3, [r7, #16]
 8004a7e:	1ad3      	subs	r3, r2, r3
 8004a80:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a84:	4293      	cmp	r3, r2
 8004a86:	d901      	bls.n	8004a8c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004a88:	2303      	movs	r3, #3
 8004a8a:	e113      	b.n	8004cb4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004a8c:	4b7f      	ldr	r3, [pc, #508]	; (8004c8c <HAL_RCC_OscConfig+0x780>)
 8004a8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a92:	f003 0302 	and.w	r3, r3, #2
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d1ed      	bne.n	8004a76 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004a9a:	7ffb      	ldrb	r3, [r7, #31]
 8004a9c:	2b01      	cmp	r3, #1
 8004a9e:	d105      	bne.n	8004aac <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004aa0:	4b7a      	ldr	r3, [pc, #488]	; (8004c8c <HAL_RCC_OscConfig+0x780>)
 8004aa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004aa4:	4a79      	ldr	r2, [pc, #484]	; (8004c8c <HAL_RCC_OscConfig+0x780>)
 8004aa6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004aaa:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	f000 80fe 	beq.w	8004cb2 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aba:	2b02      	cmp	r3, #2
 8004abc:	f040 80d0 	bne.w	8004c60 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004ac0:	4b72      	ldr	r3, [pc, #456]	; (8004c8c <HAL_RCC_OscConfig+0x780>)
 8004ac2:	68db      	ldr	r3, [r3, #12]
 8004ac4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ac6:	697b      	ldr	r3, [r7, #20]
 8004ac8:	f003 0203 	and.w	r2, r3, #3
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ad0:	429a      	cmp	r2, r3
 8004ad2:	d130      	bne.n	8004b36 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004ad4:	697b      	ldr	r3, [r7, #20]
 8004ad6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ade:	3b01      	subs	r3, #1
 8004ae0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ae2:	429a      	cmp	r2, r3
 8004ae4:	d127      	bne.n	8004b36 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004ae6:	697b      	ldr	r3, [r7, #20]
 8004ae8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004af0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004af2:	429a      	cmp	r2, r3
 8004af4:	d11f      	bne.n	8004b36 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004af6:	697b      	ldr	r3, [r7, #20]
 8004af8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004afc:	687a      	ldr	r2, [r7, #4]
 8004afe:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004b00:	2a07      	cmp	r2, #7
 8004b02:	bf14      	ite	ne
 8004b04:	2201      	movne	r2, #1
 8004b06:	2200      	moveq	r2, #0
 8004b08:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d113      	bne.n	8004b36 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004b0e:	697b      	ldr	r3, [r7, #20]
 8004b10:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b18:	085b      	lsrs	r3, r3, #1
 8004b1a:	3b01      	subs	r3, #1
 8004b1c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004b1e:	429a      	cmp	r2, r3
 8004b20:	d109      	bne.n	8004b36 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004b22:	697b      	ldr	r3, [r7, #20]
 8004b24:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b2c:	085b      	lsrs	r3, r3, #1
 8004b2e:	3b01      	subs	r3, #1
 8004b30:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004b32:	429a      	cmp	r2, r3
 8004b34:	d06e      	beq.n	8004c14 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004b36:	69bb      	ldr	r3, [r7, #24]
 8004b38:	2b0c      	cmp	r3, #12
 8004b3a:	d069      	beq.n	8004c10 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004b3c:	4b53      	ldr	r3, [pc, #332]	; (8004c8c <HAL_RCC_OscConfig+0x780>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d105      	bne.n	8004b54 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004b48:	4b50      	ldr	r3, [pc, #320]	; (8004c8c <HAL_RCC_OscConfig+0x780>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d001      	beq.n	8004b58 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004b54:	2301      	movs	r3, #1
 8004b56:	e0ad      	b.n	8004cb4 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004b58:	4b4c      	ldr	r3, [pc, #304]	; (8004c8c <HAL_RCC_OscConfig+0x780>)
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	4a4b      	ldr	r2, [pc, #300]	; (8004c8c <HAL_RCC_OscConfig+0x780>)
 8004b5e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004b62:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004b64:	f7fd fd16 	bl	8002594 <HAL_GetTick>
 8004b68:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b6a:	e008      	b.n	8004b7e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b6c:	f7fd fd12 	bl	8002594 <HAL_GetTick>
 8004b70:	4602      	mov	r2, r0
 8004b72:	693b      	ldr	r3, [r7, #16]
 8004b74:	1ad3      	subs	r3, r2, r3
 8004b76:	2b02      	cmp	r3, #2
 8004b78:	d901      	bls.n	8004b7e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8004b7a:	2303      	movs	r3, #3
 8004b7c:	e09a      	b.n	8004cb4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b7e:	4b43      	ldr	r3, [pc, #268]	; (8004c8c <HAL_RCC_OscConfig+0x780>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d1f0      	bne.n	8004b6c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004b8a:	4b40      	ldr	r3, [pc, #256]	; (8004c8c <HAL_RCC_OscConfig+0x780>)
 8004b8c:	68da      	ldr	r2, [r3, #12]
 8004b8e:	4b40      	ldr	r3, [pc, #256]	; (8004c90 <HAL_RCC_OscConfig+0x784>)
 8004b90:	4013      	ands	r3, r2
 8004b92:	687a      	ldr	r2, [r7, #4]
 8004b94:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004b96:	687a      	ldr	r2, [r7, #4]
 8004b98:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004b9a:	3a01      	subs	r2, #1
 8004b9c:	0112      	lsls	r2, r2, #4
 8004b9e:	4311      	orrs	r1, r2
 8004ba0:	687a      	ldr	r2, [r7, #4]
 8004ba2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004ba4:	0212      	lsls	r2, r2, #8
 8004ba6:	4311      	orrs	r1, r2
 8004ba8:	687a      	ldr	r2, [r7, #4]
 8004baa:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004bac:	0852      	lsrs	r2, r2, #1
 8004bae:	3a01      	subs	r2, #1
 8004bb0:	0552      	lsls	r2, r2, #21
 8004bb2:	4311      	orrs	r1, r2
 8004bb4:	687a      	ldr	r2, [r7, #4]
 8004bb6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004bb8:	0852      	lsrs	r2, r2, #1
 8004bba:	3a01      	subs	r2, #1
 8004bbc:	0652      	lsls	r2, r2, #25
 8004bbe:	4311      	orrs	r1, r2
 8004bc0:	687a      	ldr	r2, [r7, #4]
 8004bc2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004bc4:	0912      	lsrs	r2, r2, #4
 8004bc6:	0452      	lsls	r2, r2, #17
 8004bc8:	430a      	orrs	r2, r1
 8004bca:	4930      	ldr	r1, [pc, #192]	; (8004c8c <HAL_RCC_OscConfig+0x780>)
 8004bcc:	4313      	orrs	r3, r2
 8004bce:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004bd0:	4b2e      	ldr	r3, [pc, #184]	; (8004c8c <HAL_RCC_OscConfig+0x780>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	4a2d      	ldr	r2, [pc, #180]	; (8004c8c <HAL_RCC_OscConfig+0x780>)
 8004bd6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004bda:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004bdc:	4b2b      	ldr	r3, [pc, #172]	; (8004c8c <HAL_RCC_OscConfig+0x780>)
 8004bde:	68db      	ldr	r3, [r3, #12]
 8004be0:	4a2a      	ldr	r2, [pc, #168]	; (8004c8c <HAL_RCC_OscConfig+0x780>)
 8004be2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004be6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004be8:	f7fd fcd4 	bl	8002594 <HAL_GetTick>
 8004bec:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004bee:	e008      	b.n	8004c02 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bf0:	f7fd fcd0 	bl	8002594 <HAL_GetTick>
 8004bf4:	4602      	mov	r2, r0
 8004bf6:	693b      	ldr	r3, [r7, #16]
 8004bf8:	1ad3      	subs	r3, r2, r3
 8004bfa:	2b02      	cmp	r3, #2
 8004bfc:	d901      	bls.n	8004c02 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8004bfe:	2303      	movs	r3, #3
 8004c00:	e058      	b.n	8004cb4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c02:	4b22      	ldr	r3, [pc, #136]	; (8004c8c <HAL_RCC_OscConfig+0x780>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d0f0      	beq.n	8004bf0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004c0e:	e050      	b.n	8004cb2 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004c10:	2301      	movs	r3, #1
 8004c12:	e04f      	b.n	8004cb4 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c14:	4b1d      	ldr	r3, [pc, #116]	; (8004c8c <HAL_RCC_OscConfig+0x780>)
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d148      	bne.n	8004cb2 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004c20:	4b1a      	ldr	r3, [pc, #104]	; (8004c8c <HAL_RCC_OscConfig+0x780>)
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	4a19      	ldr	r2, [pc, #100]	; (8004c8c <HAL_RCC_OscConfig+0x780>)
 8004c26:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004c2a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004c2c:	4b17      	ldr	r3, [pc, #92]	; (8004c8c <HAL_RCC_OscConfig+0x780>)
 8004c2e:	68db      	ldr	r3, [r3, #12]
 8004c30:	4a16      	ldr	r2, [pc, #88]	; (8004c8c <HAL_RCC_OscConfig+0x780>)
 8004c32:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004c36:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004c38:	f7fd fcac 	bl	8002594 <HAL_GetTick>
 8004c3c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c3e:	e008      	b.n	8004c52 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c40:	f7fd fca8 	bl	8002594 <HAL_GetTick>
 8004c44:	4602      	mov	r2, r0
 8004c46:	693b      	ldr	r3, [r7, #16]
 8004c48:	1ad3      	subs	r3, r2, r3
 8004c4a:	2b02      	cmp	r3, #2
 8004c4c:	d901      	bls.n	8004c52 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8004c4e:	2303      	movs	r3, #3
 8004c50:	e030      	b.n	8004cb4 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c52:	4b0e      	ldr	r3, [pc, #56]	; (8004c8c <HAL_RCC_OscConfig+0x780>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d0f0      	beq.n	8004c40 <HAL_RCC_OscConfig+0x734>
 8004c5e:	e028      	b.n	8004cb2 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004c60:	69bb      	ldr	r3, [r7, #24]
 8004c62:	2b0c      	cmp	r3, #12
 8004c64:	d023      	beq.n	8004cae <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c66:	4b09      	ldr	r3, [pc, #36]	; (8004c8c <HAL_RCC_OscConfig+0x780>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	4a08      	ldr	r2, [pc, #32]	; (8004c8c <HAL_RCC_OscConfig+0x780>)
 8004c6c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004c70:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c72:	f7fd fc8f 	bl	8002594 <HAL_GetTick>
 8004c76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c78:	e00c      	b.n	8004c94 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c7a:	f7fd fc8b 	bl	8002594 <HAL_GetTick>
 8004c7e:	4602      	mov	r2, r0
 8004c80:	693b      	ldr	r3, [r7, #16]
 8004c82:	1ad3      	subs	r3, r2, r3
 8004c84:	2b02      	cmp	r3, #2
 8004c86:	d905      	bls.n	8004c94 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8004c88:	2303      	movs	r3, #3
 8004c8a:	e013      	b.n	8004cb4 <HAL_RCC_OscConfig+0x7a8>
 8004c8c:	40021000 	.word	0x40021000
 8004c90:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c94:	4b09      	ldr	r3, [pc, #36]	; (8004cbc <HAL_RCC_OscConfig+0x7b0>)
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d1ec      	bne.n	8004c7a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004ca0:	4b06      	ldr	r3, [pc, #24]	; (8004cbc <HAL_RCC_OscConfig+0x7b0>)
 8004ca2:	68da      	ldr	r2, [r3, #12]
 8004ca4:	4905      	ldr	r1, [pc, #20]	; (8004cbc <HAL_RCC_OscConfig+0x7b0>)
 8004ca6:	4b06      	ldr	r3, [pc, #24]	; (8004cc0 <HAL_RCC_OscConfig+0x7b4>)
 8004ca8:	4013      	ands	r3, r2
 8004caa:	60cb      	str	r3, [r1, #12]
 8004cac:	e001      	b.n	8004cb2 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004cae:	2301      	movs	r3, #1
 8004cb0:	e000      	b.n	8004cb4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8004cb2:	2300      	movs	r3, #0
}
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	3720      	adds	r7, #32
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	bd80      	pop	{r7, pc}
 8004cbc:	40021000 	.word	0x40021000
 8004cc0:	feeefffc 	.word	0xfeeefffc

08004cc4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b084      	sub	sp, #16
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
 8004ccc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d101      	bne.n	8004cd8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004cd4:	2301      	movs	r3, #1
 8004cd6:	e0e7      	b.n	8004ea8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004cd8:	4b75      	ldr	r3, [pc, #468]	; (8004eb0 <HAL_RCC_ClockConfig+0x1ec>)
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f003 0307 	and.w	r3, r3, #7
 8004ce0:	683a      	ldr	r2, [r7, #0]
 8004ce2:	429a      	cmp	r2, r3
 8004ce4:	d910      	bls.n	8004d08 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ce6:	4b72      	ldr	r3, [pc, #456]	; (8004eb0 <HAL_RCC_ClockConfig+0x1ec>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f023 0207 	bic.w	r2, r3, #7
 8004cee:	4970      	ldr	r1, [pc, #448]	; (8004eb0 <HAL_RCC_ClockConfig+0x1ec>)
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	4313      	orrs	r3, r2
 8004cf4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cf6:	4b6e      	ldr	r3, [pc, #440]	; (8004eb0 <HAL_RCC_ClockConfig+0x1ec>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f003 0307 	and.w	r3, r3, #7
 8004cfe:	683a      	ldr	r2, [r7, #0]
 8004d00:	429a      	cmp	r2, r3
 8004d02:	d001      	beq.n	8004d08 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004d04:	2301      	movs	r3, #1
 8004d06:	e0cf      	b.n	8004ea8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f003 0302 	and.w	r3, r3, #2
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d010      	beq.n	8004d36 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	689a      	ldr	r2, [r3, #8]
 8004d18:	4b66      	ldr	r3, [pc, #408]	; (8004eb4 <HAL_RCC_ClockConfig+0x1f0>)
 8004d1a:	689b      	ldr	r3, [r3, #8]
 8004d1c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004d20:	429a      	cmp	r2, r3
 8004d22:	d908      	bls.n	8004d36 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d24:	4b63      	ldr	r3, [pc, #396]	; (8004eb4 <HAL_RCC_ClockConfig+0x1f0>)
 8004d26:	689b      	ldr	r3, [r3, #8]
 8004d28:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	689b      	ldr	r3, [r3, #8]
 8004d30:	4960      	ldr	r1, [pc, #384]	; (8004eb4 <HAL_RCC_ClockConfig+0x1f0>)
 8004d32:	4313      	orrs	r3, r2
 8004d34:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f003 0301 	and.w	r3, r3, #1
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d04c      	beq.n	8004ddc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	685b      	ldr	r3, [r3, #4]
 8004d46:	2b03      	cmp	r3, #3
 8004d48:	d107      	bne.n	8004d5a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d4a:	4b5a      	ldr	r3, [pc, #360]	; (8004eb4 <HAL_RCC_ClockConfig+0x1f0>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d121      	bne.n	8004d9a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004d56:	2301      	movs	r3, #1
 8004d58:	e0a6      	b.n	8004ea8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	685b      	ldr	r3, [r3, #4]
 8004d5e:	2b02      	cmp	r3, #2
 8004d60:	d107      	bne.n	8004d72 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004d62:	4b54      	ldr	r3, [pc, #336]	; (8004eb4 <HAL_RCC_ClockConfig+0x1f0>)
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d115      	bne.n	8004d9a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004d6e:	2301      	movs	r3, #1
 8004d70:	e09a      	b.n	8004ea8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	685b      	ldr	r3, [r3, #4]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d107      	bne.n	8004d8a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004d7a:	4b4e      	ldr	r3, [pc, #312]	; (8004eb4 <HAL_RCC_ClockConfig+0x1f0>)
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f003 0302 	and.w	r3, r3, #2
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d109      	bne.n	8004d9a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004d86:	2301      	movs	r3, #1
 8004d88:	e08e      	b.n	8004ea8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004d8a:	4b4a      	ldr	r3, [pc, #296]	; (8004eb4 <HAL_RCC_ClockConfig+0x1f0>)
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d101      	bne.n	8004d9a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004d96:	2301      	movs	r3, #1
 8004d98:	e086      	b.n	8004ea8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004d9a:	4b46      	ldr	r3, [pc, #280]	; (8004eb4 <HAL_RCC_ClockConfig+0x1f0>)
 8004d9c:	689b      	ldr	r3, [r3, #8]
 8004d9e:	f023 0203 	bic.w	r2, r3, #3
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	685b      	ldr	r3, [r3, #4]
 8004da6:	4943      	ldr	r1, [pc, #268]	; (8004eb4 <HAL_RCC_ClockConfig+0x1f0>)
 8004da8:	4313      	orrs	r3, r2
 8004daa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004dac:	f7fd fbf2 	bl	8002594 <HAL_GetTick>
 8004db0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004db2:	e00a      	b.n	8004dca <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004db4:	f7fd fbee 	bl	8002594 <HAL_GetTick>
 8004db8:	4602      	mov	r2, r0
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	1ad3      	subs	r3, r2, r3
 8004dbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d901      	bls.n	8004dca <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004dc6:	2303      	movs	r3, #3
 8004dc8:	e06e      	b.n	8004ea8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004dca:	4b3a      	ldr	r3, [pc, #232]	; (8004eb4 <HAL_RCC_ClockConfig+0x1f0>)
 8004dcc:	689b      	ldr	r3, [r3, #8]
 8004dce:	f003 020c 	and.w	r2, r3, #12
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	685b      	ldr	r3, [r3, #4]
 8004dd6:	009b      	lsls	r3, r3, #2
 8004dd8:	429a      	cmp	r2, r3
 8004dda:	d1eb      	bne.n	8004db4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f003 0302 	and.w	r3, r3, #2
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d010      	beq.n	8004e0a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	689a      	ldr	r2, [r3, #8]
 8004dec:	4b31      	ldr	r3, [pc, #196]	; (8004eb4 <HAL_RCC_ClockConfig+0x1f0>)
 8004dee:	689b      	ldr	r3, [r3, #8]
 8004df0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004df4:	429a      	cmp	r2, r3
 8004df6:	d208      	bcs.n	8004e0a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004df8:	4b2e      	ldr	r3, [pc, #184]	; (8004eb4 <HAL_RCC_ClockConfig+0x1f0>)
 8004dfa:	689b      	ldr	r3, [r3, #8]
 8004dfc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	689b      	ldr	r3, [r3, #8]
 8004e04:	492b      	ldr	r1, [pc, #172]	; (8004eb4 <HAL_RCC_ClockConfig+0x1f0>)
 8004e06:	4313      	orrs	r3, r2
 8004e08:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004e0a:	4b29      	ldr	r3, [pc, #164]	; (8004eb0 <HAL_RCC_ClockConfig+0x1ec>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f003 0307 	and.w	r3, r3, #7
 8004e12:	683a      	ldr	r2, [r7, #0]
 8004e14:	429a      	cmp	r2, r3
 8004e16:	d210      	bcs.n	8004e3a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e18:	4b25      	ldr	r3, [pc, #148]	; (8004eb0 <HAL_RCC_ClockConfig+0x1ec>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f023 0207 	bic.w	r2, r3, #7
 8004e20:	4923      	ldr	r1, [pc, #140]	; (8004eb0 <HAL_RCC_ClockConfig+0x1ec>)
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	4313      	orrs	r3, r2
 8004e26:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e28:	4b21      	ldr	r3, [pc, #132]	; (8004eb0 <HAL_RCC_ClockConfig+0x1ec>)
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f003 0307 	and.w	r3, r3, #7
 8004e30:	683a      	ldr	r2, [r7, #0]
 8004e32:	429a      	cmp	r2, r3
 8004e34:	d001      	beq.n	8004e3a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004e36:	2301      	movs	r3, #1
 8004e38:	e036      	b.n	8004ea8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f003 0304 	and.w	r3, r3, #4
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d008      	beq.n	8004e58 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004e46:	4b1b      	ldr	r3, [pc, #108]	; (8004eb4 <HAL_RCC_ClockConfig+0x1f0>)
 8004e48:	689b      	ldr	r3, [r3, #8]
 8004e4a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	68db      	ldr	r3, [r3, #12]
 8004e52:	4918      	ldr	r1, [pc, #96]	; (8004eb4 <HAL_RCC_ClockConfig+0x1f0>)
 8004e54:	4313      	orrs	r3, r2
 8004e56:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f003 0308 	and.w	r3, r3, #8
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d009      	beq.n	8004e78 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004e64:	4b13      	ldr	r3, [pc, #76]	; (8004eb4 <HAL_RCC_ClockConfig+0x1f0>)
 8004e66:	689b      	ldr	r3, [r3, #8]
 8004e68:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	691b      	ldr	r3, [r3, #16]
 8004e70:	00db      	lsls	r3, r3, #3
 8004e72:	4910      	ldr	r1, [pc, #64]	; (8004eb4 <HAL_RCC_ClockConfig+0x1f0>)
 8004e74:	4313      	orrs	r3, r2
 8004e76:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004e78:	f000 f824 	bl	8004ec4 <HAL_RCC_GetSysClockFreq>
 8004e7c:	4602      	mov	r2, r0
 8004e7e:	4b0d      	ldr	r3, [pc, #52]	; (8004eb4 <HAL_RCC_ClockConfig+0x1f0>)
 8004e80:	689b      	ldr	r3, [r3, #8]
 8004e82:	091b      	lsrs	r3, r3, #4
 8004e84:	f003 030f 	and.w	r3, r3, #15
 8004e88:	490b      	ldr	r1, [pc, #44]	; (8004eb8 <HAL_RCC_ClockConfig+0x1f4>)
 8004e8a:	5ccb      	ldrb	r3, [r1, r3]
 8004e8c:	f003 031f 	and.w	r3, r3, #31
 8004e90:	fa22 f303 	lsr.w	r3, r2, r3
 8004e94:	4a09      	ldr	r2, [pc, #36]	; (8004ebc <HAL_RCC_ClockConfig+0x1f8>)
 8004e96:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004e98:	4b09      	ldr	r3, [pc, #36]	; (8004ec0 <HAL_RCC_ClockConfig+0x1fc>)
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	f7fd fb29 	bl	80024f4 <HAL_InitTick>
 8004ea2:	4603      	mov	r3, r0
 8004ea4:	72fb      	strb	r3, [r7, #11]

  return status;
 8004ea6:	7afb      	ldrb	r3, [r7, #11]
}
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	3710      	adds	r7, #16
 8004eac:	46bd      	mov	sp, r7
 8004eae:	bd80      	pop	{r7, pc}
 8004eb0:	40022000 	.word	0x40022000
 8004eb4:	40021000 	.word	0x40021000
 8004eb8:	08013390 	.word	0x08013390
 8004ebc:	20000014 	.word	0x20000014
 8004ec0:	20000018 	.word	0x20000018

08004ec4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ec4:	b480      	push	{r7}
 8004ec6:	b089      	sub	sp, #36	; 0x24
 8004ec8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004eca:	2300      	movs	r3, #0
 8004ecc:	61fb      	str	r3, [r7, #28]
 8004ece:	2300      	movs	r3, #0
 8004ed0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004ed2:	4b3e      	ldr	r3, [pc, #248]	; (8004fcc <HAL_RCC_GetSysClockFreq+0x108>)
 8004ed4:	689b      	ldr	r3, [r3, #8]
 8004ed6:	f003 030c 	and.w	r3, r3, #12
 8004eda:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004edc:	4b3b      	ldr	r3, [pc, #236]	; (8004fcc <HAL_RCC_GetSysClockFreq+0x108>)
 8004ede:	68db      	ldr	r3, [r3, #12]
 8004ee0:	f003 0303 	and.w	r3, r3, #3
 8004ee4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004ee6:	693b      	ldr	r3, [r7, #16]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d005      	beq.n	8004ef8 <HAL_RCC_GetSysClockFreq+0x34>
 8004eec:	693b      	ldr	r3, [r7, #16]
 8004eee:	2b0c      	cmp	r3, #12
 8004ef0:	d121      	bne.n	8004f36 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	2b01      	cmp	r3, #1
 8004ef6:	d11e      	bne.n	8004f36 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004ef8:	4b34      	ldr	r3, [pc, #208]	; (8004fcc <HAL_RCC_GetSysClockFreq+0x108>)
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f003 0308 	and.w	r3, r3, #8
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d107      	bne.n	8004f14 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004f04:	4b31      	ldr	r3, [pc, #196]	; (8004fcc <HAL_RCC_GetSysClockFreq+0x108>)
 8004f06:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f0a:	0a1b      	lsrs	r3, r3, #8
 8004f0c:	f003 030f 	and.w	r3, r3, #15
 8004f10:	61fb      	str	r3, [r7, #28]
 8004f12:	e005      	b.n	8004f20 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004f14:	4b2d      	ldr	r3, [pc, #180]	; (8004fcc <HAL_RCC_GetSysClockFreq+0x108>)
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	091b      	lsrs	r3, r3, #4
 8004f1a:	f003 030f 	and.w	r3, r3, #15
 8004f1e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004f20:	4a2b      	ldr	r2, [pc, #172]	; (8004fd0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004f22:	69fb      	ldr	r3, [r7, #28]
 8004f24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f28:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004f2a:	693b      	ldr	r3, [r7, #16]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d10d      	bne.n	8004f4c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004f30:	69fb      	ldr	r3, [r7, #28]
 8004f32:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004f34:	e00a      	b.n	8004f4c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004f36:	693b      	ldr	r3, [r7, #16]
 8004f38:	2b04      	cmp	r3, #4
 8004f3a:	d102      	bne.n	8004f42 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004f3c:	4b25      	ldr	r3, [pc, #148]	; (8004fd4 <HAL_RCC_GetSysClockFreq+0x110>)
 8004f3e:	61bb      	str	r3, [r7, #24]
 8004f40:	e004      	b.n	8004f4c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004f42:	693b      	ldr	r3, [r7, #16]
 8004f44:	2b08      	cmp	r3, #8
 8004f46:	d101      	bne.n	8004f4c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004f48:	4b23      	ldr	r3, [pc, #140]	; (8004fd8 <HAL_RCC_GetSysClockFreq+0x114>)
 8004f4a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004f4c:	693b      	ldr	r3, [r7, #16]
 8004f4e:	2b0c      	cmp	r3, #12
 8004f50:	d134      	bne.n	8004fbc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004f52:	4b1e      	ldr	r3, [pc, #120]	; (8004fcc <HAL_RCC_GetSysClockFreq+0x108>)
 8004f54:	68db      	ldr	r3, [r3, #12]
 8004f56:	f003 0303 	and.w	r3, r3, #3
 8004f5a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004f5c:	68bb      	ldr	r3, [r7, #8]
 8004f5e:	2b02      	cmp	r3, #2
 8004f60:	d003      	beq.n	8004f6a <HAL_RCC_GetSysClockFreq+0xa6>
 8004f62:	68bb      	ldr	r3, [r7, #8]
 8004f64:	2b03      	cmp	r3, #3
 8004f66:	d003      	beq.n	8004f70 <HAL_RCC_GetSysClockFreq+0xac>
 8004f68:	e005      	b.n	8004f76 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004f6a:	4b1a      	ldr	r3, [pc, #104]	; (8004fd4 <HAL_RCC_GetSysClockFreq+0x110>)
 8004f6c:	617b      	str	r3, [r7, #20]
      break;
 8004f6e:	e005      	b.n	8004f7c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004f70:	4b19      	ldr	r3, [pc, #100]	; (8004fd8 <HAL_RCC_GetSysClockFreq+0x114>)
 8004f72:	617b      	str	r3, [r7, #20]
      break;
 8004f74:	e002      	b.n	8004f7c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004f76:	69fb      	ldr	r3, [r7, #28]
 8004f78:	617b      	str	r3, [r7, #20]
      break;
 8004f7a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004f7c:	4b13      	ldr	r3, [pc, #76]	; (8004fcc <HAL_RCC_GetSysClockFreq+0x108>)
 8004f7e:	68db      	ldr	r3, [r3, #12]
 8004f80:	091b      	lsrs	r3, r3, #4
 8004f82:	f003 0307 	and.w	r3, r3, #7
 8004f86:	3301      	adds	r3, #1
 8004f88:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004f8a:	4b10      	ldr	r3, [pc, #64]	; (8004fcc <HAL_RCC_GetSysClockFreq+0x108>)
 8004f8c:	68db      	ldr	r3, [r3, #12]
 8004f8e:	0a1b      	lsrs	r3, r3, #8
 8004f90:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f94:	697a      	ldr	r2, [r7, #20]
 8004f96:	fb03 f202 	mul.w	r2, r3, r2
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fa0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004fa2:	4b0a      	ldr	r3, [pc, #40]	; (8004fcc <HAL_RCC_GetSysClockFreq+0x108>)
 8004fa4:	68db      	ldr	r3, [r3, #12]
 8004fa6:	0e5b      	lsrs	r3, r3, #25
 8004fa8:	f003 0303 	and.w	r3, r3, #3
 8004fac:	3301      	adds	r3, #1
 8004fae:	005b      	lsls	r3, r3, #1
 8004fb0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004fb2:	697a      	ldr	r2, [r7, #20]
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fba:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004fbc:	69bb      	ldr	r3, [r7, #24]
}
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	3724      	adds	r7, #36	; 0x24
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc8:	4770      	bx	lr
 8004fca:	bf00      	nop
 8004fcc:	40021000 	.word	0x40021000
 8004fd0:	080133a8 	.word	0x080133a8
 8004fd4:	00f42400 	.word	0x00f42400
 8004fd8:	007a1200 	.word	0x007a1200

08004fdc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004fdc:	b480      	push	{r7}
 8004fde:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004fe0:	4b03      	ldr	r3, [pc, #12]	; (8004ff0 <HAL_RCC_GetHCLKFreq+0x14>)
 8004fe2:	681b      	ldr	r3, [r3, #0]
}
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fec:	4770      	bx	lr
 8004fee:	bf00      	nop
 8004ff0:	20000014 	.word	0x20000014

08004ff4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004ff8:	f7ff fff0 	bl	8004fdc <HAL_RCC_GetHCLKFreq>
 8004ffc:	4602      	mov	r2, r0
 8004ffe:	4b06      	ldr	r3, [pc, #24]	; (8005018 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005000:	689b      	ldr	r3, [r3, #8]
 8005002:	0a1b      	lsrs	r3, r3, #8
 8005004:	f003 0307 	and.w	r3, r3, #7
 8005008:	4904      	ldr	r1, [pc, #16]	; (800501c <HAL_RCC_GetPCLK1Freq+0x28>)
 800500a:	5ccb      	ldrb	r3, [r1, r3]
 800500c:	f003 031f 	and.w	r3, r3, #31
 8005010:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005014:	4618      	mov	r0, r3
 8005016:	bd80      	pop	{r7, pc}
 8005018:	40021000 	.word	0x40021000
 800501c:	080133a0 	.word	0x080133a0

08005020 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005020:	b580      	push	{r7, lr}
 8005022:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005024:	f7ff ffda 	bl	8004fdc <HAL_RCC_GetHCLKFreq>
 8005028:	4602      	mov	r2, r0
 800502a:	4b06      	ldr	r3, [pc, #24]	; (8005044 <HAL_RCC_GetPCLK2Freq+0x24>)
 800502c:	689b      	ldr	r3, [r3, #8]
 800502e:	0adb      	lsrs	r3, r3, #11
 8005030:	f003 0307 	and.w	r3, r3, #7
 8005034:	4904      	ldr	r1, [pc, #16]	; (8005048 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005036:	5ccb      	ldrb	r3, [r1, r3]
 8005038:	f003 031f 	and.w	r3, r3, #31
 800503c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005040:	4618      	mov	r0, r3
 8005042:	bd80      	pop	{r7, pc}
 8005044:	40021000 	.word	0x40021000
 8005048:	080133a0 	.word	0x080133a0

0800504c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800504c:	b580      	push	{r7, lr}
 800504e:	b086      	sub	sp, #24
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005054:	2300      	movs	r3, #0
 8005056:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005058:	4b2a      	ldr	r3, [pc, #168]	; (8005104 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800505a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800505c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005060:	2b00      	cmp	r3, #0
 8005062:	d003      	beq.n	800506c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005064:	f7ff f9ee 	bl	8004444 <HAL_PWREx_GetVoltageRange>
 8005068:	6178      	str	r0, [r7, #20]
 800506a:	e014      	b.n	8005096 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800506c:	4b25      	ldr	r3, [pc, #148]	; (8005104 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800506e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005070:	4a24      	ldr	r2, [pc, #144]	; (8005104 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005072:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005076:	6593      	str	r3, [r2, #88]	; 0x58
 8005078:	4b22      	ldr	r3, [pc, #136]	; (8005104 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800507a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800507c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005080:	60fb      	str	r3, [r7, #12]
 8005082:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005084:	f7ff f9de 	bl	8004444 <HAL_PWREx_GetVoltageRange>
 8005088:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800508a:	4b1e      	ldr	r3, [pc, #120]	; (8005104 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800508c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800508e:	4a1d      	ldr	r2, [pc, #116]	; (8005104 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005090:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005094:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005096:	697b      	ldr	r3, [r7, #20]
 8005098:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800509c:	d10b      	bne.n	80050b6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2b80      	cmp	r3, #128	; 0x80
 80050a2:	d919      	bls.n	80050d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2ba0      	cmp	r3, #160	; 0xa0
 80050a8:	d902      	bls.n	80050b0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80050aa:	2302      	movs	r3, #2
 80050ac:	613b      	str	r3, [r7, #16]
 80050ae:	e013      	b.n	80050d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80050b0:	2301      	movs	r3, #1
 80050b2:	613b      	str	r3, [r7, #16]
 80050b4:	e010      	b.n	80050d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2b80      	cmp	r3, #128	; 0x80
 80050ba:	d902      	bls.n	80050c2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80050bc:	2303      	movs	r3, #3
 80050be:	613b      	str	r3, [r7, #16]
 80050c0:	e00a      	b.n	80050d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2b80      	cmp	r3, #128	; 0x80
 80050c6:	d102      	bne.n	80050ce <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80050c8:	2302      	movs	r3, #2
 80050ca:	613b      	str	r3, [r7, #16]
 80050cc:	e004      	b.n	80050d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2b70      	cmp	r3, #112	; 0x70
 80050d2:	d101      	bne.n	80050d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80050d4:	2301      	movs	r3, #1
 80050d6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80050d8:	4b0b      	ldr	r3, [pc, #44]	; (8005108 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f023 0207 	bic.w	r2, r3, #7
 80050e0:	4909      	ldr	r1, [pc, #36]	; (8005108 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80050e2:	693b      	ldr	r3, [r7, #16]
 80050e4:	4313      	orrs	r3, r2
 80050e6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80050e8:	4b07      	ldr	r3, [pc, #28]	; (8005108 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f003 0307 	and.w	r3, r3, #7
 80050f0:	693a      	ldr	r2, [r7, #16]
 80050f2:	429a      	cmp	r2, r3
 80050f4:	d001      	beq.n	80050fa <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80050f6:	2301      	movs	r3, #1
 80050f8:	e000      	b.n	80050fc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80050fa:	2300      	movs	r3, #0
}
 80050fc:	4618      	mov	r0, r3
 80050fe:	3718      	adds	r7, #24
 8005100:	46bd      	mov	sp, r7
 8005102:	bd80      	pop	{r7, pc}
 8005104:	40021000 	.word	0x40021000
 8005108:	40022000 	.word	0x40022000

0800510c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800510c:	b580      	push	{r7, lr}
 800510e:	b086      	sub	sp, #24
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005114:	2300      	movs	r3, #0
 8005116:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005118:	2300      	movs	r3, #0
 800511a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005124:	2b00      	cmp	r3, #0
 8005126:	d041      	beq.n	80051ac <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800512c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005130:	d02a      	beq.n	8005188 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8005132:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005136:	d824      	bhi.n	8005182 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005138:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800513c:	d008      	beq.n	8005150 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800513e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005142:	d81e      	bhi.n	8005182 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005144:	2b00      	cmp	r3, #0
 8005146:	d00a      	beq.n	800515e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005148:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800514c:	d010      	beq.n	8005170 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800514e:	e018      	b.n	8005182 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005150:	4b86      	ldr	r3, [pc, #536]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005152:	68db      	ldr	r3, [r3, #12]
 8005154:	4a85      	ldr	r2, [pc, #532]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005156:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800515a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800515c:	e015      	b.n	800518a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	3304      	adds	r3, #4
 8005162:	2100      	movs	r1, #0
 8005164:	4618      	mov	r0, r3
 8005166:	f000 fabb 	bl	80056e0 <RCCEx_PLLSAI1_Config>
 800516a:	4603      	mov	r3, r0
 800516c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800516e:	e00c      	b.n	800518a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	3320      	adds	r3, #32
 8005174:	2100      	movs	r1, #0
 8005176:	4618      	mov	r0, r3
 8005178:	f000 fba6 	bl	80058c8 <RCCEx_PLLSAI2_Config>
 800517c:	4603      	mov	r3, r0
 800517e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005180:	e003      	b.n	800518a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005182:	2301      	movs	r3, #1
 8005184:	74fb      	strb	r3, [r7, #19]
      break;
 8005186:	e000      	b.n	800518a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8005188:	bf00      	nop
    }

    if(ret == HAL_OK)
 800518a:	7cfb      	ldrb	r3, [r7, #19]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d10b      	bne.n	80051a8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005190:	4b76      	ldr	r3, [pc, #472]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005192:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005196:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800519e:	4973      	ldr	r1, [pc, #460]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80051a0:	4313      	orrs	r3, r2
 80051a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80051a6:	e001      	b.n	80051ac <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051a8:	7cfb      	ldrb	r3, [r7, #19]
 80051aa:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d041      	beq.n	800523c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80051bc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80051c0:	d02a      	beq.n	8005218 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80051c2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80051c6:	d824      	bhi.n	8005212 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80051c8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80051cc:	d008      	beq.n	80051e0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80051ce:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80051d2:	d81e      	bhi.n	8005212 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d00a      	beq.n	80051ee <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80051d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80051dc:	d010      	beq.n	8005200 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80051de:	e018      	b.n	8005212 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80051e0:	4b62      	ldr	r3, [pc, #392]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80051e2:	68db      	ldr	r3, [r3, #12]
 80051e4:	4a61      	ldr	r2, [pc, #388]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80051e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80051ea:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80051ec:	e015      	b.n	800521a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	3304      	adds	r3, #4
 80051f2:	2100      	movs	r1, #0
 80051f4:	4618      	mov	r0, r3
 80051f6:	f000 fa73 	bl	80056e0 <RCCEx_PLLSAI1_Config>
 80051fa:	4603      	mov	r3, r0
 80051fc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80051fe:	e00c      	b.n	800521a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	3320      	adds	r3, #32
 8005204:	2100      	movs	r1, #0
 8005206:	4618      	mov	r0, r3
 8005208:	f000 fb5e 	bl	80058c8 <RCCEx_PLLSAI2_Config>
 800520c:	4603      	mov	r3, r0
 800520e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005210:	e003      	b.n	800521a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005212:	2301      	movs	r3, #1
 8005214:	74fb      	strb	r3, [r7, #19]
      break;
 8005216:	e000      	b.n	800521a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8005218:	bf00      	nop
    }

    if(ret == HAL_OK)
 800521a:	7cfb      	ldrb	r3, [r7, #19]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d10b      	bne.n	8005238 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005220:	4b52      	ldr	r3, [pc, #328]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005222:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005226:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800522e:	494f      	ldr	r1, [pc, #316]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005230:	4313      	orrs	r3, r2
 8005232:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005236:	e001      	b.n	800523c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005238:	7cfb      	ldrb	r3, [r7, #19]
 800523a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005244:	2b00      	cmp	r3, #0
 8005246:	f000 80a0 	beq.w	800538a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800524a:	2300      	movs	r3, #0
 800524c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800524e:	4b47      	ldr	r3, [pc, #284]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005250:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005252:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005256:	2b00      	cmp	r3, #0
 8005258:	d101      	bne.n	800525e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800525a:	2301      	movs	r3, #1
 800525c:	e000      	b.n	8005260 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800525e:	2300      	movs	r3, #0
 8005260:	2b00      	cmp	r3, #0
 8005262:	d00d      	beq.n	8005280 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005264:	4b41      	ldr	r3, [pc, #260]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005266:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005268:	4a40      	ldr	r2, [pc, #256]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800526a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800526e:	6593      	str	r3, [r2, #88]	; 0x58
 8005270:	4b3e      	ldr	r3, [pc, #248]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005272:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005274:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005278:	60bb      	str	r3, [r7, #8]
 800527a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800527c:	2301      	movs	r3, #1
 800527e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005280:	4b3b      	ldr	r3, [pc, #236]	; (8005370 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	4a3a      	ldr	r2, [pc, #232]	; (8005370 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005286:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800528a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800528c:	f7fd f982 	bl	8002594 <HAL_GetTick>
 8005290:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005292:	e009      	b.n	80052a8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005294:	f7fd f97e 	bl	8002594 <HAL_GetTick>
 8005298:	4602      	mov	r2, r0
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	1ad3      	subs	r3, r2, r3
 800529e:	2b02      	cmp	r3, #2
 80052a0:	d902      	bls.n	80052a8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80052a2:	2303      	movs	r3, #3
 80052a4:	74fb      	strb	r3, [r7, #19]
        break;
 80052a6:	e005      	b.n	80052b4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80052a8:	4b31      	ldr	r3, [pc, #196]	; (8005370 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d0ef      	beq.n	8005294 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80052b4:	7cfb      	ldrb	r3, [r7, #19]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d15c      	bne.n	8005374 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80052ba:	4b2c      	ldr	r3, [pc, #176]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80052bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052c4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80052c6:	697b      	ldr	r3, [r7, #20]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d01f      	beq.n	800530c <HAL_RCCEx_PeriphCLKConfig+0x200>
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80052d2:	697a      	ldr	r2, [r7, #20]
 80052d4:	429a      	cmp	r2, r3
 80052d6:	d019      	beq.n	800530c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80052d8:	4b24      	ldr	r3, [pc, #144]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80052da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052e2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80052e4:	4b21      	ldr	r3, [pc, #132]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80052e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052ea:	4a20      	ldr	r2, [pc, #128]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80052ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80052f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80052f4:	4b1d      	ldr	r3, [pc, #116]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80052f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052fa:	4a1c      	ldr	r2, [pc, #112]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80052fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005300:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005304:	4a19      	ldr	r2, [pc, #100]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005306:	697b      	ldr	r3, [r7, #20]
 8005308:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800530c:	697b      	ldr	r3, [r7, #20]
 800530e:	f003 0301 	and.w	r3, r3, #1
 8005312:	2b00      	cmp	r3, #0
 8005314:	d016      	beq.n	8005344 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005316:	f7fd f93d 	bl	8002594 <HAL_GetTick>
 800531a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800531c:	e00b      	b.n	8005336 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800531e:	f7fd f939 	bl	8002594 <HAL_GetTick>
 8005322:	4602      	mov	r2, r0
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	1ad3      	subs	r3, r2, r3
 8005328:	f241 3288 	movw	r2, #5000	; 0x1388
 800532c:	4293      	cmp	r3, r2
 800532e:	d902      	bls.n	8005336 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8005330:	2303      	movs	r3, #3
 8005332:	74fb      	strb	r3, [r7, #19]
            break;
 8005334:	e006      	b.n	8005344 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005336:	4b0d      	ldr	r3, [pc, #52]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005338:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800533c:	f003 0302 	and.w	r3, r3, #2
 8005340:	2b00      	cmp	r3, #0
 8005342:	d0ec      	beq.n	800531e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8005344:	7cfb      	ldrb	r3, [r7, #19]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d10c      	bne.n	8005364 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800534a:	4b08      	ldr	r3, [pc, #32]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800534c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005350:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800535a:	4904      	ldr	r1, [pc, #16]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800535c:	4313      	orrs	r3, r2
 800535e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005362:	e009      	b.n	8005378 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005364:	7cfb      	ldrb	r3, [r7, #19]
 8005366:	74bb      	strb	r3, [r7, #18]
 8005368:	e006      	b.n	8005378 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800536a:	bf00      	nop
 800536c:	40021000 	.word	0x40021000
 8005370:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005374:	7cfb      	ldrb	r3, [r7, #19]
 8005376:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005378:	7c7b      	ldrb	r3, [r7, #17]
 800537a:	2b01      	cmp	r3, #1
 800537c:	d105      	bne.n	800538a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800537e:	4b9e      	ldr	r3, [pc, #632]	; (80055f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005380:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005382:	4a9d      	ldr	r2, [pc, #628]	; (80055f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005384:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005388:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f003 0301 	and.w	r3, r3, #1
 8005392:	2b00      	cmp	r3, #0
 8005394:	d00a      	beq.n	80053ac <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005396:	4b98      	ldr	r3, [pc, #608]	; (80055f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005398:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800539c:	f023 0203 	bic.w	r2, r3, #3
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053a4:	4994      	ldr	r1, [pc, #592]	; (80055f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053a6:	4313      	orrs	r3, r2
 80053a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f003 0302 	and.w	r3, r3, #2
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d00a      	beq.n	80053ce <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80053b8:	4b8f      	ldr	r3, [pc, #572]	; (80055f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053be:	f023 020c 	bic.w	r2, r3, #12
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053c6:	498c      	ldr	r1, [pc, #560]	; (80055f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053c8:	4313      	orrs	r3, r2
 80053ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f003 0304 	and.w	r3, r3, #4
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d00a      	beq.n	80053f0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80053da:	4b87      	ldr	r3, [pc, #540]	; (80055f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053e0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053e8:	4983      	ldr	r1, [pc, #524]	; (80055f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053ea:	4313      	orrs	r3, r2
 80053ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f003 0308 	and.w	r3, r3, #8
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d00a      	beq.n	8005412 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80053fc:	4b7e      	ldr	r3, [pc, #504]	; (80055f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005402:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800540a:	497b      	ldr	r1, [pc, #492]	; (80055f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800540c:	4313      	orrs	r3, r2
 800540e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f003 0310 	and.w	r3, r3, #16
 800541a:	2b00      	cmp	r3, #0
 800541c:	d00a      	beq.n	8005434 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800541e:	4b76      	ldr	r3, [pc, #472]	; (80055f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005420:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005424:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800542c:	4972      	ldr	r1, [pc, #456]	; (80055f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800542e:	4313      	orrs	r3, r2
 8005430:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f003 0320 	and.w	r3, r3, #32
 800543c:	2b00      	cmp	r3, #0
 800543e:	d00a      	beq.n	8005456 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005440:	4b6d      	ldr	r3, [pc, #436]	; (80055f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005442:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005446:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800544e:	496a      	ldr	r1, [pc, #424]	; (80055f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005450:	4313      	orrs	r3, r2
 8005452:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800545e:	2b00      	cmp	r3, #0
 8005460:	d00a      	beq.n	8005478 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005462:	4b65      	ldr	r3, [pc, #404]	; (80055f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005464:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005468:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005470:	4961      	ldr	r1, [pc, #388]	; (80055f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005472:	4313      	orrs	r3, r2
 8005474:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005480:	2b00      	cmp	r3, #0
 8005482:	d00a      	beq.n	800549a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005484:	4b5c      	ldr	r3, [pc, #368]	; (80055f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005486:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800548a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005492:	4959      	ldr	r1, [pc, #356]	; (80055f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005494:	4313      	orrs	r3, r2
 8005496:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d00a      	beq.n	80054bc <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80054a6:	4b54      	ldr	r3, [pc, #336]	; (80055f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054ac:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054b4:	4950      	ldr	r1, [pc, #320]	; (80055f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054b6:	4313      	orrs	r3, r2
 80054b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d00a      	beq.n	80054de <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80054c8:	4b4b      	ldr	r3, [pc, #300]	; (80055f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054ce:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054d6:	4948      	ldr	r1, [pc, #288]	; (80055f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054d8:	4313      	orrs	r3, r2
 80054da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d00a      	beq.n	8005500 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80054ea:	4b43      	ldr	r3, [pc, #268]	; (80055f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054f0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054f8:	493f      	ldr	r1, [pc, #252]	; (80055f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054fa:	4313      	orrs	r3, r2
 80054fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005508:	2b00      	cmp	r3, #0
 800550a:	d028      	beq.n	800555e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800550c:	4b3a      	ldr	r3, [pc, #232]	; (80055f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800550e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005512:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800551a:	4937      	ldr	r1, [pc, #220]	; (80055f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800551c:	4313      	orrs	r3, r2
 800551e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005526:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800552a:	d106      	bne.n	800553a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800552c:	4b32      	ldr	r3, [pc, #200]	; (80055f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800552e:	68db      	ldr	r3, [r3, #12]
 8005530:	4a31      	ldr	r2, [pc, #196]	; (80055f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005532:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005536:	60d3      	str	r3, [r2, #12]
 8005538:	e011      	b.n	800555e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800553e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005542:	d10c      	bne.n	800555e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	3304      	adds	r3, #4
 8005548:	2101      	movs	r1, #1
 800554a:	4618      	mov	r0, r3
 800554c:	f000 f8c8 	bl	80056e0 <RCCEx_PLLSAI1_Config>
 8005550:	4603      	mov	r3, r0
 8005552:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005554:	7cfb      	ldrb	r3, [r7, #19]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d001      	beq.n	800555e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800555a:	7cfb      	ldrb	r3, [r7, #19]
 800555c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005566:	2b00      	cmp	r3, #0
 8005568:	d028      	beq.n	80055bc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800556a:	4b23      	ldr	r3, [pc, #140]	; (80055f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800556c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005570:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005578:	491f      	ldr	r1, [pc, #124]	; (80055f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800557a:	4313      	orrs	r3, r2
 800557c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005584:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005588:	d106      	bne.n	8005598 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800558a:	4b1b      	ldr	r3, [pc, #108]	; (80055f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800558c:	68db      	ldr	r3, [r3, #12]
 800558e:	4a1a      	ldr	r2, [pc, #104]	; (80055f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005590:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005594:	60d3      	str	r3, [r2, #12]
 8005596:	e011      	b.n	80055bc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800559c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80055a0:	d10c      	bne.n	80055bc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	3304      	adds	r3, #4
 80055a6:	2101      	movs	r1, #1
 80055a8:	4618      	mov	r0, r3
 80055aa:	f000 f899 	bl	80056e0 <RCCEx_PLLSAI1_Config>
 80055ae:	4603      	mov	r3, r0
 80055b0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80055b2:	7cfb      	ldrb	r3, [r7, #19]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d001      	beq.n	80055bc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80055b8:	7cfb      	ldrb	r3, [r7, #19]
 80055ba:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d02b      	beq.n	8005620 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80055c8:	4b0b      	ldr	r3, [pc, #44]	; (80055f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055ce:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80055d6:	4908      	ldr	r1, [pc, #32]	; (80055f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055d8:	4313      	orrs	r3, r2
 80055da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80055e2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80055e6:	d109      	bne.n	80055fc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80055e8:	4b03      	ldr	r3, [pc, #12]	; (80055f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055ea:	68db      	ldr	r3, [r3, #12]
 80055ec:	4a02      	ldr	r2, [pc, #8]	; (80055f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80055f2:	60d3      	str	r3, [r2, #12]
 80055f4:	e014      	b.n	8005620 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80055f6:	bf00      	nop
 80055f8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005600:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005604:	d10c      	bne.n	8005620 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	3304      	adds	r3, #4
 800560a:	2101      	movs	r1, #1
 800560c:	4618      	mov	r0, r3
 800560e:	f000 f867 	bl	80056e0 <RCCEx_PLLSAI1_Config>
 8005612:	4603      	mov	r3, r0
 8005614:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005616:	7cfb      	ldrb	r3, [r7, #19]
 8005618:	2b00      	cmp	r3, #0
 800561a:	d001      	beq.n	8005620 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800561c:	7cfb      	ldrb	r3, [r7, #19]
 800561e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005628:	2b00      	cmp	r3, #0
 800562a:	d02f      	beq.n	800568c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800562c:	4b2b      	ldr	r3, [pc, #172]	; (80056dc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800562e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005632:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800563a:	4928      	ldr	r1, [pc, #160]	; (80056dc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800563c:	4313      	orrs	r3, r2
 800563e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005646:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800564a:	d10d      	bne.n	8005668 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	3304      	adds	r3, #4
 8005650:	2102      	movs	r1, #2
 8005652:	4618      	mov	r0, r3
 8005654:	f000 f844 	bl	80056e0 <RCCEx_PLLSAI1_Config>
 8005658:	4603      	mov	r3, r0
 800565a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800565c:	7cfb      	ldrb	r3, [r7, #19]
 800565e:	2b00      	cmp	r3, #0
 8005660:	d014      	beq.n	800568c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005662:	7cfb      	ldrb	r3, [r7, #19]
 8005664:	74bb      	strb	r3, [r7, #18]
 8005666:	e011      	b.n	800568c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800566c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005670:	d10c      	bne.n	800568c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	3320      	adds	r3, #32
 8005676:	2102      	movs	r1, #2
 8005678:	4618      	mov	r0, r3
 800567a:	f000 f925 	bl	80058c8 <RCCEx_PLLSAI2_Config>
 800567e:	4603      	mov	r3, r0
 8005680:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005682:	7cfb      	ldrb	r3, [r7, #19]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d001      	beq.n	800568c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005688:	7cfb      	ldrb	r3, [r7, #19]
 800568a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005694:	2b00      	cmp	r3, #0
 8005696:	d00a      	beq.n	80056ae <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005698:	4b10      	ldr	r3, [pc, #64]	; (80056dc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800569a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800569e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80056a6:	490d      	ldr	r1, [pc, #52]	; (80056dc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80056a8:	4313      	orrs	r3, r2
 80056aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d00b      	beq.n	80056d2 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80056ba:	4b08      	ldr	r3, [pc, #32]	; (80056dc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80056bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056c0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80056ca:	4904      	ldr	r1, [pc, #16]	; (80056dc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80056cc:	4313      	orrs	r3, r2
 80056ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80056d2:	7cbb      	ldrb	r3, [r7, #18]
}
 80056d4:	4618      	mov	r0, r3
 80056d6:	3718      	adds	r7, #24
 80056d8:	46bd      	mov	sp, r7
 80056da:	bd80      	pop	{r7, pc}
 80056dc:	40021000 	.word	0x40021000

080056e0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b084      	sub	sp, #16
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
 80056e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80056ea:	2300      	movs	r3, #0
 80056ec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80056ee:	4b75      	ldr	r3, [pc, #468]	; (80058c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80056f0:	68db      	ldr	r3, [r3, #12]
 80056f2:	f003 0303 	and.w	r3, r3, #3
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d018      	beq.n	800572c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80056fa:	4b72      	ldr	r3, [pc, #456]	; (80058c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80056fc:	68db      	ldr	r3, [r3, #12]
 80056fe:	f003 0203 	and.w	r2, r3, #3
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	429a      	cmp	r2, r3
 8005708:	d10d      	bne.n	8005726 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
       ||
 800570e:	2b00      	cmp	r3, #0
 8005710:	d009      	beq.n	8005726 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005712:	4b6c      	ldr	r3, [pc, #432]	; (80058c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005714:	68db      	ldr	r3, [r3, #12]
 8005716:	091b      	lsrs	r3, r3, #4
 8005718:	f003 0307 	and.w	r3, r3, #7
 800571c:	1c5a      	adds	r2, r3, #1
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	685b      	ldr	r3, [r3, #4]
       ||
 8005722:	429a      	cmp	r2, r3
 8005724:	d047      	beq.n	80057b6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005726:	2301      	movs	r3, #1
 8005728:	73fb      	strb	r3, [r7, #15]
 800572a:	e044      	b.n	80057b6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	2b03      	cmp	r3, #3
 8005732:	d018      	beq.n	8005766 <RCCEx_PLLSAI1_Config+0x86>
 8005734:	2b03      	cmp	r3, #3
 8005736:	d825      	bhi.n	8005784 <RCCEx_PLLSAI1_Config+0xa4>
 8005738:	2b01      	cmp	r3, #1
 800573a:	d002      	beq.n	8005742 <RCCEx_PLLSAI1_Config+0x62>
 800573c:	2b02      	cmp	r3, #2
 800573e:	d009      	beq.n	8005754 <RCCEx_PLLSAI1_Config+0x74>
 8005740:	e020      	b.n	8005784 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005742:	4b60      	ldr	r3, [pc, #384]	; (80058c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f003 0302 	and.w	r3, r3, #2
 800574a:	2b00      	cmp	r3, #0
 800574c:	d11d      	bne.n	800578a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800574e:	2301      	movs	r3, #1
 8005750:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005752:	e01a      	b.n	800578a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005754:	4b5b      	ldr	r3, [pc, #364]	; (80058c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800575c:	2b00      	cmp	r3, #0
 800575e:	d116      	bne.n	800578e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005760:	2301      	movs	r3, #1
 8005762:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005764:	e013      	b.n	800578e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005766:	4b57      	ldr	r3, [pc, #348]	; (80058c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800576e:	2b00      	cmp	r3, #0
 8005770:	d10f      	bne.n	8005792 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005772:	4b54      	ldr	r3, [pc, #336]	; (80058c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800577a:	2b00      	cmp	r3, #0
 800577c:	d109      	bne.n	8005792 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800577e:	2301      	movs	r3, #1
 8005780:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005782:	e006      	b.n	8005792 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005784:	2301      	movs	r3, #1
 8005786:	73fb      	strb	r3, [r7, #15]
      break;
 8005788:	e004      	b.n	8005794 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800578a:	bf00      	nop
 800578c:	e002      	b.n	8005794 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800578e:	bf00      	nop
 8005790:	e000      	b.n	8005794 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005792:	bf00      	nop
    }

    if(status == HAL_OK)
 8005794:	7bfb      	ldrb	r3, [r7, #15]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d10d      	bne.n	80057b6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800579a:	4b4a      	ldr	r3, [pc, #296]	; (80058c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800579c:	68db      	ldr	r3, [r3, #12]
 800579e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6819      	ldr	r1, [r3, #0]
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	685b      	ldr	r3, [r3, #4]
 80057aa:	3b01      	subs	r3, #1
 80057ac:	011b      	lsls	r3, r3, #4
 80057ae:	430b      	orrs	r3, r1
 80057b0:	4944      	ldr	r1, [pc, #272]	; (80058c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80057b2:	4313      	orrs	r3, r2
 80057b4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80057b6:	7bfb      	ldrb	r3, [r7, #15]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d17d      	bne.n	80058b8 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80057bc:	4b41      	ldr	r3, [pc, #260]	; (80058c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	4a40      	ldr	r2, [pc, #256]	; (80058c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80057c2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80057c6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80057c8:	f7fc fee4 	bl	8002594 <HAL_GetTick>
 80057cc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80057ce:	e009      	b.n	80057e4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80057d0:	f7fc fee0 	bl	8002594 <HAL_GetTick>
 80057d4:	4602      	mov	r2, r0
 80057d6:	68bb      	ldr	r3, [r7, #8]
 80057d8:	1ad3      	subs	r3, r2, r3
 80057da:	2b02      	cmp	r3, #2
 80057dc:	d902      	bls.n	80057e4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80057de:	2303      	movs	r3, #3
 80057e0:	73fb      	strb	r3, [r7, #15]
        break;
 80057e2:	e005      	b.n	80057f0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80057e4:	4b37      	ldr	r3, [pc, #220]	; (80058c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d1ef      	bne.n	80057d0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80057f0:	7bfb      	ldrb	r3, [r7, #15]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d160      	bne.n	80058b8 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d111      	bne.n	8005820 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80057fc:	4b31      	ldr	r3, [pc, #196]	; (80058c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80057fe:	691b      	ldr	r3, [r3, #16]
 8005800:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005804:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005808:	687a      	ldr	r2, [r7, #4]
 800580a:	6892      	ldr	r2, [r2, #8]
 800580c:	0211      	lsls	r1, r2, #8
 800580e:	687a      	ldr	r2, [r7, #4]
 8005810:	68d2      	ldr	r2, [r2, #12]
 8005812:	0912      	lsrs	r2, r2, #4
 8005814:	0452      	lsls	r2, r2, #17
 8005816:	430a      	orrs	r2, r1
 8005818:	492a      	ldr	r1, [pc, #168]	; (80058c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800581a:	4313      	orrs	r3, r2
 800581c:	610b      	str	r3, [r1, #16]
 800581e:	e027      	b.n	8005870 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	2b01      	cmp	r3, #1
 8005824:	d112      	bne.n	800584c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005826:	4b27      	ldr	r3, [pc, #156]	; (80058c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005828:	691b      	ldr	r3, [r3, #16]
 800582a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800582e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005832:	687a      	ldr	r2, [r7, #4]
 8005834:	6892      	ldr	r2, [r2, #8]
 8005836:	0211      	lsls	r1, r2, #8
 8005838:	687a      	ldr	r2, [r7, #4]
 800583a:	6912      	ldr	r2, [r2, #16]
 800583c:	0852      	lsrs	r2, r2, #1
 800583e:	3a01      	subs	r2, #1
 8005840:	0552      	lsls	r2, r2, #21
 8005842:	430a      	orrs	r2, r1
 8005844:	491f      	ldr	r1, [pc, #124]	; (80058c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005846:	4313      	orrs	r3, r2
 8005848:	610b      	str	r3, [r1, #16]
 800584a:	e011      	b.n	8005870 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800584c:	4b1d      	ldr	r3, [pc, #116]	; (80058c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800584e:	691b      	ldr	r3, [r3, #16]
 8005850:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005854:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005858:	687a      	ldr	r2, [r7, #4]
 800585a:	6892      	ldr	r2, [r2, #8]
 800585c:	0211      	lsls	r1, r2, #8
 800585e:	687a      	ldr	r2, [r7, #4]
 8005860:	6952      	ldr	r2, [r2, #20]
 8005862:	0852      	lsrs	r2, r2, #1
 8005864:	3a01      	subs	r2, #1
 8005866:	0652      	lsls	r2, r2, #25
 8005868:	430a      	orrs	r2, r1
 800586a:	4916      	ldr	r1, [pc, #88]	; (80058c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800586c:	4313      	orrs	r3, r2
 800586e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005870:	4b14      	ldr	r3, [pc, #80]	; (80058c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	4a13      	ldr	r2, [pc, #76]	; (80058c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005876:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800587a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800587c:	f7fc fe8a 	bl	8002594 <HAL_GetTick>
 8005880:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005882:	e009      	b.n	8005898 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005884:	f7fc fe86 	bl	8002594 <HAL_GetTick>
 8005888:	4602      	mov	r2, r0
 800588a:	68bb      	ldr	r3, [r7, #8]
 800588c:	1ad3      	subs	r3, r2, r3
 800588e:	2b02      	cmp	r3, #2
 8005890:	d902      	bls.n	8005898 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8005892:	2303      	movs	r3, #3
 8005894:	73fb      	strb	r3, [r7, #15]
          break;
 8005896:	e005      	b.n	80058a4 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005898:	4b0a      	ldr	r3, [pc, #40]	; (80058c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d0ef      	beq.n	8005884 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80058a4:	7bfb      	ldrb	r3, [r7, #15]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d106      	bne.n	80058b8 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80058aa:	4b06      	ldr	r3, [pc, #24]	; (80058c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80058ac:	691a      	ldr	r2, [r3, #16]
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	699b      	ldr	r3, [r3, #24]
 80058b2:	4904      	ldr	r1, [pc, #16]	; (80058c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80058b4:	4313      	orrs	r3, r2
 80058b6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80058b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80058ba:	4618      	mov	r0, r3
 80058bc:	3710      	adds	r7, #16
 80058be:	46bd      	mov	sp, r7
 80058c0:	bd80      	pop	{r7, pc}
 80058c2:	bf00      	nop
 80058c4:	40021000 	.word	0x40021000

080058c8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b084      	sub	sp, #16
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
 80058d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80058d2:	2300      	movs	r3, #0
 80058d4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80058d6:	4b6a      	ldr	r3, [pc, #424]	; (8005a80 <RCCEx_PLLSAI2_Config+0x1b8>)
 80058d8:	68db      	ldr	r3, [r3, #12]
 80058da:	f003 0303 	and.w	r3, r3, #3
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d018      	beq.n	8005914 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80058e2:	4b67      	ldr	r3, [pc, #412]	; (8005a80 <RCCEx_PLLSAI2_Config+0x1b8>)
 80058e4:	68db      	ldr	r3, [r3, #12]
 80058e6:	f003 0203 	and.w	r2, r3, #3
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	429a      	cmp	r2, r3
 80058f0:	d10d      	bne.n	800590e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
       ||
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d009      	beq.n	800590e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80058fa:	4b61      	ldr	r3, [pc, #388]	; (8005a80 <RCCEx_PLLSAI2_Config+0x1b8>)
 80058fc:	68db      	ldr	r3, [r3, #12]
 80058fe:	091b      	lsrs	r3, r3, #4
 8005900:	f003 0307 	and.w	r3, r3, #7
 8005904:	1c5a      	adds	r2, r3, #1
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	685b      	ldr	r3, [r3, #4]
       ||
 800590a:	429a      	cmp	r2, r3
 800590c:	d047      	beq.n	800599e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800590e:	2301      	movs	r3, #1
 8005910:	73fb      	strb	r3, [r7, #15]
 8005912:	e044      	b.n	800599e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	2b03      	cmp	r3, #3
 800591a:	d018      	beq.n	800594e <RCCEx_PLLSAI2_Config+0x86>
 800591c:	2b03      	cmp	r3, #3
 800591e:	d825      	bhi.n	800596c <RCCEx_PLLSAI2_Config+0xa4>
 8005920:	2b01      	cmp	r3, #1
 8005922:	d002      	beq.n	800592a <RCCEx_PLLSAI2_Config+0x62>
 8005924:	2b02      	cmp	r3, #2
 8005926:	d009      	beq.n	800593c <RCCEx_PLLSAI2_Config+0x74>
 8005928:	e020      	b.n	800596c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800592a:	4b55      	ldr	r3, [pc, #340]	; (8005a80 <RCCEx_PLLSAI2_Config+0x1b8>)
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f003 0302 	and.w	r3, r3, #2
 8005932:	2b00      	cmp	r3, #0
 8005934:	d11d      	bne.n	8005972 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8005936:	2301      	movs	r3, #1
 8005938:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800593a:	e01a      	b.n	8005972 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800593c:	4b50      	ldr	r3, [pc, #320]	; (8005a80 <RCCEx_PLLSAI2_Config+0x1b8>)
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005944:	2b00      	cmp	r3, #0
 8005946:	d116      	bne.n	8005976 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8005948:	2301      	movs	r3, #1
 800594a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800594c:	e013      	b.n	8005976 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800594e:	4b4c      	ldr	r3, [pc, #304]	; (8005a80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005956:	2b00      	cmp	r3, #0
 8005958:	d10f      	bne.n	800597a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800595a:	4b49      	ldr	r3, [pc, #292]	; (8005a80 <RCCEx_PLLSAI2_Config+0x1b8>)
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005962:	2b00      	cmp	r3, #0
 8005964:	d109      	bne.n	800597a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8005966:	2301      	movs	r3, #1
 8005968:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800596a:	e006      	b.n	800597a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800596c:	2301      	movs	r3, #1
 800596e:	73fb      	strb	r3, [r7, #15]
      break;
 8005970:	e004      	b.n	800597c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005972:	bf00      	nop
 8005974:	e002      	b.n	800597c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005976:	bf00      	nop
 8005978:	e000      	b.n	800597c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800597a:	bf00      	nop
    }

    if(status == HAL_OK)
 800597c:	7bfb      	ldrb	r3, [r7, #15]
 800597e:	2b00      	cmp	r3, #0
 8005980:	d10d      	bne.n	800599e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005982:	4b3f      	ldr	r3, [pc, #252]	; (8005a80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005984:	68db      	ldr	r3, [r3, #12]
 8005986:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6819      	ldr	r1, [r3, #0]
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	685b      	ldr	r3, [r3, #4]
 8005992:	3b01      	subs	r3, #1
 8005994:	011b      	lsls	r3, r3, #4
 8005996:	430b      	orrs	r3, r1
 8005998:	4939      	ldr	r1, [pc, #228]	; (8005a80 <RCCEx_PLLSAI2_Config+0x1b8>)
 800599a:	4313      	orrs	r3, r2
 800599c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800599e:	7bfb      	ldrb	r3, [r7, #15]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d167      	bne.n	8005a74 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80059a4:	4b36      	ldr	r3, [pc, #216]	; (8005a80 <RCCEx_PLLSAI2_Config+0x1b8>)
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	4a35      	ldr	r2, [pc, #212]	; (8005a80 <RCCEx_PLLSAI2_Config+0x1b8>)
 80059aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80059ae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80059b0:	f7fc fdf0 	bl	8002594 <HAL_GetTick>
 80059b4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80059b6:	e009      	b.n	80059cc <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80059b8:	f7fc fdec 	bl	8002594 <HAL_GetTick>
 80059bc:	4602      	mov	r2, r0
 80059be:	68bb      	ldr	r3, [r7, #8]
 80059c0:	1ad3      	subs	r3, r2, r3
 80059c2:	2b02      	cmp	r3, #2
 80059c4:	d902      	bls.n	80059cc <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80059c6:	2303      	movs	r3, #3
 80059c8:	73fb      	strb	r3, [r7, #15]
        break;
 80059ca:	e005      	b.n	80059d8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80059cc:	4b2c      	ldr	r3, [pc, #176]	; (8005a80 <RCCEx_PLLSAI2_Config+0x1b8>)
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d1ef      	bne.n	80059b8 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80059d8:	7bfb      	ldrb	r3, [r7, #15]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d14a      	bne.n	8005a74 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d111      	bne.n	8005a08 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80059e4:	4b26      	ldr	r3, [pc, #152]	; (8005a80 <RCCEx_PLLSAI2_Config+0x1b8>)
 80059e6:	695b      	ldr	r3, [r3, #20]
 80059e8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80059ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80059f0:	687a      	ldr	r2, [r7, #4]
 80059f2:	6892      	ldr	r2, [r2, #8]
 80059f4:	0211      	lsls	r1, r2, #8
 80059f6:	687a      	ldr	r2, [r7, #4]
 80059f8:	68d2      	ldr	r2, [r2, #12]
 80059fa:	0912      	lsrs	r2, r2, #4
 80059fc:	0452      	lsls	r2, r2, #17
 80059fe:	430a      	orrs	r2, r1
 8005a00:	491f      	ldr	r1, [pc, #124]	; (8005a80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a02:	4313      	orrs	r3, r2
 8005a04:	614b      	str	r3, [r1, #20]
 8005a06:	e011      	b.n	8005a2c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005a08:	4b1d      	ldr	r3, [pc, #116]	; (8005a80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a0a:	695b      	ldr	r3, [r3, #20]
 8005a0c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005a10:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005a14:	687a      	ldr	r2, [r7, #4]
 8005a16:	6892      	ldr	r2, [r2, #8]
 8005a18:	0211      	lsls	r1, r2, #8
 8005a1a:	687a      	ldr	r2, [r7, #4]
 8005a1c:	6912      	ldr	r2, [r2, #16]
 8005a1e:	0852      	lsrs	r2, r2, #1
 8005a20:	3a01      	subs	r2, #1
 8005a22:	0652      	lsls	r2, r2, #25
 8005a24:	430a      	orrs	r2, r1
 8005a26:	4916      	ldr	r1, [pc, #88]	; (8005a80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a28:	4313      	orrs	r3, r2
 8005a2a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005a2c:	4b14      	ldr	r3, [pc, #80]	; (8005a80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	4a13      	ldr	r2, [pc, #76]	; (8005a80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a36:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a38:	f7fc fdac 	bl	8002594 <HAL_GetTick>
 8005a3c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005a3e:	e009      	b.n	8005a54 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005a40:	f7fc fda8 	bl	8002594 <HAL_GetTick>
 8005a44:	4602      	mov	r2, r0
 8005a46:	68bb      	ldr	r3, [r7, #8]
 8005a48:	1ad3      	subs	r3, r2, r3
 8005a4a:	2b02      	cmp	r3, #2
 8005a4c:	d902      	bls.n	8005a54 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8005a4e:	2303      	movs	r3, #3
 8005a50:	73fb      	strb	r3, [r7, #15]
          break;
 8005a52:	e005      	b.n	8005a60 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005a54:	4b0a      	ldr	r3, [pc, #40]	; (8005a80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d0ef      	beq.n	8005a40 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8005a60:	7bfb      	ldrb	r3, [r7, #15]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d106      	bne.n	8005a74 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005a66:	4b06      	ldr	r3, [pc, #24]	; (8005a80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a68:	695a      	ldr	r2, [r3, #20]
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	695b      	ldr	r3, [r3, #20]
 8005a6e:	4904      	ldr	r1, [pc, #16]	; (8005a80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a70:	4313      	orrs	r3, r2
 8005a72:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005a74:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a76:	4618      	mov	r0, r3
 8005a78:	3710      	adds	r7, #16
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	bd80      	pop	{r7, pc}
 8005a7e:	bf00      	nop
 8005a80:	40021000 	.word	0x40021000

08005a84 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005a84:	b580      	push	{r7, lr}
 8005a86:	b082      	sub	sp, #8
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d101      	bne.n	8005a96 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005a92:	2301      	movs	r3, #1
 8005a94:	e049      	b.n	8005b2a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a9c:	b2db      	uxtb	r3, r3
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d106      	bne.n	8005ab0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005aaa:	6878      	ldr	r0, [r7, #4]
 8005aac:	f7fc fb34 	bl	8002118 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2202      	movs	r2, #2
 8005ab4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681a      	ldr	r2, [r3, #0]
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	3304      	adds	r3, #4
 8005ac0:	4619      	mov	r1, r3
 8005ac2:	4610      	mov	r0, r2
 8005ac4:	f000 f968 	bl	8005d98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2201      	movs	r2, #1
 8005acc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2201      	movs	r2, #1
 8005ad4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2201      	movs	r2, #1
 8005adc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2201      	movs	r2, #1
 8005ae4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2201      	movs	r2, #1
 8005aec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2201      	movs	r2, #1
 8005af4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2201      	movs	r2, #1
 8005afc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2201      	movs	r2, #1
 8005b04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2201      	movs	r2, #1
 8005b0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2201      	movs	r2, #1
 8005b14:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2201      	movs	r2, #1
 8005b1c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2201      	movs	r2, #1
 8005b24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005b28:	2300      	movs	r3, #0
}
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	3708      	adds	r7, #8
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	bd80      	pop	{r7, pc}
	...

08005b34 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005b34:	b480      	push	{r7}
 8005b36:	b085      	sub	sp, #20
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b42:	b2db      	uxtb	r3, r3
 8005b44:	2b01      	cmp	r3, #1
 8005b46:	d001      	beq.n	8005b4c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005b48:	2301      	movs	r3, #1
 8005b4a:	e047      	b.n	8005bdc <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2202      	movs	r2, #2
 8005b50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	4a23      	ldr	r2, [pc, #140]	; (8005be8 <HAL_TIM_Base_Start+0xb4>)
 8005b5a:	4293      	cmp	r3, r2
 8005b5c:	d01d      	beq.n	8005b9a <HAL_TIM_Base_Start+0x66>
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b66:	d018      	beq.n	8005b9a <HAL_TIM_Base_Start+0x66>
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	4a1f      	ldr	r2, [pc, #124]	; (8005bec <HAL_TIM_Base_Start+0xb8>)
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d013      	beq.n	8005b9a <HAL_TIM_Base_Start+0x66>
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	4a1e      	ldr	r2, [pc, #120]	; (8005bf0 <HAL_TIM_Base_Start+0xbc>)
 8005b78:	4293      	cmp	r3, r2
 8005b7a:	d00e      	beq.n	8005b9a <HAL_TIM_Base_Start+0x66>
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	4a1c      	ldr	r2, [pc, #112]	; (8005bf4 <HAL_TIM_Base_Start+0xc0>)
 8005b82:	4293      	cmp	r3, r2
 8005b84:	d009      	beq.n	8005b9a <HAL_TIM_Base_Start+0x66>
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	4a1b      	ldr	r2, [pc, #108]	; (8005bf8 <HAL_TIM_Base_Start+0xc4>)
 8005b8c:	4293      	cmp	r3, r2
 8005b8e:	d004      	beq.n	8005b9a <HAL_TIM_Base_Start+0x66>
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	4a19      	ldr	r2, [pc, #100]	; (8005bfc <HAL_TIM_Base_Start+0xc8>)
 8005b96:	4293      	cmp	r3, r2
 8005b98:	d115      	bne.n	8005bc6 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	689a      	ldr	r2, [r3, #8]
 8005ba0:	4b17      	ldr	r3, [pc, #92]	; (8005c00 <HAL_TIM_Base_Start+0xcc>)
 8005ba2:	4013      	ands	r3, r2
 8005ba4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	2b06      	cmp	r3, #6
 8005baa:	d015      	beq.n	8005bd8 <HAL_TIM_Base_Start+0xa4>
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005bb2:	d011      	beq.n	8005bd8 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	681a      	ldr	r2, [r3, #0]
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f042 0201 	orr.w	r2, r2, #1
 8005bc2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005bc4:	e008      	b.n	8005bd8 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	681a      	ldr	r2, [r3, #0]
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f042 0201 	orr.w	r2, r2, #1
 8005bd4:	601a      	str	r2, [r3, #0]
 8005bd6:	e000      	b.n	8005bda <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005bd8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005bda:	2300      	movs	r3, #0
}
 8005bdc:	4618      	mov	r0, r3
 8005bde:	3714      	adds	r7, #20
 8005be0:	46bd      	mov	sp, r7
 8005be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be6:	4770      	bx	lr
 8005be8:	40012c00 	.word	0x40012c00
 8005bec:	40000400 	.word	0x40000400
 8005bf0:	40000800 	.word	0x40000800
 8005bf4:	40000c00 	.word	0x40000c00
 8005bf8:	40013400 	.word	0x40013400
 8005bfc:	40014000 	.word	0x40014000
 8005c00:	00010007 	.word	0x00010007

08005c04 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005c04:	b580      	push	{r7, lr}
 8005c06:	b084      	sub	sp, #16
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
 8005c0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005c0e:	2300      	movs	r3, #0
 8005c10:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c18:	2b01      	cmp	r3, #1
 8005c1a:	d101      	bne.n	8005c20 <HAL_TIM_ConfigClockSource+0x1c>
 8005c1c:	2302      	movs	r3, #2
 8005c1e:	e0b6      	b.n	8005d8e <HAL_TIM_ConfigClockSource+0x18a>
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2201      	movs	r2, #1
 8005c24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2202      	movs	r2, #2
 8005c2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	689b      	ldr	r3, [r3, #8]
 8005c36:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005c38:	68bb      	ldr	r3, [r7, #8]
 8005c3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c3e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005c42:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c44:	68bb      	ldr	r3, [r7, #8]
 8005c46:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005c4a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	68ba      	ldr	r2, [r7, #8]
 8005c52:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c5c:	d03e      	beq.n	8005cdc <HAL_TIM_ConfigClockSource+0xd8>
 8005c5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c62:	f200 8087 	bhi.w	8005d74 <HAL_TIM_ConfigClockSource+0x170>
 8005c66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c6a:	f000 8086 	beq.w	8005d7a <HAL_TIM_ConfigClockSource+0x176>
 8005c6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c72:	d87f      	bhi.n	8005d74 <HAL_TIM_ConfigClockSource+0x170>
 8005c74:	2b70      	cmp	r3, #112	; 0x70
 8005c76:	d01a      	beq.n	8005cae <HAL_TIM_ConfigClockSource+0xaa>
 8005c78:	2b70      	cmp	r3, #112	; 0x70
 8005c7a:	d87b      	bhi.n	8005d74 <HAL_TIM_ConfigClockSource+0x170>
 8005c7c:	2b60      	cmp	r3, #96	; 0x60
 8005c7e:	d050      	beq.n	8005d22 <HAL_TIM_ConfigClockSource+0x11e>
 8005c80:	2b60      	cmp	r3, #96	; 0x60
 8005c82:	d877      	bhi.n	8005d74 <HAL_TIM_ConfigClockSource+0x170>
 8005c84:	2b50      	cmp	r3, #80	; 0x50
 8005c86:	d03c      	beq.n	8005d02 <HAL_TIM_ConfigClockSource+0xfe>
 8005c88:	2b50      	cmp	r3, #80	; 0x50
 8005c8a:	d873      	bhi.n	8005d74 <HAL_TIM_ConfigClockSource+0x170>
 8005c8c:	2b40      	cmp	r3, #64	; 0x40
 8005c8e:	d058      	beq.n	8005d42 <HAL_TIM_ConfigClockSource+0x13e>
 8005c90:	2b40      	cmp	r3, #64	; 0x40
 8005c92:	d86f      	bhi.n	8005d74 <HAL_TIM_ConfigClockSource+0x170>
 8005c94:	2b30      	cmp	r3, #48	; 0x30
 8005c96:	d064      	beq.n	8005d62 <HAL_TIM_ConfigClockSource+0x15e>
 8005c98:	2b30      	cmp	r3, #48	; 0x30
 8005c9a:	d86b      	bhi.n	8005d74 <HAL_TIM_ConfigClockSource+0x170>
 8005c9c:	2b20      	cmp	r3, #32
 8005c9e:	d060      	beq.n	8005d62 <HAL_TIM_ConfigClockSource+0x15e>
 8005ca0:	2b20      	cmp	r3, #32
 8005ca2:	d867      	bhi.n	8005d74 <HAL_TIM_ConfigClockSource+0x170>
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d05c      	beq.n	8005d62 <HAL_TIM_ConfigClockSource+0x15e>
 8005ca8:	2b10      	cmp	r3, #16
 8005caa:	d05a      	beq.n	8005d62 <HAL_TIM_ConfigClockSource+0x15e>
 8005cac:	e062      	b.n	8005d74 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6818      	ldr	r0, [r3, #0]
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	6899      	ldr	r1, [r3, #8]
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	685a      	ldr	r2, [r3, #4]
 8005cba:	683b      	ldr	r3, [r7, #0]
 8005cbc:	68db      	ldr	r3, [r3, #12]
 8005cbe:	f000 f97f 	bl	8005fc0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	689b      	ldr	r3, [r3, #8]
 8005cc8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005cca:	68bb      	ldr	r3, [r7, #8]
 8005ccc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005cd0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	68ba      	ldr	r2, [r7, #8]
 8005cd8:	609a      	str	r2, [r3, #8]
      break;
 8005cda:	e04f      	b.n	8005d7c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	6818      	ldr	r0, [r3, #0]
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	6899      	ldr	r1, [r3, #8]
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	685a      	ldr	r2, [r3, #4]
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	68db      	ldr	r3, [r3, #12]
 8005cec:	f000 f968 	bl	8005fc0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	689a      	ldr	r2, [r3, #8]
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005cfe:	609a      	str	r2, [r3, #8]
      break;
 8005d00:	e03c      	b.n	8005d7c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6818      	ldr	r0, [r3, #0]
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	6859      	ldr	r1, [r3, #4]
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	68db      	ldr	r3, [r3, #12]
 8005d0e:	461a      	mov	r2, r3
 8005d10:	f000 f8dc 	bl	8005ecc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	2150      	movs	r1, #80	; 0x50
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	f000 f935 	bl	8005f8a <TIM_ITRx_SetConfig>
      break;
 8005d20:	e02c      	b.n	8005d7c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6818      	ldr	r0, [r3, #0]
 8005d26:	683b      	ldr	r3, [r7, #0]
 8005d28:	6859      	ldr	r1, [r3, #4]
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	68db      	ldr	r3, [r3, #12]
 8005d2e:	461a      	mov	r2, r3
 8005d30:	f000 f8fb 	bl	8005f2a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	2160      	movs	r1, #96	; 0x60
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	f000 f925 	bl	8005f8a <TIM_ITRx_SetConfig>
      break;
 8005d40:	e01c      	b.n	8005d7c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6818      	ldr	r0, [r3, #0]
 8005d46:	683b      	ldr	r3, [r7, #0]
 8005d48:	6859      	ldr	r1, [r3, #4]
 8005d4a:	683b      	ldr	r3, [r7, #0]
 8005d4c:	68db      	ldr	r3, [r3, #12]
 8005d4e:	461a      	mov	r2, r3
 8005d50:	f000 f8bc 	bl	8005ecc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	2140      	movs	r1, #64	; 0x40
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	f000 f915 	bl	8005f8a <TIM_ITRx_SetConfig>
      break;
 8005d60:	e00c      	b.n	8005d7c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681a      	ldr	r2, [r3, #0]
 8005d66:	683b      	ldr	r3, [r7, #0]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	4619      	mov	r1, r3
 8005d6c:	4610      	mov	r0, r2
 8005d6e:	f000 f90c 	bl	8005f8a <TIM_ITRx_SetConfig>
      break;
 8005d72:	e003      	b.n	8005d7c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005d74:	2301      	movs	r3, #1
 8005d76:	73fb      	strb	r3, [r7, #15]
      break;
 8005d78:	e000      	b.n	8005d7c <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005d7a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2201      	movs	r2, #1
 8005d80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2200      	movs	r2, #0
 8005d88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005d8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d8e:	4618      	mov	r0, r3
 8005d90:	3710      	adds	r7, #16
 8005d92:	46bd      	mov	sp, r7
 8005d94:	bd80      	pop	{r7, pc}
	...

08005d98 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005d98:	b480      	push	{r7}
 8005d9a:	b085      	sub	sp, #20
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
 8005da0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	4a40      	ldr	r2, [pc, #256]	; (8005eac <TIM_Base_SetConfig+0x114>)
 8005dac:	4293      	cmp	r3, r2
 8005dae:	d013      	beq.n	8005dd8 <TIM_Base_SetConfig+0x40>
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005db6:	d00f      	beq.n	8005dd8 <TIM_Base_SetConfig+0x40>
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	4a3d      	ldr	r2, [pc, #244]	; (8005eb0 <TIM_Base_SetConfig+0x118>)
 8005dbc:	4293      	cmp	r3, r2
 8005dbe:	d00b      	beq.n	8005dd8 <TIM_Base_SetConfig+0x40>
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	4a3c      	ldr	r2, [pc, #240]	; (8005eb4 <TIM_Base_SetConfig+0x11c>)
 8005dc4:	4293      	cmp	r3, r2
 8005dc6:	d007      	beq.n	8005dd8 <TIM_Base_SetConfig+0x40>
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	4a3b      	ldr	r2, [pc, #236]	; (8005eb8 <TIM_Base_SetConfig+0x120>)
 8005dcc:	4293      	cmp	r3, r2
 8005dce:	d003      	beq.n	8005dd8 <TIM_Base_SetConfig+0x40>
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	4a3a      	ldr	r2, [pc, #232]	; (8005ebc <TIM_Base_SetConfig+0x124>)
 8005dd4:	4293      	cmp	r3, r2
 8005dd6:	d108      	bne.n	8005dea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dde:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005de0:	683b      	ldr	r3, [r7, #0]
 8005de2:	685b      	ldr	r3, [r3, #4]
 8005de4:	68fa      	ldr	r2, [r7, #12]
 8005de6:	4313      	orrs	r3, r2
 8005de8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	4a2f      	ldr	r2, [pc, #188]	; (8005eac <TIM_Base_SetConfig+0x114>)
 8005dee:	4293      	cmp	r3, r2
 8005df0:	d01f      	beq.n	8005e32 <TIM_Base_SetConfig+0x9a>
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005df8:	d01b      	beq.n	8005e32 <TIM_Base_SetConfig+0x9a>
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	4a2c      	ldr	r2, [pc, #176]	; (8005eb0 <TIM_Base_SetConfig+0x118>)
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	d017      	beq.n	8005e32 <TIM_Base_SetConfig+0x9a>
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	4a2b      	ldr	r2, [pc, #172]	; (8005eb4 <TIM_Base_SetConfig+0x11c>)
 8005e06:	4293      	cmp	r3, r2
 8005e08:	d013      	beq.n	8005e32 <TIM_Base_SetConfig+0x9a>
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	4a2a      	ldr	r2, [pc, #168]	; (8005eb8 <TIM_Base_SetConfig+0x120>)
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	d00f      	beq.n	8005e32 <TIM_Base_SetConfig+0x9a>
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	4a29      	ldr	r2, [pc, #164]	; (8005ebc <TIM_Base_SetConfig+0x124>)
 8005e16:	4293      	cmp	r3, r2
 8005e18:	d00b      	beq.n	8005e32 <TIM_Base_SetConfig+0x9a>
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	4a28      	ldr	r2, [pc, #160]	; (8005ec0 <TIM_Base_SetConfig+0x128>)
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	d007      	beq.n	8005e32 <TIM_Base_SetConfig+0x9a>
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	4a27      	ldr	r2, [pc, #156]	; (8005ec4 <TIM_Base_SetConfig+0x12c>)
 8005e26:	4293      	cmp	r3, r2
 8005e28:	d003      	beq.n	8005e32 <TIM_Base_SetConfig+0x9a>
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	4a26      	ldr	r2, [pc, #152]	; (8005ec8 <TIM_Base_SetConfig+0x130>)
 8005e2e:	4293      	cmp	r3, r2
 8005e30:	d108      	bne.n	8005e44 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e38:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	68db      	ldr	r3, [r3, #12]
 8005e3e:	68fa      	ldr	r2, [r7, #12]
 8005e40:	4313      	orrs	r3, r2
 8005e42:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	695b      	ldr	r3, [r3, #20]
 8005e4e:	4313      	orrs	r3, r2
 8005e50:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	68fa      	ldr	r2, [r7, #12]
 8005e56:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	689a      	ldr	r2, [r3, #8]
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005e60:	683b      	ldr	r3, [r7, #0]
 8005e62:	681a      	ldr	r2, [r3, #0]
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	4a10      	ldr	r2, [pc, #64]	; (8005eac <TIM_Base_SetConfig+0x114>)
 8005e6c:	4293      	cmp	r3, r2
 8005e6e:	d00f      	beq.n	8005e90 <TIM_Base_SetConfig+0xf8>
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	4a12      	ldr	r2, [pc, #72]	; (8005ebc <TIM_Base_SetConfig+0x124>)
 8005e74:	4293      	cmp	r3, r2
 8005e76:	d00b      	beq.n	8005e90 <TIM_Base_SetConfig+0xf8>
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	4a11      	ldr	r2, [pc, #68]	; (8005ec0 <TIM_Base_SetConfig+0x128>)
 8005e7c:	4293      	cmp	r3, r2
 8005e7e:	d007      	beq.n	8005e90 <TIM_Base_SetConfig+0xf8>
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	4a10      	ldr	r2, [pc, #64]	; (8005ec4 <TIM_Base_SetConfig+0x12c>)
 8005e84:	4293      	cmp	r3, r2
 8005e86:	d003      	beq.n	8005e90 <TIM_Base_SetConfig+0xf8>
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	4a0f      	ldr	r2, [pc, #60]	; (8005ec8 <TIM_Base_SetConfig+0x130>)
 8005e8c:	4293      	cmp	r3, r2
 8005e8e:	d103      	bne.n	8005e98 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005e90:	683b      	ldr	r3, [r7, #0]
 8005e92:	691a      	ldr	r2, [r3, #16]
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2201      	movs	r2, #1
 8005e9c:	615a      	str	r2, [r3, #20]
}
 8005e9e:	bf00      	nop
 8005ea0:	3714      	adds	r7, #20
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea8:	4770      	bx	lr
 8005eaa:	bf00      	nop
 8005eac:	40012c00 	.word	0x40012c00
 8005eb0:	40000400 	.word	0x40000400
 8005eb4:	40000800 	.word	0x40000800
 8005eb8:	40000c00 	.word	0x40000c00
 8005ebc:	40013400 	.word	0x40013400
 8005ec0:	40014000 	.word	0x40014000
 8005ec4:	40014400 	.word	0x40014400
 8005ec8:	40014800 	.word	0x40014800

08005ecc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005ecc:	b480      	push	{r7}
 8005ece:	b087      	sub	sp, #28
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	60f8      	str	r0, [r7, #12]
 8005ed4:	60b9      	str	r1, [r7, #8]
 8005ed6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	6a1b      	ldr	r3, [r3, #32]
 8005edc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	6a1b      	ldr	r3, [r3, #32]
 8005ee2:	f023 0201 	bic.w	r2, r3, #1
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	699b      	ldr	r3, [r3, #24]
 8005eee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005ef0:	693b      	ldr	r3, [r7, #16]
 8005ef2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005ef6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	011b      	lsls	r3, r3, #4
 8005efc:	693a      	ldr	r2, [r7, #16]
 8005efe:	4313      	orrs	r3, r2
 8005f00:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005f02:	697b      	ldr	r3, [r7, #20]
 8005f04:	f023 030a 	bic.w	r3, r3, #10
 8005f08:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005f0a:	697a      	ldr	r2, [r7, #20]
 8005f0c:	68bb      	ldr	r3, [r7, #8]
 8005f0e:	4313      	orrs	r3, r2
 8005f10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	693a      	ldr	r2, [r7, #16]
 8005f16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	697a      	ldr	r2, [r7, #20]
 8005f1c:	621a      	str	r2, [r3, #32]
}
 8005f1e:	bf00      	nop
 8005f20:	371c      	adds	r7, #28
 8005f22:	46bd      	mov	sp, r7
 8005f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f28:	4770      	bx	lr

08005f2a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005f2a:	b480      	push	{r7}
 8005f2c:	b087      	sub	sp, #28
 8005f2e:	af00      	add	r7, sp, #0
 8005f30:	60f8      	str	r0, [r7, #12]
 8005f32:	60b9      	str	r1, [r7, #8]
 8005f34:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	6a1b      	ldr	r3, [r3, #32]
 8005f3a:	f023 0210 	bic.w	r2, r3, #16
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	699b      	ldr	r3, [r3, #24]
 8005f46:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	6a1b      	ldr	r3, [r3, #32]
 8005f4c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005f4e:	697b      	ldr	r3, [r7, #20]
 8005f50:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005f54:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	031b      	lsls	r3, r3, #12
 8005f5a:	697a      	ldr	r2, [r7, #20]
 8005f5c:	4313      	orrs	r3, r2
 8005f5e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005f60:	693b      	ldr	r3, [r7, #16]
 8005f62:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005f66:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005f68:	68bb      	ldr	r3, [r7, #8]
 8005f6a:	011b      	lsls	r3, r3, #4
 8005f6c:	693a      	ldr	r2, [r7, #16]
 8005f6e:	4313      	orrs	r3, r2
 8005f70:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	697a      	ldr	r2, [r7, #20]
 8005f76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	693a      	ldr	r2, [r7, #16]
 8005f7c:	621a      	str	r2, [r3, #32]
}
 8005f7e:	bf00      	nop
 8005f80:	371c      	adds	r7, #28
 8005f82:	46bd      	mov	sp, r7
 8005f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f88:	4770      	bx	lr

08005f8a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005f8a:	b480      	push	{r7}
 8005f8c:	b085      	sub	sp, #20
 8005f8e:	af00      	add	r7, sp, #0
 8005f90:	6078      	str	r0, [r7, #4]
 8005f92:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	689b      	ldr	r3, [r3, #8]
 8005f98:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fa0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005fa2:	683a      	ldr	r2, [r7, #0]
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	4313      	orrs	r3, r2
 8005fa8:	f043 0307 	orr.w	r3, r3, #7
 8005fac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	68fa      	ldr	r2, [r7, #12]
 8005fb2:	609a      	str	r2, [r3, #8]
}
 8005fb4:	bf00      	nop
 8005fb6:	3714      	adds	r7, #20
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fbe:	4770      	bx	lr

08005fc0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005fc0:	b480      	push	{r7}
 8005fc2:	b087      	sub	sp, #28
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	60f8      	str	r0, [r7, #12]
 8005fc8:	60b9      	str	r1, [r7, #8]
 8005fca:	607a      	str	r2, [r7, #4]
 8005fcc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	689b      	ldr	r3, [r3, #8]
 8005fd2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005fd4:	697b      	ldr	r3, [r7, #20]
 8005fd6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005fda:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005fdc:	683b      	ldr	r3, [r7, #0]
 8005fde:	021a      	lsls	r2, r3, #8
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	431a      	orrs	r2, r3
 8005fe4:	68bb      	ldr	r3, [r7, #8]
 8005fe6:	4313      	orrs	r3, r2
 8005fe8:	697a      	ldr	r2, [r7, #20]
 8005fea:	4313      	orrs	r3, r2
 8005fec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	697a      	ldr	r2, [r7, #20]
 8005ff2:	609a      	str	r2, [r3, #8]
}
 8005ff4:	bf00      	nop
 8005ff6:	371c      	adds	r7, #28
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffe:	4770      	bx	lr

08006000 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006000:	b480      	push	{r7}
 8006002:	b085      	sub	sp, #20
 8006004:	af00      	add	r7, sp, #0
 8006006:	6078      	str	r0, [r7, #4]
 8006008:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006010:	2b01      	cmp	r3, #1
 8006012:	d101      	bne.n	8006018 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006014:	2302      	movs	r3, #2
 8006016:	e068      	b.n	80060ea <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2201      	movs	r2, #1
 800601c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2202      	movs	r2, #2
 8006024:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	685b      	ldr	r3, [r3, #4]
 800602e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	689b      	ldr	r3, [r3, #8]
 8006036:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	4a2e      	ldr	r2, [pc, #184]	; (80060f8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800603e:	4293      	cmp	r3, r2
 8006040:	d004      	beq.n	800604c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	4a2d      	ldr	r2, [pc, #180]	; (80060fc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006048:	4293      	cmp	r3, r2
 800604a:	d108      	bne.n	800605e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006052:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006054:	683b      	ldr	r3, [r7, #0]
 8006056:	685b      	ldr	r3, [r3, #4]
 8006058:	68fa      	ldr	r2, [r7, #12]
 800605a:	4313      	orrs	r3, r2
 800605c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006064:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006066:	683b      	ldr	r3, [r7, #0]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	68fa      	ldr	r2, [r7, #12]
 800606c:	4313      	orrs	r3, r2
 800606e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	68fa      	ldr	r2, [r7, #12]
 8006076:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	4a1e      	ldr	r2, [pc, #120]	; (80060f8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800607e:	4293      	cmp	r3, r2
 8006080:	d01d      	beq.n	80060be <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800608a:	d018      	beq.n	80060be <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	4a1b      	ldr	r2, [pc, #108]	; (8006100 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006092:	4293      	cmp	r3, r2
 8006094:	d013      	beq.n	80060be <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	4a1a      	ldr	r2, [pc, #104]	; (8006104 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800609c:	4293      	cmp	r3, r2
 800609e:	d00e      	beq.n	80060be <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	4a18      	ldr	r2, [pc, #96]	; (8006108 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80060a6:	4293      	cmp	r3, r2
 80060a8:	d009      	beq.n	80060be <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	4a13      	ldr	r2, [pc, #76]	; (80060fc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80060b0:	4293      	cmp	r3, r2
 80060b2:	d004      	beq.n	80060be <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	4a14      	ldr	r2, [pc, #80]	; (800610c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80060ba:	4293      	cmp	r3, r2
 80060bc:	d10c      	bne.n	80060d8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80060be:	68bb      	ldr	r3, [r7, #8]
 80060c0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80060c4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80060c6:	683b      	ldr	r3, [r7, #0]
 80060c8:	689b      	ldr	r3, [r3, #8]
 80060ca:	68ba      	ldr	r2, [r7, #8]
 80060cc:	4313      	orrs	r3, r2
 80060ce:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	68ba      	ldr	r2, [r7, #8]
 80060d6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2201      	movs	r2, #1
 80060dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2200      	movs	r2, #0
 80060e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80060e8:	2300      	movs	r3, #0
}
 80060ea:	4618      	mov	r0, r3
 80060ec:	3714      	adds	r7, #20
 80060ee:	46bd      	mov	sp, r7
 80060f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f4:	4770      	bx	lr
 80060f6:	bf00      	nop
 80060f8:	40012c00 	.word	0x40012c00
 80060fc:	40013400 	.word	0x40013400
 8006100:	40000400 	.word	0x40000400
 8006104:	40000800 	.word	0x40000800
 8006108:	40000c00 	.word	0x40000c00
 800610c:	40014000 	.word	0x40014000

08006110 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006110:	b580      	push	{r7, lr}
 8006112:	b082      	sub	sp, #8
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2b00      	cmp	r3, #0
 800611c:	d101      	bne.n	8006122 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800611e:	2301      	movs	r3, #1
 8006120:	e040      	b.n	80061a4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006126:	2b00      	cmp	r3, #0
 8006128:	d106      	bne.n	8006138 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	2200      	movs	r2, #0
 800612e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006132:	6878      	ldr	r0, [r7, #4]
 8006134:	f7fc f80e 	bl	8002154 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2224      	movs	r2, #36	; 0x24
 800613c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	681a      	ldr	r2, [r3, #0]
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	f022 0201 	bic.w	r2, r2, #1
 800614c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800614e:	6878      	ldr	r0, [r7, #4]
 8006150:	f000 fc18 	bl	8006984 <UART_SetConfig>
 8006154:	4603      	mov	r3, r0
 8006156:	2b01      	cmp	r3, #1
 8006158:	d101      	bne.n	800615e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800615a:	2301      	movs	r3, #1
 800615c:	e022      	b.n	80061a4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006162:	2b00      	cmp	r3, #0
 8006164:	d002      	beq.n	800616c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006166:	6878      	ldr	r0, [r7, #4]
 8006168:	f000 fec4 	bl	8006ef4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	685a      	ldr	r2, [r3, #4]
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800617a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	689a      	ldr	r2, [r3, #8]
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800618a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	681a      	ldr	r2, [r3, #0]
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	f042 0201 	orr.w	r2, r2, #1
 800619a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800619c:	6878      	ldr	r0, [r7, #4]
 800619e:	f000 ff4b 	bl	8007038 <UART_CheckIdleState>
 80061a2:	4603      	mov	r3, r0
}
 80061a4:	4618      	mov	r0, r3
 80061a6:	3708      	adds	r7, #8
 80061a8:	46bd      	mov	sp, r7
 80061aa:	bd80      	pop	{r7, pc}

080061ac <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80061ac:	b580      	push	{r7, lr}
 80061ae:	b08a      	sub	sp, #40	; 0x28
 80061b0:	af02      	add	r7, sp, #8
 80061b2:	60f8      	str	r0, [r7, #12]
 80061b4:	60b9      	str	r1, [r7, #8]
 80061b6:	603b      	str	r3, [r7, #0]
 80061b8:	4613      	mov	r3, r2
 80061ba:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80061c0:	2b20      	cmp	r3, #32
 80061c2:	f040 8082 	bne.w	80062ca <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80061c6:	68bb      	ldr	r3, [r7, #8]
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d002      	beq.n	80061d2 <HAL_UART_Transmit+0x26>
 80061cc:	88fb      	ldrh	r3, [r7, #6]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d101      	bne.n	80061d6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80061d2:	2301      	movs	r3, #1
 80061d4:	e07a      	b.n	80062cc <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80061dc:	2b01      	cmp	r3, #1
 80061de:	d101      	bne.n	80061e4 <HAL_UART_Transmit+0x38>
 80061e0:	2302      	movs	r3, #2
 80061e2:	e073      	b.n	80062cc <HAL_UART_Transmit+0x120>
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	2201      	movs	r2, #1
 80061e8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	2200      	movs	r2, #0
 80061f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	2221      	movs	r2, #33	; 0x21
 80061f8:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80061fa:	f7fc f9cb 	bl	8002594 <HAL_GetTick>
 80061fe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	88fa      	ldrh	r2, [r7, #6]
 8006204:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	88fa      	ldrh	r2, [r7, #6]
 800620c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	689b      	ldr	r3, [r3, #8]
 8006214:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006218:	d108      	bne.n	800622c <HAL_UART_Transmit+0x80>
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	691b      	ldr	r3, [r3, #16]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d104      	bne.n	800622c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8006222:	2300      	movs	r3, #0
 8006224:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006226:	68bb      	ldr	r3, [r7, #8]
 8006228:	61bb      	str	r3, [r7, #24]
 800622a:	e003      	b.n	8006234 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800622c:	68bb      	ldr	r3, [r7, #8]
 800622e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006230:	2300      	movs	r3, #0
 8006232:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	2200      	movs	r2, #0
 8006238:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800623c:	e02d      	b.n	800629a <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	9300      	str	r3, [sp, #0]
 8006242:	697b      	ldr	r3, [r7, #20]
 8006244:	2200      	movs	r2, #0
 8006246:	2180      	movs	r1, #128	; 0x80
 8006248:	68f8      	ldr	r0, [r7, #12]
 800624a:	f000 ff3e 	bl	80070ca <UART_WaitOnFlagUntilTimeout>
 800624e:	4603      	mov	r3, r0
 8006250:	2b00      	cmp	r3, #0
 8006252:	d001      	beq.n	8006258 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8006254:	2303      	movs	r3, #3
 8006256:	e039      	b.n	80062cc <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8006258:	69fb      	ldr	r3, [r7, #28]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d10b      	bne.n	8006276 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800625e:	69bb      	ldr	r3, [r7, #24]
 8006260:	881a      	ldrh	r2, [r3, #0]
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800626a:	b292      	uxth	r2, r2
 800626c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800626e:	69bb      	ldr	r3, [r7, #24]
 8006270:	3302      	adds	r3, #2
 8006272:	61bb      	str	r3, [r7, #24]
 8006274:	e008      	b.n	8006288 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006276:	69fb      	ldr	r3, [r7, #28]
 8006278:	781a      	ldrb	r2, [r3, #0]
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	b292      	uxth	r2, r2
 8006280:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006282:	69fb      	ldr	r3, [r7, #28]
 8006284:	3301      	adds	r3, #1
 8006286:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800628e:	b29b      	uxth	r3, r3
 8006290:	3b01      	subs	r3, #1
 8006292:	b29a      	uxth	r2, r3
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80062a0:	b29b      	uxth	r3, r3
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d1cb      	bne.n	800623e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	9300      	str	r3, [sp, #0]
 80062aa:	697b      	ldr	r3, [r7, #20]
 80062ac:	2200      	movs	r2, #0
 80062ae:	2140      	movs	r1, #64	; 0x40
 80062b0:	68f8      	ldr	r0, [r7, #12]
 80062b2:	f000 ff0a 	bl	80070ca <UART_WaitOnFlagUntilTimeout>
 80062b6:	4603      	mov	r3, r0
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d001      	beq.n	80062c0 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80062bc:	2303      	movs	r3, #3
 80062be:	e005      	b.n	80062cc <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	2220      	movs	r2, #32
 80062c4:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80062c6:	2300      	movs	r3, #0
 80062c8:	e000      	b.n	80062cc <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80062ca:	2302      	movs	r3, #2
  }
}
 80062cc:	4618      	mov	r0, r3
 80062ce:	3720      	adds	r7, #32
 80062d0:	46bd      	mov	sp, r7
 80062d2:	bd80      	pop	{r7, pc}

080062d4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80062d4:	b580      	push	{r7, lr}
 80062d6:	b08a      	sub	sp, #40	; 0x28
 80062d8:	af00      	add	r7, sp, #0
 80062da:	60f8      	str	r0, [r7, #12]
 80062dc:	60b9      	str	r1, [r7, #8]
 80062de:	4613      	mov	r3, r2
 80062e0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80062e6:	2b20      	cmp	r3, #32
 80062e8:	d142      	bne.n	8006370 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 80062ea:	68bb      	ldr	r3, [r7, #8]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d002      	beq.n	80062f6 <HAL_UART_Receive_IT+0x22>
 80062f0:	88fb      	ldrh	r3, [r7, #6]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d101      	bne.n	80062fa <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 80062f6:	2301      	movs	r3, #1
 80062f8:	e03b      	b.n	8006372 <HAL_UART_Receive_IT+0x9e>
    }

    __HAL_LOCK(huart);
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006300:	2b01      	cmp	r3, #1
 8006302:	d101      	bne.n	8006308 <HAL_UART_Receive_IT+0x34>
 8006304:	2302      	movs	r3, #2
 8006306:	e034      	b.n	8006372 <HAL_UART_Receive_IT+0x9e>
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	2201      	movs	r2, #1
 800630c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	2200      	movs	r2, #0
 8006314:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	4a18      	ldr	r2, [pc, #96]	; (800637c <HAL_UART_Receive_IT+0xa8>)
 800631c:	4293      	cmp	r3, r2
 800631e:	d01f      	beq.n	8006360 <HAL_UART_Receive_IT+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	685b      	ldr	r3, [r3, #4]
 8006326:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800632a:	2b00      	cmp	r3, #0
 800632c:	d018      	beq.n	8006360 <HAL_UART_Receive_IT+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006334:	697b      	ldr	r3, [r7, #20]
 8006336:	e853 3f00 	ldrex	r3, [r3]
 800633a:	613b      	str	r3, [r7, #16]
   return(result);
 800633c:	693b      	ldr	r3, [r7, #16]
 800633e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006342:	627b      	str	r3, [r7, #36]	; 0x24
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	461a      	mov	r2, r3
 800634a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800634c:	623b      	str	r3, [r7, #32]
 800634e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006350:	69f9      	ldr	r1, [r7, #28]
 8006352:	6a3a      	ldr	r2, [r7, #32]
 8006354:	e841 2300 	strex	r3, r2, [r1]
 8006358:	61bb      	str	r3, [r7, #24]
   return(result);
 800635a:	69bb      	ldr	r3, [r7, #24]
 800635c:	2b00      	cmp	r3, #0
 800635e:	d1e6      	bne.n	800632e <HAL_UART_Receive_IT+0x5a>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006360:	88fb      	ldrh	r3, [r7, #6]
 8006362:	461a      	mov	r2, r3
 8006364:	68b9      	ldr	r1, [r7, #8]
 8006366:	68f8      	ldr	r0, [r7, #12]
 8006368:	f000 ff74 	bl	8007254 <UART_Start_Receive_IT>
 800636c:	4603      	mov	r3, r0
 800636e:	e000      	b.n	8006372 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8006370:	2302      	movs	r3, #2
  }
}
 8006372:	4618      	mov	r0, r3
 8006374:	3728      	adds	r7, #40	; 0x28
 8006376:	46bd      	mov	sp, r7
 8006378:	bd80      	pop	{r7, pc}
 800637a:	bf00      	nop
 800637c:	40008000 	.word	0x40008000

08006380 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006380:	b580      	push	{r7, lr}
 8006382:	b0ba      	sub	sp, #232	; 0xe8
 8006384:	af00      	add	r7, sp, #0
 8006386:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	69db      	ldr	r3, [r3, #28]
 800638e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	689b      	ldr	r3, [r3, #8]
 80063a2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80063a6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80063aa:	f640 030f 	movw	r3, #2063	; 0x80f
 80063ae:	4013      	ands	r3, r2
 80063b0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80063b4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d115      	bne.n	80063e8 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80063bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063c0:	f003 0320 	and.w	r3, r3, #32
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d00f      	beq.n	80063e8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80063c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80063cc:	f003 0320 	and.w	r3, r3, #32
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d009      	beq.n	80063e8 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80063d8:	2b00      	cmp	r3, #0
 80063da:	f000 82a6 	beq.w	800692a <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80063e2:	6878      	ldr	r0, [r7, #4]
 80063e4:	4798      	blx	r3
      }
      return;
 80063e6:	e2a0      	b.n	800692a <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80063e8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	f000 8117 	beq.w	8006620 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80063f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80063f6:	f003 0301 	and.w	r3, r3, #1
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d106      	bne.n	800640c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80063fe:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006402:	4b85      	ldr	r3, [pc, #532]	; (8006618 <HAL_UART_IRQHandler+0x298>)
 8006404:	4013      	ands	r3, r2
 8006406:	2b00      	cmp	r3, #0
 8006408:	f000 810a 	beq.w	8006620 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800640c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006410:	f003 0301 	and.w	r3, r3, #1
 8006414:	2b00      	cmp	r3, #0
 8006416:	d011      	beq.n	800643c <HAL_UART_IRQHandler+0xbc>
 8006418:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800641c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006420:	2b00      	cmp	r3, #0
 8006422:	d00b      	beq.n	800643c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	2201      	movs	r2, #1
 800642a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006432:	f043 0201 	orr.w	r2, r3, #1
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800643c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006440:	f003 0302 	and.w	r3, r3, #2
 8006444:	2b00      	cmp	r3, #0
 8006446:	d011      	beq.n	800646c <HAL_UART_IRQHandler+0xec>
 8006448:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800644c:	f003 0301 	and.w	r3, r3, #1
 8006450:	2b00      	cmp	r3, #0
 8006452:	d00b      	beq.n	800646c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	2202      	movs	r2, #2
 800645a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006462:	f043 0204 	orr.w	r2, r3, #4
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800646c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006470:	f003 0304 	and.w	r3, r3, #4
 8006474:	2b00      	cmp	r3, #0
 8006476:	d011      	beq.n	800649c <HAL_UART_IRQHandler+0x11c>
 8006478:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800647c:	f003 0301 	and.w	r3, r3, #1
 8006480:	2b00      	cmp	r3, #0
 8006482:	d00b      	beq.n	800649c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	2204      	movs	r2, #4
 800648a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006492:	f043 0202 	orr.w	r2, r3, #2
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800649c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064a0:	f003 0308 	and.w	r3, r3, #8
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d017      	beq.n	80064d8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80064a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80064ac:	f003 0320 	and.w	r3, r3, #32
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d105      	bne.n	80064c0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80064b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80064b8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d00b      	beq.n	80064d8 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	2208      	movs	r2, #8
 80064c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80064ce:	f043 0208 	orr.w	r2, r3, #8
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80064d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d012      	beq.n	800650a <HAL_UART_IRQHandler+0x18a>
 80064e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80064e8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d00c      	beq.n	800650a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80064f8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006500:	f043 0220 	orr.w	r2, r3, #32
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006510:	2b00      	cmp	r3, #0
 8006512:	f000 820c 	beq.w	800692e <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006516:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800651a:	f003 0320 	and.w	r3, r3, #32
 800651e:	2b00      	cmp	r3, #0
 8006520:	d00d      	beq.n	800653e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006522:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006526:	f003 0320 	and.w	r3, r3, #32
 800652a:	2b00      	cmp	r3, #0
 800652c:	d007      	beq.n	800653e <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006532:	2b00      	cmp	r3, #0
 8006534:	d003      	beq.n	800653e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800653a:	6878      	ldr	r0, [r7, #4]
 800653c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006544:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	689b      	ldr	r3, [r3, #8]
 800654e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006552:	2b40      	cmp	r3, #64	; 0x40
 8006554:	d005      	beq.n	8006562 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006556:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800655a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800655e:	2b00      	cmp	r3, #0
 8006560:	d04f      	beq.n	8006602 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006562:	6878      	ldr	r0, [r7, #4]
 8006564:	f000 ff40 	bl	80073e8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	689b      	ldr	r3, [r3, #8]
 800656e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006572:	2b40      	cmp	r3, #64	; 0x40
 8006574:	d141      	bne.n	80065fa <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	3308      	adds	r3, #8
 800657c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006580:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006584:	e853 3f00 	ldrex	r3, [r3]
 8006588:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800658c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006590:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006594:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	3308      	adds	r3, #8
 800659e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80065a2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80065a6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065aa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80065ae:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80065b2:	e841 2300 	strex	r3, r2, [r1]
 80065b6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80065ba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d1d9      	bne.n	8006576 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d013      	beq.n	80065f2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065ce:	4a13      	ldr	r2, [pc, #76]	; (800661c <HAL_UART_IRQHandler+0x29c>)
 80065d0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065d6:	4618      	mov	r0, r3
 80065d8:	f7fc fd8e 	bl	80030f8 <HAL_DMA_Abort_IT>
 80065dc:	4603      	mov	r3, r0
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d017      	beq.n	8006612 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065e8:	687a      	ldr	r2, [r7, #4]
 80065ea:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80065ec:	4610      	mov	r0, r2
 80065ee:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065f0:	e00f      	b.n	8006612 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80065f2:	6878      	ldr	r0, [r7, #4]
 80065f4:	f000 f9b0 	bl	8006958 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065f8:	e00b      	b.n	8006612 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80065fa:	6878      	ldr	r0, [r7, #4]
 80065fc:	f000 f9ac 	bl	8006958 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006600:	e007      	b.n	8006612 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006602:	6878      	ldr	r0, [r7, #4]
 8006604:	f000 f9a8 	bl	8006958 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2200      	movs	r2, #0
 800660c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8006610:	e18d      	b.n	800692e <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006612:	bf00      	nop
    return;
 8006614:	e18b      	b.n	800692e <HAL_UART_IRQHandler+0x5ae>
 8006616:	bf00      	nop
 8006618:	04000120 	.word	0x04000120
 800661c:	080074af 	.word	0x080074af

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006624:	2b01      	cmp	r3, #1
 8006626:	f040 8146 	bne.w	80068b6 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800662a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800662e:	f003 0310 	and.w	r3, r3, #16
 8006632:	2b00      	cmp	r3, #0
 8006634:	f000 813f 	beq.w	80068b6 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006638:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800663c:	f003 0310 	and.w	r3, r3, #16
 8006640:	2b00      	cmp	r3, #0
 8006642:	f000 8138 	beq.w	80068b6 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	2210      	movs	r2, #16
 800664c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	689b      	ldr	r3, [r3, #8]
 8006654:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006658:	2b40      	cmp	r3, #64	; 0x40
 800665a:	f040 80b4 	bne.w	80067c6 <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	685b      	ldr	r3, [r3, #4]
 8006666:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800666a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800666e:	2b00      	cmp	r3, #0
 8006670:	f000 815f 	beq.w	8006932 <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800667a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800667e:	429a      	cmp	r2, r3
 8006680:	f080 8157 	bcs.w	8006932 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800668a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	f003 0320 	and.w	r3, r3, #32
 800669a:	2b00      	cmp	r3, #0
 800669c:	f040 8085 	bne.w	80067aa <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066a8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80066ac:	e853 3f00 	ldrex	r3, [r3]
 80066b0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80066b4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80066b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80066bc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	461a      	mov	r2, r3
 80066c6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80066ca:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80066ce:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066d2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80066d6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80066da:	e841 2300 	strex	r3, r2, [r1]
 80066de:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80066e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d1da      	bne.n	80066a0 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	3308      	adds	r3, #8
 80066f0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80066f4:	e853 3f00 	ldrex	r3, [r3]
 80066f8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80066fa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80066fc:	f023 0301 	bic.w	r3, r3, #1
 8006700:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	3308      	adds	r3, #8
 800670a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800670e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006712:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006714:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006716:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800671a:	e841 2300 	strex	r3, r2, [r1]
 800671e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006720:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006722:	2b00      	cmp	r3, #0
 8006724:	d1e1      	bne.n	80066ea <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	3308      	adds	r3, #8
 800672c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800672e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006730:	e853 3f00 	ldrex	r3, [r3]
 8006734:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006736:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006738:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800673c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	3308      	adds	r3, #8
 8006746:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800674a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800674c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800674e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006750:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006752:	e841 2300 	strex	r3, r2, [r1]
 8006756:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006758:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800675a:	2b00      	cmp	r3, #0
 800675c:	d1e3      	bne.n	8006726 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	2220      	movs	r2, #32
 8006762:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	2200      	movs	r2, #0
 8006768:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006770:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006772:	e853 3f00 	ldrex	r3, [r3]
 8006776:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006778:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800677a:	f023 0310 	bic.w	r3, r3, #16
 800677e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	461a      	mov	r2, r3
 8006788:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800678c:	65bb      	str	r3, [r7, #88]	; 0x58
 800678e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006790:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006792:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006794:	e841 2300 	strex	r3, r2, [r1]
 8006798:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800679a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800679c:	2b00      	cmp	r3, #0
 800679e:	d1e4      	bne.n	800676a <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067a4:	4618      	mov	r0, r3
 80067a6:	f7fc fc69 	bl	800307c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80067b6:	b29b      	uxth	r3, r3
 80067b8:	1ad3      	subs	r3, r2, r3
 80067ba:	b29b      	uxth	r3, r3
 80067bc:	4619      	mov	r1, r3
 80067be:	6878      	ldr	r0, [r7, #4]
 80067c0:	f000 f8d4 	bl	800696c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80067c4:	e0b5      	b.n	8006932 <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80067d2:	b29b      	uxth	r3, r3
 80067d4:	1ad3      	subs	r3, r2, r3
 80067d6:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80067e0:	b29b      	uxth	r3, r3
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	f000 80a7 	beq.w	8006936 <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 80067e8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	f000 80a2 	beq.w	8006936 <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067fa:	e853 3f00 	ldrex	r3, [r3]
 80067fe:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006800:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006802:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006806:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	461a      	mov	r2, r3
 8006810:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006814:	647b      	str	r3, [r7, #68]	; 0x44
 8006816:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006818:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800681a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800681c:	e841 2300 	strex	r3, r2, [r1]
 8006820:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006822:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006824:	2b00      	cmp	r3, #0
 8006826:	d1e4      	bne.n	80067f2 <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	3308      	adds	r3, #8
 800682e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006832:	e853 3f00 	ldrex	r3, [r3]
 8006836:	623b      	str	r3, [r7, #32]
   return(result);
 8006838:	6a3b      	ldr	r3, [r7, #32]
 800683a:	f023 0301 	bic.w	r3, r3, #1
 800683e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	3308      	adds	r3, #8
 8006848:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800684c:	633a      	str	r2, [r7, #48]	; 0x30
 800684e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006850:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006852:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006854:	e841 2300 	strex	r3, r2, [r1]
 8006858:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800685a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800685c:	2b00      	cmp	r3, #0
 800685e:	d1e3      	bne.n	8006828 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	2220      	movs	r2, #32
 8006864:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	2200      	movs	r2, #0
 800686a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	2200      	movs	r2, #0
 8006870:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006878:	693b      	ldr	r3, [r7, #16]
 800687a:	e853 3f00 	ldrex	r3, [r3]
 800687e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	f023 0310 	bic.w	r3, r3, #16
 8006886:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	461a      	mov	r2, r3
 8006890:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006894:	61fb      	str	r3, [r7, #28]
 8006896:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006898:	69b9      	ldr	r1, [r7, #24]
 800689a:	69fa      	ldr	r2, [r7, #28]
 800689c:	e841 2300 	strex	r3, r2, [r1]
 80068a0:	617b      	str	r3, [r7, #20]
   return(result);
 80068a2:	697b      	ldr	r3, [r7, #20]
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d1e4      	bne.n	8006872 <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80068a8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80068ac:	4619      	mov	r1, r3
 80068ae:	6878      	ldr	r0, [r7, #4]
 80068b0:	f000 f85c 	bl	800696c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80068b4:	e03f      	b.n	8006936 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80068b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d00e      	beq.n	80068e0 <HAL_UART_IRQHandler+0x560>
 80068c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80068c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d008      	beq.n	80068e0 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80068d6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80068d8:	6878      	ldr	r0, [r7, #4]
 80068da:	f000 ff88 	bl	80077ee <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80068de:	e02d      	b.n	800693c <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80068e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d00e      	beq.n	800690a <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80068ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80068f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d008      	beq.n	800690a <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d01c      	beq.n	800693a <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006904:	6878      	ldr	r0, [r7, #4]
 8006906:	4798      	blx	r3
    }
    return;
 8006908:	e017      	b.n	800693a <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800690a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800690e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006912:	2b00      	cmp	r3, #0
 8006914:	d012      	beq.n	800693c <HAL_UART_IRQHandler+0x5bc>
 8006916:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800691a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800691e:	2b00      	cmp	r3, #0
 8006920:	d00c      	beq.n	800693c <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8006922:	6878      	ldr	r0, [r7, #4]
 8006924:	f000 fdd9 	bl	80074da <UART_EndTransmit_IT>
    return;
 8006928:	e008      	b.n	800693c <HAL_UART_IRQHandler+0x5bc>
      return;
 800692a:	bf00      	nop
 800692c:	e006      	b.n	800693c <HAL_UART_IRQHandler+0x5bc>
    return;
 800692e:	bf00      	nop
 8006930:	e004      	b.n	800693c <HAL_UART_IRQHandler+0x5bc>
      return;
 8006932:	bf00      	nop
 8006934:	e002      	b.n	800693c <HAL_UART_IRQHandler+0x5bc>
      return;
 8006936:	bf00      	nop
 8006938:	e000      	b.n	800693c <HAL_UART_IRQHandler+0x5bc>
    return;
 800693a:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 800693c:	37e8      	adds	r7, #232	; 0xe8
 800693e:	46bd      	mov	sp, r7
 8006940:	bd80      	pop	{r7, pc}
 8006942:	bf00      	nop

08006944 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006944:	b480      	push	{r7}
 8006946:	b083      	sub	sp, #12
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800694c:	bf00      	nop
 800694e:	370c      	adds	r7, #12
 8006950:	46bd      	mov	sp, r7
 8006952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006956:	4770      	bx	lr

08006958 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006958:	b480      	push	{r7}
 800695a:	b083      	sub	sp, #12
 800695c:	af00      	add	r7, sp, #0
 800695e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006960:	bf00      	nop
 8006962:	370c      	adds	r7, #12
 8006964:	46bd      	mov	sp, r7
 8006966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696a:	4770      	bx	lr

0800696c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800696c:	b480      	push	{r7}
 800696e:	b083      	sub	sp, #12
 8006970:	af00      	add	r7, sp, #0
 8006972:	6078      	str	r0, [r7, #4]
 8006974:	460b      	mov	r3, r1
 8006976:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006978:	bf00      	nop
 800697a:	370c      	adds	r7, #12
 800697c:	46bd      	mov	sp, r7
 800697e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006982:	4770      	bx	lr

08006984 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006984:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006988:	b08a      	sub	sp, #40	; 0x28
 800698a:	af00      	add	r7, sp, #0
 800698c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800698e:	2300      	movs	r3, #0
 8006990:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	689a      	ldr	r2, [r3, #8]
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	691b      	ldr	r3, [r3, #16]
 800699c:	431a      	orrs	r2, r3
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	695b      	ldr	r3, [r3, #20]
 80069a2:	431a      	orrs	r2, r3
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	69db      	ldr	r3, [r3, #28]
 80069a8:	4313      	orrs	r3, r2
 80069aa:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	681a      	ldr	r2, [r3, #0]
 80069b2:	4ba4      	ldr	r3, [pc, #656]	; (8006c44 <UART_SetConfig+0x2c0>)
 80069b4:	4013      	ands	r3, r2
 80069b6:	68fa      	ldr	r2, [r7, #12]
 80069b8:	6812      	ldr	r2, [r2, #0]
 80069ba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80069bc:	430b      	orrs	r3, r1
 80069be:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	685b      	ldr	r3, [r3, #4]
 80069c6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	68da      	ldr	r2, [r3, #12]
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	430a      	orrs	r2, r1
 80069d4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	699b      	ldr	r3, [r3, #24]
 80069da:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	4a99      	ldr	r2, [pc, #612]	; (8006c48 <UART_SetConfig+0x2c4>)
 80069e2:	4293      	cmp	r3, r2
 80069e4:	d004      	beq.n	80069f0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	6a1b      	ldr	r3, [r3, #32]
 80069ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80069ec:	4313      	orrs	r3, r2
 80069ee:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	689b      	ldr	r3, [r3, #8]
 80069f6:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a00:	430a      	orrs	r2, r1
 8006a02:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	4a90      	ldr	r2, [pc, #576]	; (8006c4c <UART_SetConfig+0x2c8>)
 8006a0a:	4293      	cmp	r3, r2
 8006a0c:	d126      	bne.n	8006a5c <UART_SetConfig+0xd8>
 8006a0e:	4b90      	ldr	r3, [pc, #576]	; (8006c50 <UART_SetConfig+0x2cc>)
 8006a10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a14:	f003 0303 	and.w	r3, r3, #3
 8006a18:	2b03      	cmp	r3, #3
 8006a1a:	d81b      	bhi.n	8006a54 <UART_SetConfig+0xd0>
 8006a1c:	a201      	add	r2, pc, #4	; (adr r2, 8006a24 <UART_SetConfig+0xa0>)
 8006a1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a22:	bf00      	nop
 8006a24:	08006a35 	.word	0x08006a35
 8006a28:	08006a45 	.word	0x08006a45
 8006a2c:	08006a3d 	.word	0x08006a3d
 8006a30:	08006a4d 	.word	0x08006a4d
 8006a34:	2301      	movs	r3, #1
 8006a36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a3a:	e116      	b.n	8006c6a <UART_SetConfig+0x2e6>
 8006a3c:	2302      	movs	r3, #2
 8006a3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a42:	e112      	b.n	8006c6a <UART_SetConfig+0x2e6>
 8006a44:	2304      	movs	r3, #4
 8006a46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a4a:	e10e      	b.n	8006c6a <UART_SetConfig+0x2e6>
 8006a4c:	2308      	movs	r3, #8
 8006a4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a52:	e10a      	b.n	8006c6a <UART_SetConfig+0x2e6>
 8006a54:	2310      	movs	r3, #16
 8006a56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a5a:	e106      	b.n	8006c6a <UART_SetConfig+0x2e6>
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	4a7c      	ldr	r2, [pc, #496]	; (8006c54 <UART_SetConfig+0x2d0>)
 8006a62:	4293      	cmp	r3, r2
 8006a64:	d138      	bne.n	8006ad8 <UART_SetConfig+0x154>
 8006a66:	4b7a      	ldr	r3, [pc, #488]	; (8006c50 <UART_SetConfig+0x2cc>)
 8006a68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a6c:	f003 030c 	and.w	r3, r3, #12
 8006a70:	2b0c      	cmp	r3, #12
 8006a72:	d82d      	bhi.n	8006ad0 <UART_SetConfig+0x14c>
 8006a74:	a201      	add	r2, pc, #4	; (adr r2, 8006a7c <UART_SetConfig+0xf8>)
 8006a76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a7a:	bf00      	nop
 8006a7c:	08006ab1 	.word	0x08006ab1
 8006a80:	08006ad1 	.word	0x08006ad1
 8006a84:	08006ad1 	.word	0x08006ad1
 8006a88:	08006ad1 	.word	0x08006ad1
 8006a8c:	08006ac1 	.word	0x08006ac1
 8006a90:	08006ad1 	.word	0x08006ad1
 8006a94:	08006ad1 	.word	0x08006ad1
 8006a98:	08006ad1 	.word	0x08006ad1
 8006a9c:	08006ab9 	.word	0x08006ab9
 8006aa0:	08006ad1 	.word	0x08006ad1
 8006aa4:	08006ad1 	.word	0x08006ad1
 8006aa8:	08006ad1 	.word	0x08006ad1
 8006aac:	08006ac9 	.word	0x08006ac9
 8006ab0:	2300      	movs	r3, #0
 8006ab2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006ab6:	e0d8      	b.n	8006c6a <UART_SetConfig+0x2e6>
 8006ab8:	2302      	movs	r3, #2
 8006aba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006abe:	e0d4      	b.n	8006c6a <UART_SetConfig+0x2e6>
 8006ac0:	2304      	movs	r3, #4
 8006ac2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006ac6:	e0d0      	b.n	8006c6a <UART_SetConfig+0x2e6>
 8006ac8:	2308      	movs	r3, #8
 8006aca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006ace:	e0cc      	b.n	8006c6a <UART_SetConfig+0x2e6>
 8006ad0:	2310      	movs	r3, #16
 8006ad2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006ad6:	e0c8      	b.n	8006c6a <UART_SetConfig+0x2e6>
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	4a5e      	ldr	r2, [pc, #376]	; (8006c58 <UART_SetConfig+0x2d4>)
 8006ade:	4293      	cmp	r3, r2
 8006ae0:	d125      	bne.n	8006b2e <UART_SetConfig+0x1aa>
 8006ae2:	4b5b      	ldr	r3, [pc, #364]	; (8006c50 <UART_SetConfig+0x2cc>)
 8006ae4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ae8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006aec:	2b30      	cmp	r3, #48	; 0x30
 8006aee:	d016      	beq.n	8006b1e <UART_SetConfig+0x19a>
 8006af0:	2b30      	cmp	r3, #48	; 0x30
 8006af2:	d818      	bhi.n	8006b26 <UART_SetConfig+0x1a2>
 8006af4:	2b20      	cmp	r3, #32
 8006af6:	d00a      	beq.n	8006b0e <UART_SetConfig+0x18a>
 8006af8:	2b20      	cmp	r3, #32
 8006afa:	d814      	bhi.n	8006b26 <UART_SetConfig+0x1a2>
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d002      	beq.n	8006b06 <UART_SetConfig+0x182>
 8006b00:	2b10      	cmp	r3, #16
 8006b02:	d008      	beq.n	8006b16 <UART_SetConfig+0x192>
 8006b04:	e00f      	b.n	8006b26 <UART_SetConfig+0x1a2>
 8006b06:	2300      	movs	r3, #0
 8006b08:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b0c:	e0ad      	b.n	8006c6a <UART_SetConfig+0x2e6>
 8006b0e:	2302      	movs	r3, #2
 8006b10:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b14:	e0a9      	b.n	8006c6a <UART_SetConfig+0x2e6>
 8006b16:	2304      	movs	r3, #4
 8006b18:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b1c:	e0a5      	b.n	8006c6a <UART_SetConfig+0x2e6>
 8006b1e:	2308      	movs	r3, #8
 8006b20:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b24:	e0a1      	b.n	8006c6a <UART_SetConfig+0x2e6>
 8006b26:	2310      	movs	r3, #16
 8006b28:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b2c:	e09d      	b.n	8006c6a <UART_SetConfig+0x2e6>
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	4a4a      	ldr	r2, [pc, #296]	; (8006c5c <UART_SetConfig+0x2d8>)
 8006b34:	4293      	cmp	r3, r2
 8006b36:	d125      	bne.n	8006b84 <UART_SetConfig+0x200>
 8006b38:	4b45      	ldr	r3, [pc, #276]	; (8006c50 <UART_SetConfig+0x2cc>)
 8006b3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b3e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006b42:	2bc0      	cmp	r3, #192	; 0xc0
 8006b44:	d016      	beq.n	8006b74 <UART_SetConfig+0x1f0>
 8006b46:	2bc0      	cmp	r3, #192	; 0xc0
 8006b48:	d818      	bhi.n	8006b7c <UART_SetConfig+0x1f8>
 8006b4a:	2b80      	cmp	r3, #128	; 0x80
 8006b4c:	d00a      	beq.n	8006b64 <UART_SetConfig+0x1e0>
 8006b4e:	2b80      	cmp	r3, #128	; 0x80
 8006b50:	d814      	bhi.n	8006b7c <UART_SetConfig+0x1f8>
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d002      	beq.n	8006b5c <UART_SetConfig+0x1d8>
 8006b56:	2b40      	cmp	r3, #64	; 0x40
 8006b58:	d008      	beq.n	8006b6c <UART_SetConfig+0x1e8>
 8006b5a:	e00f      	b.n	8006b7c <UART_SetConfig+0x1f8>
 8006b5c:	2300      	movs	r3, #0
 8006b5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b62:	e082      	b.n	8006c6a <UART_SetConfig+0x2e6>
 8006b64:	2302      	movs	r3, #2
 8006b66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b6a:	e07e      	b.n	8006c6a <UART_SetConfig+0x2e6>
 8006b6c:	2304      	movs	r3, #4
 8006b6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b72:	e07a      	b.n	8006c6a <UART_SetConfig+0x2e6>
 8006b74:	2308      	movs	r3, #8
 8006b76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b7a:	e076      	b.n	8006c6a <UART_SetConfig+0x2e6>
 8006b7c:	2310      	movs	r3, #16
 8006b7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b82:	e072      	b.n	8006c6a <UART_SetConfig+0x2e6>
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	4a35      	ldr	r2, [pc, #212]	; (8006c60 <UART_SetConfig+0x2dc>)
 8006b8a:	4293      	cmp	r3, r2
 8006b8c:	d12a      	bne.n	8006be4 <UART_SetConfig+0x260>
 8006b8e:	4b30      	ldr	r3, [pc, #192]	; (8006c50 <UART_SetConfig+0x2cc>)
 8006b90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b94:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b98:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006b9c:	d01a      	beq.n	8006bd4 <UART_SetConfig+0x250>
 8006b9e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006ba2:	d81b      	bhi.n	8006bdc <UART_SetConfig+0x258>
 8006ba4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006ba8:	d00c      	beq.n	8006bc4 <UART_SetConfig+0x240>
 8006baa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006bae:	d815      	bhi.n	8006bdc <UART_SetConfig+0x258>
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d003      	beq.n	8006bbc <UART_SetConfig+0x238>
 8006bb4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006bb8:	d008      	beq.n	8006bcc <UART_SetConfig+0x248>
 8006bba:	e00f      	b.n	8006bdc <UART_SetConfig+0x258>
 8006bbc:	2300      	movs	r3, #0
 8006bbe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006bc2:	e052      	b.n	8006c6a <UART_SetConfig+0x2e6>
 8006bc4:	2302      	movs	r3, #2
 8006bc6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006bca:	e04e      	b.n	8006c6a <UART_SetConfig+0x2e6>
 8006bcc:	2304      	movs	r3, #4
 8006bce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006bd2:	e04a      	b.n	8006c6a <UART_SetConfig+0x2e6>
 8006bd4:	2308      	movs	r3, #8
 8006bd6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006bda:	e046      	b.n	8006c6a <UART_SetConfig+0x2e6>
 8006bdc:	2310      	movs	r3, #16
 8006bde:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006be2:	e042      	b.n	8006c6a <UART_SetConfig+0x2e6>
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	4a17      	ldr	r2, [pc, #92]	; (8006c48 <UART_SetConfig+0x2c4>)
 8006bea:	4293      	cmp	r3, r2
 8006bec:	d13a      	bne.n	8006c64 <UART_SetConfig+0x2e0>
 8006bee:	4b18      	ldr	r3, [pc, #96]	; (8006c50 <UART_SetConfig+0x2cc>)
 8006bf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006bf4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006bf8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006bfc:	d01a      	beq.n	8006c34 <UART_SetConfig+0x2b0>
 8006bfe:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006c02:	d81b      	bhi.n	8006c3c <UART_SetConfig+0x2b8>
 8006c04:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c08:	d00c      	beq.n	8006c24 <UART_SetConfig+0x2a0>
 8006c0a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c0e:	d815      	bhi.n	8006c3c <UART_SetConfig+0x2b8>
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d003      	beq.n	8006c1c <UART_SetConfig+0x298>
 8006c14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c18:	d008      	beq.n	8006c2c <UART_SetConfig+0x2a8>
 8006c1a:	e00f      	b.n	8006c3c <UART_SetConfig+0x2b8>
 8006c1c:	2300      	movs	r3, #0
 8006c1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c22:	e022      	b.n	8006c6a <UART_SetConfig+0x2e6>
 8006c24:	2302      	movs	r3, #2
 8006c26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c2a:	e01e      	b.n	8006c6a <UART_SetConfig+0x2e6>
 8006c2c:	2304      	movs	r3, #4
 8006c2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c32:	e01a      	b.n	8006c6a <UART_SetConfig+0x2e6>
 8006c34:	2308      	movs	r3, #8
 8006c36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c3a:	e016      	b.n	8006c6a <UART_SetConfig+0x2e6>
 8006c3c:	2310      	movs	r3, #16
 8006c3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c42:	e012      	b.n	8006c6a <UART_SetConfig+0x2e6>
 8006c44:	efff69f3 	.word	0xefff69f3
 8006c48:	40008000 	.word	0x40008000
 8006c4c:	40013800 	.word	0x40013800
 8006c50:	40021000 	.word	0x40021000
 8006c54:	40004400 	.word	0x40004400
 8006c58:	40004800 	.word	0x40004800
 8006c5c:	40004c00 	.word	0x40004c00
 8006c60:	40005000 	.word	0x40005000
 8006c64:	2310      	movs	r3, #16
 8006c66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	4a9f      	ldr	r2, [pc, #636]	; (8006eec <UART_SetConfig+0x568>)
 8006c70:	4293      	cmp	r3, r2
 8006c72:	d17a      	bne.n	8006d6a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006c74:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006c78:	2b08      	cmp	r3, #8
 8006c7a:	d824      	bhi.n	8006cc6 <UART_SetConfig+0x342>
 8006c7c:	a201      	add	r2, pc, #4	; (adr r2, 8006c84 <UART_SetConfig+0x300>)
 8006c7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c82:	bf00      	nop
 8006c84:	08006ca9 	.word	0x08006ca9
 8006c88:	08006cc7 	.word	0x08006cc7
 8006c8c:	08006cb1 	.word	0x08006cb1
 8006c90:	08006cc7 	.word	0x08006cc7
 8006c94:	08006cb7 	.word	0x08006cb7
 8006c98:	08006cc7 	.word	0x08006cc7
 8006c9c:	08006cc7 	.word	0x08006cc7
 8006ca0:	08006cc7 	.word	0x08006cc7
 8006ca4:	08006cbf 	.word	0x08006cbf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006ca8:	f7fe f9a4 	bl	8004ff4 <HAL_RCC_GetPCLK1Freq>
 8006cac:	61f8      	str	r0, [r7, #28]
        break;
 8006cae:	e010      	b.n	8006cd2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006cb0:	4b8f      	ldr	r3, [pc, #572]	; (8006ef0 <UART_SetConfig+0x56c>)
 8006cb2:	61fb      	str	r3, [r7, #28]
        break;
 8006cb4:	e00d      	b.n	8006cd2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006cb6:	f7fe f905 	bl	8004ec4 <HAL_RCC_GetSysClockFreq>
 8006cba:	61f8      	str	r0, [r7, #28]
        break;
 8006cbc:	e009      	b.n	8006cd2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006cbe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006cc2:	61fb      	str	r3, [r7, #28]
        break;
 8006cc4:	e005      	b.n	8006cd2 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8006cc6:	2300      	movs	r3, #0
 8006cc8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006cca:	2301      	movs	r3, #1
 8006ccc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006cd0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006cd2:	69fb      	ldr	r3, [r7, #28]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	f000 80fb 	beq.w	8006ed0 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	685a      	ldr	r2, [r3, #4]
 8006cde:	4613      	mov	r3, r2
 8006ce0:	005b      	lsls	r3, r3, #1
 8006ce2:	4413      	add	r3, r2
 8006ce4:	69fa      	ldr	r2, [r7, #28]
 8006ce6:	429a      	cmp	r2, r3
 8006ce8:	d305      	bcc.n	8006cf6 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	685b      	ldr	r3, [r3, #4]
 8006cee:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006cf0:	69fa      	ldr	r2, [r7, #28]
 8006cf2:	429a      	cmp	r2, r3
 8006cf4:	d903      	bls.n	8006cfe <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8006cf6:	2301      	movs	r3, #1
 8006cf8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006cfc:	e0e8      	b.n	8006ed0 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006cfe:	69fb      	ldr	r3, [r7, #28]
 8006d00:	2200      	movs	r2, #0
 8006d02:	461c      	mov	r4, r3
 8006d04:	4615      	mov	r5, r2
 8006d06:	f04f 0200 	mov.w	r2, #0
 8006d0a:	f04f 0300 	mov.w	r3, #0
 8006d0e:	022b      	lsls	r3, r5, #8
 8006d10:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006d14:	0222      	lsls	r2, r4, #8
 8006d16:	68f9      	ldr	r1, [r7, #12]
 8006d18:	6849      	ldr	r1, [r1, #4]
 8006d1a:	0849      	lsrs	r1, r1, #1
 8006d1c:	2000      	movs	r0, #0
 8006d1e:	4688      	mov	r8, r1
 8006d20:	4681      	mov	r9, r0
 8006d22:	eb12 0a08 	adds.w	sl, r2, r8
 8006d26:	eb43 0b09 	adc.w	fp, r3, r9
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	685b      	ldr	r3, [r3, #4]
 8006d2e:	2200      	movs	r2, #0
 8006d30:	603b      	str	r3, [r7, #0]
 8006d32:	607a      	str	r2, [r7, #4]
 8006d34:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006d38:	4650      	mov	r0, sl
 8006d3a:	4659      	mov	r1, fp
 8006d3c:	f7f9 ff54 	bl	8000be8 <__aeabi_uldivmod>
 8006d40:	4602      	mov	r2, r0
 8006d42:	460b      	mov	r3, r1
 8006d44:	4613      	mov	r3, r2
 8006d46:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006d48:	69bb      	ldr	r3, [r7, #24]
 8006d4a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006d4e:	d308      	bcc.n	8006d62 <UART_SetConfig+0x3de>
 8006d50:	69bb      	ldr	r3, [r7, #24]
 8006d52:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006d56:	d204      	bcs.n	8006d62 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	69ba      	ldr	r2, [r7, #24]
 8006d5e:	60da      	str	r2, [r3, #12]
 8006d60:	e0b6      	b.n	8006ed0 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8006d62:	2301      	movs	r3, #1
 8006d64:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006d68:	e0b2      	b.n	8006ed0 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	69db      	ldr	r3, [r3, #28]
 8006d6e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d72:	d15e      	bne.n	8006e32 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8006d74:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006d78:	2b08      	cmp	r3, #8
 8006d7a:	d828      	bhi.n	8006dce <UART_SetConfig+0x44a>
 8006d7c:	a201      	add	r2, pc, #4	; (adr r2, 8006d84 <UART_SetConfig+0x400>)
 8006d7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d82:	bf00      	nop
 8006d84:	08006da9 	.word	0x08006da9
 8006d88:	08006db1 	.word	0x08006db1
 8006d8c:	08006db9 	.word	0x08006db9
 8006d90:	08006dcf 	.word	0x08006dcf
 8006d94:	08006dbf 	.word	0x08006dbf
 8006d98:	08006dcf 	.word	0x08006dcf
 8006d9c:	08006dcf 	.word	0x08006dcf
 8006da0:	08006dcf 	.word	0x08006dcf
 8006da4:	08006dc7 	.word	0x08006dc7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006da8:	f7fe f924 	bl	8004ff4 <HAL_RCC_GetPCLK1Freq>
 8006dac:	61f8      	str	r0, [r7, #28]
        break;
 8006dae:	e014      	b.n	8006dda <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006db0:	f7fe f936 	bl	8005020 <HAL_RCC_GetPCLK2Freq>
 8006db4:	61f8      	str	r0, [r7, #28]
        break;
 8006db6:	e010      	b.n	8006dda <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006db8:	4b4d      	ldr	r3, [pc, #308]	; (8006ef0 <UART_SetConfig+0x56c>)
 8006dba:	61fb      	str	r3, [r7, #28]
        break;
 8006dbc:	e00d      	b.n	8006dda <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006dbe:	f7fe f881 	bl	8004ec4 <HAL_RCC_GetSysClockFreq>
 8006dc2:	61f8      	str	r0, [r7, #28]
        break;
 8006dc4:	e009      	b.n	8006dda <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006dc6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006dca:	61fb      	str	r3, [r7, #28]
        break;
 8006dcc:	e005      	b.n	8006dda <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8006dce:	2300      	movs	r3, #0
 8006dd0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006dd2:	2301      	movs	r3, #1
 8006dd4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006dd8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006dda:	69fb      	ldr	r3, [r7, #28]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d077      	beq.n	8006ed0 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006de0:	69fb      	ldr	r3, [r7, #28]
 8006de2:	005a      	lsls	r2, r3, #1
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	685b      	ldr	r3, [r3, #4]
 8006de8:	085b      	lsrs	r3, r3, #1
 8006dea:	441a      	add	r2, r3
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	685b      	ldr	r3, [r3, #4]
 8006df0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006df4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006df6:	69bb      	ldr	r3, [r7, #24]
 8006df8:	2b0f      	cmp	r3, #15
 8006dfa:	d916      	bls.n	8006e2a <UART_SetConfig+0x4a6>
 8006dfc:	69bb      	ldr	r3, [r7, #24]
 8006dfe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e02:	d212      	bcs.n	8006e2a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006e04:	69bb      	ldr	r3, [r7, #24]
 8006e06:	b29b      	uxth	r3, r3
 8006e08:	f023 030f 	bic.w	r3, r3, #15
 8006e0c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006e0e:	69bb      	ldr	r3, [r7, #24]
 8006e10:	085b      	lsrs	r3, r3, #1
 8006e12:	b29b      	uxth	r3, r3
 8006e14:	f003 0307 	and.w	r3, r3, #7
 8006e18:	b29a      	uxth	r2, r3
 8006e1a:	8afb      	ldrh	r3, [r7, #22]
 8006e1c:	4313      	orrs	r3, r2
 8006e1e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	8afa      	ldrh	r2, [r7, #22]
 8006e26:	60da      	str	r2, [r3, #12]
 8006e28:	e052      	b.n	8006ed0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006e2a:	2301      	movs	r3, #1
 8006e2c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006e30:	e04e      	b.n	8006ed0 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006e32:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006e36:	2b08      	cmp	r3, #8
 8006e38:	d827      	bhi.n	8006e8a <UART_SetConfig+0x506>
 8006e3a:	a201      	add	r2, pc, #4	; (adr r2, 8006e40 <UART_SetConfig+0x4bc>)
 8006e3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e40:	08006e65 	.word	0x08006e65
 8006e44:	08006e6d 	.word	0x08006e6d
 8006e48:	08006e75 	.word	0x08006e75
 8006e4c:	08006e8b 	.word	0x08006e8b
 8006e50:	08006e7b 	.word	0x08006e7b
 8006e54:	08006e8b 	.word	0x08006e8b
 8006e58:	08006e8b 	.word	0x08006e8b
 8006e5c:	08006e8b 	.word	0x08006e8b
 8006e60:	08006e83 	.word	0x08006e83
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006e64:	f7fe f8c6 	bl	8004ff4 <HAL_RCC_GetPCLK1Freq>
 8006e68:	61f8      	str	r0, [r7, #28]
        break;
 8006e6a:	e014      	b.n	8006e96 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006e6c:	f7fe f8d8 	bl	8005020 <HAL_RCC_GetPCLK2Freq>
 8006e70:	61f8      	str	r0, [r7, #28]
        break;
 8006e72:	e010      	b.n	8006e96 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006e74:	4b1e      	ldr	r3, [pc, #120]	; (8006ef0 <UART_SetConfig+0x56c>)
 8006e76:	61fb      	str	r3, [r7, #28]
        break;
 8006e78:	e00d      	b.n	8006e96 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006e7a:	f7fe f823 	bl	8004ec4 <HAL_RCC_GetSysClockFreq>
 8006e7e:	61f8      	str	r0, [r7, #28]
        break;
 8006e80:	e009      	b.n	8006e96 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006e82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006e86:	61fb      	str	r3, [r7, #28]
        break;
 8006e88:	e005      	b.n	8006e96 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8006e8a:	2300      	movs	r3, #0
 8006e8c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006e8e:	2301      	movs	r3, #1
 8006e90:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006e94:	bf00      	nop
    }

    if (pclk != 0U)
 8006e96:	69fb      	ldr	r3, [r7, #28]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d019      	beq.n	8006ed0 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	685b      	ldr	r3, [r3, #4]
 8006ea0:	085a      	lsrs	r2, r3, #1
 8006ea2:	69fb      	ldr	r3, [r7, #28]
 8006ea4:	441a      	add	r2, r3
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	685b      	ldr	r3, [r3, #4]
 8006eaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8006eae:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006eb0:	69bb      	ldr	r3, [r7, #24]
 8006eb2:	2b0f      	cmp	r3, #15
 8006eb4:	d909      	bls.n	8006eca <UART_SetConfig+0x546>
 8006eb6:	69bb      	ldr	r3, [r7, #24]
 8006eb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ebc:	d205      	bcs.n	8006eca <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006ebe:	69bb      	ldr	r3, [r7, #24]
 8006ec0:	b29a      	uxth	r2, r3
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	60da      	str	r2, [r3, #12]
 8006ec8:	e002      	b.n	8006ed0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006eca:	2301      	movs	r3, #1
 8006ecc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	2200      	movs	r2, #0
 8006ed4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	2200      	movs	r2, #0
 8006eda:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006edc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	3728      	adds	r7, #40	; 0x28
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006eea:	bf00      	nop
 8006eec:	40008000 	.word	0x40008000
 8006ef0:	00f42400 	.word	0x00f42400

08006ef4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006ef4:	b480      	push	{r7}
 8006ef6:	b083      	sub	sp, #12
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f00:	f003 0301 	and.w	r3, r3, #1
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d00a      	beq.n	8006f1e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	685b      	ldr	r3, [r3, #4]
 8006f0e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	430a      	orrs	r2, r1
 8006f1c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f22:	f003 0302 	and.w	r3, r3, #2
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d00a      	beq.n	8006f40 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	685b      	ldr	r3, [r3, #4]
 8006f30:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	430a      	orrs	r2, r1
 8006f3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f44:	f003 0304 	and.w	r3, r3, #4
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d00a      	beq.n	8006f62 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	685b      	ldr	r3, [r3, #4]
 8006f52:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	430a      	orrs	r2, r1
 8006f60:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f66:	f003 0308 	and.w	r3, r3, #8
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d00a      	beq.n	8006f84 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	685b      	ldr	r3, [r3, #4]
 8006f74:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	430a      	orrs	r2, r1
 8006f82:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f88:	f003 0310 	and.w	r3, r3, #16
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d00a      	beq.n	8006fa6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	689b      	ldr	r3, [r3, #8]
 8006f96:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	430a      	orrs	r2, r1
 8006fa4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006faa:	f003 0320 	and.w	r3, r3, #32
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d00a      	beq.n	8006fc8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	689b      	ldr	r3, [r3, #8]
 8006fb8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	430a      	orrs	r2, r1
 8006fc6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d01a      	beq.n	800700a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	685b      	ldr	r3, [r3, #4]
 8006fda:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	430a      	orrs	r2, r1
 8006fe8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006ff2:	d10a      	bne.n	800700a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	685b      	ldr	r3, [r3, #4]
 8006ffa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	430a      	orrs	r2, r1
 8007008:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800700e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007012:	2b00      	cmp	r3, #0
 8007014:	d00a      	beq.n	800702c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	685b      	ldr	r3, [r3, #4]
 800701c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	430a      	orrs	r2, r1
 800702a:	605a      	str	r2, [r3, #4]
  }
}
 800702c:	bf00      	nop
 800702e:	370c      	adds	r7, #12
 8007030:	46bd      	mov	sp, r7
 8007032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007036:	4770      	bx	lr

08007038 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007038:	b580      	push	{r7, lr}
 800703a:	b086      	sub	sp, #24
 800703c:	af02      	add	r7, sp, #8
 800703e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	2200      	movs	r2, #0
 8007044:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007048:	f7fb faa4 	bl	8002594 <HAL_GetTick>
 800704c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	f003 0308 	and.w	r3, r3, #8
 8007058:	2b08      	cmp	r3, #8
 800705a:	d10e      	bne.n	800707a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800705c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007060:	9300      	str	r3, [sp, #0]
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	2200      	movs	r2, #0
 8007066:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800706a:	6878      	ldr	r0, [r7, #4]
 800706c:	f000 f82d 	bl	80070ca <UART_WaitOnFlagUntilTimeout>
 8007070:	4603      	mov	r3, r0
 8007072:	2b00      	cmp	r3, #0
 8007074:	d001      	beq.n	800707a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007076:	2303      	movs	r3, #3
 8007078:	e023      	b.n	80070c2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	f003 0304 	and.w	r3, r3, #4
 8007084:	2b04      	cmp	r3, #4
 8007086:	d10e      	bne.n	80070a6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007088:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800708c:	9300      	str	r3, [sp, #0]
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	2200      	movs	r2, #0
 8007092:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007096:	6878      	ldr	r0, [r7, #4]
 8007098:	f000 f817 	bl	80070ca <UART_WaitOnFlagUntilTimeout>
 800709c:	4603      	mov	r3, r0
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d001      	beq.n	80070a6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80070a2:	2303      	movs	r3, #3
 80070a4:	e00d      	b.n	80070c2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	2220      	movs	r2, #32
 80070aa:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	2220      	movs	r2, #32
 80070b0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	2200      	movs	r2, #0
 80070b6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2200      	movs	r2, #0
 80070bc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80070c0:	2300      	movs	r3, #0
}
 80070c2:	4618      	mov	r0, r3
 80070c4:	3710      	adds	r7, #16
 80070c6:	46bd      	mov	sp, r7
 80070c8:	bd80      	pop	{r7, pc}

080070ca <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80070ca:	b580      	push	{r7, lr}
 80070cc:	b09c      	sub	sp, #112	; 0x70
 80070ce:	af00      	add	r7, sp, #0
 80070d0:	60f8      	str	r0, [r7, #12]
 80070d2:	60b9      	str	r1, [r7, #8]
 80070d4:	603b      	str	r3, [r7, #0]
 80070d6:	4613      	mov	r3, r2
 80070d8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80070da:	e0a5      	b.n	8007228 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80070dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80070de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070e2:	f000 80a1 	beq.w	8007228 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80070e6:	f7fb fa55 	bl	8002594 <HAL_GetTick>
 80070ea:	4602      	mov	r2, r0
 80070ec:	683b      	ldr	r3, [r7, #0]
 80070ee:	1ad3      	subs	r3, r2, r3
 80070f0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80070f2:	429a      	cmp	r2, r3
 80070f4:	d302      	bcc.n	80070fc <UART_WaitOnFlagUntilTimeout+0x32>
 80070f6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d13e      	bne.n	800717a <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007102:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007104:	e853 3f00 	ldrex	r3, [r3]
 8007108:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800710a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800710c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007110:	667b      	str	r3, [r7, #100]	; 0x64
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	461a      	mov	r2, r3
 8007118:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800711a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800711c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800711e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007120:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007122:	e841 2300 	strex	r3, r2, [r1]
 8007126:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007128:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800712a:	2b00      	cmp	r3, #0
 800712c:	d1e6      	bne.n	80070fc <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	3308      	adds	r3, #8
 8007134:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007136:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007138:	e853 3f00 	ldrex	r3, [r3]
 800713c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800713e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007140:	f023 0301 	bic.w	r3, r3, #1
 8007144:	663b      	str	r3, [r7, #96]	; 0x60
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	3308      	adds	r3, #8
 800714c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800714e:	64ba      	str	r2, [r7, #72]	; 0x48
 8007150:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007152:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007154:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007156:	e841 2300 	strex	r3, r2, [r1]
 800715a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800715c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800715e:	2b00      	cmp	r3, #0
 8007160:	d1e5      	bne.n	800712e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	2220      	movs	r2, #32
 8007166:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	2220      	movs	r2, #32
 800716c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	2200      	movs	r2, #0
 8007172:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8007176:	2303      	movs	r3, #3
 8007178:	e067      	b.n	800724a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	f003 0304 	and.w	r3, r3, #4
 8007184:	2b00      	cmp	r3, #0
 8007186:	d04f      	beq.n	8007228 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	69db      	ldr	r3, [r3, #28]
 800718e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007192:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007196:	d147      	bne.n	8007228 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80071a0:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071aa:	e853 3f00 	ldrex	r3, [r3]
 80071ae:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80071b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071b2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80071b6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	461a      	mov	r2, r3
 80071be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80071c0:	637b      	str	r3, [r7, #52]	; 0x34
 80071c2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071c4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80071c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80071c8:	e841 2300 	strex	r3, r2, [r1]
 80071cc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80071ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d1e6      	bne.n	80071a2 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	3308      	adds	r3, #8
 80071da:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071dc:	697b      	ldr	r3, [r7, #20]
 80071de:	e853 3f00 	ldrex	r3, [r3]
 80071e2:	613b      	str	r3, [r7, #16]
   return(result);
 80071e4:	693b      	ldr	r3, [r7, #16]
 80071e6:	f023 0301 	bic.w	r3, r3, #1
 80071ea:	66bb      	str	r3, [r7, #104]	; 0x68
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	3308      	adds	r3, #8
 80071f2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80071f4:	623a      	str	r2, [r7, #32]
 80071f6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071f8:	69f9      	ldr	r1, [r7, #28]
 80071fa:	6a3a      	ldr	r2, [r7, #32]
 80071fc:	e841 2300 	strex	r3, r2, [r1]
 8007200:	61bb      	str	r3, [r7, #24]
   return(result);
 8007202:	69bb      	ldr	r3, [r7, #24]
 8007204:	2b00      	cmp	r3, #0
 8007206:	d1e5      	bne.n	80071d4 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	2220      	movs	r2, #32
 800720c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	2220      	movs	r2, #32
 8007212:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	2220      	movs	r2, #32
 8007218:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	2200      	movs	r2, #0
 8007220:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8007224:	2303      	movs	r3, #3
 8007226:	e010      	b.n	800724a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	69da      	ldr	r2, [r3, #28]
 800722e:	68bb      	ldr	r3, [r7, #8]
 8007230:	4013      	ands	r3, r2
 8007232:	68ba      	ldr	r2, [r7, #8]
 8007234:	429a      	cmp	r2, r3
 8007236:	bf0c      	ite	eq
 8007238:	2301      	moveq	r3, #1
 800723a:	2300      	movne	r3, #0
 800723c:	b2db      	uxtb	r3, r3
 800723e:	461a      	mov	r2, r3
 8007240:	79fb      	ldrb	r3, [r7, #7]
 8007242:	429a      	cmp	r2, r3
 8007244:	f43f af4a 	beq.w	80070dc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007248:	2300      	movs	r3, #0
}
 800724a:	4618      	mov	r0, r3
 800724c:	3770      	adds	r7, #112	; 0x70
 800724e:	46bd      	mov	sp, r7
 8007250:	bd80      	pop	{r7, pc}
	...

08007254 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007254:	b480      	push	{r7}
 8007256:	b097      	sub	sp, #92	; 0x5c
 8007258:	af00      	add	r7, sp, #0
 800725a:	60f8      	str	r0, [r7, #12]
 800725c:	60b9      	str	r1, [r7, #8]
 800725e:	4613      	mov	r3, r2
 8007260:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	68ba      	ldr	r2, [r7, #8]
 8007266:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	88fa      	ldrh	r2, [r7, #6]
 800726c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	88fa      	ldrh	r2, [r7, #6]
 8007274:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	2200      	movs	r2, #0
 800727c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	689b      	ldr	r3, [r3, #8]
 8007282:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007286:	d10e      	bne.n	80072a6 <UART_Start_Receive_IT+0x52>
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	691b      	ldr	r3, [r3, #16]
 800728c:	2b00      	cmp	r3, #0
 800728e:	d105      	bne.n	800729c <UART_Start_Receive_IT+0x48>
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007296:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800729a:	e02d      	b.n	80072f8 <UART_Start_Receive_IT+0xa4>
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	22ff      	movs	r2, #255	; 0xff
 80072a0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80072a4:	e028      	b.n	80072f8 <UART_Start_Receive_IT+0xa4>
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	689b      	ldr	r3, [r3, #8]
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d10d      	bne.n	80072ca <UART_Start_Receive_IT+0x76>
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	691b      	ldr	r3, [r3, #16]
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d104      	bne.n	80072c0 <UART_Start_Receive_IT+0x6c>
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	22ff      	movs	r2, #255	; 0xff
 80072ba:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80072be:	e01b      	b.n	80072f8 <UART_Start_Receive_IT+0xa4>
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	227f      	movs	r2, #127	; 0x7f
 80072c4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80072c8:	e016      	b.n	80072f8 <UART_Start_Receive_IT+0xa4>
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	689b      	ldr	r3, [r3, #8]
 80072ce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80072d2:	d10d      	bne.n	80072f0 <UART_Start_Receive_IT+0x9c>
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	691b      	ldr	r3, [r3, #16]
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d104      	bne.n	80072e6 <UART_Start_Receive_IT+0x92>
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	227f      	movs	r2, #127	; 0x7f
 80072e0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80072e4:	e008      	b.n	80072f8 <UART_Start_Receive_IT+0xa4>
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	223f      	movs	r2, #63	; 0x3f
 80072ea:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80072ee:	e003      	b.n	80072f8 <UART_Start_Receive_IT+0xa4>
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	2200      	movs	r2, #0
 80072f4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	2200      	movs	r2, #0
 80072fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	2222      	movs	r2, #34	; 0x22
 8007304:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	3308      	adds	r3, #8
 800730c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800730e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007310:	e853 3f00 	ldrex	r3, [r3]
 8007314:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007316:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007318:	f043 0301 	orr.w	r3, r3, #1
 800731c:	657b      	str	r3, [r7, #84]	; 0x54
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	3308      	adds	r3, #8
 8007324:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007326:	64ba      	str	r2, [r7, #72]	; 0x48
 8007328:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800732a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800732c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800732e:	e841 2300 	strex	r3, r2, [r1]
 8007332:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007334:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007336:	2b00      	cmp	r3, #0
 8007338:	d1e5      	bne.n	8007306 <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	689b      	ldr	r3, [r3, #8]
 800733e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007342:	d107      	bne.n	8007354 <UART_Start_Receive_IT+0x100>
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	691b      	ldr	r3, [r3, #16]
 8007348:	2b00      	cmp	r3, #0
 800734a:	d103      	bne.n	8007354 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	4a24      	ldr	r2, [pc, #144]	; (80073e0 <UART_Start_Receive_IT+0x18c>)
 8007350:	665a      	str	r2, [r3, #100]	; 0x64
 8007352:	e002      	b.n	800735a <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	4a23      	ldr	r2, [pc, #140]	; (80073e4 <UART_Start_Receive_IT+0x190>)
 8007358:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	2200      	movs	r2, #0
 800735e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	691b      	ldr	r3, [r3, #16]
 8007366:	2b00      	cmp	r3, #0
 8007368:	d019      	beq.n	800739e <UART_Start_Receive_IT+0x14a>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007370:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007372:	e853 3f00 	ldrex	r3, [r3]
 8007376:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800737a:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800737e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	461a      	mov	r2, r3
 8007386:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007388:	637b      	str	r3, [r7, #52]	; 0x34
 800738a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800738c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800738e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007390:	e841 2300 	strex	r3, r2, [r1]
 8007394:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007396:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007398:	2b00      	cmp	r3, #0
 800739a:	d1e6      	bne.n	800736a <UART_Start_Receive_IT+0x116>
 800739c:	e018      	b.n	80073d0 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073a4:	697b      	ldr	r3, [r7, #20]
 80073a6:	e853 3f00 	ldrex	r3, [r3]
 80073aa:	613b      	str	r3, [r7, #16]
   return(result);
 80073ac:	693b      	ldr	r3, [r7, #16]
 80073ae:	f043 0320 	orr.w	r3, r3, #32
 80073b2:	653b      	str	r3, [r7, #80]	; 0x50
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	461a      	mov	r2, r3
 80073ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80073bc:	623b      	str	r3, [r7, #32]
 80073be:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073c0:	69f9      	ldr	r1, [r7, #28]
 80073c2:	6a3a      	ldr	r2, [r7, #32]
 80073c4:	e841 2300 	strex	r3, r2, [r1]
 80073c8:	61bb      	str	r3, [r7, #24]
   return(result);
 80073ca:	69bb      	ldr	r3, [r7, #24]
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d1e6      	bne.n	800739e <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 80073d0:	2300      	movs	r3, #0
}
 80073d2:	4618      	mov	r0, r3
 80073d4:	375c      	adds	r7, #92	; 0x5c
 80073d6:	46bd      	mov	sp, r7
 80073d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073dc:	4770      	bx	lr
 80073de:	bf00      	nop
 80073e0:	0800768f 	.word	0x0800768f
 80073e4:	0800752f 	.word	0x0800752f

080073e8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80073e8:	b480      	push	{r7}
 80073ea:	b095      	sub	sp, #84	; 0x54
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073f8:	e853 3f00 	ldrex	r3, [r3]
 80073fc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80073fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007400:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007404:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	461a      	mov	r2, r3
 800740c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800740e:	643b      	str	r3, [r7, #64]	; 0x40
 8007410:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007412:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007414:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007416:	e841 2300 	strex	r3, r2, [r1]
 800741a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800741c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800741e:	2b00      	cmp	r3, #0
 8007420:	d1e6      	bne.n	80073f0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	3308      	adds	r3, #8
 8007428:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800742a:	6a3b      	ldr	r3, [r7, #32]
 800742c:	e853 3f00 	ldrex	r3, [r3]
 8007430:	61fb      	str	r3, [r7, #28]
   return(result);
 8007432:	69fb      	ldr	r3, [r7, #28]
 8007434:	f023 0301 	bic.w	r3, r3, #1
 8007438:	64bb      	str	r3, [r7, #72]	; 0x48
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	3308      	adds	r3, #8
 8007440:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007442:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007444:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007446:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007448:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800744a:	e841 2300 	strex	r3, r2, [r1]
 800744e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007452:	2b00      	cmp	r3, #0
 8007454:	d1e5      	bne.n	8007422 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800745a:	2b01      	cmp	r3, #1
 800745c:	d118      	bne.n	8007490 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	e853 3f00 	ldrex	r3, [r3]
 800746a:	60bb      	str	r3, [r7, #8]
   return(result);
 800746c:	68bb      	ldr	r3, [r7, #8]
 800746e:	f023 0310 	bic.w	r3, r3, #16
 8007472:	647b      	str	r3, [r7, #68]	; 0x44
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	461a      	mov	r2, r3
 800747a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800747c:	61bb      	str	r3, [r7, #24]
 800747e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007480:	6979      	ldr	r1, [r7, #20]
 8007482:	69ba      	ldr	r2, [r7, #24]
 8007484:	e841 2300 	strex	r3, r2, [r1]
 8007488:	613b      	str	r3, [r7, #16]
   return(result);
 800748a:	693b      	ldr	r3, [r7, #16]
 800748c:	2b00      	cmp	r3, #0
 800748e:	d1e6      	bne.n	800745e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	2220      	movs	r2, #32
 8007494:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	2200      	movs	r2, #0
 800749a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	2200      	movs	r2, #0
 80074a0:	665a      	str	r2, [r3, #100]	; 0x64
}
 80074a2:	bf00      	nop
 80074a4:	3754      	adds	r7, #84	; 0x54
 80074a6:	46bd      	mov	sp, r7
 80074a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ac:	4770      	bx	lr

080074ae <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80074ae:	b580      	push	{r7, lr}
 80074b0:	b084      	sub	sp, #16
 80074b2:	af00      	add	r7, sp, #0
 80074b4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074ba:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	2200      	movs	r2, #0
 80074c0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	2200      	movs	r2, #0
 80074c8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80074cc:	68f8      	ldr	r0, [r7, #12]
 80074ce:	f7ff fa43 	bl	8006958 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80074d2:	bf00      	nop
 80074d4:	3710      	adds	r7, #16
 80074d6:	46bd      	mov	sp, r7
 80074d8:	bd80      	pop	{r7, pc}

080074da <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80074da:	b580      	push	{r7, lr}
 80074dc:	b088      	sub	sp, #32
 80074de:	af00      	add	r7, sp, #0
 80074e0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	e853 3f00 	ldrex	r3, [r3]
 80074ee:	60bb      	str	r3, [r7, #8]
   return(result);
 80074f0:	68bb      	ldr	r3, [r7, #8]
 80074f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80074f6:	61fb      	str	r3, [r7, #28]
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	461a      	mov	r2, r3
 80074fe:	69fb      	ldr	r3, [r7, #28]
 8007500:	61bb      	str	r3, [r7, #24]
 8007502:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007504:	6979      	ldr	r1, [r7, #20]
 8007506:	69ba      	ldr	r2, [r7, #24]
 8007508:	e841 2300 	strex	r3, r2, [r1]
 800750c:	613b      	str	r3, [r7, #16]
   return(result);
 800750e:	693b      	ldr	r3, [r7, #16]
 8007510:	2b00      	cmp	r3, #0
 8007512:	d1e6      	bne.n	80074e2 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	2220      	movs	r2, #32
 8007518:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	2200      	movs	r2, #0
 800751e:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007520:	6878      	ldr	r0, [r7, #4]
 8007522:	f7ff fa0f 	bl	8006944 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007526:	bf00      	nop
 8007528:	3720      	adds	r7, #32
 800752a:	46bd      	mov	sp, r7
 800752c:	bd80      	pop	{r7, pc}

0800752e <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800752e:	b580      	push	{r7, lr}
 8007530:	b096      	sub	sp, #88	; 0x58
 8007532:	af00      	add	r7, sp, #0
 8007534:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800753c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007544:	2b22      	cmp	r3, #34	; 0x22
 8007546:	f040 8094 	bne.w	8007672 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007550:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007554:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8007558:	b2d9      	uxtb	r1, r3
 800755a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800755e:	b2da      	uxtb	r2, r3
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007564:	400a      	ands	r2, r1
 8007566:	b2d2      	uxtb	r2, r2
 8007568:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800756e:	1c5a      	adds	r2, r3, #1
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800757a:	b29b      	uxth	r3, r3
 800757c:	3b01      	subs	r3, #1
 800757e:	b29a      	uxth	r2, r3
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800758c:	b29b      	uxth	r3, r3
 800758e:	2b00      	cmp	r3, #0
 8007590:	d179      	bne.n	8007686 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007598:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800759a:	e853 3f00 	ldrex	r3, [r3]
 800759e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80075a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075a2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80075a6:	653b      	str	r3, [r7, #80]	; 0x50
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	461a      	mov	r2, r3
 80075ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80075b0:	647b      	str	r3, [r7, #68]	; 0x44
 80075b2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075b4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80075b6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80075b8:	e841 2300 	strex	r3, r2, [r1]
 80075bc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80075be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d1e6      	bne.n	8007592 <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	3308      	adds	r3, #8
 80075ca:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075ce:	e853 3f00 	ldrex	r3, [r3]
 80075d2:	623b      	str	r3, [r7, #32]
   return(result);
 80075d4:	6a3b      	ldr	r3, [r7, #32]
 80075d6:	f023 0301 	bic.w	r3, r3, #1
 80075da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	3308      	adds	r3, #8
 80075e2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80075e4:	633a      	str	r2, [r7, #48]	; 0x30
 80075e6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075e8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80075ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80075ec:	e841 2300 	strex	r3, r2, [r1]
 80075f0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80075f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d1e5      	bne.n	80075c4 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	2220      	movs	r2, #32
 80075fc:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	2200      	movs	r2, #0
 8007602:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007608:	2b01      	cmp	r3, #1
 800760a:	d12e      	bne.n	800766a <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	2200      	movs	r2, #0
 8007610:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007618:	693b      	ldr	r3, [r7, #16]
 800761a:	e853 3f00 	ldrex	r3, [r3]
 800761e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	f023 0310 	bic.w	r3, r3, #16
 8007626:	64bb      	str	r3, [r7, #72]	; 0x48
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	461a      	mov	r2, r3
 800762e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007630:	61fb      	str	r3, [r7, #28]
 8007632:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007634:	69b9      	ldr	r1, [r7, #24]
 8007636:	69fa      	ldr	r2, [r7, #28]
 8007638:	e841 2300 	strex	r3, r2, [r1]
 800763c:	617b      	str	r3, [r7, #20]
   return(result);
 800763e:	697b      	ldr	r3, [r7, #20]
 8007640:	2b00      	cmp	r3, #0
 8007642:	d1e6      	bne.n	8007612 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	69db      	ldr	r3, [r3, #28]
 800764a:	f003 0310 	and.w	r3, r3, #16
 800764e:	2b10      	cmp	r3, #16
 8007650:	d103      	bne.n	800765a <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	2210      	movs	r2, #16
 8007658:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007660:	4619      	mov	r1, r3
 8007662:	6878      	ldr	r0, [r7, #4]
 8007664:	f7ff f982 	bl	800696c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007668:	e00d      	b.n	8007686 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800766a:	6878      	ldr	r0, [r7, #4]
 800766c:	f7fa fb32 	bl	8001cd4 <HAL_UART_RxCpltCallback>
}
 8007670:	e009      	b.n	8007686 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	8b1b      	ldrh	r3, [r3, #24]
 8007678:	b29a      	uxth	r2, r3
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	f042 0208 	orr.w	r2, r2, #8
 8007682:	b292      	uxth	r2, r2
 8007684:	831a      	strh	r2, [r3, #24]
}
 8007686:	bf00      	nop
 8007688:	3758      	adds	r7, #88	; 0x58
 800768a:	46bd      	mov	sp, r7
 800768c:	bd80      	pop	{r7, pc}

0800768e <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800768e:	b580      	push	{r7, lr}
 8007690:	b096      	sub	sp, #88	; 0x58
 8007692:	af00      	add	r7, sp, #0
 8007694:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800769c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80076a4:	2b22      	cmp	r3, #34	; 0x22
 80076a6:	f040 8094 	bne.w	80077d2 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80076b0:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076b8:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 80076ba:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80076be:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80076c2:	4013      	ands	r3, r2
 80076c4:	b29a      	uxth	r2, r3
 80076c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80076c8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076ce:	1c9a      	adds	r2, r3, #2
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80076da:	b29b      	uxth	r3, r3
 80076dc:	3b01      	subs	r3, #1
 80076de:	b29a      	uxth	r2, r3
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80076ec:	b29b      	uxth	r3, r3
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d179      	bne.n	80077e6 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076fa:	e853 3f00 	ldrex	r3, [r3]
 80076fe:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007700:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007702:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007706:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	461a      	mov	r2, r3
 800770e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007710:	643b      	str	r3, [r7, #64]	; 0x40
 8007712:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007714:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007716:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007718:	e841 2300 	strex	r3, r2, [r1]
 800771c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800771e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007720:	2b00      	cmp	r3, #0
 8007722:	d1e6      	bne.n	80076f2 <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	3308      	adds	r3, #8
 800772a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800772c:	6a3b      	ldr	r3, [r7, #32]
 800772e:	e853 3f00 	ldrex	r3, [r3]
 8007732:	61fb      	str	r3, [r7, #28]
   return(result);
 8007734:	69fb      	ldr	r3, [r7, #28]
 8007736:	f023 0301 	bic.w	r3, r3, #1
 800773a:	64bb      	str	r3, [r7, #72]	; 0x48
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	3308      	adds	r3, #8
 8007742:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007744:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007746:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007748:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800774a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800774c:	e841 2300 	strex	r3, r2, [r1]
 8007750:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007754:	2b00      	cmp	r3, #0
 8007756:	d1e5      	bne.n	8007724 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	2220      	movs	r2, #32
 800775c:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	2200      	movs	r2, #0
 8007762:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007768:	2b01      	cmp	r3, #1
 800776a:	d12e      	bne.n	80077ca <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	2200      	movs	r2, #0
 8007770:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	e853 3f00 	ldrex	r3, [r3]
 800777e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007780:	68bb      	ldr	r3, [r7, #8]
 8007782:	f023 0310 	bic.w	r3, r3, #16
 8007786:	647b      	str	r3, [r7, #68]	; 0x44
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	461a      	mov	r2, r3
 800778e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007790:	61bb      	str	r3, [r7, #24]
 8007792:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007794:	6979      	ldr	r1, [r7, #20]
 8007796:	69ba      	ldr	r2, [r7, #24]
 8007798:	e841 2300 	strex	r3, r2, [r1]
 800779c:	613b      	str	r3, [r7, #16]
   return(result);
 800779e:	693b      	ldr	r3, [r7, #16]
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d1e6      	bne.n	8007772 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	69db      	ldr	r3, [r3, #28]
 80077aa:	f003 0310 	and.w	r3, r3, #16
 80077ae:	2b10      	cmp	r3, #16
 80077b0:	d103      	bne.n	80077ba <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	2210      	movs	r2, #16
 80077b8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80077c0:	4619      	mov	r1, r3
 80077c2:	6878      	ldr	r0, [r7, #4]
 80077c4:	f7ff f8d2 	bl	800696c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80077c8:	e00d      	b.n	80077e6 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 80077ca:	6878      	ldr	r0, [r7, #4]
 80077cc:	f7fa fa82 	bl	8001cd4 <HAL_UART_RxCpltCallback>
}
 80077d0:	e009      	b.n	80077e6 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	8b1b      	ldrh	r3, [r3, #24]
 80077d8:	b29a      	uxth	r2, r3
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	f042 0208 	orr.w	r2, r2, #8
 80077e2:	b292      	uxth	r2, r2
 80077e4:	831a      	strh	r2, [r3, #24]
}
 80077e6:	bf00      	nop
 80077e8:	3758      	adds	r7, #88	; 0x58
 80077ea:	46bd      	mov	sp, r7
 80077ec:	bd80      	pop	{r7, pc}

080077ee <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80077ee:	b480      	push	{r7}
 80077f0:	b083      	sub	sp, #12
 80077f2:	af00      	add	r7, sp, #0
 80077f4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80077f6:	bf00      	nop
 80077f8:	370c      	adds	r7, #12
 80077fa:	46bd      	mov	sp, r7
 80077fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007800:	4770      	bx	lr

08007802 <VL53L1_nvm_enable>:

static VL53L1_Error VL53L1_nvm_enable(
	VL53L1_DEV      Dev,
	uint16_t        nvm_ctrl_pulse_width,
	int32_t         nvm_power_up_delay_us)
{
 8007802:	b580      	push	{r7, lr}
 8007804:	b086      	sub	sp, #24
 8007806:	af00      	add	r7, sp, #0
 8007808:	60f8      	str	r0, [r7, #12]
 800780a:	460b      	mov	r3, r1
 800780c:	607a      	str	r2, [r7, #4]
 800780e:	817b      	strh	r3, [r7, #10]
	 *  - Power up NVM
	 *  - Wait for 50us while the NVM powers up
	 *  - Configure for reading and set the pulse width (16-bit)
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8007810:	2300      	movs	r3, #0
 8007812:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");


	/* Disable Firmware */

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 8007814:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007818:	2b00      	cmp	r3, #0
 800781a:	d104      	bne.n	8007826 <VL53L1_nvm_enable+0x24>
		status = VL53L1_disable_firmware(Dev);
 800781c:	68f8      	ldr	r0, [r7, #12]
 800781e:	f004 fdd0 	bl	800c3c2 <VL53L1_disable_firmware>
 8007822:	4603      	mov	r3, r0
 8007824:	75fb      	strb	r3, [r7, #23]


	/* Enable Power Force  */

	if (status == VL53L1_ERROR_NONE)
 8007826:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800782a:	2b00      	cmp	r3, #0
 800782c:	d104      	bne.n	8007838 <VL53L1_nvm_enable+0x36>
		status = VL53L1_enable_powerforce(Dev);
 800782e:	68f8      	ldr	r0, [r7, #12]
 8007830:	f004 fdf7 	bl	800c422 <VL53L1_enable_powerforce>
 8007834:	4603      	mov	r3, r0
 8007836:	75fb      	strb	r3, [r7, #23]

	/* Wait the required time for the regulators, bandgap,
	 * oscillator to wake up and settle
	 */

	if (status == VL53L1_ERROR_NONE)
 8007838:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800783c:	2b00      	cmp	r3, #0
 800783e:	d105      	bne.n	800784c <VL53L1_nvm_enable+0x4a>
		status = VL53L1_WaitUs(Dev,
 8007840:	21fa      	movs	r1, #250	; 0xfa
 8007842:	68f8      	ldr	r0, [r7, #12]
 8007844:	f006 fdb8 	bl	800e3b8 <VL53L1_WaitUs>
 8007848:	4603      	mov	r3, r0
 800784a:	75fb      	strb	r3, [r7, #23]
				VL53L1_ENABLE_POWERFORCE_SETTLING_TIME_US);

	/*  Power up NVM */

	if (status == VL53L1_ERROR_NONE)
 800784c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007850:	2b00      	cmp	r3, #0
 8007852:	d107      	bne.n	8007864 <VL53L1_nvm_enable+0x62>
		status = VL53L1_WrByte(Dev, VL53L1_RANGING_CORE__NVM_CTRL__PDN,
 8007854:	2201      	movs	r2, #1
 8007856:	f240 7181 	movw	r1, #1921	; 0x781
 800785a:	68f8      	ldr	r0, [r7, #12]
 800785c:	f006 fcbc 	bl	800e1d8 <VL53L1_WrByte>
 8007860:	4603      	mov	r3, r0
 8007862:	75fb      	strb	r3, [r7, #23]
				0x01);

	/* Enable NVM Clock */

	if (status == VL53L1_ERROR_NONE)
 8007864:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007868:	2b00      	cmp	r3, #0
 800786a:	d107      	bne.n	800787c <VL53L1_nvm_enable+0x7a>
		status = VL53L1_WrByte(Dev, VL53L1_RANGING_CORE__CLK_CTRL1,
 800786c:	2205      	movs	r2, #5
 800786e:	f240 6183 	movw	r1, #1667	; 0x683
 8007872:	68f8      	ldr	r0, [r7, #12]
 8007874:	f006 fcb0 	bl	800e1d8 <VL53L1_WrByte>
 8007878:	4603      	mov	r3, r0
 800787a:	75fb      	strb	r3, [r7, #23]
				0x05);

	/* Wait the required time for NVM to power up*/

	if (status == VL53L1_ERROR_NONE)
 800787c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007880:	2b00      	cmp	r3, #0
 8007882:	d105      	bne.n	8007890 <VL53L1_nvm_enable+0x8e>
		status = VL53L1_WaitUs(Dev, nvm_power_up_delay_us);
 8007884:	6879      	ldr	r1, [r7, #4]
 8007886:	68f8      	ldr	r0, [r7, #12]
 8007888:	f006 fd96 	bl	800e3b8 <VL53L1_WaitUs>
 800788c:	4603      	mov	r3, r0
 800788e:	75fb      	strb	r3, [r7, #23]

	/* Select read mode and set control pulse width */

	if (status == VL53L1_ERROR_NONE)
 8007890:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007894:	2b00      	cmp	r3, #0
 8007896:	d107      	bne.n	80078a8 <VL53L1_nvm_enable+0xa6>
		status = VL53L1_WrByte(Dev, VL53L1_RANGING_CORE__NVM_CTRL__MODE,
 8007898:	2201      	movs	r2, #1
 800789a:	f44f 61f0 	mov.w	r1, #1920	; 0x780
 800789e:	68f8      	ldr	r0, [r7, #12]
 80078a0:	f006 fc9a 	bl	800e1d8 <VL53L1_WrByte>
 80078a4:	4603      	mov	r3, r0
 80078a6:	75fb      	strb	r3, [r7, #23]
				0x01);

	if (status == VL53L1_ERROR_NONE)
 80078a8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d108      	bne.n	80078c2 <VL53L1_nvm_enable+0xc0>
		status = VL53L1_WrWord(Dev,
 80078b0:	897b      	ldrh	r3, [r7, #10]
 80078b2:	461a      	mov	r2, r3
 80078b4:	f240 7184 	movw	r1, #1924	; 0x784
 80078b8:	68f8      	ldr	r0, [r7, #12]
 80078ba:	f006 fcb7 	bl	800e22c <VL53L1_WrWord>
 80078be:	4603      	mov	r3, r0
 80078c0:	75fb      	strb	r3, [r7, #23]
				VL53L1_RANGING_CORE__NVM_CTRL__PULSE_WIDTH_MSB,
				nvm_ctrl_pulse_width);

	LOG_FUNCTION_END(status);

	return status;
 80078c2:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 80078c6:	4618      	mov	r0, r3
 80078c8:	3718      	adds	r7, #24
 80078ca:	46bd      	mov	sp, r7
 80078cc:	bd80      	pop	{r7, pc}

080078ce <VL53L1_nvm_read>:
static VL53L1_Error VL53L1_nvm_read(
	VL53L1_DEV    Dev,
	uint8_t       start_address,
	uint8_t       count,
	uint8_t      *pdata)
{
 80078ce:	b580      	push	{r7, lr}
 80078d0:	b086      	sub	sp, #24
 80078d2:	af00      	add	r7, sp, #0
 80078d4:	60f8      	str	r0, [r7, #12]
 80078d6:	607b      	str	r3, [r7, #4]
 80078d8:	460b      	mov	r3, r1
 80078da:	72fb      	strb	r3, [r7, #11]
 80078dc:	4613      	mov	r3, r2
 80078de:	72bb      	strb	r3, [r7, #10]
	 * - Trigger the read of the NVM data by toggling NVM_CTRL__READN
	 * - Read the NVM data - 4 bytes wide read/write interface
	 * - Increment data byte pointer by 4 ready for the next loop
	 */

	VL53L1_Error status   = VL53L1_ERROR_NONE;
 80078e0:	2300      	movs	r3, #0
 80078e2:	75fb      	strb	r3, [r7, #23]
	uint8_t nvm_addr = 0;
 80078e4:	2300      	movs	r3, #0
 80078e6:	75bb      	strb	r3, [r7, #22]
	uint8_t start = start_address;
 80078e8:	7afb      	ldrb	r3, [r7, #11]
 80078ea:	757b      	strb	r3, [r7, #21]
	uint8_t end   = start_address + count;
 80078ec:	7afa      	ldrb	r2, [r7, #11]
 80078ee:	7abb      	ldrb	r3, [r7, #10]
 80078f0:	4413      	add	r3, r2
 80078f2:	753b      	strb	r3, [r7, #20]

	LOG_FUNCTION_START("");

	for (nvm_addr = start; nvm_addr < end; nvm_addr++) {
 80078f4:	7d7b      	ldrb	r3, [r7, #21]
 80078f6:	75bb      	strb	r3, [r7, #22]
 80078f8:	e041      	b.n	800797e <VL53L1_nvm_read+0xb0>

		/* Step 1 : set address */

		if (status == VL53L1_ERROR_NONE)
 80078fa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d108      	bne.n	8007914 <VL53L1_nvm_read+0x46>
			status = VL53L1_WrByte(Dev,
 8007902:	7dbb      	ldrb	r3, [r7, #22]
 8007904:	461a      	mov	r2, r3
 8007906:	f240 7194 	movw	r1, #1940	; 0x794
 800790a:	68f8      	ldr	r0, [r7, #12]
 800790c:	f006 fc64 	bl	800e1d8 <VL53L1_WrByte>
 8007910:	4603      	mov	r3, r0
 8007912:	75fb      	strb	r3, [r7, #23]
					VL53L1_RANGING_CORE__NVM_CTRL__ADDR,
					nvm_addr);

		/* Step 2 : trigger reading of data */

		if (status == VL53L1_ERROR_NONE)
 8007914:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007918:	2b00      	cmp	r3, #0
 800791a:	d107      	bne.n	800792c <VL53L1_nvm_read+0x5e>
			status = VL53L1_WrByte(Dev,
 800791c:	2200      	movs	r2, #0
 800791e:	f240 7183 	movw	r1, #1923	; 0x783
 8007922:	68f8      	ldr	r0, [r7, #12]
 8007924:	f006 fc58 	bl	800e1d8 <VL53L1_WrByte>
 8007928:	4603      	mov	r3, r0
 800792a:	75fb      	strb	r3, [r7, #23]
					VL53L1_RANGING_CORE__NVM_CTRL__READN,
					0x00);

		/* Step 3 : wait the required time */

		if (status == VL53L1_ERROR_NONE)
 800792c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007930:	2b00      	cmp	r3, #0
 8007932:	d105      	bne.n	8007940 <VL53L1_nvm_read+0x72>
			status = VL53L1_WaitUs(Dev,
 8007934:	2105      	movs	r1, #5
 8007936:	68f8      	ldr	r0, [r7, #12]
 8007938:	f006 fd3e 	bl	800e3b8 <VL53L1_WaitUs>
 800793c:	4603      	mov	r3, r0
 800793e:	75fb      	strb	r3, [r7, #23]
					VL53L1_NVM_READ_TRIGGER_DELAY_US);

		if (status == VL53L1_ERROR_NONE)
 8007940:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007944:	2b00      	cmp	r3, #0
 8007946:	d107      	bne.n	8007958 <VL53L1_nvm_read+0x8a>
			status = VL53L1_WrByte(Dev,
 8007948:	2201      	movs	r2, #1
 800794a:	f240 7183 	movw	r1, #1923	; 0x783
 800794e:	68f8      	ldr	r0, [r7, #12]
 8007950:	f006 fc42 	bl	800e1d8 <VL53L1_WrByte>
 8007954:	4603      	mov	r3, r0
 8007956:	75fb      	strb	r3, [r7, #23]
					VL53L1_RANGING_CORE__NVM_CTRL__READN,
					0x01);

		/* Step 3 : read 4-byte wide data register */
		if (status == VL53L1_ERROR_NONE)
 8007958:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800795c:	2b00      	cmp	r3, #0
 800795e:	d108      	bne.n	8007972 <VL53L1_nvm_read+0xa4>
			status = VL53L1_ReadMulti(Dev,
 8007960:	2304      	movs	r3, #4
 8007962:	687a      	ldr	r2, [r7, #4]
 8007964:	f44f 61f2 	mov.w	r1, #1936	; 0x790
 8007968:	68f8      	ldr	r0, [r7, #12]
 800796a:	f006 fbff 	bl	800e16c <VL53L1_ReadMulti>
 800796e:	4603      	mov	r3, r0
 8007970:	75fb      	strb	r3, [r7, #23]
				VL53L1_RANGING_CORE__NVM_CTRL__DATAOUT_MMM,
				pdata, 4);

		/* Step 4 : increment byte buffer pointer */
		pdata = pdata + 4;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	3304      	adds	r3, #4
 8007976:	607b      	str	r3, [r7, #4]
	for (nvm_addr = start; nvm_addr < end; nvm_addr++) {
 8007978:	7dbb      	ldrb	r3, [r7, #22]
 800797a:	3301      	adds	r3, #1
 800797c:	75bb      	strb	r3, [r7, #22]
 800797e:	7dba      	ldrb	r2, [r7, #22]
 8007980:	7d3b      	ldrb	r3, [r7, #20]
 8007982:	429a      	cmp	r2, r3
 8007984:	d3b9      	bcc.n	80078fa <VL53L1_nvm_read+0x2c>

	}

	LOG_FUNCTION_END(status);

	return status;
 8007986:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800798a:	4618      	mov	r0, r3
 800798c:	3718      	adds	r7, #24
 800798e:	46bd      	mov	sp, r7
 8007990:	bd80      	pop	{r7, pc}

08007992 <VL53L1_nvm_disable>:

static VL53L1_Error VL53L1_nvm_disable(
	VL53L1_DEV    Dev)
{
 8007992:	b580      	push	{r7, lr}
 8007994:	b084      	sub	sp, #16
 8007996:	af00      	add	r7, sp, #0
 8007998:	6078      	str	r0, [r7, #4]
	/*
	 * Power down NVM (OTP) to extend lifetime
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800799a:	2300      	movs	r3, #0
 800799c:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 800799e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d107      	bne.n	80079b6 <VL53L1_nvm_disable+0x24>
		status = VL53L1_WrByte(
 80079a6:	2201      	movs	r2, #1
 80079a8:	f240 7183 	movw	r1, #1923	; 0x783
 80079ac:	6878      	ldr	r0, [r7, #4]
 80079ae:	f006 fc13 	bl	800e1d8 <VL53L1_WrByte>
 80079b2:	4603      	mov	r3, r0
 80079b4:	73fb      	strb	r3, [r7, #15]
					VL53L1_RANGING_CORE__NVM_CTRL__READN,
					0x01);

	/* Power down NVM */

	if (status == VL53L1_ERROR_NONE)
 80079b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d107      	bne.n	80079ce <VL53L1_nvm_disable+0x3c>
		status = VL53L1_WrByte(
 80079be:	2200      	movs	r2, #0
 80079c0:	f240 7181 	movw	r1, #1921	; 0x781
 80079c4:	6878      	ldr	r0, [r7, #4]
 80079c6:	f006 fc07 	bl	800e1d8 <VL53L1_WrByte>
 80079ca:	4603      	mov	r3, r0
 80079cc:	73fb      	strb	r3, [r7, #15]
					VL53L1_RANGING_CORE__NVM_CTRL__PDN,
					0x00);

	/* Keep power force enabled */

	if (status == VL53L1_ERROR_NONE)
 80079ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d104      	bne.n	80079e0 <VL53L1_nvm_disable+0x4e>
		status = VL53L1_disable_powerforce(Dev);
 80079d6:	6878      	ldr	r0, [r7, #4]
 80079d8:	f004 fd35 	bl	800c446 <VL53L1_disable_powerforce>
 80079dc:	4603      	mov	r3, r0
 80079de:	73fb      	strb	r3, [r7, #15]

	/* (Re)Enable Firmware */

	if (status == VL53L1_ERROR_NONE)
 80079e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d104      	bne.n	80079f2 <VL53L1_nvm_disable+0x60>
		status = VL53L1_enable_firmware(Dev);
 80079e8:	6878      	ldr	r0, [r7, #4]
 80079ea:	f004 fcd8 	bl	800c39e <VL53L1_enable_firmware>
 80079ee:	4603      	mov	r3, r0
 80079f0:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(status);

	return status;
 80079f2:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 80079f6:	4618      	mov	r0, r3
 80079f8:	3710      	adds	r7, #16
 80079fa:	46bd      	mov	sp, r7
 80079fc:	bd80      	pop	{r7, pc}

080079fe <VL53L1_read_nvm_raw_data>:
static VL53L1_Error VL53L1_read_nvm_raw_data(
	VL53L1_DEV     Dev,
	uint8_t        start_address,
	uint8_t        count,
	uint8_t       *pnvm_raw_data)
{
 80079fe:	b580      	push	{r7, lr}
 8007a00:	b086      	sub	sp, #24
 8007a02:	af00      	add	r7, sp, #0
 8007a04:	60f8      	str	r0, [r7, #12]
 8007a06:	607b      	str	r3, [r7, #4]
 8007a08:	460b      	mov	r3, r1
 8007a0a:	72fb      	strb	r3, [r7, #11]
 8007a0c:	4613      	mov	r3, r2
 8007a0e:	72bb      	strb	r3, [r7, #10]

	/*
	 * Reads ALL 512 bytes of NVM data
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8007a10:	2300      	movs	r3, #0
 8007a12:	75fb      	strb	r3, [r7, #23]

	/*
	 *   Enable NVM and set control pulse width
	 */

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 8007a14:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d106      	bne.n	8007a2a <VL53L1_read_nvm_raw_data+0x2c>
		status = VL53L1_nvm_enable(
 8007a1c:	2232      	movs	r2, #50	; 0x32
 8007a1e:	2104      	movs	r1, #4
 8007a20:	68f8      	ldr	r0, [r7, #12]
 8007a22:	f7ff feee 	bl	8007802 <VL53L1_nvm_enable>
 8007a26:	4603      	mov	r3, r0
 8007a28:	75fb      	strb	r3, [r7, #23]
	/*
	 *  Read the raw NVM data
	 *        - currently all of 128 * 4 bytes = 512 bytes are read
	 */

	if (status == VL53L1_ERROR_NONE)
 8007a2a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d107      	bne.n	8007a42 <VL53L1_read_nvm_raw_data+0x44>
		status = VL53L1_nvm_read(
 8007a32:	7aba      	ldrb	r2, [r7, #10]
 8007a34:	7af9      	ldrb	r1, [r7, #11]
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	68f8      	ldr	r0, [r7, #12]
 8007a3a:	f7ff ff48 	bl	80078ce <VL53L1_nvm_read>
 8007a3e:	4603      	mov	r3, r0
 8007a40:	75fb      	strb	r3, [r7, #23]

	/*
	 *   Disable NVM
	 */

	if (status == VL53L1_ERROR_NONE)
 8007a42:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d104      	bne.n	8007a54 <VL53L1_read_nvm_raw_data+0x56>
		status = VL53L1_nvm_disable(Dev);
 8007a4a:	68f8      	ldr	r0, [r7, #12]
 8007a4c:	f7ff ffa1 	bl	8007992 <VL53L1_nvm_disable>
 8007a50:	4603      	mov	r3, r0
 8007a52:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(status);

	return status;
 8007a54:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 8007a58:	4618      	mov	r0, r3
 8007a5a:	3718      	adds	r7, #24
 8007a5c:	46bd      	mov	sp, r7
 8007a5e:	bd80      	pop	{r7, pc}

08007a60 <SingleTargetXTalkCalibration>:

static VL53L1_Error SingleTargetXTalkCalibration(VL53L1_DEV Dev)
{
 8007a60:	b580      	push	{r7, lr}
 8007a62:	b0b2      	sub	sp, #200	; 0xc8
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8007a68:	2300      	movs	r3, #0
 8007a6a:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7

	uint32_t sum_ranging = 0;
 8007a6e:	2300      	movs	r3, #0
 8007a70:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
	uint32_t sum_spads = 0;
 8007a74:	2300      	movs	r3, #0
 8007a76:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
	FixPoint1616_t sum_signalRate = 0;
 8007a7a:	2300      	movs	r3, #0
 8007a7c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
	FixPoint1616_t total_count = 0;
 8007a80:	2300      	movs	r3, #0
 8007a82:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	uint8_t xtalk_meas = 0;
 8007a86:	2300      	movs	r3, #0
 8007a88:	f887 30b3 	strb.w	r3, [r7, #179]	; 0xb3
	uint8_t xtalk_measmax =
		BDTable[VL53L1_TUNING_SINGLE_TARGET_XTALK_SAMPLE_NUMBER];
 8007a8c:	4b96      	ldr	r3, [pc, #600]	; (8007ce8 <SingleTargetXTalkCalibration+0x288>)
 8007a8e:	68db      	ldr	r3, [r3, #12]
	uint8_t xtalk_measmax =
 8007a90:	f887 30ab 	strb.w	r3, [r7, #171]	; 0xab
	/* check if the following are selected
	 * VL53L1_PRESETMODE_AUTONOMOUS,
	 * VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS
	 * VL53L1_PRESETMODE_LITE_RANGING
	 */
	PresetMode = VL53L1DevDataGet(Dev, CurrentParameters.PresetMode);
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	f893 337c 	ldrb.w	r3, [r3, #892]	; 0x37c
 8007a9a:	f887 30aa 	strb.w	r3, [r7, #170]	; 0xaa

	if ((PresetMode != VL53L1_PRESETMODE_AUTONOMOUS) &&
 8007a9e:	f897 30aa 	ldrb.w	r3, [r7, #170]	; 0xaa
 8007aa2:	2b03      	cmp	r3, #3
 8007aa4:	d00b      	beq.n	8007abe <SingleTargetXTalkCalibration+0x5e>
 8007aa6:	f897 30aa 	ldrb.w	r3, [r7, #170]	; 0xaa
 8007aaa:	2b08      	cmp	r3, #8
 8007aac:	d007      	beq.n	8007abe <SingleTargetXTalkCalibration+0x5e>
		(PresetMode != VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS) &&
 8007aae:	f897 30aa 	ldrb.w	r3, [r7, #170]	; 0xaa
 8007ab2:	2b04      	cmp	r3, #4
 8007ab4:	d003      	beq.n	8007abe <SingleTargetXTalkCalibration+0x5e>
		(PresetMode != VL53L1_PRESETMODE_LITE_RANGING)) {
		Status = VL53L1_ERROR_MODE_NOT_SUPPORTED;
 8007ab6:	23f8      	movs	r3, #248	; 0xf8
 8007ab8:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
		goto ENDFUNC;
 8007abc:	e10d      	b.n	8007cda <SingleTargetXTalkCalibration+0x27a>
	}

	/* disable crosstalk calibration */
	Status = VL53L1_disable_xtalk_compensation(Dev);
 8007abe:	6878      	ldr	r0, [r7, #4]
 8007ac0:	f002 fc08 	bl	800a2d4 <VL53L1_disable_xtalk_compensation>
 8007ac4:	4603      	mov	r3, r0
 8007ac6:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7

	if (Status != VL53L1_ERROR_NONE)
 8007aca:	f997 30c7 	ldrsb.w	r3, [r7, #199]	; 0xc7
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	f040 80fc 	bne.w	8007ccc <SingleTargetXTalkCalibration+0x26c>
		goto ENDFUNC;

	Status = VL53L1_StartMeasurement(Dev);
 8007ad4:	6878      	ldr	r0, [r7, #4]
 8007ad6:	f000 fde9 	bl	80086ac <VL53L1_StartMeasurement>
 8007ada:	4603      	mov	r3, r0
 8007adc:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7

	if (Status != VL53L1_ERROR_NONE)
 8007ae0:	f997 30c7 	ldrsb.w	r3, [r7, #199]	; 0xc7
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	f040 80f3 	bne.w	8007cd0 <SingleTargetXTalkCalibration+0x270>
		goto ENDFUNC;

	/* First measurement is never relevant */
	VL53L1_WaitMeasurementDataReady(Dev);
 8007aea:	6878      	ldr	r0, [r7, #4]
 8007aec:	f000 fe95 	bl	800881a <VL53L1_WaitMeasurementDataReady>
	VL53L1_GetRangingMeasurementData(Dev, &RMData);
 8007af0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8007af4:	4619      	mov	r1, r3
 8007af6:	6878      	ldr	r0, [r7, #4]
 8007af8:	f001 f84a 	bl	8008b90 <VL53L1_GetRangingMeasurementData>
	VL53L1_ClearInterruptAndStartMeasurement(Dev);
 8007afc:	6878      	ldr	r0, [r7, #4]
 8007afe:	f000 fe63 	bl	80087c8 <VL53L1_ClearInterruptAndStartMeasurement>

	sum_ranging = 0;
 8007b02:	2300      	movs	r3, #0
 8007b04:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
	sum_spads = 0;
 8007b08:	2300      	movs	r3, #0
 8007b0a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
	sum_signalRate = 0;
 8007b0e:	2300      	movs	r3, #0
 8007b10:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
	total_count = 0;
 8007b14:	2300      	movs	r3, #0
 8007b16:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	for (xtalk_meas = 0; xtalk_meas < xtalk_measmax; xtalk_meas++) {
 8007b1a:	2300      	movs	r3, #0
 8007b1c:	f887 30b3 	strb.w	r3, [r7, #179]	; 0xb3
 8007b20:	e031      	b.n	8007b86 <SingleTargetXTalkCalibration+0x126>
		VL53L1_WaitMeasurementDataReady(Dev);
 8007b22:	6878      	ldr	r0, [r7, #4]
 8007b24:	f000 fe79 	bl	800881a <VL53L1_WaitMeasurementDataReady>
		VL53L1_GetRangingMeasurementData(Dev, &RMData);
 8007b28:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8007b2c:	4619      	mov	r1, r3
 8007b2e:	6878      	ldr	r0, [r7, #4]
 8007b30:	f001 f82e 	bl	8008b90 <VL53L1_GetRangingMeasurementData>
		VL53L1_ClearInterruptAndStartMeasurement(Dev);
 8007b34:	6878      	ldr	r0, [r7, #4]
 8007b36:	f000 fe47 	bl	80087c8 <VL53L1_ClearInterruptAndStartMeasurement>
		if (RMData.RangeStatus == VL53L1_RANGESTATUS_RANGE_VALID) {
 8007b3a:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d11c      	bne.n	8007b7c <SingleTargetXTalkCalibration+0x11c>
			sum_ranging += RMData.RangeMilliMeter;
 8007b42:	f9b7 3088 	ldrsh.w	r3, [r7, #136]	; 0x88
 8007b46:	461a      	mov	r2, r3
 8007b48:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007b4c:	4413      	add	r3, r2
 8007b4e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
			sum_signalRate += RMData.SignalRateRtnMegaCps;
 8007b52:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007b54:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8007b58:	4413      	add	r3, r2
 8007b5a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
			sum_spads += RMData.EffectiveSpadRtnCount / 256;
 8007b5e:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 8007b62:	0a1b      	lsrs	r3, r3, #8
 8007b64:	b29b      	uxth	r3, r3
 8007b66:	461a      	mov	r2, r3
 8007b68:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007b6c:	4413      	add	r3, r2
 8007b6e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
			total_count++;
 8007b72:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007b76:	3301      	adds	r3, #1
 8007b78:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	for (xtalk_meas = 0; xtalk_meas < xtalk_measmax; xtalk_meas++) {
 8007b7c:	f897 30b3 	ldrb.w	r3, [r7, #179]	; 0xb3
 8007b80:	3301      	adds	r3, #1
 8007b82:	f887 30b3 	strb.w	r3, [r7, #179]	; 0xb3
 8007b86:	f897 20b3 	ldrb.w	r2, [r7, #179]	; 0xb3
 8007b8a:	f897 30ab 	ldrb.w	r3, [r7, #171]	; 0xab
 8007b8e:	429a      	cmp	r2, r3
 8007b90:	d3c7      	bcc.n	8007b22 <SingleTargetXTalkCalibration+0xc2>
		}
	}
	Status = VL53L1_StopMeasurement(Dev);
 8007b92:	6878      	ldr	r0, [r7, #4]
 8007b94:	f000 fdf6 	bl	8008784 <VL53L1_StopMeasurement>
 8007b98:	4603      	mov	r3, r0
 8007b9a:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7

	if (total_count > 0) {
 8007b9e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	f000 808e 	beq.w	8007cc4 <SingleTargetXTalkCalibration+0x264>
		/* FixPoint1616_t / uint16_t = FixPoint1616_t */
		xTalkStoredMeanSignalRate = sum_signalRate / total_count;
 8007ba8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8007bac:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007bb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8007bb4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		xTalkStoredMeanRange = (FixPoint1616_t)(sum_ranging << 16);
 8007bb8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007bbc:	041b      	lsls	r3, r3, #16
 8007bbe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
		xTalkStoredMeanRange /= total_count;
 8007bc2:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8007bc6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007bca:	fbb2 f3f3 	udiv	r3, r2, r3
 8007bce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
		xTalkStoredMeanRtnSpads = (FixPoint1616_t)(sum_spads << 16);
 8007bd2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007bd6:	041b      	lsls	r3, r3, #16
 8007bd8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
		xTalkStoredMeanRtnSpads /= total_count;
 8007bdc:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8007be0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007be4:	fbb2 f3f3 	udiv	r3, r2, r3
 8007be8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
		 * 400mm, around 220 SPADs will
		 * be enabled, therefore, any truncation will result in a loss
		 * of accuracy of less than
		 * 0.5%.
		 */
		xTalkStoredMeanRtnSpadsAsInt = (xTalkStoredMeanRtnSpads +
 8007bec:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007bf0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8007bf4:	0c1b      	lsrs	r3, r3, #16
 8007bf6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

		/* Round Cal Distance to Whole Number.
		 * Note that the cal distance is in mm, therefore no resolution
		 * is lost.
		 */
		 xTalkCalDistanceAsInt = ((uint32_t)BDTable[
 8007bfa:	4b3b      	ldr	r3, [pc, #236]	; (8007ce8 <SingleTargetXTalkCalibration+0x288>)
 8007bfc:	689b      	ldr	r3, [r3, #8]
 8007bfe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
			VL53L1_TUNING_SINGLE_TARGET_XTALK_TARGET_DISTANCE_MM]);
		if (xTalkStoredMeanRtnSpadsAsInt == 0 ||
 8007c02:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d00a      	beq.n	8007c20 <SingleTargetXTalkCalibration+0x1c0>
 8007c0a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d006      	beq.n	8007c20 <SingleTargetXTalkCalibration+0x1c0>
		xTalkCalDistanceAsInt == 0 ||
		xTalkStoredMeanRange >= (xTalkCalDistanceAsInt << 16)) {
 8007c12:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007c16:	041b      	lsls	r3, r3, #16
		xTalkCalDistanceAsInt == 0 ||
 8007c18:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8007c1c:	429a      	cmp	r2, r3
 8007c1e:	d303      	bcc.n	8007c28 <SingleTargetXTalkCalibration+0x1c8>
			XTalkCompensationRateMegaCps = 0;
 8007c20:	2300      	movs	r3, #0
 8007c22:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007c26:	e01c      	b.n	8007c62 <SingleTargetXTalkCalibration+0x202>
			/* Apply division by mean spad count early in the
			 * calculation to keep the numbers small.
			 * This ensures we can maintain a 32bit calculation.
			 * Fixed1616 / int := Fixed1616
			 */
			signalXTalkTotalPerSpad = (xTalkStoredMeanSignalRate) /
 8007c28:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8007c2c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007c30:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c34:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
			 * SPAD
			 * Fixed1616 * (Fixed1616 - Fixed1616/int) :=
			 * (2^16 * Fixed1616)
			 */
			signalXTalkTotalPerSpad *= (((uint32_t)1 << 16) -
				(xTalkStoredMeanRange / xTalkCalDistanceAsInt));
 8007c38:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8007c3c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007c40:	fbb2 f3f3 	udiv	r3, r2, r3
			signalXTalkTotalPerSpad *= (((uint32_t)1 << 16) -
 8007c44:	f5c3 3280 	rsb	r2, r3, #65536	; 0x10000
 8007c48:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007c4c:	fb02 f303 	mul.w	r3, r2, r3
 8007c50:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

			/* Round from 2^16 * Fixed1616, to Fixed1616. */
			XTalkCompensationRateMegaCps = (signalXTalkTotalPerSpad
				+ 0x8000) >> 16;
 8007c54:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007c58:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
			XTalkCompensationRateMegaCps = (signalXTalkTotalPerSpad
 8007c5c:	0c1b      	lsrs	r3, r3, #16
 8007c5e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		}


		Status = VL53L1_GetCalibrationData(Dev, &CalibrationData);
 8007c62:	f107 0308 	add.w	r3, r7, #8
 8007c66:	4619      	mov	r1, r3
 8007c68:	6878      	ldr	r0, [r7, #4]
 8007c6a:	f001 fa09 	bl	8009080 <VL53L1_GetCalibrationData>
 8007c6e:	4603      	mov	r3, r0
 8007c70:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7

		if (Status != VL53L1_ERROR_NONE)
 8007c74:	f997 30c7 	ldrsb.w	r3, [r7, #199]	; 0xc7
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d12b      	bne.n	8007cd4 <SingleTargetXTalkCalibration+0x274>
			goto ENDFUNC;

		pC = &CalibrationData.customer;
 8007c7c:	f107 0308 	add.w	r3, r7, #8
 8007c80:	3304      	adds	r3, #4
 8007c82:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

		pC->algo__crosstalk_compensation_plane_offset_kcps =
			(uint32_t)(1000 * ((XTalkCompensationRateMegaCps  +
 8007c86:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007c8a:	3340      	adds	r3, #64	; 0x40
				((uint32_t)1<<6)) >> (16-9)));
 8007c8c:	09db      	lsrs	r3, r3, #7
			(uint32_t)(1000 * ((XTalkCompensationRateMegaCps  +
 8007c8e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007c92:	fb03 f202 	mul.w	r2, r3, r2
		pC->algo__crosstalk_compensation_plane_offset_kcps =
 8007c96:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007c9a:	60da      	str	r2, [r3, #12]

		Status = VL53L1_SetCalibrationData(Dev, &CalibrationData);
 8007c9c:	f107 0308 	add.w	r3, r7, #8
 8007ca0:	4619      	mov	r1, r3
 8007ca2:	6878      	ldr	r0, [r7, #4]
 8007ca4:	f001 f962 	bl	8008f6c <VL53L1_SetCalibrationData>
 8007ca8:	4603      	mov	r3, r0
 8007caa:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7

		if (Status != VL53L1_ERROR_NONE)
 8007cae:	f997 30c7 	ldrsb.w	r3, [r7, #199]	; 0xc7
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d110      	bne.n	8007cd8 <SingleTargetXTalkCalibration+0x278>
			goto ENDFUNC;

		Status = VL53L1_enable_xtalk_compensation(Dev);
 8007cb6:	6878      	ldr	r0, [r7, #4]
 8007cb8:	f002 fab4 	bl	800a224 <VL53L1_enable_xtalk_compensation>
 8007cbc:	4603      	mov	r3, r0
 8007cbe:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
 8007cc2:	e00a      	b.n	8007cda <SingleTargetXTalkCalibration+0x27a>

	} else
		/* return error because no valid data found */
		Status = VL53L1_ERROR_XTALK_EXTRACTION_NO_SAMPLE_FAIL;
 8007cc4:	23ea      	movs	r3, #234	; 0xea
 8007cc6:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
 8007cca:	e006      	b.n	8007cda <SingleTargetXTalkCalibration+0x27a>
		goto ENDFUNC;
 8007ccc:	bf00      	nop
 8007cce:	e004      	b.n	8007cda <SingleTargetXTalkCalibration+0x27a>
		goto ENDFUNC;
 8007cd0:	bf00      	nop
 8007cd2:	e002      	b.n	8007cda <SingleTargetXTalkCalibration+0x27a>
			goto ENDFUNC;
 8007cd4:	bf00      	nop
 8007cd6:	e000      	b.n	8007cda <SingleTargetXTalkCalibration+0x27a>
			goto ENDFUNC;
 8007cd8:	bf00      	nop

ENDFUNC:
	LOG_FUNCTION_END(Status);
	return Status;
 8007cda:	f997 30c7 	ldrsb.w	r3, [r7, #199]	; 0xc7

}
 8007cde:	4618      	mov	r0, r3
 8007ce0:	37c8      	adds	r7, #200	; 0xc8
 8007ce2:	46bd      	mov	sp, r7
 8007ce4:	bd80      	pop	{r7, pc}
 8007ce6:	bf00      	nop
 8007ce8:	20000020 	.word	0x20000020

08007cec <VL53L1_GetRangeStatusString>:
	return Status;
}

VL53L1_Error VL53L1_GetRangeStatusString(uint8_t RangeStatus,
	char *pRangeStatusString)
{
 8007cec:	b580      	push	{r7, lr}
 8007cee:	b084      	sub	sp, #16
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	4603      	mov	r3, r0
 8007cf4:	6039      	str	r1, [r7, #0]
 8007cf6:	71fb      	strb	r3, [r7, #7]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8007cf8:	2300      	movs	r3, #0
 8007cfa:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	Status = VL53L1_get_range_status_string(RangeStatus,
 8007cfc:	79fb      	ldrb	r3, [r7, #7]
 8007cfe:	6839      	ldr	r1, [r7, #0]
 8007d00:	4618      	mov	r0, r3
 8007d02:	f003 ff71 	bl	800bbe8 <VL53L1_get_range_status_string>
 8007d06:	4603      	mov	r3, r0
 8007d08:	73fb      	strb	r3, [r7, #15]
		pRangeStatusString);

	LOG_FUNCTION_END(Status);
	return Status;
 8007d0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007d0e:	4618      	mov	r0, r3
 8007d10:	3710      	adds	r7, #16
 8007d12:	46bd      	mov	sp, r7
 8007d14:	bd80      	pop	{r7, pc}

08007d16 <VL53L1_GetPalErrorString>:

VL53L1_Error VL53L1_GetPalErrorString(VL53L1_Error PalErrorCode,
	char *pPalErrorString)
{
 8007d16:	b580      	push	{r7, lr}
 8007d18:	b084      	sub	sp, #16
 8007d1a:	af00      	add	r7, sp, #0
 8007d1c:	4603      	mov	r3, r0
 8007d1e:	6039      	str	r1, [r7, #0]
 8007d20:	71fb      	strb	r3, [r7, #7]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8007d22:	2300      	movs	r3, #0
 8007d24:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	Status = VL53L1_get_pal_error_string(PalErrorCode, pPalErrorString);
 8007d26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007d2a:	6839      	ldr	r1, [r7, #0]
 8007d2c:	4618      	mov	r0, r3
 8007d2e:	f004 ffc7 	bl	800ccc0 <VL53L1_get_pal_error_string>
 8007d32:	4603      	mov	r3, r0
 8007d34:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8007d36:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007d3a:	4618      	mov	r0, r3
 8007d3c:	3710      	adds	r7, #16
 8007d3e:	46bd      	mov	sp, r7
 8007d40:	bd80      	pop	{r7, pc}

08007d42 <VL53L1_DataInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L1_Error VL53L1_DataInit(VL53L1_DEV Dev)
{
 8007d42:	b580      	push	{r7, lr}
 8007d44:	b084      	sub	sp, #16
 8007d46:	af00      	add	r7, sp, #0
 8007d48:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8007d4a:	2300      	movs	r3, #0
 8007d4c:	73fb      	strb	r3, [r7, #15]
		Status = VL53L1_WrByte(Dev, VL53L1_PAD_I2C_HV__EXTSUP_CONFIG,
				i);
	}
#endif

	if (Status == VL53L1_ERROR_NONE)
 8007d4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d105      	bne.n	8007d62 <VL53L1_DataInit+0x20>
		Status = VL53L1_data_init(Dev, 1);
 8007d56:	2101      	movs	r1, #1
 8007d58:	6878      	ldr	r0, [r7, #4]
 8007d5a:	f001 fcb1 	bl	80096c0 <VL53L1_data_init>
 8007d5e:	4603      	mov	r3, r0
 8007d60:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L1_ERROR_NONE)
 8007d62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d103      	bne.n	8007d72 <VL53L1_DataInit+0x30>
		VL53L1DevDataSet(Dev, PalState, VL53L1_STATE_WAIT_STATICINIT);
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	2201      	movs	r2, #1
 8007d6e:	f883 2378 	strb.w	r2, [r3, #888]	; 0x378

	/* Enable all check */
	for (i = 0; i < VL53L1_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8007d72:	2300      	movs	r3, #0
 8007d74:	73bb      	strb	r3, [r7, #14]
 8007d76:	e012      	b.n	8007d9e <VL53L1_DataInit+0x5c>
		if (Status == VL53L1_ERROR_NONE)
 8007d78:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d112      	bne.n	8007da6 <VL53L1_DataInit+0x64>
			Status |= VL53L1_SetLimitCheckEnable(Dev, i, 1);
 8007d80:	7bbb      	ldrb	r3, [r7, #14]
 8007d82:	b29b      	uxth	r3, r3
 8007d84:	2201      	movs	r2, #1
 8007d86:	4619      	mov	r1, r3
 8007d88:	6878      	ldr	r0, [r7, #4]
 8007d8a:	f000 fbbe 	bl	800850a <VL53L1_SetLimitCheckEnable>
 8007d8e:	4603      	mov	r3, r0
 8007d90:	461a      	mov	r2, r3
 8007d92:	7bfb      	ldrb	r3, [r7, #15]
 8007d94:	4313      	orrs	r3, r2
 8007d96:	73fb      	strb	r3, [r7, #15]
	for (i = 0; i < VL53L1_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8007d98:	7bbb      	ldrb	r3, [r7, #14]
 8007d9a:	3301      	adds	r3, #1
 8007d9c:	73bb      	strb	r3, [r7, #14]
 8007d9e:	7bbb      	ldrb	r3, [r7, #14]
 8007da0:	2b01      	cmp	r3, #1
 8007da2:	d9e9      	bls.n	8007d78 <VL53L1_DataInit+0x36>
 8007da4:	e000      	b.n	8007da8 <VL53L1_DataInit+0x66>
		else
			break;
 8007da6:	bf00      	nop

	}


	LOG_FUNCTION_END(Status);
	return Status;
 8007da8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007dac:	4618      	mov	r0, r3
 8007dae:	3710      	adds	r7, #16
 8007db0:	46bd      	mov	sp, r7
 8007db2:	bd80      	pop	{r7, pc}

08007db4 <VL53L1_StaticInit>:


VL53L1_Error VL53L1_StaticInit(VL53L1_DEV Dev)
{
 8007db4:	b580      	push	{r7, lr}
 8007db6:	b084      	sub	sp, #16
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8007dbc:	2300      	movs	r3, #0
 8007dbe:	73fb      	strb	r3, [r7, #15]
	uint8_t  measurement_mode;

	LOG_FUNCTION_START("");

	VL53L1DevDataSet(Dev, PalState, VL53L1_STATE_IDLE);
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	2203      	movs	r2, #3
 8007dc4:	f883 2378 	strb.w	r2, [r3, #888]	; 0x378

	measurement_mode  = VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
 8007dc8:	2320      	movs	r3, #32
 8007dca:	73bb      	strb	r3, [r7, #14]
	VL53L1DevDataSet(Dev, LLData.measurement_mode, measurement_mode);
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	7bba      	ldrb	r2, [r7, #14]
 8007dd0:	709a      	strb	r2, [r3, #2]

	/* ticket 472728 fix */
	Status = VL53L1_SetPresetMode(Dev,
 8007dd2:	2108      	movs	r1, #8
 8007dd4:	6878      	ldr	r0, [r7, #4]
 8007dd6:	f000 f8e4 	bl	8007fa2 <VL53L1_SetPresetMode>
 8007dda:	4603      	mov	r3, r0
 8007ddc:	73fb      	strb	r3, [r7, #15]
			VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS);
	VL53L1DevDataSet(Dev, CurrentParameters.PresetMode,
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	2208      	movs	r2, #8
 8007de2:	f883 237c 	strb.w	r2, [r3, #892]	; 0x37c
			VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS);
	/* end of ticket 472728 fix */

	LOG_FUNCTION_END(Status);
	return Status;
 8007de6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007dea:	4618      	mov	r0, r3
 8007dec:	3710      	adds	r7, #16
 8007dee:	46bd      	mov	sp, r7
 8007df0:	bd80      	pop	{r7, pc}
	...

08007df4 <ComputeDevicePresetMode>:
/* Group PAL Parameters Functions */
static VL53L1_Error ComputeDevicePresetMode(
		VL53L1_PresetModes PresetMode,
		VL53L1_DistanceModes DistanceMode,
		VL53L1_DevicePresetModes *pDevicePresetMode)
{
 8007df4:	b480      	push	{r7}
 8007df6:	b087      	sub	sp, #28
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	4603      	mov	r3, r0
 8007dfc:	603a      	str	r2, [r7, #0]
 8007dfe:	71fb      	strb	r3, [r7, #7]
 8007e00:	460b      	mov	r3, r1
 8007e02:	71bb      	strb	r3, [r7, #6]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8007e04:	2300      	movs	r3, #0
 8007e06:	75fb      	strb	r3, [r7, #23]

	uint8_t DistIdx;
	VL53L1_DevicePresetModes LightModes[3] = {
 8007e08:	4a2b      	ldr	r2, [pc, #172]	; (8007eb8 <ComputeDevicePresetMode+0xc4>)
 8007e0a:	f107 0310 	add.w	r3, r7, #16
 8007e0e:	6812      	ldr	r2, [r2, #0]
 8007e10:	4611      	mov	r1, r2
 8007e12:	8019      	strh	r1, [r3, #0]
 8007e14:	3302      	adds	r3, #2
 8007e16:	0c12      	lsrs	r2, r2, #16
 8007e18:	701a      	strb	r2, [r3, #0]
		VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_SHORT_RANGE,
		VL53L1_DEVICEPRESETMODE_STANDARD_RANGING,
		VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_LONG_RANGE};


	VL53L1_DevicePresetModes TimedModes[3] = {
 8007e1a:	4a28      	ldr	r2, [pc, #160]	; (8007ebc <ComputeDevicePresetMode+0xc8>)
 8007e1c:	f107 030c 	add.w	r3, r7, #12
 8007e20:	6812      	ldr	r2, [r2, #0]
 8007e22:	4611      	mov	r1, r2
 8007e24:	8019      	strh	r1, [r3, #0]
 8007e26:	3302      	adds	r3, #2
 8007e28:	0c12      	lsrs	r2, r2, #16
 8007e2a:	701a      	strb	r2, [r3, #0]
		VL53L1_DEVICEPRESETMODE_TIMED_RANGING_SHORT_RANGE,
		VL53L1_DEVICEPRESETMODE_TIMED_RANGING,
		VL53L1_DEVICEPRESETMODE_TIMED_RANGING_LONG_RANGE};

	VL53L1_DevicePresetModes LowPowerTimedModes[3] = {
 8007e2c:	4a24      	ldr	r2, [pc, #144]	; (8007ec0 <ComputeDevicePresetMode+0xcc>)
 8007e2e:	f107 0308 	add.w	r3, r7, #8
 8007e32:	6812      	ldr	r2, [r2, #0]
 8007e34:	4611      	mov	r1, r2
 8007e36:	8019      	strh	r1, [r3, #0]
 8007e38:	3302      	adds	r3, #2
 8007e3a:	0c12      	lsrs	r2, r2, #16
 8007e3c:	701a      	strb	r2, [r3, #0]
		VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_SHORT_RANGE,
		VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_MEDIUM_RANGE,
		VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_LONG_RANGE};

	*pDevicePresetMode = VL53L1_DEVICEPRESETMODE_STANDARD_RANGING;
 8007e3e:	683b      	ldr	r3, [r7, #0]
 8007e40:	2201      	movs	r2, #1
 8007e42:	701a      	strb	r2, [r3, #0]

	switch (DistanceMode) {
 8007e44:	79bb      	ldrb	r3, [r7, #6]
 8007e46:	2b01      	cmp	r3, #1
 8007e48:	d002      	beq.n	8007e50 <ComputeDevicePresetMode+0x5c>
 8007e4a:	2b02      	cmp	r3, #2
 8007e4c:	d003      	beq.n	8007e56 <ComputeDevicePresetMode+0x62>
 8007e4e:	e005      	b.n	8007e5c <ComputeDevicePresetMode+0x68>
	case VL53L1_DISTANCEMODE_SHORT:
		DistIdx = 0;
 8007e50:	2300      	movs	r3, #0
 8007e52:	75bb      	strb	r3, [r7, #22]
		break;
 8007e54:	e004      	b.n	8007e60 <ComputeDevicePresetMode+0x6c>
	case VL53L1_DISTANCEMODE_MEDIUM:
		DistIdx = 1;
 8007e56:	2301      	movs	r3, #1
 8007e58:	75bb      	strb	r3, [r7, #22]
		break;
 8007e5a:	e001      	b.n	8007e60 <ComputeDevicePresetMode+0x6c>
	default:
		DistIdx = 2;
 8007e5c:	2302      	movs	r3, #2
 8007e5e:	75bb      	strb	r3, [r7, #22]
	}

	switch (PresetMode) {
 8007e60:	79fb      	ldrb	r3, [r7, #7]
 8007e62:	2b08      	cmp	r3, #8
 8007e64:	d015      	beq.n	8007e92 <ComputeDevicePresetMode+0x9e>
 8007e66:	2b08      	cmp	r3, #8
 8007e68:	dc1b      	bgt.n	8007ea2 <ComputeDevicePresetMode+0xae>
 8007e6a:	2b03      	cmp	r3, #3
 8007e6c:	d009      	beq.n	8007e82 <ComputeDevicePresetMode+0x8e>
 8007e6e:	2b04      	cmp	r3, #4
 8007e70:	d117      	bne.n	8007ea2 <ComputeDevicePresetMode+0xae>
	case VL53L1_PRESETMODE_LITE_RANGING:
		*pDevicePresetMode = LightModes[DistIdx];
 8007e72:	7dbb      	ldrb	r3, [r7, #22]
 8007e74:	3318      	adds	r3, #24
 8007e76:	443b      	add	r3, r7
 8007e78:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8007e7c:	683b      	ldr	r3, [r7, #0]
 8007e7e:	701a      	strb	r2, [r3, #0]
		break;
 8007e80:	e011      	b.n	8007ea6 <ComputeDevicePresetMode+0xb2>


	case VL53L1_PRESETMODE_AUTONOMOUS:
		*pDevicePresetMode = TimedModes[DistIdx];
 8007e82:	7dbb      	ldrb	r3, [r7, #22]
 8007e84:	3318      	adds	r3, #24
 8007e86:	443b      	add	r3, r7
 8007e88:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 8007e8c:	683b      	ldr	r3, [r7, #0]
 8007e8e:	701a      	strb	r2, [r3, #0]
		break;
 8007e90:	e009      	b.n	8007ea6 <ComputeDevicePresetMode+0xb2>

	case VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS:
		*pDevicePresetMode = LowPowerTimedModes[DistIdx];
 8007e92:	7dbb      	ldrb	r3, [r7, #22]
 8007e94:	3318      	adds	r3, #24
 8007e96:	443b      	add	r3, r7
 8007e98:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 8007e9c:	683b      	ldr	r3, [r7, #0]
 8007e9e:	701a      	strb	r2, [r3, #0]
		break;
 8007ea0:	e001      	b.n	8007ea6 <ComputeDevicePresetMode+0xb2>

	default:
		/* Unsupported mode */
		Status = VL53L1_ERROR_MODE_NOT_SUPPORTED;
 8007ea2:	23f8      	movs	r3, #248	; 0xf8
 8007ea4:	75fb      	strb	r3, [r7, #23]
	}

	return Status;
 8007ea6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007eaa:	4618      	mov	r0, r3
 8007eac:	371c      	adds	r7, #28
 8007eae:	46bd      	mov	sp, r7
 8007eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb4:	4770      	bx	lr
 8007eb6:	bf00      	nop
 8007eb8:	0801321c 	.word	0x0801321c
 8007ebc:	08013220 	.word	0x08013220
 8007ec0:	08013224 	.word	0x08013224

08007ec4 <SetPresetMode>:

static VL53L1_Error SetPresetMode(VL53L1_DEV Dev,
		VL53L1_PresetModes PresetMode,
		VL53L1_DistanceModes DistanceMode,
		uint32_t inter_measurement_period_ms)
{
 8007ec4:	b5b0      	push	{r4, r5, r7, lr}
 8007ec6:	b08e      	sub	sp, #56	; 0x38
 8007ec8:	af04      	add	r7, sp, #16
 8007eca:	60f8      	str	r0, [r7, #12]
 8007ecc:	607b      	str	r3, [r7, #4]
 8007ece:	460b      	mov	r3, r1
 8007ed0:	72fb      	strb	r3, [r7, #11]
 8007ed2:	4613      	mov	r3, r2
 8007ed4:	72bb      	strb	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8007ed6:	2300      	movs	r3, #0
 8007ed8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53L1_DevicePresetModes   device_preset_mode;
	uint8_t measurement_mode;
	uint16_t dss_config__target_total_rate_mcps = 0;
 8007edc:	2300      	movs	r3, #0
 8007ede:	847b      	strh	r3, [r7, #34]	; 0x22
	uint32_t phasecal_config_timeout_us = 0;
 8007ee0:	2300      	movs	r3, #0
 8007ee2:	61fb      	str	r3, [r7, #28]
	uint32_t mm_config_timeout_us = 0;
 8007ee4:	2300      	movs	r3, #0
 8007ee6:	61bb      	str	r3, [r7, #24]
	uint32_t lld_range_config_timeout_us = 0;
 8007ee8:	2300      	movs	r3, #0
 8007eea:	617b      	str	r3, [r7, #20]

	LOG_FUNCTION_START("%d", (int)PresetMode);

	if ((PresetMode == VL53L1_PRESETMODE_AUTONOMOUS) ||
 8007eec:	7afb      	ldrb	r3, [r7, #11]
 8007eee:	2b03      	cmp	r3, #3
 8007ef0:	d002      	beq.n	8007ef8 <SetPresetMode+0x34>
 8007ef2:	7afb      	ldrb	r3, [r7, #11]
 8007ef4:	2b08      	cmp	r3, #8
 8007ef6:	d103      	bne.n	8007f00 <SetPresetMode+0x3c>
		(PresetMode == VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS))
		measurement_mode  = VL53L1_DEVICEMEASUREMENTMODE_TIMED;
 8007ef8:	2340      	movs	r3, #64	; 0x40
 8007efa:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007efe:	e002      	b.n	8007f06 <SetPresetMode+0x42>
	else
		measurement_mode  = VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
 8007f00:	2320      	movs	r3, #32
 8007f02:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26


	Status = ComputeDevicePresetMode(PresetMode, DistanceMode,
 8007f06:	f107 0225 	add.w	r2, r7, #37	; 0x25
 8007f0a:	7ab9      	ldrb	r1, [r7, #10]
 8007f0c:	7afb      	ldrb	r3, [r7, #11]
 8007f0e:	4618      	mov	r0, r3
 8007f10:	f7ff ff70 	bl	8007df4 <ComputeDevicePresetMode>
 8007f14:	4603      	mov	r3, r0
 8007f16:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			&device_preset_mode);

	if (Status == VL53L1_ERROR_NONE)
 8007f1a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d112      	bne.n	8007f48 <SetPresetMode+0x84>
		Status =  VL53L1_get_preset_mode_timing_cfg(Dev,
 8007f22:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 8007f26:	f107 001c 	add.w	r0, r7, #28
 8007f2a:	f107 0222 	add.w	r2, r7, #34	; 0x22
 8007f2e:	f107 0314 	add.w	r3, r7, #20
 8007f32:	9301      	str	r3, [sp, #4]
 8007f34:	f107 0318 	add.w	r3, r7, #24
 8007f38:	9300      	str	r3, [sp, #0]
 8007f3a:	4603      	mov	r3, r0
 8007f3c:	68f8      	ldr	r0, [r7, #12]
 8007f3e:	f001 ff51 	bl	8009de4 <VL53L1_get_preset_mode_timing_cfg>
 8007f42:	4603      	mov	r3, r0
 8007f44:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				&dss_config__target_total_rate_mcps,
				&phasecal_config_timeout_us,
				&mm_config_timeout_us,
				&lld_range_config_timeout_us);

	if (Status == VL53L1_ERROR_NONE)
 8007f48:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d112      	bne.n	8007f76 <SetPresetMode+0xb2>
		Status = VL53L1_set_preset_mode(
 8007f50:	f897 0025 	ldrb.w	r0, [r7, #37]	; 0x25
 8007f54:	8c7c      	ldrh	r4, [r7, #34]	; 0x22
 8007f56:	69fd      	ldr	r5, [r7, #28]
 8007f58:	69bb      	ldr	r3, [r7, #24]
 8007f5a:	697a      	ldr	r2, [r7, #20]
 8007f5c:	6879      	ldr	r1, [r7, #4]
 8007f5e:	9102      	str	r1, [sp, #8]
 8007f60:	9201      	str	r2, [sp, #4]
 8007f62:	9300      	str	r3, [sp, #0]
 8007f64:	462b      	mov	r3, r5
 8007f66:	4622      	mov	r2, r4
 8007f68:	4601      	mov	r1, r0
 8007f6a:	68f8      	ldr	r0, [r7, #12]
 8007f6c:	f001 ffe4 	bl	8009f38 <VL53L1_set_preset_mode>
 8007f70:	4603      	mov	r3, r0
 8007f72:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				phasecal_config_timeout_us,
				mm_config_timeout_us,
				lld_range_config_timeout_us,
				inter_measurement_period_ms);

	if (Status == VL53L1_ERROR_NONE)
 8007f76:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d103      	bne.n	8007f86 <SetPresetMode+0xc2>
		VL53L1DevDataSet(Dev, LLData.measurement_mode,
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007f84:	709a      	strb	r2, [r3, #2]
				measurement_mode);

	if (Status == VL53L1_ERROR_NONE)
 8007f86:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d103      	bne.n	8007f96 <SetPresetMode+0xd2>
		VL53L1DevDataSet(Dev, CurrentParameters.PresetMode, PresetMode);
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	7afa      	ldrb	r2, [r7, #11]
 8007f92:	f883 237c 	strb.w	r2, [r3, #892]	; 0x37c

	LOG_FUNCTION_END(Status);
	return Status;
 8007f96:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8007f9a:	4618      	mov	r0, r3
 8007f9c:	3728      	adds	r7, #40	; 0x28
 8007f9e:	46bd      	mov	sp, r7
 8007fa0:	bdb0      	pop	{r4, r5, r7, pc}

08007fa2 <VL53L1_SetPresetMode>:
	return Status;
}


VL53L1_Error VL53L1_SetPresetMode(VL53L1_DEV Dev, VL53L1_PresetModes PresetMode)
{
 8007fa2:	b580      	push	{r7, lr}
 8007fa4:	b084      	sub	sp, #16
 8007fa6:	af00      	add	r7, sp, #0
 8007fa8:	6078      	str	r0, [r7, #4]
 8007faa:	460b      	mov	r3, r1
 8007fac:	70fb      	strb	r3, [r7, #3]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8007fae:	2300      	movs	r3, #0
 8007fb0:	73fb      	strb	r3, [r7, #15]
	VL53L1_DistanceModes DistanceMode = VL53L1_DISTANCEMODE_LONG;
 8007fb2:	2303      	movs	r3, #3
 8007fb4:	73bb      	strb	r3, [r7, #14]

	LOG_FUNCTION_START("%d", (int)PresetMode);

	/* fix for bug 495690 */
	Status = VL53L1_low_power_auto_data_init(Dev);
 8007fb6:	6878      	ldr	r0, [r7, #4]
 8007fb8:	f004 fd60 	bl	800ca7c <VL53L1_low_power_auto_data_init>
 8007fbc:	4603      	mov	r3, r0
 8007fbe:	73fb      	strb	r3, [r7, #15]

	Status = SetPresetMode(Dev,
 8007fc0:	7bba      	ldrb	r2, [r7, #14]
 8007fc2:	78f9      	ldrb	r1, [r7, #3]
 8007fc4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007fc8:	6878      	ldr	r0, [r7, #4]
 8007fca:	f7ff ff7b 	bl	8007ec4 <SetPresetMode>
 8007fce:	4603      	mov	r3, r0
 8007fd0:	73fb      	strb	r3, [r7, #15]
			PresetMode,
			DistanceMode,
			1000);

	if (Status == VL53L1_ERROR_NONE) {
 8007fd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d117      	bne.n	800800a <VL53L1_SetPresetMode+0x68>
		if ((PresetMode == VL53L1_PRESETMODE_LITE_RANGING) ||
 8007fda:	78fb      	ldrb	r3, [r7, #3]
 8007fdc:	2b04      	cmp	r3, #4
 8007fde:	d005      	beq.n	8007fec <VL53L1_SetPresetMode+0x4a>
 8007fe0:	78fb      	ldrb	r3, [r7, #3]
 8007fe2:	2b03      	cmp	r3, #3
 8007fe4:	d002      	beq.n	8007fec <VL53L1_SetPresetMode+0x4a>
			(PresetMode == VL53L1_PRESETMODE_AUTONOMOUS) ||
 8007fe6:	78fb      	ldrb	r3, [r7, #3]
 8007fe8:	2b08      	cmp	r3, #8
 8007fea:	d107      	bne.n	8007ffc <VL53L1_SetPresetMode+0x5a>
			(PresetMode == VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS))
			Status = VL53L1_SetMeasurementTimingBudgetMicroSeconds(
 8007fec:	f24a 0128 	movw	r1, #41000	; 0xa028
 8007ff0:	6878      	ldr	r0, [r7, #4]
 8007ff2:	f000 f891 	bl	8008118 <VL53L1_SetMeasurementTimingBudgetMicroSeconds>
 8007ff6:	4603      	mov	r3, r0
 8007ff8:	73fb      	strb	r3, [r7, #15]
 8007ffa:	e006      	b.n	800800a <VL53L1_SetPresetMode+0x68>
				Dev, 41000);
		else
			/* Set default timing budget to 30Hz (33.33 ms)*/
			Status = VL53L1_SetMeasurementTimingBudgetMicroSeconds(
 8007ffc:	f248 2135 	movw	r1, #33333	; 0x8235
 8008000:	6878      	ldr	r0, [r7, #4]
 8008002:	f000 f889 	bl	8008118 <VL53L1_SetMeasurementTimingBudgetMicroSeconds>
 8008006:	4603      	mov	r3, r0
 8008008:	73fb      	strb	r3, [r7, #15]
				Dev, 33333);
	}

	if (Status == VL53L1_ERROR_NONE) {
 800800a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800800e:	2b00      	cmp	r3, #0
 8008010:	d106      	bne.n	8008020 <VL53L1_SetPresetMode+0x7e>
		/* Set default intermeasurement period to 1000 ms */
		Status = VL53L1_SetInterMeasurementPeriodMilliSeconds(Dev,
 8008012:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8008016:	6878      	ldr	r0, [r7, #4]
 8008018:	f000 fa0a 	bl	8008430 <VL53L1_SetInterMeasurementPeriodMilliSeconds>
 800801c:	4603      	mov	r3, r0
 800801e:	73fb      	strb	r3, [r7, #15]
				1000);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8008020:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008024:	4618      	mov	r0, r3
 8008026:	3710      	adds	r7, #16
 8008028:	46bd      	mov	sp, r7
 800802a:	bd80      	pop	{r7, pc}

0800802c <VL53L1_SetDistanceMode>:
	return Status;
}

VL53L1_Error VL53L1_SetDistanceMode(VL53L1_DEV Dev,
		VL53L1_DistanceModes DistanceMode)
{
 800802c:	b580      	push	{r7, lr}
 800802e:	b088      	sub	sp, #32
 8008030:	af00      	add	r7, sp, #0
 8008032:	6078      	str	r0, [r7, #4]
 8008034:	460b      	mov	r3, r1
 8008036:	70fb      	strb	r3, [r7, #3]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8008038:	2300      	movs	r3, #0
 800803a:	77fb      	strb	r3, [r7, #31]
	VL53L1_PresetModes PresetMode;
	uint32_t inter_measurement_period_ms;
	uint32_t TimingBudget = 0;
 800803c:	2300      	movs	r3, #0
 800803e:	617b      	str	r3, [r7, #20]
	uint32_t MmTimeoutUs = 0;
 8008040:	2300      	movs	r3, #0
 8008042:	613b      	str	r3, [r7, #16]
	uint32_t PhaseCalTimeoutUs = 0;
 8008044:	2300      	movs	r3, #0
 8008046:	60fb      	str	r3, [r7, #12]
	VL53L1_user_zone_t user_zone;

	LOG_FUNCTION_START("%d", (int)DistanceMode);

	PresetMode = VL53L1DevDataGet(Dev, CurrentParameters.PresetMode);
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	f893 337c 	ldrb.w	r3, [r3, #892]	; 0x37c
 800804e:	77bb      	strb	r3, [r7, #30]
	/* when the distance mode is valid:
	 * Manual Mode: all modes
	 * AUTO AUTO_LITE : LITE_RANGING, RANGING
	 */

	if ((DistanceMode != VL53L1_DISTANCEMODE_SHORT) &&
 8008050:	78fb      	ldrb	r3, [r7, #3]
 8008052:	2b01      	cmp	r3, #1
 8008054:	d008      	beq.n	8008068 <VL53L1_SetDistanceMode+0x3c>
 8008056:	78fb      	ldrb	r3, [r7, #3]
 8008058:	2b02      	cmp	r3, #2
 800805a:	d005      	beq.n	8008068 <VL53L1_SetDistanceMode+0x3c>
		(DistanceMode != VL53L1_DISTANCEMODE_MEDIUM) &&
 800805c:	78fb      	ldrb	r3, [r7, #3]
 800805e:	2b03      	cmp	r3, #3
 8008060:	d002      	beq.n	8008068 <VL53L1_SetDistanceMode+0x3c>
		(DistanceMode != VL53L1_DISTANCEMODE_LONG))
		return VL53L1_ERROR_INVALID_PARAMS;
 8008062:	f06f 0303 	mvn.w	r3, #3
 8008066:	e052      	b.n	800810e <VL53L1_SetDistanceMode+0xe2>

	if (Status == VL53L1_ERROR_NONE)
 8008068:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800806c:	2b00      	cmp	r3, #0
 800806e:	d107      	bne.n	8008080 <VL53L1_SetDistanceMode+0x54>
		Status = VL53L1_get_user_zone(Dev, &user_zone);
 8008070:	f107 0308 	add.w	r3, r7, #8
 8008074:	4619      	mov	r1, r3
 8008076:	6878      	ldr	r0, [r7, #4]
 8008078:	f001 fe5e 	bl	8009d38 <VL53L1_get_user_zone>
 800807c:	4603      	mov	r3, r0
 800807e:	77fb      	strb	r3, [r7, #31]

	inter_measurement_period_ms =  VL53L1DevDataGet(Dev,
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	695b      	ldr	r3, [r3, #20]
 8008084:	61bb      	str	r3, [r7, #24]
				LLData.inter_measurement_period_ms);

	if (Status == VL53L1_ERROR_NONE)
 8008086:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800808a:	2b00      	cmp	r3, #0
 800808c:	d10a      	bne.n	80080a4 <VL53L1_SetDistanceMode+0x78>
		Status = VL53L1_get_timeouts_us(Dev, &PhaseCalTimeoutUs,
 800808e:	f107 0314 	add.w	r3, r7, #20
 8008092:	f107 0210 	add.w	r2, r7, #16
 8008096:	f107 010c 	add.w	r1, r7, #12
 800809a:	6878      	ldr	r0, [r7, #4]
 800809c:	f001 fd87 	bl	8009bae <VL53L1_get_timeouts_us>
 80080a0:	4603      	mov	r3, r0
 80080a2:	77fb      	strb	r3, [r7, #31]
			&MmTimeoutUs, &TimingBudget);

	if (Status == VL53L1_ERROR_NONE)
 80080a4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d107      	bne.n	80080bc <VL53L1_SetDistanceMode+0x90>
		Status = SetPresetMode(Dev,
 80080ac:	78fa      	ldrb	r2, [r7, #3]
 80080ae:	7fb9      	ldrb	r1, [r7, #30]
 80080b0:	69bb      	ldr	r3, [r7, #24]
 80080b2:	6878      	ldr	r0, [r7, #4]
 80080b4:	f7ff ff06 	bl	8007ec4 <SetPresetMode>
 80080b8:	4603      	mov	r3, r0
 80080ba:	77fb      	strb	r3, [r7, #31]
				PresetMode,
				DistanceMode,
				inter_measurement_period_ms);

	if (Status == VL53L1_ERROR_NONE) {
 80080bc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d103      	bne.n	80080cc <VL53L1_SetDistanceMode+0xa0>
		VL53L1DevDataSet(Dev, CurrentParameters.DistanceMode,
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	78fa      	ldrb	r2, [r7, #3]
 80080c8:	f883 237d 	strb.w	r2, [r3, #893]	; 0x37d
				DistanceMode);
	}

	if (Status == VL53L1_ERROR_NONE) {
 80080cc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d10e      	bne.n	80080f2 <VL53L1_SetDistanceMode+0xc6>
		Status = VL53L1_set_timeouts_us(Dev, PhaseCalTimeoutUs,
 80080d4:	68f9      	ldr	r1, [r7, #12]
 80080d6:	693a      	ldr	r2, [r7, #16]
 80080d8:	697b      	ldr	r3, [r7, #20]
 80080da:	6878      	ldr	r0, [r7, #4]
 80080dc:	f001 fd2f 	bl	8009b3e <VL53L1_set_timeouts_us>
 80080e0:	4603      	mov	r3, r0
 80080e2:	77fb      	strb	r3, [r7, #31]
			MmTimeoutUs, TimingBudget);

		if (Status == VL53L1_ERROR_NONE)
 80080e4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d102      	bne.n	80080f2 <VL53L1_SetDistanceMode+0xc6>
			VL53L1DevDataSet(Dev, LLData.range_config_timeout_us,
 80080ec:	697a      	ldr	r2, [r7, #20]
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	611a      	str	r2, [r3, #16]
				TimingBudget);
	}

	if (Status == VL53L1_ERROR_NONE)
 80080f2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d107      	bne.n	800810a <VL53L1_SetDistanceMode+0xde>
		Status = VL53L1_set_user_zone(Dev, &user_zone);
 80080fa:	f107 0308 	add.w	r3, r7, #8
 80080fe:	4619      	mov	r1, r3
 8008100:	6878      	ldr	r0, [r7, #4]
 8008102:	f001 fdf6 	bl	8009cf2 <VL53L1_set_user_zone>
 8008106:	4603      	mov	r3, r0
 8008108:	77fb      	strb	r3, [r7, #31]

	LOG_FUNCTION_END(Status);
	return Status;
 800810a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800810e:	4618      	mov	r0, r3
 8008110:	3720      	adds	r7, #32
 8008112:	46bd      	mov	sp, r7
 8008114:	bd80      	pop	{r7, pc}
	...

08008118 <VL53L1_SetMeasurementTimingBudgetMicroSeconds>:



VL53L1_Error VL53L1_SetMeasurementTimingBudgetMicroSeconds(VL53L1_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 8008118:	b580      	push	{r7, lr}
 800811a:	b08c      	sub	sp, #48	; 0x30
 800811c:	af00      	add	r7, sp, #0
 800811e:	6078      	str	r0, [r7, #4]
 8008120:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8008122:	2300      	movs	r3, #0
 8008124:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t Mm1Enabled = 0;
 8008128:	2300      	movs	r3, #0
 800812a:	76bb      	strb	r3, [r7, #26]
	uint8_t Mm2Enabled = 0;
 800812c:	2300      	movs	r3, #0
 800812e:	767b      	strb	r3, [r7, #25]
	uint32_t TimingGuard;
	uint32_t divisor;
	uint32_t TimingBudget = 0;
 8008130:	2300      	movs	r3, #0
 8008132:	617b      	str	r3, [r7, #20]
	uint32_t MmTimeoutUs = 0;
 8008134:	2300      	movs	r3, #0
 8008136:	613b      	str	r3, [r7, #16]
	VL53L1_PresetModes PresetMode;
	uint32_t PhaseCalTimeoutUs = 0;
 8008138:	2300      	movs	r3, #0
 800813a:	60fb      	str	r3, [r7, #12]
	uint32_t vhv;
	int32_t vhv_loops;
	uint32_t FDAMaxTimingBudgetUs = FDA_MAX_TIMING_BUDGET_US;
 800813c:	4b64      	ldr	r3, [pc, #400]	; (80082d0 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x1b8>)
 800813e:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");

	/* Timing budget is limited to 10 seconds */
	if (MeasurementTimingBudgetMicroSeconds > 10000000)
 8008140:	683b      	ldr	r3, [r7, #0]
 8008142:	4a64      	ldr	r2, [pc, #400]	; (80082d4 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x1bc>)
 8008144:	4293      	cmp	r3, r2
 8008146:	d902      	bls.n	800814e <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x36>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 8008148:	23fc      	movs	r3, #252	; 0xfc
 800814a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L1_ERROR_NONE) {
 800814e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008152:	2b00      	cmp	r3, #0
 8008154:	d109      	bne.n	800816a <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x52>
		Status = VL53L1_GetSequenceStepEnable(Dev,
 8008156:	f107 031a 	add.w	r3, r7, #26
 800815a:	461a      	mov	r2, r3
 800815c:	2105      	movs	r1, #5
 800815e:	6878      	ldr	r0, [r7, #4]
 8008160:	f000 fa8d 	bl	800867e <VL53L1_GetSequenceStepEnable>
 8008164:	4603      	mov	r3, r0
 8008166:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L1_SEQUENCESTEP_MM1, &Mm1Enabled);
	}

	if (Status == VL53L1_ERROR_NONE) {
 800816a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800816e:	2b00      	cmp	r3, #0
 8008170:	d109      	bne.n	8008186 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x6e>
		Status = VL53L1_GetSequenceStepEnable(Dev,
 8008172:	f107 0319 	add.w	r3, r7, #25
 8008176:	461a      	mov	r2, r3
 8008178:	2106      	movs	r1, #6
 800817a:	6878      	ldr	r0, [r7, #4]
 800817c:	f000 fa7f 	bl	800867e <VL53L1_GetSequenceStepEnable>
 8008180:	4603      	mov	r3, r0
 8008182:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L1_SEQUENCESTEP_MM2, &Mm2Enabled);
	}

	if (Status == VL53L1_ERROR_NONE)
 8008186:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800818a:	2b00      	cmp	r3, #0
 800818c:	d10b      	bne.n	80081a6 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x8e>
		Status = VL53L1_get_timeouts_us(Dev,
 800818e:	f107 0314 	add.w	r3, r7, #20
 8008192:	f107 0210 	add.w	r2, r7, #16
 8008196:	f107 010c 	add.w	r1, r7, #12
 800819a:	6878      	ldr	r0, [r7, #4]
 800819c:	f001 fd07 	bl	8009bae <VL53L1_get_timeouts_us>
 80081a0:	4603      	mov	r3, r0
 80081a2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			&PhaseCalTimeoutUs,
			&MmTimeoutUs,
			&TimingBudget);

	if (Status == VL53L1_ERROR_NONE) {
 80081a6:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	f040 8081 	bne.w	80082b2 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x19a>
		PresetMode = VL53L1DevDataGet(Dev,
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	f893 337c 	ldrb.w	r3, [r3, #892]	; 0x37c
 80081b6:	76fb      	strb	r3, [r7, #27]
				CurrentParameters.PresetMode);

		TimingGuard = 0;
 80081b8:	2300      	movs	r3, #0
 80081ba:	62bb      	str	r3, [r7, #40]	; 0x28
		divisor = 1;
 80081bc:	2301      	movs	r3, #1
 80081be:	627b      	str	r3, [r7, #36]	; 0x24
		switch (PresetMode) {
 80081c0:	7efb      	ldrb	r3, [r7, #27]
 80081c2:	2b08      	cmp	r3, #8
 80081c4:	d026      	beq.n	8008214 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xfc>
 80081c6:	2b08      	cmp	r3, #8
 80081c8:	dc43      	bgt.n	8008252 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x13a>
 80081ca:	2b03      	cmp	r3, #3
 80081cc:	d00f      	beq.n	80081ee <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xd6>
 80081ce:	2b04      	cmp	r3, #4
 80081d0:	d13f      	bne.n	8008252 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x13a>
		case VL53L1_PRESETMODE_LITE_RANGING:
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 80081d2:	7ebb      	ldrb	r3, [r7, #26]
 80081d4:	2b01      	cmp	r3, #1
 80081d6:	d002      	beq.n	80081de <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xc6>
 80081d8:	7e7b      	ldrb	r3, [r7, #25]
 80081da:	2b01      	cmp	r3, #1
 80081dc:	d103      	bne.n	80081e6 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xce>
				TimingGuard = 5000;
 80081de:	f241 3388 	movw	r3, #5000	; 0x1388
 80081e2:	62bb      	str	r3, [r7, #40]	; 0x28
			else
				TimingGuard = 1000;
		break;
 80081e4:	e038      	b.n	8008258 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x140>
				TimingGuard = 1000;
 80081e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80081ea:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 80081ec:	e034      	b.n	8008258 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x140>

		case VL53L1_PRESETMODE_AUTONOMOUS:
			FDAMaxTimingBudgetUs *= 2;
 80081ee:	69fb      	ldr	r3, [r7, #28]
 80081f0:	005b      	lsls	r3, r3, #1
 80081f2:	61fb      	str	r3, [r7, #28]
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 80081f4:	7ebb      	ldrb	r3, [r7, #26]
 80081f6:	2b01      	cmp	r3, #1
 80081f8:	d002      	beq.n	8008200 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xe8>
 80081fa:	7e7b      	ldrb	r3, [r7, #25]
 80081fc:	2b01      	cmp	r3, #1
 80081fe:	d103      	bne.n	8008208 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xf0>
				TimingGuard = 26600;
 8008200:	f246 73e8 	movw	r3, #26600	; 0x67e8
 8008204:	62bb      	str	r3, [r7, #40]	; 0x28
 8008206:	e002      	b.n	800820e <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xf6>
			else
				TimingGuard = 21600;
 8008208:	f245 4360 	movw	r3, #21600	; 0x5460
 800820c:	62bb      	str	r3, [r7, #40]	; 0x28
			divisor = 2;
 800820e:	2302      	movs	r3, #2
 8008210:	627b      	str	r3, [r7, #36]	; 0x24
		break;
 8008212:	e021      	b.n	8008258 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x140>

		case VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS:
			FDAMaxTimingBudgetUs *= 2;
 8008214:	69fb      	ldr	r3, [r7, #28]
 8008216:	005b      	lsls	r3, r3, #1
 8008218:	61fb      	str	r3, [r7, #28]
			vhv = LOWPOWER_AUTO_VHV_LOOP_DURATION_US;
 800821a:	23f5      	movs	r3, #245	; 0xf5
 800821c:	623b      	str	r3, [r7, #32]
			VL53L1_get_tuning_parm(Dev,
 800821e:	f107 0308 	add.w	r3, r7, #8
 8008222:	461a      	mov	r2, r3
 8008224:	f248 0136 	movw	r1, #32822	; 0x8036
 8008228:	6878      	ldr	r0, [r7, #4]
 800822a:	f002 fdf9 	bl	800ae20 <VL53L1_get_tuning_parm>
				VL53L1_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND,
				&vhv_loops);
			if (vhv_loops > 0) {
 800822e:	68bb      	ldr	r3, [r7, #8]
 8008230:	2b00      	cmp	r3, #0
 8008232:	dd07      	ble.n	8008244 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x12c>
				vhv += vhv_loops *
 8008234:	68bb      	ldr	r3, [r7, #8]
 8008236:	22f5      	movs	r2, #245	; 0xf5
 8008238:	fb02 f303 	mul.w	r3, r2, r3
 800823c:	461a      	mov	r2, r3
 800823e:	6a3b      	ldr	r3, [r7, #32]
 8008240:	4413      	add	r3, r2
 8008242:	623b      	str	r3, [r7, #32]
					LOWPOWER_AUTO_VHV_LOOP_DURATION_US;
			}
			TimingGuard = LOWPOWER_AUTO_OVERHEAD_BEFORE_A_RANGING +
 8008244:	6a3b      	ldr	r3, [r7, #32]
 8008246:	f603 53dc 	addw	r3, r3, #3548	; 0xddc
 800824a:	62bb      	str	r3, [r7, #40]	; 0x28
				LOWPOWER_AUTO_OVERHEAD_BETWEEN_A_B_RANGING +
				vhv;
			divisor = 2;
 800824c:	2302      	movs	r3, #2
 800824e:	627b      	str	r3, [r7, #36]	; 0x24
		break;
 8008250:	e002      	b.n	8008258 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x140>

		default:
			/* Unsupported mode */
			Status = VL53L1_ERROR_MODE_NOT_SUPPORTED;
 8008252:	23f8      	movs	r3, #248	; 0xf8
 8008254:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}

		if (MeasurementTimingBudgetMicroSeconds <= TimingGuard)
 8008258:	683a      	ldr	r2, [r7, #0]
 800825a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800825c:	429a      	cmp	r2, r3
 800825e:	d803      	bhi.n	8008268 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x150>
			Status = VL53L1_ERROR_INVALID_PARAMS;
 8008260:	23fc      	movs	r3, #252	; 0xfc
 8008262:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8008266:	e003      	b.n	8008270 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x158>
		else {
			TimingBudget = (MeasurementTimingBudgetMicroSeconds
					- TimingGuard);
 8008268:	683a      	ldr	r2, [r7, #0]
 800826a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800826c:	1ad3      	subs	r3, r2, r3
			TimingBudget = (MeasurementTimingBudgetMicroSeconds
 800826e:	617b      	str	r3, [r7, #20]
		}

		if (Status == VL53L1_ERROR_NONE) {
 8008270:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008274:	2b00      	cmp	r3, #0
 8008276:	d11c      	bne.n	80082b2 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x19a>
			if (TimingBudget > FDAMaxTimingBudgetUs)
 8008278:	697b      	ldr	r3, [r7, #20]
 800827a:	69fa      	ldr	r2, [r7, #28]
 800827c:	429a      	cmp	r2, r3
 800827e:	d203      	bcs.n	8008288 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x170>
				Status = VL53L1_ERROR_INVALID_PARAMS;
 8008280:	23fc      	movs	r3, #252	; 0xfc
 8008282:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8008286:	e00d      	b.n	80082a4 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x18c>
			else {
				TimingBudget /= divisor;
 8008288:	697a      	ldr	r2, [r7, #20]
 800828a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800828c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008290:	617b      	str	r3, [r7, #20]
				Status = VL53L1_set_timeouts_us(
 8008292:	68f9      	ldr	r1, [r7, #12]
 8008294:	693a      	ldr	r2, [r7, #16]
 8008296:	697b      	ldr	r3, [r7, #20]
 8008298:	6878      	ldr	r0, [r7, #4]
 800829a:	f001 fc50 	bl	8009b3e <VL53L1_set_timeouts_us>
 800829e:	4603      	mov	r3, r0
 80082a0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					PhaseCalTimeoutUs,
					MmTimeoutUs,
					TimingBudget);
			}

			if (Status == VL53L1_ERROR_NONE)
 80082a4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d102      	bne.n	80082b2 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x19a>
				VL53L1DevDataSet(Dev,
 80082ac:	697a      	ldr	r2, [r7, #20]
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	611a      	str	r2, [r3, #16]
					LLData.range_config_timeout_us,
					TimingBudget);
		}
	}
	if (Status == VL53L1_ERROR_NONE) {
 80082b2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d103      	bne.n	80082c2 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x1aa>
		VL53L1DevDataSet(Dev,
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	683a      	ldr	r2, [r7, #0]
 80082be:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380
			CurrentParameters.MeasurementTimingBudgetMicroSeconds,
			MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80082c2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 80082c6:	4618      	mov	r0, r3
 80082c8:	3730      	adds	r7, #48	; 0x30
 80082ca:	46bd      	mov	sp, r7
 80082cc:	bd80      	pop	{r7, pc}
 80082ce:	bf00      	nop
 80082d0:	00086470 	.word	0x00086470
 80082d4:	00989680 	.word	0x00989680

080082d8 <VL53L1_GetMeasurementTimingBudgetMicroSeconds>:


VL53L1_Error VL53L1_GetMeasurementTimingBudgetMicroSeconds(VL53L1_DEV Dev,
	uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 80082d8:	b580      	push	{r7, lr}
 80082da:	b08c      	sub	sp, #48	; 0x30
 80082dc:	af00      	add	r7, sp, #0
 80082de:	6078      	str	r0, [r7, #4]
 80082e0:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 80082e2:	2300      	movs	r3, #0
 80082e4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t Mm1Enabled = 0;
 80082e8:	2300      	movs	r3, #0
 80082ea:	76fb      	strb	r3, [r7, #27]
	uint8_t Mm2Enabled = 0;
 80082ec:	2300      	movs	r3, #0
 80082ee:	76bb      	strb	r3, [r7, #26]
	uint32_t  MmTimeoutUs = 0;
 80082f0:	2300      	movs	r3, #0
 80082f2:	617b      	str	r3, [r7, #20]
	uint32_t  RangeTimeoutUs = 0;
 80082f4:	2300      	movs	r3, #0
 80082f6:	613b      	str	r3, [r7, #16]
	uint32_t  MeasTimingBdg = 0;
 80082f8:	2300      	movs	r3, #0
 80082fa:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PhaseCalTimeoutUs = 0;
 80082fc:	2300      	movs	r3, #0
 80082fe:	60fb      	str	r3, [r7, #12]
	uint32_t vhv;
	int32_t vhv_loops;

	LOG_FUNCTION_START("");

	*pMeasurementTimingBudgetMicroSeconds = 0;
 8008300:	683b      	ldr	r3, [r7, #0]
 8008302:	2200      	movs	r2, #0
 8008304:	601a      	str	r2, [r3, #0]

	if (Status == VL53L1_ERROR_NONE)
 8008306:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800830a:	2b00      	cmp	r3, #0
 800830c:	d109      	bne.n	8008322 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x4a>
		Status = VL53L1_GetSequenceStepEnable(Dev,
 800830e:	f107 031b 	add.w	r3, r7, #27
 8008312:	461a      	mov	r2, r3
 8008314:	2105      	movs	r1, #5
 8008316:	6878      	ldr	r0, [r7, #4]
 8008318:	f000 f9b1 	bl	800867e <VL53L1_GetSequenceStepEnable>
 800831c:	4603      	mov	r3, r0
 800831e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L1_SEQUENCESTEP_MM1, &Mm1Enabled);

	if (Status == VL53L1_ERROR_NONE)
 8008322:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008326:	2b00      	cmp	r3, #0
 8008328:	d109      	bne.n	800833e <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x66>
		Status = VL53L1_GetSequenceStepEnable(Dev,
 800832a:	f107 031a 	add.w	r3, r7, #26
 800832e:	461a      	mov	r2, r3
 8008330:	2106      	movs	r1, #6
 8008332:	6878      	ldr	r0, [r7, #4]
 8008334:	f000 f9a3 	bl	800867e <VL53L1_GetSequenceStepEnable>
 8008338:	4603      	mov	r3, r0
 800833a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L1_SEQUENCESTEP_MM2, &Mm2Enabled);

	if (Status == VL53L1_ERROR_NONE)
 800833e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008342:	2b00      	cmp	r3, #0
 8008344:	d10b      	bne.n	800835e <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x86>
		Status = VL53L1_get_timeouts_us(Dev,
 8008346:	f107 0310 	add.w	r3, r7, #16
 800834a:	f107 0214 	add.w	r2, r7, #20
 800834e:	f107 010c 	add.w	r1, r7, #12
 8008352:	6878      	ldr	r0, [r7, #4]
 8008354:	f001 fc2b 	bl	8009bae <VL53L1_get_timeouts_us>
 8008358:	4603      	mov	r3, r0
 800835a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			&PhaseCalTimeoutUs,
			&MmTimeoutUs,
			&RangeTimeoutUs);

	if (Status == VL53L1_ERROR_NONE) {
 800835e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008362:	2b00      	cmp	r3, #0
 8008364:	d156      	bne.n	8008414 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x13c>
		PresetMode = VL53L1DevDataGet(Dev,
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	f893 337c 	ldrb.w	r3, [r3, #892]	; 0x37c
 800836c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
				CurrentParameters.PresetMode);

		switch (PresetMode) {
 8008370:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008374:	2b08      	cmp	r3, #8
 8008376:	d02a      	beq.n	80083ce <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xf6>
 8008378:	2b08      	cmp	r3, #8
 800837a:	dc47      	bgt.n	800840c <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x134>
 800837c:	2b03      	cmp	r3, #3
 800837e:	d012      	beq.n	80083a6 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xce>
 8008380:	2b04      	cmp	r3, #4
 8008382:	d143      	bne.n	800840c <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x134>
		case VL53L1_PRESETMODE_LITE_RANGING:
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 8008384:	7efb      	ldrb	r3, [r7, #27]
 8008386:	2b01      	cmp	r3, #1
 8008388:	d002      	beq.n	8008390 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xb8>
 800838a:	7ebb      	ldrb	r3, [r7, #26]
 800838c:	2b01      	cmp	r3, #1
 800838e:	d105      	bne.n	800839c <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xc4>
				MeasTimingBdg = RangeTimeoutUs + 5000;
 8008390:	693b      	ldr	r3, [r7, #16]
 8008392:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8008396:	3308      	adds	r3, #8
 8008398:	62bb      	str	r3, [r7, #40]	; 0x28
			else
				MeasTimingBdg = RangeTimeoutUs + 1000;

		break;
 800839a:	e03c      	b.n	8008416 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x13e>
				MeasTimingBdg = RangeTimeoutUs + 1000;
 800839c:	693b      	ldr	r3, [r7, #16]
 800839e:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 80083a2:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 80083a4:	e037      	b.n	8008416 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x13e>

		case VL53L1_PRESETMODE_AUTONOMOUS:
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 80083a6:	7efb      	ldrb	r3, [r7, #27]
 80083a8:	2b01      	cmp	r3, #1
 80083aa:	d002      	beq.n	80083b2 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xda>
 80083ac:	7ebb      	ldrb	r3, [r7, #26]
 80083ae:	2b01      	cmp	r3, #1
 80083b0:	d106      	bne.n	80083c0 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xe8>
				MeasTimingBdg = 2 * RangeTimeoutUs + 26600;
 80083b2:	693b      	ldr	r3, [r7, #16]
 80083b4:	f503 534f 	add.w	r3, r3, #13248	; 0x33c0
 80083b8:	3334      	adds	r3, #52	; 0x34
 80083ba:	005b      	lsls	r3, r3, #1
 80083bc:	62bb      	str	r3, [r7, #40]	; 0x28
			else
				MeasTimingBdg = 2 * RangeTimeoutUs + 21600;

		break;
 80083be:	e02a      	b.n	8008416 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x13e>
				MeasTimingBdg = 2 * RangeTimeoutUs + 21600;
 80083c0:	693b      	ldr	r3, [r7, #16]
 80083c2:	f503 5328 	add.w	r3, r3, #10752	; 0x2a00
 80083c6:	3330      	adds	r3, #48	; 0x30
 80083c8:	005b      	lsls	r3, r3, #1
 80083ca:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 80083cc:	e023      	b.n	8008416 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x13e>

		case VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS:
			vhv = LOWPOWER_AUTO_VHV_LOOP_DURATION_US;
 80083ce:	23f5      	movs	r3, #245	; 0xf5
 80083d0:	627b      	str	r3, [r7, #36]	; 0x24
			VL53L1_get_tuning_parm(Dev,
 80083d2:	f107 0308 	add.w	r3, r7, #8
 80083d6:	461a      	mov	r2, r3
 80083d8:	f248 0136 	movw	r1, #32822	; 0x8036
 80083dc:	6878      	ldr	r0, [r7, #4]
 80083de:	f002 fd1f 	bl	800ae20 <VL53L1_get_tuning_parm>
				VL53L1_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND,
				&vhv_loops);
			if (vhv_loops > 0) {
 80083e2:	68bb      	ldr	r3, [r7, #8]
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	dd07      	ble.n	80083f8 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x120>
				vhv += vhv_loops *
 80083e8:	68bb      	ldr	r3, [r7, #8]
 80083ea:	22f5      	movs	r2, #245	; 0xf5
 80083ec:	fb02 f303 	mul.w	r3, r2, r3
 80083f0:	461a      	mov	r2, r3
 80083f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083f4:	4413      	add	r3, r2
 80083f6:	627b      	str	r3, [r7, #36]	; 0x24
					LOWPOWER_AUTO_VHV_LOOP_DURATION_US;
			}
			TimingGuard = LOWPOWER_AUTO_OVERHEAD_BEFORE_A_RANGING +
 80083f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083fa:	f603 53dc 	addw	r3, r3, #3548	; 0xddc
 80083fe:	61fb      	str	r3, [r7, #28]
				LOWPOWER_AUTO_OVERHEAD_BETWEEN_A_B_RANGING +
				vhv;
			MeasTimingBdg = 2 * RangeTimeoutUs + TimingGuard;
 8008400:	693b      	ldr	r3, [r7, #16]
 8008402:	005b      	lsls	r3, r3, #1
 8008404:	69fa      	ldr	r2, [r7, #28]
 8008406:	4413      	add	r3, r2
 8008408:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 800840a:	e004      	b.n	8008416 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x13e>

		default:
			/* Unsupported mode */
			Status = VL53L1_ERROR_MODE_NOT_SUPPORTED;
 800840c:	23f8      	movs	r3, #248	; 0xf8
 800840e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8008412:	e000      	b.n	8008416 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x13e>
		}
	}
 8008414:	bf00      	nop
	if (Status == VL53L1_ERROR_NONE)
 8008416:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800841a:	2b00      	cmp	r3, #0
 800841c:	d102      	bne.n	8008424 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x14c>
		*pMeasurementTimingBudgetMicroSeconds = MeasTimingBdg;
 800841e:	683b      	ldr	r3, [r7, #0]
 8008420:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008422:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8008424:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8008428:	4618      	mov	r0, r3
 800842a:	3730      	adds	r7, #48	; 0x30
 800842c:	46bd      	mov	sp, r7
 800842e:	bd80      	pop	{r7, pc}

08008430 <VL53L1_SetInterMeasurementPeriodMilliSeconds>:



VL53L1_Error VL53L1_SetInterMeasurementPeriodMilliSeconds(VL53L1_DEV Dev,
	uint32_t InterMeasurementPeriodMilliSeconds)
{
 8008430:	b580      	push	{r7, lr}
 8008432:	b084      	sub	sp, #16
 8008434:	af00      	add	r7, sp, #0
 8008436:	6078      	str	r0, [r7, #4]
 8008438:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800843a:	2300      	movs	r3, #0
 800843c:	73fb      	strb	r3, [r7, #15]
	uint32_t adjustedIMP;

	LOG_FUNCTION_START("");

	/* Fix for Ticket 468205 actual measurement period shorter than set */
	adjustedIMP = InterMeasurementPeriodMilliSeconds;
 800843e:	683b      	ldr	r3, [r7, #0]
 8008440:	60bb      	str	r3, [r7, #8]
	adjustedIMP += (adjustedIMP * 64) / 1000;
 8008442:	68bb      	ldr	r3, [r7, #8]
 8008444:	019b      	lsls	r3, r3, #6
 8008446:	4a09      	ldr	r2, [pc, #36]	; (800846c <VL53L1_SetInterMeasurementPeriodMilliSeconds+0x3c>)
 8008448:	fba2 2303 	umull	r2, r3, r2, r3
 800844c:	099b      	lsrs	r3, r3, #6
 800844e:	68ba      	ldr	r2, [r7, #8]
 8008450:	4413      	add	r3, r2
 8008452:	60bb      	str	r3, [r7, #8]
	/* End of fix for Ticket 468205 */
	Status = VL53L1_set_inter_measurement_period_ms(Dev,
 8008454:	68b9      	ldr	r1, [r7, #8]
 8008456:	6878      	ldr	r0, [r7, #4]
 8008458:	f001 fb22 	bl	8009aa0 <VL53L1_set_inter_measurement_period_ms>
 800845c:	4603      	mov	r3, r0
 800845e:	73fb      	strb	r3, [r7, #15]
			adjustedIMP);

	LOG_FUNCTION_END(Status);
	return Status;
 8008460:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008464:	4618      	mov	r0, r3
 8008466:	3710      	adds	r7, #16
 8008468:	46bd      	mov	sp, r7
 800846a:	bd80      	pop	{r7, pc}
 800846c:	10624dd3 	.word	0x10624dd3

08008470 <VL53L1_GetInterMeasurementPeriodMilliSeconds>:

VL53L1_Error VL53L1_GetInterMeasurementPeriodMilliSeconds(VL53L1_DEV Dev,
	uint32_t *pInterMeasurementPeriodMilliSeconds)
{
 8008470:	b580      	push	{r7, lr}
 8008472:	b084      	sub	sp, #16
 8008474:	af00      	add	r7, sp, #0
 8008476:	6078      	str	r0, [r7, #4]
 8008478:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800847a:	2300      	movs	r3, #0
 800847c:	73fb      	strb	r3, [r7, #15]
	uint32_t adjustedIMP;

	LOG_FUNCTION_START("");

	Status = VL53L1_get_inter_measurement_period_ms(Dev, &adjustedIMP);
 800847e:	f107 0308 	add.w	r3, r7, #8
 8008482:	4619      	mov	r1, r3
 8008484:	6878      	ldr	r0, [r7, #4]
 8008486:	f001 fb34 	bl	8009af2 <VL53L1_get_inter_measurement_period_ms>
 800848a:	4603      	mov	r3, r0
 800848c:	73fb      	strb	r3, [r7, #15]
	/* Fix for Ticket 468205 actual measurement period shorter than set */
	adjustedIMP -= (adjustedIMP * 64) / 1000;
 800848e:	68ba      	ldr	r2, [r7, #8]
 8008490:	68bb      	ldr	r3, [r7, #8]
 8008492:	019b      	lsls	r3, r3, #6
 8008494:	4907      	ldr	r1, [pc, #28]	; (80084b4 <VL53L1_GetInterMeasurementPeriodMilliSeconds+0x44>)
 8008496:	fba1 1303 	umull	r1, r3, r1, r3
 800849a:	099b      	lsrs	r3, r3, #6
 800849c:	1ad3      	subs	r3, r2, r3
 800849e:	60bb      	str	r3, [r7, #8]
	*pInterMeasurementPeriodMilliSeconds = adjustedIMP;
 80084a0:	68ba      	ldr	r2, [r7, #8]
 80084a2:	683b      	ldr	r3, [r7, #0]
 80084a4:	601a      	str	r2, [r3, #0]
	/* End of fix for Ticket 468205 */

	LOG_FUNCTION_END(Status);
	return Status;
 80084a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80084aa:	4618      	mov	r0, r3
 80084ac:	3710      	adds	r7, #16
 80084ae:	46bd      	mov	sp, r7
 80084b0:	bd80      	pop	{r7, pc}
 80084b2:	bf00      	nop
 80084b4:	10624dd3 	.word	0x10624dd3

080084b8 <SetLimitValue>:
	return Status;
}

static VL53L1_Error SetLimitValue(VL53L1_DEV Dev, uint16_t LimitCheckId,
		FixPoint1616_t value)
{
 80084b8:	b580      	push	{r7, lr}
 80084ba:	b086      	sub	sp, #24
 80084bc:	af00      	add	r7, sp, #0
 80084be:	60f8      	str	r0, [r7, #12]
 80084c0:	460b      	mov	r3, r1
 80084c2:	607a      	str	r2, [r7, #4]
 80084c4:	817b      	strh	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 80084c6:	2300      	movs	r3, #0
 80084c8:	75fb      	strb	r3, [r7, #23]
	uint16_t tmpuint16; /* temporary variable */

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 80084ca:	897b      	ldrh	r3, [r7, #10]
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d002      	beq.n	80084d6 <SetLimitValue+0x1e>
 80084d0:	2b01      	cmp	r3, #1
 80084d2:	d009      	beq.n	80084e8 <SetLimitValue+0x30>
 80084d4:	e011      	b.n	80084fa <SetLimitValue+0x42>
	case VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE:
		tmpuint16 = VL53L1_FIXPOINT1616TOFIXPOINT142(value);
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	0b9b      	lsrs	r3, r3, #14
 80084da:	82bb      	strh	r3, [r7, #20]
		VL53L1_set_lite_sigma_threshold(Dev, tmpuint16);
 80084dc:	8abb      	ldrh	r3, [r7, #20]
 80084de:	4619      	mov	r1, r3
 80084e0:	68f8      	ldr	r0, [r7, #12]
 80084e2:	f001 ff3f 	bl	800a364 <VL53L1_set_lite_sigma_threshold>
		break;
 80084e6:	e00a      	b.n	80084fe <SetLimitValue+0x46>
	case VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		tmpuint16 = VL53L1_FIXPOINT1616TOFIXPOINT97(value);
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	0a5b      	lsrs	r3, r3, #9
 80084ec:	82bb      	strh	r3, [r7, #20]
		VL53L1_set_lite_min_count_rate(Dev, tmpuint16);
 80084ee:	8abb      	ldrh	r3, [r7, #20]
 80084f0:	4619      	mov	r1, r3
 80084f2:	68f8      	ldr	r0, [r7, #12]
 80084f4:	f001 ff62 	bl	800a3bc <VL53L1_set_lite_min_count_rate>
		break;
 80084f8:	e001      	b.n	80084fe <SetLimitValue+0x46>
	default:
		Status = VL53L1_ERROR_INVALID_PARAMS;
 80084fa:	23fc      	movs	r3, #252	; 0xfc
 80084fc:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80084fe:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008502:	4618      	mov	r0, r3
 8008504:	3718      	adds	r7, #24
 8008506:	46bd      	mov	sp, r7
 8008508:	bd80      	pop	{r7, pc}

0800850a <VL53L1_SetLimitCheckEnable>:


VL53L1_Error VL53L1_SetLimitCheckEnable(VL53L1_DEV Dev, uint16_t LimitCheckId,
	uint8_t LimitCheckEnable)
{
 800850a:	b580      	push	{r7, lr}
 800850c:	b084      	sub	sp, #16
 800850e:	af00      	add	r7, sp, #0
 8008510:	6078      	str	r0, [r7, #4]
 8008512:	460b      	mov	r3, r1
 8008514:	807b      	strh	r3, [r7, #2]
 8008516:	4613      	mov	r3, r2
 8008518:	707b      	strb	r3, [r7, #1]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800851a:	2300      	movs	r3, #0
 800851c:	73fb      	strb	r3, [r7, #15]
	FixPoint1616_t TempFix1616 = 0;
 800851e:	2300      	movs	r3, #0
 8008520:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");


	if (LimitCheckId >= VL53L1_CHECKENABLE_NUMBER_OF_CHECKS) {
 8008522:	887b      	ldrh	r3, [r7, #2]
 8008524:	2b01      	cmp	r3, #1
 8008526:	d902      	bls.n	800852e <VL53L1_SetLimitCheckEnable+0x24>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 8008528:	23fc      	movs	r3, #252	; 0xfc
 800852a:	73fb      	strb	r3, [r7, #15]
 800852c:	e014      	b.n	8008558 <VL53L1_SetLimitCheckEnable+0x4e>
	} else {
		/* TempFix1616 contains either 0 or the limit value */
		if (LimitCheckEnable == 0)
 800852e:	787b      	ldrb	r3, [r7, #1]
 8008530:	2b00      	cmp	r3, #0
 8008532:	d102      	bne.n	800853a <VL53L1_SetLimitCheckEnable+0x30>
			TempFix1616 = 0;
 8008534:	2300      	movs	r3, #0
 8008536:	60bb      	str	r3, [r7, #8]
 8008538:	e006      	b.n	8008548 <VL53L1_SetLimitCheckEnable+0x3e>
		else
			VL53L1_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800853a:	887b      	ldrh	r3, [r7, #2]
 800853c:	687a      	ldr	r2, [r7, #4]
 800853e:	33e0      	adds	r3, #224	; 0xe0
 8008540:	009b      	lsls	r3, r3, #2
 8008542:	4413      	add	r3, r2
 8008544:	689b      	ldr	r3, [r3, #8]
 8008546:	60bb      	str	r3, [r7, #8]
				LimitCheckId, TempFix1616);

		Status = SetLimitValue(Dev, LimitCheckId, TempFix1616);
 8008548:	887b      	ldrh	r3, [r7, #2]
 800854a:	68ba      	ldr	r2, [r7, #8]
 800854c:	4619      	mov	r1, r3
 800854e:	6878      	ldr	r0, [r7, #4]
 8008550:	f7ff ffb2 	bl	80084b8 <SetLimitValue>
 8008554:	4603      	mov	r3, r0
 8008556:	73fb      	strb	r3, [r7, #15]
	}

	if (Status == VL53L1_ERROR_NONE)
 8008558:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800855c:	2b00      	cmp	r3, #0
 800855e:	d10c      	bne.n	800857a <VL53L1_SetLimitCheckEnable+0x70>
		VL53L1_SETARRAYPARAMETERFIELD(Dev,
 8008560:	787b      	ldrb	r3, [r7, #1]
 8008562:	2b00      	cmp	r3, #0
 8008564:	bf14      	ite	ne
 8008566:	2301      	movne	r3, #1
 8008568:	2300      	moveq	r3, #0
 800856a:	b2da      	uxtb	r2, r3
 800856c:	887b      	ldrh	r3, [r7, #2]
 800856e:	4611      	mov	r1, r2
 8008570:	687a      	ldr	r2, [r7, #4]
 8008572:	4413      	add	r3, r2
 8008574:	460a      	mov	r2, r1
 8008576:	f883 2384 	strb.w	r2, [r3, #900]	; 0x384
			((LimitCheckEnable == 0) ? 0 : 1));



	LOG_FUNCTION_END(Status);
	return Status;
 800857a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800857e:	4618      	mov	r0, r3
 8008580:	3710      	adds	r7, #16
 8008582:	46bd      	mov	sp, r7
 8008584:	bd80      	pop	{r7, pc}

08008586 <VL53L1_GetLimitCheckEnable>:

VL53L1_Error VL53L1_GetLimitCheckEnable(VL53L1_DEV Dev, uint16_t LimitCheckId,
	uint8_t *pLimitCheckEnable)
{
 8008586:	b480      	push	{r7}
 8008588:	b087      	sub	sp, #28
 800858a:	af00      	add	r7, sp, #0
 800858c:	60f8      	str	r0, [r7, #12]
 800858e:	460b      	mov	r3, r1
 8008590:	607a      	str	r2, [r7, #4]
 8008592:	817b      	strh	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8008594:	2300      	movs	r3, #0
 8008596:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L1_CHECKENABLE_NUMBER_OF_CHECKS) {
 8008598:	897b      	ldrh	r3, [r7, #10]
 800859a:	2b01      	cmp	r3, #1
 800859c:	d905      	bls.n	80085aa <VL53L1_GetLimitCheckEnable+0x24>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 800859e:	23fc      	movs	r3, #252	; 0xfc
 80085a0:	75fb      	strb	r3, [r7, #23]
		*pLimitCheckEnable = 0;
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	2200      	movs	r2, #0
 80085a6:	701a      	strb	r2, [r3, #0]
 80085a8:	e008      	b.n	80085bc <VL53L1_GetLimitCheckEnable+0x36>
	} else {
		VL53L1_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80085aa:	897b      	ldrh	r3, [r7, #10]
 80085ac:	68fa      	ldr	r2, [r7, #12]
 80085ae:	4413      	add	r3, r2
 80085b0:	f893 3384 	ldrb.w	r3, [r3, #900]	; 0x384
 80085b4:	75bb      	strb	r3, [r7, #22]
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	7dba      	ldrb	r2, [r7, #22]
 80085ba:	701a      	strb	r2, [r3, #0]
	}


	LOG_FUNCTION_END(Status);
	return Status;
 80085bc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80085c0:	4618      	mov	r0, r3
 80085c2:	371c      	adds	r7, #28
 80085c4:	46bd      	mov	sp, r7
 80085c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ca:	4770      	bx	lr

080085cc <VL53L1_GetLimitCheckValue>:
	return Status;
}

VL53L1_Error VL53L1_GetLimitCheckValue(VL53L1_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 80085cc:	b580      	push	{r7, lr}
 80085ce:	b088      	sub	sp, #32
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	60f8      	str	r0, [r7, #12]
 80085d4:	460b      	mov	r3, r1
 80085d6:	607a      	str	r2, [r7, #4]
 80085d8:	817b      	strh	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 80085da:	2300      	movs	r3, #0
 80085dc:	77fb      	strb	r3, [r7, #31]
	uint16_t MinCountRate;
	FixPoint1616_t TempFix1616 = 0;
 80085de:	2300      	movs	r3, #0
 80085e0:	61bb      	str	r3, [r7, #24]
	uint16_t SigmaThresh;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 80085e2:	897b      	ldrh	r3, [r7, #10]
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d002      	beq.n	80085ee <VL53L1_GetLimitCheckValue+0x22>
 80085e8:	2b01      	cmp	r3, #1
 80085ea:	d00c      	beq.n	8008606 <VL53L1_GetLimitCheckValue+0x3a>
 80085ec:	e017      	b.n	800861e <VL53L1_GetLimitCheckValue+0x52>
	case VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE:
		Status = VL53L1_get_lite_sigma_threshold(Dev, &SigmaThresh);
 80085ee:	f107 0314 	add.w	r3, r7, #20
 80085f2:	4619      	mov	r1, r3
 80085f4:	68f8      	ldr	r0, [r7, #12]
 80085f6:	f001 fe9f 	bl	800a338 <VL53L1_get_lite_sigma_threshold>
 80085fa:	4603      	mov	r3, r0
 80085fc:	77fb      	strb	r3, [r7, #31]
		TempFix1616 = VL53L1_FIXPOINT142TOFIXPOINT1616(SigmaThresh);
 80085fe:	8abb      	ldrh	r3, [r7, #20]
 8008600:	039b      	lsls	r3, r3, #14
 8008602:	61bb      	str	r3, [r7, #24]
		break;
 8008604:	e00d      	b.n	8008622 <VL53L1_GetLimitCheckValue+0x56>
	case VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		Status = VL53L1_get_lite_min_count_rate(Dev, &MinCountRate);
 8008606:	f107 0316 	add.w	r3, r7, #22
 800860a:	4619      	mov	r1, r3
 800860c:	68f8      	ldr	r0, [r7, #12]
 800860e:	f001 febf 	bl	800a390 <VL53L1_get_lite_min_count_rate>
 8008612:	4603      	mov	r3, r0
 8008614:	77fb      	strb	r3, [r7, #31]
		TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(MinCountRate);
 8008616:	8afb      	ldrh	r3, [r7, #22]
 8008618:	025b      	lsls	r3, r3, #9
 800861a:	61bb      	str	r3, [r7, #24]
		break;
 800861c:	e001      	b.n	8008622 <VL53L1_GetLimitCheckValue+0x56>
	default:
		Status = VL53L1_ERROR_INVALID_PARAMS;
 800861e:	23fc      	movs	r3, #252	; 0xfc
 8008620:	77fb      	strb	r3, [r7, #31]
	}

	if (Status == VL53L1_ERROR_NONE) {
 8008622:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8008626:	2b00      	cmp	r3, #0
 8008628:	d123      	bne.n	8008672 <VL53L1_GetLimitCheckValue+0xa6>

		if (TempFix1616 == 0) {
 800862a:	69bb      	ldr	r3, [r7, #24]
 800862c:	2b00      	cmp	r3, #0
 800862e:	d110      	bne.n	8008652 <VL53L1_GetLimitCheckValue+0x86>
			/* disabled: return value from memory */
			VL53L1_GETARRAYPARAMETERFIELD(Dev,
 8008630:	897b      	ldrh	r3, [r7, #10]
 8008632:	68fa      	ldr	r2, [r7, #12]
 8008634:	33e0      	adds	r3, #224	; 0xe0
 8008636:	009b      	lsls	r3, r3, #2
 8008638:	4413      	add	r3, r2
 800863a:	689b      	ldr	r3, [r3, #8]
 800863c:	61bb      	str	r3, [r7, #24]
				LimitChecksValue, LimitCheckId,
				TempFix1616);
			*pLimitCheckValue = TempFix1616;
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	69ba      	ldr	r2, [r7, #24]
 8008642:	601a      	str	r2, [r3, #0]
			VL53L1_SETARRAYPARAMETERFIELD(Dev,
 8008644:	897b      	ldrh	r3, [r7, #10]
 8008646:	68fa      	ldr	r2, [r7, #12]
 8008648:	4413      	add	r3, r2
 800864a:	2200      	movs	r2, #0
 800864c:	f883 2384 	strb.w	r2, [r3, #900]	; 0x384
 8008650:	e00f      	b.n	8008672 <VL53L1_GetLimitCheckValue+0xa6>
				LimitChecksEnable, LimitCheckId, 0);
		} else {
			*pLimitCheckValue = TempFix1616;
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	69ba      	ldr	r2, [r7, #24]
 8008656:	601a      	str	r2, [r3, #0]
			VL53L1_SETARRAYPARAMETERFIELD(Dev,
 8008658:	897b      	ldrh	r3, [r7, #10]
 800865a:	68fa      	ldr	r2, [r7, #12]
 800865c:	33e0      	adds	r3, #224	; 0xe0
 800865e:	009b      	lsls	r3, r3, #2
 8008660:	4413      	add	r3, r2
 8008662:	69ba      	ldr	r2, [r7, #24]
 8008664:	609a      	str	r2, [r3, #8]
				LimitChecksValue, LimitCheckId,
				TempFix1616);
			VL53L1_SETARRAYPARAMETERFIELD(Dev,
 8008666:	897b      	ldrh	r3, [r7, #10]
 8008668:	68fa      	ldr	r2, [r7, #12]
 800866a:	4413      	add	r3, r2
 800866c:	2201      	movs	r2, #1
 800866e:	f883 2384 	strb.w	r2, [r3, #900]	; 0x384
				LimitChecksEnable, LimitCheckId, 1);
		}
	}
	LOG_FUNCTION_END(Status);
	return Status;
 8008672:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 8008676:	4618      	mov	r0, r3
 8008678:	3720      	adds	r7, #32
 800867a:	46bd      	mov	sp, r7
 800867c:	bd80      	pop	{r7, pc}

0800867e <VL53L1_GetSequenceStepEnable>:
}


VL53L1_Error VL53L1_GetSequenceStepEnable(VL53L1_DEV Dev,
	VL53L1_SequenceStepId SequenceStepId, uint8_t *pSequenceStepEnabled)
{
 800867e:	b580      	push	{r7, lr}
 8008680:	b086      	sub	sp, #24
 8008682:	af00      	add	r7, sp, #0
 8008684:	60f8      	str	r0, [r7, #12]
 8008686:	460b      	mov	r3, r1
 8008688:	607a      	str	r2, [r7, #4]
 800868a:	72fb      	strb	r3, [r7, #11]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800868c:	2300      	movs	r3, #0
 800868e:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	Status = VL53L1_get_sequence_config_bit(Dev,
 8008690:	7afb      	ldrb	r3, [r7, #11]
 8008692:	687a      	ldr	r2, [r7, #4]
 8008694:	4619      	mov	r1, r3
 8008696:	68f8      	ldr	r0, [r7, #12]
 8008698:	f001 faf4 	bl	8009c84 <VL53L1_get_sequence_config_bit>
 800869c:	4603      	mov	r3, r0
 800869e:	75fb      	strb	r3, [r7, #23]
		(VL53L1_DeviceSequenceConfig)SequenceStepId,
		pSequenceStepEnabled);

	LOG_FUNCTION_END(Status);
	return Status;
 80086a0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80086a4:	4618      	mov	r0, r3
 80086a6:	3718      	adds	r7, #24
 80086a8:	46bd      	mov	sp, r7
 80086aa:	bd80      	pop	{r7, pc}

080086ac <VL53L1_StartMeasurement>:
/* Group PAL Measurement Functions */



VL53L1_Error VL53L1_StartMeasurement(VL53L1_DEV Dev)
{
 80086ac:	b580      	push	{r7, lr}
 80086ae:	b086      	sub	sp, #24
 80086b0:	af00      	add	r7, sp, #0
 80086b2:	6078      	str	r0, [r7, #4]
#define TIMED_MODE_TIMING_GUARD_MILLISECONDS 4
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 80086b4:	2300      	movs	r3, #0
 80086b6:	75fb      	strb	r3, [r7, #23]
	uint32_t MTBus, IMPms;


	LOG_FUNCTION_START("");

	DeviceMeasurementMode = VL53L1DevDataGet(Dev, LLData.measurement_mode);
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	789b      	ldrb	r3, [r3, #2]
 80086bc:	75bb      	strb	r3, [r7, #22]
	if (DeviceMeasurementMode != VL53L1_DEVICEMEASUREMENTMODE_TIMED)
 80086be:	7dbb      	ldrb	r3, [r7, #22]
 80086c0:	2b40      	cmp	r3, #64	; 0x40
 80086c2:	d002      	beq.n	80086ca <VL53L1_StartMeasurement+0x1e>
		VL53L1_LoadPatch(Dev);
 80086c4:	6878      	ldr	r0, [r7, #4]
 80086c6:	f000 fd61 	bl	800918c <VL53L1_LoadPatch>
	CurrPalState = VL53L1DevDataGet(Dev, PalState);
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	f893 3378 	ldrb.w	r3, [r3, #888]	; 0x378
 80086d0:	757b      	strb	r3, [r7, #21]
	switch (CurrPalState) {
 80086d2:	7d7b      	ldrb	r3, [r7, #21]
 80086d4:	2b63      	cmp	r3, #99	; 0x63
 80086d6:	dc12      	bgt.n	80086fe <VL53L1_StartMeasurement+0x52>
 80086d8:	2b62      	cmp	r3, #98	; 0x62
 80086da:	da0d      	bge.n	80086f8 <VL53L1_StartMeasurement+0x4c>
 80086dc:	2b05      	cmp	r3, #5
 80086de:	dc0e      	bgt.n	80086fe <VL53L1_StartMeasurement+0x52>
 80086e0:	2b04      	cmp	r3, #4
 80086e2:	da09      	bge.n	80086f8 <VL53L1_StartMeasurement+0x4c>
 80086e4:	2b02      	cmp	r3, #2
 80086e6:	dc02      	bgt.n	80086ee <VL53L1_StartMeasurement+0x42>
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	da05      	bge.n	80086f8 <VL53L1_StartMeasurement+0x4c>
 80086ec:	e007      	b.n	80086fe <VL53L1_StartMeasurement+0x52>
 80086ee:	2b03      	cmp	r3, #3
 80086f0:	d105      	bne.n	80086fe <VL53L1_StartMeasurement+0x52>
	case VL53L1_STATE_IDLE:
		Status = VL53L1_ERROR_NONE;
 80086f2:	2300      	movs	r3, #0
 80086f4:	75fb      	strb	r3, [r7, #23]
		break;
 80086f6:	e004      	b.n	8008702 <VL53L1_StartMeasurement+0x56>
	case VL53L1_STATE_STANDBY:
	case VL53L1_STATE_RUNNING:
	case VL53L1_STATE_RESET:
	case VL53L1_STATE_UNKNOWN:
	case VL53L1_STATE_ERROR:
		Status = VL53L1_ERROR_INVALID_COMMAND;
 80086f8:	23f2      	movs	r3, #242	; 0xf2
 80086fa:	75fb      	strb	r3, [r7, #23]
		break;
 80086fc:	e001      	b.n	8008702 <VL53L1_StartMeasurement+0x56>
	default:
		Status = VL53L1_ERROR_UNDEFINED;
 80086fe:	23fd      	movs	r3, #253	; 0xfd
 8008700:	75fb      	strb	r3, [r7, #23]
	}

	/* Check timing configuration between timing budget and
	 * inter measurement period */
	if ((Status == VL53L1_ERROR_NONE) &&
 8008702:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008706:	2b00      	cmp	r3, #0
 8008708:	d11f      	bne.n	800874a <VL53L1_StartMeasurement+0x9e>
 800870a:	7dbb      	ldrb	r3, [r7, #22]
 800870c:	2b40      	cmp	r3, #64	; 0x40
 800870e:	d11c      	bne.n	800874a <VL53L1_StartMeasurement+0x9e>
		(DeviceMeasurementMode == VL53L1_DEVICEMEASUREMENTMODE_TIMED)) {
		lStatus = VL53L1_GetMeasurementTimingBudgetMicroSeconds(Dev,
 8008710:	f107 0310 	add.w	r3, r7, #16
 8008714:	4619      	mov	r1, r3
 8008716:	6878      	ldr	r0, [r7, #4]
 8008718:	f7ff fdde 	bl	80082d8 <VL53L1_GetMeasurementTimingBudgetMicroSeconds>
 800871c:	4603      	mov	r3, r0
 800871e:	753b      	strb	r3, [r7, #20]
				&MTBus);
		/* convert timing budget in ms */
		MTBus /= 1000;
 8008720:	693b      	ldr	r3, [r7, #16]
 8008722:	4a17      	ldr	r2, [pc, #92]	; (8008780 <VL53L1_StartMeasurement+0xd4>)
 8008724:	fba2 2303 	umull	r2, r3, r2, r3
 8008728:	099b      	lsrs	r3, r3, #6
 800872a:	613b      	str	r3, [r7, #16]
		lStatus = VL53L1_GetInterMeasurementPeriodMilliSeconds(Dev,
 800872c:	f107 030c 	add.w	r3, r7, #12
 8008730:	4619      	mov	r1, r3
 8008732:	6878      	ldr	r0, [r7, #4]
 8008734:	f7ff fe9c 	bl	8008470 <VL53L1_GetInterMeasurementPeriodMilliSeconds>
 8008738:	4603      	mov	r3, r0
 800873a:	753b      	strb	r3, [r7, #20]
				&IMPms);
		/* trick to get rid of compiler "set but not used" warning */
		SUPPRESS_UNUSED_WARNING(lStatus);
		if (IMPms < MTBus + TIMED_MODE_TIMING_GUARD_MILLISECONDS)
 800873c:	693b      	ldr	r3, [r7, #16]
 800873e:	1d1a      	adds	r2, r3, #4
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	429a      	cmp	r2, r3
 8008744:	d901      	bls.n	800874a <VL53L1_StartMeasurement+0x9e>
			Status = VL53L1_ERROR_INVALID_PARAMS;
 8008746:	23fc      	movs	r3, #252	; 0xfc
 8008748:	75fb      	strb	r3, [r7, #23]
	}

	if (Status == VL53L1_ERROR_NONE)
 800874a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800874e:	2b00      	cmp	r3, #0
 8008750:	d107      	bne.n	8008762 <VL53L1_StartMeasurement+0xb6>
		Status = VL53L1_init_and_start_range(
 8008752:	7dbb      	ldrb	r3, [r7, #22]
 8008754:	2206      	movs	r2, #6
 8008756:	4619      	mov	r1, r3
 8008758:	6878      	ldr	r0, [r7, #4]
 800875a:	f001 fe65 	bl	800a428 <VL53L1_init_and_start_range>
 800875e:	4603      	mov	r3, r0
 8008760:	75fb      	strb	r3, [r7, #23]
				Dev,
				DeviceMeasurementMode,
				VL53L1_DEVICECONFIGLEVEL_FULL);

	/* Set PAL State to Running */
	if (Status == VL53L1_ERROR_NONE)
 8008762:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008766:	2b00      	cmp	r3, #0
 8008768:	d103      	bne.n	8008772 <VL53L1_StartMeasurement+0xc6>
		VL53L1DevDataSet(Dev, PalState, VL53L1_STATE_RUNNING);
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	2204      	movs	r2, #4
 800876e:	f883 2378 	strb.w	r2, [r3, #888]	; 0x378


	LOG_FUNCTION_END(Status);
	return Status;
 8008772:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008776:	4618      	mov	r0, r3
 8008778:	3718      	adds	r7, #24
 800877a:	46bd      	mov	sp, r7
 800877c:	bd80      	pop	{r7, pc}
 800877e:	bf00      	nop
 8008780:	10624dd3 	.word	0x10624dd3

08008784 <VL53L1_StopMeasurement>:

VL53L1_Error VL53L1_StopMeasurement(VL53L1_DEV Dev)
{
 8008784:	b580      	push	{r7, lr}
 8008786:	b084      	sub	sp, #16
 8008788:	af00      	add	r7, sp, #0
 800878a:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800878c:	2300      	movs	r3, #0
 800878e:	73fb      	strb	r3, [r7, #15]
	uint8_t DeviceMeasurementMode;

	LOG_FUNCTION_START("");

	Status = VL53L1_stop_range(Dev);
 8008790:	6878      	ldr	r0, [r7, #4]
 8008792:	f002 f8ab 	bl	800a8ec <VL53L1_stop_range>
 8008796:	4603      	mov	r3, r0
 8008798:	73fb      	strb	r3, [r7, #15]
	DeviceMeasurementMode = VL53L1DevDataGet(Dev, LLData.measurement_mode);
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	789b      	ldrb	r3, [r3, #2]
 800879e:	73bb      	strb	r3, [r7, #14]
	if (DeviceMeasurementMode != VL53L1_DEVICEMEASUREMENTMODE_TIMED)
 80087a0:	7bbb      	ldrb	r3, [r7, #14]
 80087a2:	2b40      	cmp	r3, #64	; 0x40
 80087a4:	d002      	beq.n	80087ac <VL53L1_StopMeasurement+0x28>
		VL53L1_UnloadPatch(Dev);
 80087a6:	6878      	ldr	r0, [r7, #4]
 80087a8:	f000 fe18 	bl	80093dc <VL53L1_UnloadPatch>
	/* Set PAL State to Idle */
	if (Status == VL53L1_ERROR_NONE)
 80087ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d103      	bne.n	80087bc <VL53L1_StopMeasurement+0x38>
		VL53L1DevDataSet(Dev, PalState, VL53L1_STATE_IDLE);
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	2203      	movs	r2, #3
 80087b8:	f883 2378 	strb.w	r2, [r3, #888]	; 0x378

	LOG_FUNCTION_END(Status);
	return Status;
 80087bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80087c0:	4618      	mov	r0, r3
 80087c2:	3710      	adds	r7, #16
 80087c4:	46bd      	mov	sp, r7
 80087c6:	bd80      	pop	{r7, pc}

080087c8 <VL53L1_ClearInterruptAndStartMeasurement>:


VL53L1_Error VL53L1_ClearInterruptAndStartMeasurement(VL53L1_DEV Dev)
{
 80087c8:	b580      	push	{r7, lr}
 80087ca:	b084      	sub	sp, #16
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 80087d0:	2300      	movs	r3, #0
 80087d2:	73fb      	strb	r3, [r7, #15]
	uint8_t DeviceMeasurementMode;

	LOG_FUNCTION_START("");

	DeviceMeasurementMode = VL53L1DevDataGet(Dev, LLData.measurement_mode);
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	789b      	ldrb	r3, [r3, #2]
 80087d8:	73bb      	strb	r3, [r7, #14]

	Status = VL53L1_clear_interrupt_and_enable_next_range(Dev,
 80087da:	7bbb      	ldrb	r3, [r7, #14]
 80087dc:	4619      	mov	r1, r3
 80087de:	6878      	ldr	r0, [r7, #4]
 80087e0:	f002 f9ea 	bl	800abb8 <VL53L1_clear_interrupt_and_enable_next_range>
 80087e4:	4603      	mov	r3, r0
 80087e6:	73fb      	strb	r3, [r7, #15]
			DeviceMeasurementMode);

	LOG_FUNCTION_END(Status);
	return Status;
 80087e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80087ec:	4618      	mov	r0, r3
 80087ee:	3710      	adds	r7, #16
 80087f0:	46bd      	mov	sp, r7
 80087f2:	bd80      	pop	{r7, pc}

080087f4 <VL53L1_GetMeasurementDataReady>:


VL53L1_Error VL53L1_GetMeasurementDataReady(VL53L1_DEV Dev,
	uint8_t *pMeasurementDataReady)
{
 80087f4:	b580      	push	{r7, lr}
 80087f6:	b084      	sub	sp, #16
 80087f8:	af00      	add	r7, sp, #0
 80087fa:	6078      	str	r0, [r7, #4]
 80087fc:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 80087fe:	2300      	movs	r3, #0
 8008800:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	Status = VL53L1_is_new_data_ready(Dev, pMeasurementDataReady);
 8008802:	6839      	ldr	r1, [r7, #0]
 8008804:	6878      	ldr	r0, [r7, #4]
 8008806:	f005 fbd4 	bl	800dfb2 <VL53L1_is_new_data_ready>
 800880a:	4603      	mov	r3, r0
 800880c:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 800880e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008812:	4618      	mov	r0, r3
 8008814:	3710      	adds	r7, #16
 8008816:	46bd      	mov	sp, r7
 8008818:	bd80      	pop	{r7, pc}

0800881a <VL53L1_WaitMeasurementDataReady>:

VL53L1_Error VL53L1_WaitMeasurementDataReady(VL53L1_DEV Dev)
{
 800881a:	b580      	push	{r7, lr}
 800881c:	b084      	sub	sp, #16
 800881e:	af00      	add	r7, sp, #0
 8008820:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8008822:	2300      	movs	r3, #0
 8008824:	73fb      	strb	r3, [r7, #15]

	/* Note that the timeout is given by:
	* VL53L1_RANGE_COMPLETION_POLLING_TIMEOUT_MS defined in def.h
	*/

	Status = VL53L1_poll_for_range_completion(Dev,
 8008826:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800882a:	6878      	ldr	r0, [r7, #4]
 800882c:	f005 fbfa 	bl	800e024 <VL53L1_poll_for_range_completion>
 8008830:	4603      	mov	r3, r0
 8008832:	73fb      	strb	r3, [r7, #15]
			VL53L1_RANGE_COMPLETION_POLLING_TIMEOUT_MS);

	LOG_FUNCTION_END(Status);
	return Status;
 8008834:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008838:	4618      	mov	r0, r3
 800883a:	3710      	adds	r7, #16
 800883c:	46bd      	mov	sp, r7
 800883e:	bd80      	pop	{r7, pc}

08008840 <ComputeRQL>:


static uint8_t ComputeRQL(uint8_t active_results,
		uint8_t FilteredRangeStatus,
		VL53L1_range_data_t *presults_data)
{
 8008840:	b480      	push	{r7}
 8008842:	b08d      	sub	sp, #52	; 0x34
 8008844:	af00      	add	r7, sp, #0
 8008846:	4603      	mov	r3, r0
 8008848:	603a      	str	r2, [r7, #0]
 800884a:	71fb      	strb	r3, [r7, #7]
 800884c:	460b      	mov	r3, r1
 800884e:	71bb      	strb	r3, [r7, #6]
	int16_t SRL = 300;
 8008850:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8008854:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t SRAS = 30;
 8008856:	231e      	movs	r3, #30
 8008858:	847b      	strh	r3, [r7, #34]	; 0x22
	FixPoint1616_t RAS;
	FixPoint1616_t SRQL;
	FixPoint1616_t GI =   7713587; /* 117.7 * 65536 */
 800885a:	4b33      	ldr	r3, [pc, #204]	; (8008928 <ComputeRQL+0xe8>)
 800885c:	61fb      	str	r3, [r7, #28]
	FixPoint1616_t GGm =  3198157; /* 48.8 * 65536 */
 800885e:	4b33      	ldr	r3, [pc, #204]	; (800892c <ComputeRQL+0xec>)
 8008860:	61bb      	str	r3, [r7, #24]
	FixPoint1616_t LRAP = 6554;    /* 0.1 * 65536 */
 8008862:	f641 139a 	movw	r3, #6554	; 0x199a
 8008866:	617b      	str	r3, [r7, #20]
	FixPoint1616_t partial;
	uint8_t finalvalue;
	uint8_t returnvalue;

	if (active_results == 0)
 8008868:	79fb      	ldrb	r3, [r7, #7]
 800886a:	2b00      	cmp	r3, #0
 800886c:	d103      	bne.n	8008876 <ComputeRQL+0x36>
		returnvalue = 0;
 800886e:	2300      	movs	r3, #0
 8008870:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008874:	e04f      	b.n	8008916 <ComputeRQL+0xd6>
	else if (FilteredRangeStatus == VL53L1_DEVICEERROR_PHASECONSISTENCY)
 8008876:	79bb      	ldrb	r3, [r7, #6]
 8008878:	2b07      	cmp	r3, #7
 800887a:	d103      	bne.n	8008884 <ComputeRQL+0x44>
		returnvalue = 50;
 800887c:	2332      	movs	r3, #50	; 0x32
 800887e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008882:	e048      	b.n	8008916 <ComputeRQL+0xd6>
	else {
		if (presults_data->median_range_mm < SRL)
 8008884:	683b      	ldr	r3, [r7, #0]
 8008886:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800888a:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 800888e:	429a      	cmp	r2, r3
 8008890:	dd03      	ble.n	800889a <ComputeRQL+0x5a>
			RAS = SRAS * 65536;
 8008892:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008894:	041b      	lsls	r3, r3, #16
 8008896:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008898:	e007      	b.n	80088aa <ComputeRQL+0x6a>
		else
			RAS = LRAP * presults_data->median_range_mm;
 800889a:	683b      	ldr	r3, [r7, #0]
 800889c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80088a0:	461a      	mov	r2, r3
 80088a2:	697b      	ldr	r3, [r7, #20]
 80088a4:	fb02 f303 	mul.w	r3, r2, r3
 80088a8:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Fix1616 + (fix1616 * uint16_t / fix1616) * 65536 = fix1616 */
		if (RAS != 0) {
 80088aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d020      	beq.n	80088f2 <ComputeRQL+0xb2>
			partial = (GGm * presults_data->sigma_mm);
 80088b0:	683b      	ldr	r3, [r7, #0]
 80088b2:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 80088b4:	461a      	mov	r2, r3
 80088b6:	69bb      	ldr	r3, [r7, #24]
 80088b8:	fb02 f303 	mul.w	r3, r2, r3
 80088bc:	613b      	str	r3, [r7, #16]
			partial = partial + (RAS >> 1);
 80088be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088c0:	085b      	lsrs	r3, r3, #1
 80088c2:	693a      	ldr	r2, [r7, #16]
 80088c4:	4413      	add	r3, r2
 80088c6:	613b      	str	r3, [r7, #16]
			partial = partial / RAS;
 80088c8:	693a      	ldr	r2, [r7, #16]
 80088ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80088d0:	613b      	str	r3, [r7, #16]
			partial = partial * 65536;
 80088d2:	693b      	ldr	r3, [r7, #16]
 80088d4:	041b      	lsls	r3, r3, #16
 80088d6:	613b      	str	r3, [r7, #16]
			if (partial <= GI)
 80088d8:	693a      	ldr	r2, [r7, #16]
 80088da:	69fb      	ldr	r3, [r7, #28]
 80088dc:	429a      	cmp	r2, r3
 80088de:	d804      	bhi.n	80088ea <ComputeRQL+0xaa>
				SRQL = GI - partial;
 80088e0:	69fa      	ldr	r2, [r7, #28]
 80088e2:	693b      	ldr	r3, [r7, #16]
 80088e4:	1ad3      	subs	r3, r2, r3
 80088e6:	62bb      	str	r3, [r7, #40]	; 0x28
 80088e8:	e006      	b.n	80088f8 <ComputeRQL+0xb8>
			else
				SRQL = 50 * 65536;
 80088ea:	f44f 1348 	mov.w	r3, #3276800	; 0x320000
 80088ee:	62bb      	str	r3, [r7, #40]	; 0x28
 80088f0:	e002      	b.n	80088f8 <ComputeRQL+0xb8>
		} else
			SRQL = 100 * 65536;
 80088f2:	f44f 03c8 	mov.w	r3, #6553600	; 0x640000
 80088f6:	62bb      	str	r3, [r7, #40]	; 0x28

		finalvalue = (uint8_t)(SRQL >> 16);
 80088f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088fa:	0c1b      	lsrs	r3, r3, #16
 80088fc:	73fb      	strb	r3, [r7, #15]
		returnvalue = MAX(50, MIN(100, finalvalue));
 80088fe:	7bfb      	ldrb	r3, [r7, #15]
 8008900:	2b32      	cmp	r3, #50	; 0x32
 8008902:	d905      	bls.n	8008910 <ComputeRQL+0xd0>
 8008904:	7bfb      	ldrb	r3, [r7, #15]
 8008906:	2b64      	cmp	r3, #100	; 0x64
 8008908:	bf28      	it	cs
 800890a:	2364      	movcs	r3, #100	; 0x64
 800890c:	b2db      	uxtb	r3, r3
 800890e:	e000      	b.n	8008912 <ComputeRQL+0xd2>
 8008910:	2332      	movs	r3, #50	; 0x32
 8008912:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	return returnvalue;
 8008916:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800891a:	4618      	mov	r0, r3
 800891c:	3734      	adds	r7, #52	; 0x34
 800891e:	46bd      	mov	sp, r7
 8008920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008924:	4770      	bx	lr
 8008926:	bf00      	nop
 8008928:	0075b333 	.word	0x0075b333
 800892c:	0030cccd 	.word	0x0030cccd

08008930 <ConvertStatusLite>:


static uint8_t ConvertStatusLite(uint8_t FilteredRangeStatus)
{
 8008930:	b480      	push	{r7}
 8008932:	b085      	sub	sp, #20
 8008934:	af00      	add	r7, sp, #0
 8008936:	4603      	mov	r3, r0
 8008938:	71fb      	strb	r3, [r7, #7]
	uint8_t RangeStatus;

	switch (FilteredRangeStatus) {
 800893a:	79fb      	ldrb	r3, [r7, #7]
 800893c:	3b04      	subs	r3, #4
 800893e:	2b0f      	cmp	r3, #15
 8008940:	d83d      	bhi.n	80089be <ConvertStatusLite+0x8e>
 8008942:	a201      	add	r2, pc, #4	; (adr r2, 8008948 <ConvertStatusLite+0x18>)
 8008944:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008948:	0800899b 	.word	0x0800899b
 800894c:	08008995 	.word	0x08008995
 8008950:	080089a1 	.word	0x080089a1
 8008954:	080089a7 	.word	0x080089a7
 8008958:	080089b3 	.word	0x080089b3
 800895c:	080089b9 	.word	0x080089b9
 8008960:	080089bf 	.word	0x080089bf
 8008964:	080089bf 	.word	0x080089bf
 8008968:	080089ad 	.word	0x080089ad
 800896c:	080089bf 	.word	0x080089bf
 8008970:	080089bf 	.word	0x080089bf
 8008974:	080089bf 	.word	0x080089bf
 8008978:	080089bf 	.word	0x080089bf
 800897c:	080089bf 	.word	0x080089bf
 8008980:	08008989 	.word	0x08008989
 8008984:	0800898f 	.word	0x0800898f
	case VL53L1_DEVICEERROR_GPHSTREAMCOUNT0READY:
		RangeStatus = VL53L1_RANGESTATUS_SYNCRONISATION_INT;
 8008988:	230a      	movs	r3, #10
 800898a:	73fb      	strb	r3, [r7, #15]
		break;
 800898c:	e019      	b.n	80089c2 <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK:
		RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID_NO_WRAP_CHECK_FAIL;
 800898e:	2306      	movs	r3, #6
 8008990:	73fb      	strb	r3, [r7, #15]
		break;
 8008992:	e016      	b.n	80089c2 <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_RANGEPHASECHECK:
		RangeStatus = VL53L1_RANGESTATUS_OUTOFBOUNDS_FAIL;
 8008994:	2304      	movs	r3, #4
 8008996:	73fb      	strb	r3, [r7, #15]
		break;
 8008998:	e013      	b.n	80089c2 <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_MSRCNOTARGET:
		RangeStatus = VL53L1_RANGESTATUS_SIGNAL_FAIL;
 800899a:	2302      	movs	r3, #2
 800899c:	73fb      	strb	r3, [r7, #15]
		break;
 800899e:	e010      	b.n	80089c2 <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_SIGMATHRESHOLDCHECK:
		RangeStatus = VL53L1_RANGESTATUS_SIGMA_FAIL;
 80089a0:	2301      	movs	r3, #1
 80089a2:	73fb      	strb	r3, [r7, #15]
		break;
 80089a4:	e00d      	b.n	80089c2 <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_PHASECONSISTENCY:
		RangeStatus = VL53L1_RANGESTATUS_WRAP_TARGET_FAIL;
 80089a6:	2307      	movs	r3, #7
 80089a8:	73fb      	strb	r3, [r7, #15]
		break;
 80089aa:	e00a      	b.n	80089c2 <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_RANGEIGNORETHRESHOLD:
		RangeStatus = VL53L1_RANGESTATUS_XTALK_SIGNAL_FAIL;
 80089ac:	2309      	movs	r3, #9
 80089ae:	73fb      	strb	r3, [r7, #15]
		break;
 80089b0:	e007      	b.n	80089c2 <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_MINCLIP:
		RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID_MIN_RANGE_CLIPPED;
 80089b2:	2303      	movs	r3, #3
 80089b4:	73fb      	strb	r3, [r7, #15]
		break;
 80089b6:	e004      	b.n	80089c2 <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_RANGECOMPLETE:
		RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID;
 80089b8:	2300      	movs	r3, #0
 80089ba:	73fb      	strb	r3, [r7, #15]
		break;
 80089bc:	e001      	b.n	80089c2 <ConvertStatusLite+0x92>
	default:
		RangeStatus = VL53L1_RANGESTATUS_NONE;
 80089be:	23ff      	movs	r3, #255	; 0xff
 80089c0:	73fb      	strb	r3, [r7, #15]
	}

	return RangeStatus;
 80089c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80089c4:	4618      	mov	r0, r3
 80089c6:	3714      	adds	r7, #20
 80089c8:	46bd      	mov	sp, r7
 80089ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ce:	4770      	bx	lr

080089d0 <SetSimpleData>:

static VL53L1_Error SetSimpleData(VL53L1_DEV Dev,
	uint8_t active_results, uint8_t device_status,
	VL53L1_range_data_t *presults_data,
	VL53L1_RangingMeasurementData_t *pRangeData)
{
 80089d0:	b580      	push	{r7, lr}
 80089d2:	b08c      	sub	sp, #48	; 0x30
 80089d4:	af00      	add	r7, sp, #0
 80089d6:	60f8      	str	r0, [r7, #12]
 80089d8:	607b      	str	r3, [r7, #4]
 80089da:	460b      	mov	r3, r1
 80089dc:	72fb      	strb	r3, [r7, #11]
 80089de:	4613      	mov	r3, r2
 80089e0:	72bb      	strb	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 80089e2:	2300      	movs	r3, #0
 80089e4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	FixPoint1616_t SignalRate;
	FixPoint1616_t TempFix1616;
	FixPoint1616_t LimitCheckValue;
	int16_t Range;

	pRangeData->TimeStamp = presults_data->time_stamp;
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	685a      	ldr	r2, [r3, #4]
 80089ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089ee:	601a      	str	r2, [r3, #0]

	FilteredRangeStatus = presults_data->range_status & 0x1F;
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80089f6:	f003 031f 	and.w	r3, r3, #31
 80089fa:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

	pRangeData->RangeQualityLevel = ComputeRQL(active_results,
 80089fe:	f897 102e 	ldrb.w	r1, [r7, #46]	; 0x2e
 8008a02:	7afb      	ldrb	r3, [r7, #11]
 8008a04:	687a      	ldr	r2, [r7, #4]
 8008a06:	4618      	mov	r0, r3
 8008a08:	f7ff ff1a 	bl	8008840 <ComputeRQL>
 8008a0c:	4603      	mov	r3, r0
 8008a0e:	461a      	mov	r2, r3
 8008a10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a12:	715a      	strb	r2, [r3, #5]
					FilteredRangeStatus,
					presults_data);

	SignalRate = VL53L1_FIXPOINT97TOFIXPOINT1616(
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008a18:	025b      	lsls	r3, r3, #9
 8008a1a:	62bb      	str	r3, [r7, #40]	; 0x28
		presults_data->peak_signal_count_rate_mcps);
	pRangeData->SignalRateRtnMegaCps
		= SignalRate;
 8008a1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a1e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008a20:	609a      	str	r2, [r3, #8]

	AmbientRate = VL53L1_FIXPOINT97TOFIXPOINT1616(
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8008a26:	025b      	lsls	r3, r3, #9
 8008a28:	627b      	str	r3, [r7, #36]	; 0x24
		presults_data->ambient_count_rate_mcps);
	pRangeData->AmbientRateRtnMegaCps = AmbientRate;
 8008a2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a2e:	60da      	str	r2, [r3, #12]

	pRangeData->EffectiveSpadRtnCount =
		presults_data->actual_effective_spads;
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	8a1a      	ldrh	r2, [r3, #16]
	pRangeData->EffectiveSpadRtnCount =
 8008a34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a36:	821a      	strh	r2, [r3, #16]

	TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8008a3c:	025b      	lsls	r3, r3, #9
 8008a3e:	623b      	str	r3, [r7, #32]
			presults_data->sigma_mm);

	pRangeData->SigmaMilliMeter = TempFix1616;
 8008a40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a42:	6a3a      	ldr	r2, [r7, #32]
 8008a44:	615a      	str	r2, [r3, #20]

	pRangeData->RangeMilliMeter = presults_data->median_range_mm;
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	f9b3 203c 	ldrsh.w	r2, [r3, #60]	; 0x3c
 8008a4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a4e:	831a      	strh	r2, [r3, #24]

	pRangeData->RangeFractionalPart = 0;
 8008a50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a52:	2200      	movs	r2, #0
 8008a54:	769a      	strb	r2, [r3, #26]

	/* Treat device error status first */
	switch (device_status) {
 8008a56:	7abb      	ldrb	r3, [r7, #10]
 8008a58:	2b11      	cmp	r3, #17
 8008a5a:	d009      	beq.n	8008a70 <SetSimpleData+0xa0>
 8008a5c:	2b11      	cmp	r3, #17
 8008a5e:	dc0f      	bgt.n	8008a80 <SetSimpleData+0xb0>
 8008a60:	2b03      	cmp	r3, #3
 8008a62:	dc02      	bgt.n	8008a6a <SetSimpleData+0x9a>
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	dc03      	bgt.n	8008a70 <SetSimpleData+0xa0>
 8008a68:	e00a      	b.n	8008a80 <SetSimpleData+0xb0>
 8008a6a:	2b0d      	cmp	r3, #13
 8008a6c:	d004      	beq.n	8008a78 <SetSimpleData+0xa8>
 8008a6e:	e007      	b.n	8008a80 <SetSimpleData+0xb0>
	case VL53L1_DEVICEERROR_MULTCLIPFAIL:
	case VL53L1_DEVICEERROR_VCSELWATCHDOGTESTFAILURE:
	case VL53L1_DEVICEERROR_VCSELCONTINUITYTESTFAILURE:
	case VL53L1_DEVICEERROR_NOVHVVALUEFOUND:
		pRangeData->RangeStatus = VL53L1_RANGESTATUS_HARDWARE_FAIL;
 8008a70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a72:	2205      	movs	r2, #5
 8008a74:	76da      	strb	r2, [r3, #27]
		break;
 8008a76:	e006      	b.n	8008a86 <SetSimpleData+0xb6>
	case VL53L1_DEVICEERROR_USERROICLIP:
		pRangeData->RangeStatus = VL53L1_RANGESTATUS_MIN_RANGE_FAIL;
 8008a78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a7a:	220d      	movs	r2, #13
 8008a7c:	76da      	strb	r2, [r3, #27]
		break;
 8008a7e:	e002      	b.n	8008a86 <SetSimpleData+0xb6>
	default:
		pRangeData->RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID;
 8008a80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a82:	2200      	movs	r2, #0
 8008a84:	76da      	strb	r2, [r3, #27]
	}

	/* Now deal with range status according to the ranging preset */
	if (pRangeData->RangeStatus == VL53L1_RANGESTATUS_RANGE_VALID) {
 8008a86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a88:	7edb      	ldrb	r3, [r3, #27]
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d108      	bne.n	8008aa0 <SetSimpleData+0xd0>
			pRangeData->RangeStatus =
				ConvertStatusLite(FilteredRangeStatus);
 8008a8e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8008a92:	4618      	mov	r0, r3
 8008a94:	f7ff ff4c 	bl	8008930 <ConvertStatusLite>
 8008a98:	4603      	mov	r3, r0
 8008a9a:	461a      	mov	r2, r3
			pRangeData->RangeStatus =
 8008a9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a9e:	76da      	strb	r2, [r3, #27]
	}

	/* Update current Limit Check */
	TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8008aa4:	025b      	lsls	r3, r3, #9
 8008aa6:	623b      	str	r3, [r7, #32]
			presults_data->sigma_mm);
	VL53L1_SETARRAYPARAMETERFIELD(Dev,
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	6a3a      	ldr	r2, [r7, #32]
 8008aac:	f8c3 2390 	str.w	r2, [r3, #912]	; 0x390
		LimitChecksCurrent, VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE,
		TempFix1616);

	TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008ab4:	025b      	lsls	r3, r3, #9
 8008ab6:	623b      	str	r3, [r7, #32]
			presults_data->peak_signal_count_rate_mcps);
	VL53L1_SETARRAYPARAMETERFIELD(Dev,
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	6a3a      	ldr	r2, [r7, #32]
 8008abc:	f8c3 2394 	str.w	r2, [r3, #916]	; 0x394
		LimitChecksCurrent, VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
		TempFix1616);

	/* Update Limit Check Status */
	/* Sigma */
	VL53L1_GetLimitCheckValue(Dev,
 8008ac0:	f107 0314 	add.w	r3, r7, #20
 8008ac4:	461a      	mov	r2, r3
 8008ac6:	2100      	movs	r1, #0
 8008ac8:	68f8      	ldr	r0, [r7, #12]
 8008aca:	f7ff fd7f 	bl	80085cc <VL53L1_GetLimitCheckValue>
			VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE,
			&LimitCheckValue);

	SigmaLimitflag = (FilteredRangeStatus ==
			VL53L1_DEVICEERROR_SIGMATHRESHOLDCHECK)
			? 1 : 0;
 8008ace:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8008ad2:	2b06      	cmp	r3, #6
 8008ad4:	bf0c      	ite	eq
 8008ad6:	2301      	moveq	r3, #1
 8008ad8:	2300      	movne	r3, #0
 8008ada:	b2db      	uxtb	r3, r3
	SigmaLimitflag = (FilteredRangeStatus ==
 8008adc:	77fb      	strb	r3, [r7, #31]

	VL53L1_GetLimitCheckEnable(Dev,
 8008ade:	f107 0319 	add.w	r3, r7, #25
 8008ae2:	461a      	mov	r2, r3
 8008ae4:	2100      	movs	r1, #0
 8008ae6:	68f8      	ldr	r0, [r7, #12]
 8008ae8:	f7ff fd4d 	bl	8008586 <VL53L1_GetLimitCheckEnable>
			VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE,
			&Temp8Enable);

	Temp8 = ((Temp8Enable == 1) && (SigmaLimitflag == 1)) ? 1 : 0;
 8008aec:	7e7b      	ldrb	r3, [r7, #25]
 8008aee:	2b01      	cmp	r3, #1
 8008af0:	d104      	bne.n	8008afc <SetSimpleData+0x12c>
 8008af2:	7ffb      	ldrb	r3, [r7, #31]
 8008af4:	2b01      	cmp	r3, #1
 8008af6:	d101      	bne.n	8008afc <SetSimpleData+0x12c>
 8008af8:	2301      	movs	r3, #1
 8008afa:	e000      	b.n	8008afe <SetSimpleData+0x12e>
 8008afc:	2300      	movs	r3, #0
 8008afe:	77bb      	strb	r3, [r7, #30]
	VL53L1_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	7fba      	ldrb	r2, [r7, #30]
 8008b04:	f883 2386 	strb.w	r2, [r3, #902]	; 0x386
			VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);

	/* Signal Rate */
	VL53L1_GetLimitCheckValue(Dev,
 8008b08:	f107 0314 	add.w	r3, r7, #20
 8008b0c:	461a      	mov	r2, r3
 8008b0e:	2101      	movs	r1, #1
 8008b10:	68f8      	ldr	r0, [r7, #12]
 8008b12:	f7ff fd5b 	bl	80085cc <VL53L1_GetLimitCheckValue>
			VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&LimitCheckValue);

	SignalLimitflag = (FilteredRangeStatus ==
			VL53L1_DEVICEERROR_MSRCNOTARGET)
			? 1 : 0;
 8008b16:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8008b1a:	2b04      	cmp	r3, #4
 8008b1c:	bf0c      	ite	eq
 8008b1e:	2301      	moveq	r3, #1
 8008b20:	2300      	movne	r3, #0
 8008b22:	b2db      	uxtb	r3, r3
	SignalLimitflag = (FilteredRangeStatus ==
 8008b24:	777b      	strb	r3, [r7, #29]

	VL53L1_GetLimitCheckEnable(Dev,
 8008b26:	f107 0319 	add.w	r3, r7, #25
 8008b2a:	461a      	mov	r2, r3
 8008b2c:	2101      	movs	r1, #1
 8008b2e:	68f8      	ldr	r0, [r7, #12]
 8008b30:	f7ff fd29 	bl	8008586 <VL53L1_GetLimitCheckEnable>
			VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&Temp8Enable);

	Temp8 = ((Temp8Enable == 1) && (SignalLimitflag == 1)) ? 1 : 0;
 8008b34:	7e7b      	ldrb	r3, [r7, #25]
 8008b36:	2b01      	cmp	r3, #1
 8008b38:	d104      	bne.n	8008b44 <SetSimpleData+0x174>
 8008b3a:	7f7b      	ldrb	r3, [r7, #29]
 8008b3c:	2b01      	cmp	r3, #1
 8008b3e:	d101      	bne.n	8008b44 <SetSimpleData+0x174>
 8008b40:	2301      	movs	r3, #1
 8008b42:	e000      	b.n	8008b46 <SetSimpleData+0x176>
 8008b44:	2300      	movs	r3, #0
 8008b46:	77bb      	strb	r3, [r7, #30]
	VL53L1_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	7fba      	ldrb	r2, [r7, #30]
 8008b4c:	f883 2387 	strb.w	r2, [r3, #903]	; 0x387
			VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, Temp8);

	Range = pRangeData->RangeMilliMeter;
 8008b50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b52:	8b1b      	ldrh	r3, [r3, #24]
 8008b54:	837b      	strh	r3, [r7, #26]
	if ((pRangeData->RangeStatus == VL53L1_RANGESTATUS_RANGE_VALID) &&
 8008b56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b58:	7edb      	ldrb	r3, [r3, #27]
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d110      	bne.n	8008b80 <SetSimpleData+0x1b0>
 8008b5e:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	da0c      	bge.n	8008b80 <SetSimpleData+0x1b0>
		(Range < 0)) {
		if (Range < BDTable[VL53L1_TUNING_PROXY_MIN])
 8008b66:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8008b6a:	4b08      	ldr	r3, [pc, #32]	; (8008b8c <SetSimpleData+0x1bc>)
 8008b6c:	685b      	ldr	r3, [r3, #4]
 8008b6e:	429a      	cmp	r2, r3
 8008b70:	da03      	bge.n	8008b7a <SetSimpleData+0x1aa>
			pRangeData->RangeStatus =
 8008b72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b74:	220e      	movs	r2, #14
 8008b76:	76da      	strb	r2, [r3, #27]
 8008b78:	e002      	b.n	8008b80 <SetSimpleData+0x1b0>
					VL53L1_RANGESTATUS_RANGE_INVALID;
		else
			pRangeData->RangeMilliMeter = 0;
 8008b7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b7c:	2200      	movs	r2, #0
 8008b7e:	831a      	strh	r2, [r3, #24]
	}

	return Status;
 8008b80:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8008b84:	4618      	mov	r0, r3
 8008b86:	3730      	adds	r7, #48	; 0x30
 8008b88:	46bd      	mov	sp, r7
 8008b8a:	bd80      	pop	{r7, pc}
 8008b8c:	20000020 	.word	0x20000020

08008b90 <VL53L1_GetRangingMeasurementData>:



VL53L1_Error VL53L1_GetRangingMeasurementData(VL53L1_DEV Dev,
	VL53L1_RangingMeasurementData_t *pRangingMeasurementData)
{
 8008b90:	b580      	push	{r7, lr}
 8008b92:	b0a8      	sub	sp, #160	; 0xa0
 8008b94:	af02      	add	r7, sp, #8
 8008b96:	6078      	str	r0, [r7, #4]
 8008b98:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8008b9a:	2300      	movs	r3, #0
 8008b9c:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
	VL53L1_range_results_t results;
	VL53L1_range_results_t *presults = &results;
 8008ba0:	f107 0308 	add.w	r3, r7, #8
 8008ba4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

	LOG_FUNCTION_START("");


	/* Clear Ranging Data */
	memset(pRangingMeasurementData, 0xFF,
 8008ba8:	221c      	movs	r2, #28
 8008baa:	21ff      	movs	r1, #255	; 0xff
 8008bac:	6838      	ldr	r0, [r7, #0]
 8008bae:	f005 fcfb 	bl	800e5a8 <memset>
		sizeof(VL53L1_RangingMeasurementData_t));

	/* Get Ranging Data */
	Status = VL53L1_get_device_results(
 8008bb2:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8008bb6:	2102      	movs	r1, #2
 8008bb8:	6878      	ldr	r0, [r7, #4]
 8008bba:	f001 ff8d 	bl	800aad8 <VL53L1_get_device_results>
 8008bbe:	4603      	mov	r3, r0
 8008bc0:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
			Dev,
			VL53L1_DEVICERESULTSLEVEL_FULL,
			presults);

	if (Status == VL53L1_ERROR_NONE) {
 8008bc4:	f997 3097 	ldrsb.w	r3, [r7, #151]	; 0x97
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d117      	bne.n	8008bfc <VL53L1_GetRangingMeasurementData+0x6c>
		pRangingMeasurementData->StreamCount = presults->stream_count;
 8008bcc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008bd0:	789a      	ldrb	r2, [r3, #2]
 8008bd2:	683b      	ldr	r3, [r7, #0]
 8008bd4:	711a      	strb	r2, [r3, #4]

		/* in case of lite ranging or autonomous the following function
		 * returns index = 0
		 */
		presults_data = &(presults->data[0]);
 8008bd6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008bda:	3304      	adds	r3, #4
 8008bdc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
		Status = SetSimpleData(Dev, 1,
 8008be0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008be4:	78da      	ldrb	r2, [r3, #3]
 8008be6:	683b      	ldr	r3, [r7, #0]
 8008be8:	9300      	str	r3, [sp, #0]
 8008bea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008bee:	2101      	movs	r1, #1
 8008bf0:	6878      	ldr	r0, [r7, #4]
 8008bf2:	f7ff feed 	bl	80089d0 <SetSimpleData>
 8008bf6:	4603      	mov	r3, r0
 8008bf8:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
				presults_data,
				pRangingMeasurementData);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8008bfc:	f997 3097 	ldrsb.w	r3, [r7, #151]	; 0x97
}
 8008c00:	4618      	mov	r0, r3
 8008c02:	3798      	adds	r7, #152	; 0x98
 8008c04:	46bd      	mov	sp, r7
 8008c06:	bd80      	pop	{r7, pc}

08008c08 <VL53L1_PerformRefSpadManagement>:
	return Status;
}


VL53L1_Error VL53L1_PerformRefSpadManagement(VL53L1_DEV Dev)
{
 8008c08:	b580      	push	{r7, lr}
 8008c0a:	b090      	sub	sp, #64	; 0x40
 8008c0c:	af00      	add	r7, sp, #0
 8008c0e:	6078      	str	r0, [r7, #4]

	SUPPRESS_UNUSED_WARNING(Dev);

	LOG_FUNCTION_START("");
#else
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8008c10:	2300      	movs	r3, #0
 8008c12:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	VL53L1_Error RawStatus;
	uint8_t dcrbuffer[24];
	uint8_t *commbuf;
	uint8_t numloc[2] = {5, 3};
 8008c16:	f240 3305 	movw	r3, #773	; 0x305
 8008c1a:	81bb      	strh	r3, [r7, #12]
	VL53L1_customer_nvm_managed_t *pc;
	VL53L1_PresetModes PresetMode;

	LOG_FUNCTION_START("");

	pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	63bb      	str	r3, [r7, #56]	; 0x38
	pc = &pdev->customer;
 8008c20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c22:	3342      	adds	r3, #66	; 0x42
 8008c24:	637b      	str	r3, [r7, #52]	; 0x34

	if (Status == VL53L1_ERROR_NONE) {
 8008c26:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d11a      	bne.n	8008c64 <VL53L1_PerformRefSpadManagement+0x5c>
		PresetMode = VL53L1DevDataGet(Dev,
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	f893 337c 	ldrb.w	r3, [r3, #892]	; 0x37c
 8008c34:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
				CurrentParameters.PresetMode);
		Status = VL53L1_run_ref_spad_char(Dev, &RawStatus);
 8008c38:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 8008c3c:	4619      	mov	r1, r3
 8008c3e:	6878      	ldr	r0, [r7, #4]
 8008c40:	f000 fc01 	bl	8009446 <VL53L1_run_ref_spad_char>
 8008c44:	4603      	mov	r3, r0
 8008c46:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		/* We discovered RefSpad mngt badly breaks some preset mode
		 * The WA is to apply again the current one
		 */
		if (Status == VL53L1_ERROR_NONE)
 8008c4a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d108      	bne.n	8008c64 <VL53L1_PerformRefSpadManagement+0x5c>
			Status = VL53L1_SetPresetMode(Dev, PresetMode);
 8008c52:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008c56:	4619      	mov	r1, r3
 8008c58:	6878      	ldr	r0, [r7, #4]
 8008c5a:	f7ff f9a2 	bl	8007fa2 <VL53L1_SetPresetMode>
 8008c5e:	4603      	mov	r3, r0
 8008c60:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	}

	if (Status == VL53L1_WARNING_REF_SPAD_CHAR_RATE_TOO_HIGH) {
 8008c64:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008c68:	f113 0f1d 	cmn.w	r3, #29
 8008c6c:	d14e      	bne.n	8008d0c <VL53L1_PerformRefSpadManagement+0x104>
		/* Fix ticket  #466282 RefSpad management error/warning -29
		 * force usage of location 3 and 5 refspads in registers
		*/
		Status = VL53L1_read_nvm_raw_data(Dev,
 8008c6e:	f107 0310 	add.w	r3, r7, #16
 8008c72:	2206      	movs	r2, #6
 8008c74:	2128      	movs	r1, #40	; 0x28
 8008c76:	6878      	ldr	r0, [r7, #4]
 8008c78:	f7fe fec1 	bl	80079fe <VL53L1_read_nvm_raw_data>
 8008c7c:	4603      	mov	r3, r0
 8008c7e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				(uint8_t)(0xA0 >> 2),
				(uint8_t)(24 >> 2),
				dcrbuffer);

		if (Status == VL53L1_ERROR_NONE)
 8008c82:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d109      	bne.n	8008c9e <VL53L1_PerformRefSpadManagement+0x96>
			Status = VL53L1_WriteMulti(Dev,
 8008c8a:	f107 020c 	add.w	r2, r7, #12
 8008c8e:	2302      	movs	r3, #2
 8008c90:	2114      	movs	r1, #20
 8008c92:	6878      	ldr	r0, [r7, #4]
 8008c94:	f005 fa34 	bl	800e100 <VL53L1_WriteMulti>
 8008c98:	4603      	mov	r3, r0
 8008c9a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L1_REF_SPAD_MAN__NUM_REQUESTED_REF_SPADS,
				numloc, 2);

		if (Status == VL53L1_ERROR_NONE) {
 8008c9e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d105      	bne.n	8008cb2 <VL53L1_PerformRefSpadManagement+0xaa>
			pc->ref_spad_man__num_requested_ref_spads = numloc[0];
 8008ca6:	7b3a      	ldrb	r2, [r7, #12]
 8008ca8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008caa:	71da      	strb	r2, [r3, #7]
			pc->ref_spad_man__ref_location = numloc[1];
 8008cac:	7b7a      	ldrb	r2, [r7, #13]
 8008cae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008cb0:	721a      	strb	r2, [r3, #8]
		}

		commbuf = &dcrbuffer[16];
 8008cb2:	f107 0310 	add.w	r3, r7, #16
 8008cb6:	3310      	adds	r3, #16
 8008cb8:	62fb      	str	r3, [r7, #44]	; 0x2c
		/*
		 * update & copy reference SPAD enables to customer nvm managed
		 */
		if (Status == VL53L1_ERROR_NONE)
 8008cba:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d108      	bne.n	8008cd4 <VL53L1_PerformRefSpadManagement+0xcc>
			Status = VL53L1_WriteMulti(Dev,
 8008cc2:	2306      	movs	r3, #6
 8008cc4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008cc6:	210d      	movs	r1, #13
 8008cc8:	6878      	ldr	r0, [r7, #4]
 8008cca:	f005 fa19 	bl	800e100 <VL53L1_WriteMulti>
 8008cce:	4603      	mov	r3, r0
 8008cd0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L1_GLOBAL_CONFIG__SPAD_ENABLES_REF_0,
				commbuf, 6);

		if (Status == VL53L1_ERROR_NONE) {
 8008cd4:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d117      	bne.n	8008d0c <VL53L1_PerformRefSpadManagement+0x104>
			pc->global_config__spad_enables_ref_0 = commbuf[0];
 8008cdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cde:	781a      	ldrb	r2, [r3, #0]
 8008ce0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ce2:	701a      	strb	r2, [r3, #0]
			pc->global_config__spad_enables_ref_1 = commbuf[1];
 8008ce4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ce6:	785a      	ldrb	r2, [r3, #1]
 8008ce8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008cea:	705a      	strb	r2, [r3, #1]
			pc->global_config__spad_enables_ref_2 = commbuf[2];
 8008cec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cee:	789a      	ldrb	r2, [r3, #2]
 8008cf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008cf2:	709a      	strb	r2, [r3, #2]
			pc->global_config__spad_enables_ref_3 = commbuf[3];
 8008cf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cf6:	78da      	ldrb	r2, [r3, #3]
 8008cf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008cfa:	70da      	strb	r2, [r3, #3]
			pc->global_config__spad_enables_ref_4 = commbuf[4];
 8008cfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cfe:	791a      	ldrb	r2, [r3, #4]
 8008d00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d02:	711a      	strb	r2, [r3, #4]
			pc->global_config__spad_enables_ref_5 = commbuf[5];
 8008d04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d06:	795a      	ldrb	r2, [r3, #5]
 8008d08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d0a:	715a      	strb	r2, [r3, #5]
	}

#endif

	LOG_FUNCTION_END(Status);
	return Status;
 8008d0c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8008d10:	4618      	mov	r0, r3
 8008d12:	3740      	adds	r7, #64	; 0x40
 8008d14:	46bd      	mov	sp, r7
 8008d16:	bd80      	pop	{r7, pc}

08008d18 <VL53L1_PerformSingleTargetXTalkCalibration>:
	return Status;
}

VL53L1_Error VL53L1_PerformSingleTargetXTalkCalibration(VL53L1_DEV Dev,
		int32_t CalDistanceMilliMeter)
{
 8008d18:	b580      	push	{r7, lr}
 8008d1a:	b084      	sub	sp, #16
 8008d1c:	af00      	add	r7, sp, #0
 8008d1e:	6078      	str	r0, [r7, #4]
 8008d20:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8008d22:	2300      	movs	r3, #0
 8008d24:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	if (CalDistanceMilliMeter > 0) {
 8008d26:	683b      	ldr	r3, [r7, #0]
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	dd08      	ble.n	8008d3e <VL53L1_PerformSingleTargetXTalkCalibration+0x26>
		BDTable[VL53L1_TUNING_SINGLE_TARGET_XTALK_TARGET_DISTANCE_MM] =
 8008d2c:	4a08      	ldr	r2, [pc, #32]	; (8008d50 <VL53L1_PerformSingleTargetXTalkCalibration+0x38>)
 8008d2e:	683b      	ldr	r3, [r7, #0]
 8008d30:	6093      	str	r3, [r2, #8]
				CalDistanceMilliMeter;
		Status = SingleTargetXTalkCalibration(Dev);
 8008d32:	6878      	ldr	r0, [r7, #4]
 8008d34:	f7fe fe94 	bl	8007a60 <SingleTargetXTalkCalibration>
 8008d38:	4603      	mov	r3, r0
 8008d3a:	73fb      	strb	r3, [r7, #15]
 8008d3c:	e001      	b.n	8008d42 <VL53L1_PerformSingleTargetXTalkCalibration+0x2a>
	} else
		Status = VL53L1_ERROR_INVALID_PARAMS;
 8008d3e:	23fc      	movs	r3, #252	; 0xfc
 8008d40:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8008d42:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008d46:	4618      	mov	r0, r3
 8008d48:	3710      	adds	r7, #16
 8008d4a:	46bd      	mov	sp, r7
 8008d4c:	bd80      	pop	{r7, pc}
 8008d4e:	bf00      	nop
 8008d50:	20000020 	.word	0x20000020

08008d54 <VL53L1_PerformOffsetSimpleCalibration>:



VL53L1_Error VL53L1_PerformOffsetSimpleCalibration(VL53L1_DEV Dev,
	int32_t CalDistanceMilliMeter)
{
 8008d54:	b580      	push	{r7, lr}
 8008d56:	b094      	sub	sp, #80	; 0x50
 8008d58:	af00      	add	r7, sp, #0
 8008d5a:	6078      	str	r0, [r7, #4]
 8008d5c:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8008d5e:	2300      	movs	r3, #0
 8008d60:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	VL53L1_LLDriverData_t *pdev;
	uint8_t goodmeas;

	LOG_FUNCTION_START("");

	pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	63bb      	str	r3, [r7, #56]	; 0x38
	/* Disable any offsets */
	pdev->customer.algo__part_to_part_range_offset_mm = 0;
 8008d68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d6a:	2200      	movs	r2, #0
 8008d6c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
	pdev->customer.mm_config__inner_offset_mm = 0;
 8008d70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d72:	2200      	movs	r2, #0
 8008d74:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
	pdev->customer.mm_config__outer_offset_mm = 0;
 8008d78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d7a:	2200      	movs	r2, #0
 8008d7c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
	Repeat = BDTable[VL53L1_TUNING_SIMPLE_OFFSET_CALIBRATION_REPEAT];
 8008d80:	4b76      	ldr	r3, [pc, #472]	; (8008f5c <VL53L1_PerformOffsetSimpleCalibration+0x208>)
 8008d82:	69db      	ldr	r3, [r3, #28]
 8008d84:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
	Max = BDTable[
 8008d88:	4b74      	ldr	r3, [pc, #464]	; (8008f5c <VL53L1_PerformOffsetSimpleCalibration+0x208>)
 8008d8a:	695b      	ldr	r3, [r3, #20]
 8008d8c:	86fb      	strh	r3, [r7, #54]	; 0x36
		VL53L1_TUNING_MAX_SIMPLE_OFFSET_CALIBRATION_SAMPLE_NUMBER];
	UnderMax = 1 + (Max / 2);
 8008d8e:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8008d92:	0fda      	lsrs	r2, r3, #31
 8008d94:	4413      	add	r3, r2
 8008d96:	105b      	asrs	r3, r3, #1
 8008d98:	b21b      	sxth	r3, r3
 8008d9a:	b29b      	uxth	r3, r3
 8008d9c:	3301      	adds	r3, #1
 8008d9e:	b29b      	uxth	r3, r3
 8008da0:	86bb      	strh	r3, [r7, #52]	; 0x34
	OverMax = Max + (Max / 2);
 8008da2:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8008da6:	0fda      	lsrs	r2, r3, #31
 8008da8:	4413      	add	r3, r2
 8008daa:	105b      	asrs	r3, r3, #1
 8008dac:	b21b      	sxth	r3, r3
 8008dae:	b29a      	uxth	r2, r3
 8008db0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8008db2:	4413      	add	r3, r2
 8008db4:	b29b      	uxth	r3, r3
 8008db6:	867b      	strh	r3, [r7, #50]	; 0x32
	sum_ranging = 0;
 8008db8:	2300      	movs	r3, #0
 8008dba:	64bb      	str	r3, [r7, #72]	; 0x48
	total_count = 0;
 8008dbc:	2300      	movs	r3, #0
 8008dbe:	643b      	str	r3, [r7, #64]	; 0x40

	while ((Repeat > 0) && (Status == VL53L1_ERROR_NONE)) {
 8008dc0:	e081      	b.n	8008ec6 <VL53L1_PerformOffsetSimpleCalibration+0x172>
		Status = VL53L1_StartMeasurement(Dev);
 8008dc2:	6878      	ldr	r0, [r7, #4]
 8008dc4:	f7ff fc72 	bl	80086ac <VL53L1_StartMeasurement>
 8008dc8:	4603      	mov	r3, r0
 8008dca:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
		/* Very first ranging completion interrupt must be ignored */
		if (Status == VL53L1_ERROR_NONE) {
 8008dce:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d10b      	bne.n	8008dee <VL53L1_PerformOffsetSimpleCalibration+0x9a>
			VL53L1_WaitMeasurementDataReady(Dev);
 8008dd6:	6878      	ldr	r0, [r7, #4]
 8008dd8:	f7ff fd1f 	bl	800881a <VL53L1_WaitMeasurementDataReady>
			VL53L1_GetRangingMeasurementData(Dev,
 8008ddc:	f107 030c 	add.w	r3, r7, #12
 8008de0:	4619      	mov	r1, r3
 8008de2:	6878      	ldr	r0, [r7, #4]
 8008de4:	f7ff fed4 	bl	8008b90 <VL53L1_GetRangingMeasurementData>
				&RangingMeasurementData);
			VL53L1_ClearInterruptAndStartMeasurement(Dev);
 8008de8:	6878      	ldr	r0, [r7, #4]
 8008dea:	f7ff fced 	bl	80087c8 <VL53L1_ClearInterruptAndStartMeasurement>
		}
		/* offset calibration main loop */
		inloopcount = 0;
 8008dee:	2300      	movs	r3, #0
 8008df0:	63fb      	str	r3, [r7, #60]	; 0x3c
		offset_meas = 0;
 8008df2:	2300      	movs	r3, #0
 8008df4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		while ((Status == VL53L1_ERROR_NONE) && (inloopcount < Max) &&
 8008df8:	e037      	b.n	8008e6a <VL53L1_PerformOffsetSimpleCalibration+0x116>
				(offset_meas < OverMax)) {
			Status = VL53L1_WaitMeasurementDataReady(Dev);
 8008dfa:	6878      	ldr	r0, [r7, #4]
 8008dfc:	f7ff fd0d 	bl	800881a <VL53L1_WaitMeasurementDataReady>
 8008e00:	4603      	mov	r3, r0
 8008e02:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			if (Status == VL53L1_ERROR_NONE)
 8008e06:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d108      	bne.n	8008e20 <VL53L1_PerformOffsetSimpleCalibration+0xcc>
				Status = VL53L1_GetRangingMeasurementData(Dev,
 8008e0e:	f107 030c 	add.w	r3, r7, #12
 8008e12:	4619      	mov	r1, r3
 8008e14:	6878      	ldr	r0, [r7, #4]
 8008e16:	f7ff febb 	bl	8008b90 <VL53L1_GetRangingMeasurementData>
 8008e1a:	4603      	mov	r3, r0
 8008e1c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
						&RangingMeasurementData);
			goodmeas = (RangingMeasurementData.RangeStatus ==
 8008e20:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	bf0c      	ite	eq
 8008e28:	2301      	moveq	r3, #1
 8008e2a:	2300      	movne	r3, #0
 8008e2c:	b2db      	uxtb	r3, r3
 8008e2e:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
					VL53L1_RANGESTATUS_RANGE_VALID);
			if ((Status == VL53L1_ERROR_NONE) && goodmeas) {
 8008e32:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d10c      	bne.n	8008e54 <VL53L1_PerformOffsetSimpleCalibration+0x100>
 8008e3a:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d008      	beq.n	8008e54 <VL53L1_PerformOffsetSimpleCalibration+0x100>
				sum_ranging = sum_ranging +
					RangingMeasurementData.RangeMilliMeter;
 8008e42:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8008e46:	461a      	mov	r2, r3
				sum_ranging = sum_ranging +
 8008e48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008e4a:	4413      	add	r3, r2
 8008e4c:	64bb      	str	r3, [r7, #72]	; 0x48
				inloopcount++;
 8008e4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e50:	3301      	adds	r3, #1
 8008e52:	63fb      	str	r3, [r7, #60]	; 0x3c
			}
			Status = VL53L1_ClearInterruptAndStartMeasurement(Dev);
 8008e54:	6878      	ldr	r0, [r7, #4]
 8008e56:	f7ff fcb7 	bl	80087c8 <VL53L1_ClearInterruptAndStartMeasurement>
 8008e5a:	4603      	mov	r3, r0
 8008e5c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			offset_meas++;
 8008e60:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8008e64:	3301      	adds	r3, #1
 8008e66:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		while ((Status == VL53L1_ERROR_NONE) && (inloopcount < Max) &&
 8008e6a:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d10a      	bne.n	8008e88 <VL53L1_PerformOffsetSimpleCalibration+0x134>
 8008e72:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8008e76:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008e78:	429a      	cmp	r2, r3
 8008e7a:	da05      	bge.n	8008e88 <VL53L1_PerformOffsetSimpleCalibration+0x134>
				(offset_meas < OverMax)) {
 8008e7c:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8008e80:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
		while ((Status == VL53L1_ERROR_NONE) && (inloopcount < Max) &&
 8008e84:	429a      	cmp	r2, r3
 8008e86:	dbb8      	blt.n	8008dfa <VL53L1_PerformOffsetSimpleCalibration+0xa6>
		}
		total_count += inloopcount;
 8008e88:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008e8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e8c:	4413      	add	r3, r2
 8008e8e:	643b      	str	r3, [r7, #64]	; 0x40

		/* no enough valid values found */
		if (inloopcount < UnderMax)
 8008e90:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8008e94:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008e96:	429a      	cmp	r2, r3
 8008e98:	da02      	bge.n	8008ea0 <VL53L1_PerformOffsetSimpleCalibration+0x14c>
			Status = VL53L1_ERROR_OFFSET_CAL_NO_SAMPLE_FAIL;
 8008e9a:	23e8      	movs	r3, #232	; 0xe8
 8008e9c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

		VL53L1_StopMeasurement(Dev);
 8008ea0:	6878      	ldr	r0, [r7, #4]
 8008ea2:	f7ff fc6f 	bl	8008784 <VL53L1_StopMeasurement>

		Repeat--;
 8008ea6:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 8008eaa:	b29b      	uxth	r3, r3
 8008eac:	3b01      	subs	r3, #1
 8008eae:	b29b      	uxth	r3, r3
 8008eb0:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
		uartTxBufLen=sprintf(uartTxBuf,"going\r\n");
 8008eb4:	492a      	ldr	r1, [pc, #168]	; (8008f60 <VL53L1_PerformOffsetSimpleCalibration+0x20c>)
 8008eb6:	482b      	ldr	r0, [pc, #172]	; (8008f64 <VL53L1_PerformOffsetSimpleCalibration+0x210>)
 8008eb8:	f006 f81c 	bl	800eef4 <siprintf>
 8008ebc:	4603      	mov	r3, r0
 8008ebe:	4a2a      	ldr	r2, [pc, #168]	; (8008f68 <VL53L1_PerformOffsetSimpleCalibration+0x214>)
 8008ec0:	6013      	str	r3, [r2, #0]
		printToSerial();
 8008ec2:	f7f8 ff2d 	bl	8001d20 <printToSerial>
	while ((Repeat > 0) && (Status == VL53L1_ERROR_NONE)) {
 8008ec6:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	dd04      	ble.n	8008ed8 <VL53L1_PerformOffsetSimpleCalibration+0x184>
 8008ece:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	f43f af75 	beq.w	8008dc2 <VL53L1_PerformOffsetSimpleCalibration+0x6e>

	}
	/* check overflow (unlikely if target is near to the device) */
	if ((sum_ranging < 0) ||
 8008ed8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	db06      	blt.n	8008eec <VL53L1_PerformOffsetSimpleCalibration+0x198>
		(sum_ranging > ((int32_t) total_count * 0xffff)))
 8008ede:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008ee0:	4613      	mov	r3, r2
 8008ee2:	041b      	lsls	r3, r3, #16
 8008ee4:	1a9b      	subs	r3, r3, r2
	if ((sum_ranging < 0) ||
 8008ee6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008ee8:	429a      	cmp	r2, r3
 8008eea:	dd02      	ble.n	8008ef2 <VL53L1_PerformOffsetSimpleCalibration+0x19e>
		Status = VL53L1_WARNING_OFFSET_CAL_SIGMA_TOO_HIGH;
 8008eec:	23e0      	movs	r3, #224	; 0xe0
 8008eee:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	if ((Status == VL53L1_ERROR_NONE) && (total_count > 0)) {
 8008ef2:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d129      	bne.n	8008f4e <VL53L1_PerformOffsetSimpleCalibration+0x1fa>
 8008efa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	dd26      	ble.n	8008f4e <VL53L1_PerformOffsetSimpleCalibration+0x1fa>
		IncRounding = total_count / 2;
 8008f00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008f02:	0fda      	lsrs	r2, r3, #31
 8008f04:	4413      	add	r3, r2
 8008f06:	105b      	asrs	r3, r3, #1
 8008f08:	62fb      	str	r3, [r7, #44]	; 0x2c
		meanDistance_mm = (int16_t)((sum_ranging + IncRounding)
 8008f0a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008f0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f0e:	441a      	add	r2, r3
				/ total_count);
 8008f10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008f12:	fb92 f3f3 	sdiv	r3, r2, r3
		meanDistance_mm = (int16_t)((sum_ranging + IncRounding)
 8008f16:	857b      	strh	r3, [r7, #42]	; 0x2a
		offset = (int16_t)CalDistanceMilliMeter - meanDistance_mm;
 8008f18:	683b      	ldr	r3, [r7, #0]
 8008f1a:	b29a      	uxth	r2, r3
 8008f1c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8008f1e:	1ad3      	subs	r3, r2, r3
 8008f20:	b29b      	uxth	r3, r3
 8008f22:	853b      	strh	r3, [r7, #40]	; 0x28
		pdev->customer.algo__part_to_part_range_offset_mm = 0;
 8008f24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f26:	2200      	movs	r2, #0
 8008f28:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
		pdev->customer.mm_config__inner_offset_mm = offset;
 8008f2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f2e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8008f30:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
		pdev->customer.mm_config__outer_offset_mm = offset;
 8008f34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f36:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8008f38:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

		Status = VL53L1_set_customer_nvm_managed(Dev,
 8008f3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f3e:	3342      	adds	r3, #66	; 0x42
 8008f40:	4619      	mov	r1, r3
 8008f42:	6878      	ldr	r0, [r7, #4]
 8008f44:	f004 f8c5 	bl	800d0d2 <VL53L1_set_customer_nvm_managed>
 8008f48:	4603      	mov	r3, r0
 8008f4a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
				&(pdev->customer));
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8008f4e:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
}
 8008f52:	4618      	mov	r0, r3
 8008f54:	3750      	adds	r7, #80	; 0x50
 8008f56:	46bd      	mov	sp, r7
 8008f58:	bd80      	pop	{r7, pc}
 8008f5a:	bf00      	nop
 8008f5c:	20000020 	.word	0x20000020
 8008f60:	08013228 	.word	0x08013228
 8008f64:	20000b14 	.word	0x20000b14
 8008f68:	20000e34 	.word	0x20000e34

08008f6c <VL53L1_SetCalibrationData>:
	return Status;
}

VL53L1_Error VL53L1_SetCalibrationData(VL53L1_DEV Dev,
		VL53L1_CalibrationData_t *pCalibrationData)
{
 8008f6c:	b580      	push	{r7, lr}
 8008f6e:	b0a0      	sub	sp, #128	; 0x80
 8008f70:	af00      	add	r7, sp, #0
 8008f72:	6078      	str	r0, [r7, #4]
 8008f74:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8008f76:	2300      	movs	r3, #0
 8008f78:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	VL53L1_calibration_data_t            cal_data;
	uint32_t x, IncomeVersion, CurrentVersion;

	LOG_FUNCTION_START("");

	cal_data.struct_version = pCalibrationData->struct_version -
 8008f7c:	683b      	ldr	r3, [r7, #0]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	3b20      	subs	r3, #32
 8008f82:	60bb      	str	r3, [r7, #8]
			VL53L1_ADDITIONAL_CALIBRATION_DATA_STRUCT_VERSION;
	/* adjust version for old calibration data */
	IncomeVersion = pCalibrationData->struct_version;
 8008f84:	683b      	ldr	r3, [r7, #0]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	67bb      	str	r3, [r7, #120]	; 0x78
	CurrentVersion = VL53L1_LL_CALIBRATION_DATA_STRUCT_VERSION +
 8008f8a:	4b3b      	ldr	r3, [pc, #236]	; (8009078 <VL53L1_SetCalibrationData+0x10c>)
 8008f8c:	677b      	str	r3, [r7, #116]	; 0x74
		VL53L1_ADDITIONAL_CALIBRATION_DATA_STRUCT_VERSION;

	if ((IncomeVersion < CurrentVersion) &&
 8008f8e:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008f90:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008f92:	429a      	cmp	r2, r3
 8008f94:	d208      	bcs.n	8008fa8 <VL53L1_SetCalibrationData+0x3c>
		((IncomeVersion & 0xFFFFFF0F) ==
 8008f96:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008f98:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008f9a:	4053      	eors	r3, r2
 8008f9c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
	if ((IncomeVersion < CurrentVersion) &&
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d101      	bne.n	8008fa8 <VL53L1_SetCalibrationData+0x3c>
		 (CurrentVersion & 0xFFFFFF0F))) {
		cal_data.struct_version =
 8008fa4:	4b35      	ldr	r3, [pc, #212]	; (800907c <VL53L1_SetCalibrationData+0x110>)
 8008fa6:	60bb      	str	r3, [r7, #8]


	/* memcpy(DEST, SRC, N)  */
	memcpy(
		&(cal_data.add_off_cal_data),
		&(pCalibrationData->add_off_cal_data),
 8008fa8:	683b      	ldr	r3, [r7, #0]
 8008faa:	f103 0120 	add.w	r1, r3, #32
	memcpy(
 8008fae:	f107 0308 	add.w	r3, r7, #8
 8008fb2:	331c      	adds	r3, #28
 8008fb4:	2208      	movs	r2, #8
 8008fb6:	4618      	mov	r0, r3
 8008fb8:	f005 fae8 	bl	800e58c <memcpy>
		sizeof(VL53L1_additional_offset_cal_data_t));

	/* memcpy (DEST, SRC, N) */
	memcpy(
		&(cal_data.optical_centre),
		&(pCalibrationData->optical_centre),
 8008fbc:	683b      	ldr	r3, [r7, #0]
 8008fbe:	3328      	adds	r3, #40	; 0x28
 8008fc0:	881b      	ldrh	r3, [r3, #0]
 8008fc2:	b29b      	uxth	r3, r3
	memcpy(
 8008fc4:	85bb      	strh	r3, [r7, #44]	; 0x2c
		sizeof(VL53L1_optical_centre_t));

	/* memcpy (DEST, SRC, N) */
	memcpy(
		&(cal_data.gain_cal),
		&(pCalibrationData->gain_cal),
 8008fc6:	683b      	ldr	r3, [r7, #0]
 8008fc8:	332a      	adds	r3, #42	; 0x2a
 8008fca:	881b      	ldrh	r3, [r3, #0]
 8008fcc:	b29b      	uxth	r3, r3
	memcpy(
 8008fce:	85fb      	strh	r3, [r7, #46]	; 0x2e
		sizeof(VL53L1_gain_calibration_data_t));

	/* memcpy (DEST, SRC, N) */
	memcpy(
		&(cal_data.cal_peak_rate_map),
		&(pCalibrationData->cal_peak_rate_map),
 8008fd0:	683b      	ldr	r3, [r7, #0]
 8008fd2:	f103 012c 	add.w	r1, r3, #44	; 0x2c
	memcpy(
 8008fd6:	f107 0308 	add.w	r3, r7, #8
 8008fda:	3328      	adds	r3, #40	; 0x28
 8008fdc:	223a      	movs	r2, #58	; 0x3a
 8008fde:	4618      	mov	r0, r3
 8008fe0:	f005 fad4 	bl	800e58c <memcpy>
		sizeof(VL53L1_cal_peak_rate_map_t));


	pC = &pCalibrationData->customer;
 8008fe4:	683b      	ldr	r3, [r7, #0]
 8008fe6:	3304      	adds	r3, #4
 8008fe8:	673b      	str	r3, [r7, #112]	; 0x70
	x = pC->algo__crosstalk_compensation_plane_offset_kcps;
 8008fea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008fec:	68db      	ldr	r3, [r3, #12]
 8008fee:	66fb      	str	r3, [r7, #108]	; 0x6c
	cal_data.customer.algo__crosstalk_compensation_plane_offset_kcps =
		(uint16_t)(x&0x0000FFFF);
 8008ff0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ff2:	b29b      	uxth	r3, r3
	cal_data.customer.algo__crosstalk_compensation_plane_offset_kcps =
 8008ff4:	82fb      	strh	r3, [r7, #22]

	cal_data.customer.global_config__spad_enables_ref_0 =
		pC->global_config__spad_enables_ref_0;
 8008ff6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008ff8:	781b      	ldrb	r3, [r3, #0]
	cal_data.customer.global_config__spad_enables_ref_0 =
 8008ffa:	733b      	strb	r3, [r7, #12]
	cal_data.customer.global_config__spad_enables_ref_1 =
		pC->global_config__spad_enables_ref_1;
 8008ffc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008ffe:	785b      	ldrb	r3, [r3, #1]
	cal_data.customer.global_config__spad_enables_ref_1 =
 8009000:	737b      	strb	r3, [r7, #13]
	cal_data.customer.global_config__spad_enables_ref_2 =
		pC->global_config__spad_enables_ref_2;
 8009002:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009004:	789b      	ldrb	r3, [r3, #2]
	cal_data.customer.global_config__spad_enables_ref_2 =
 8009006:	73bb      	strb	r3, [r7, #14]
	cal_data.customer.global_config__spad_enables_ref_3 =
		pC->global_config__spad_enables_ref_3;
 8009008:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800900a:	78db      	ldrb	r3, [r3, #3]
	cal_data.customer.global_config__spad_enables_ref_3 =
 800900c:	73fb      	strb	r3, [r7, #15]
	cal_data.customer.global_config__spad_enables_ref_4 =
		pC->global_config__spad_enables_ref_4;
 800900e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009010:	791b      	ldrb	r3, [r3, #4]
	cal_data.customer.global_config__spad_enables_ref_4 =
 8009012:	743b      	strb	r3, [r7, #16]
	cal_data.customer.global_config__spad_enables_ref_5 =
		pC->global_config__spad_enables_ref_5;
 8009014:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009016:	795b      	ldrb	r3, [r3, #5]
	cal_data.customer.global_config__spad_enables_ref_5 =
 8009018:	747b      	strb	r3, [r7, #17]
	cal_data.customer.global_config__ref_en_start_select =
		pC->global_config__ref_en_start_select;
 800901a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800901c:	799b      	ldrb	r3, [r3, #6]
	cal_data.customer.global_config__ref_en_start_select =
 800901e:	74bb      	strb	r3, [r7, #18]
	cal_data.customer.ref_spad_man__num_requested_ref_spads =
		pC->ref_spad_man__num_requested_ref_spads;
 8009020:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009022:	79db      	ldrb	r3, [r3, #7]
	cal_data.customer.ref_spad_man__num_requested_ref_spads =
 8009024:	74fb      	strb	r3, [r7, #19]
	cal_data.customer.ref_spad_man__ref_location =
		pC->ref_spad_man__ref_location;
 8009026:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009028:	7a1b      	ldrb	r3, [r3, #8]
	cal_data.customer.ref_spad_man__ref_location =
 800902a:	753b      	strb	r3, [r7, #20]
	cal_data.customer.algo__crosstalk_compensation_x_plane_gradient_kcps =
		pC->algo__crosstalk_compensation_x_plane_gradient_kcps;
 800902c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800902e:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
	cal_data.customer.algo__crosstalk_compensation_x_plane_gradient_kcps =
 8009032:	833b      	strh	r3, [r7, #24]
	cal_data.customer.algo__crosstalk_compensation_y_plane_gradient_kcps =
		pC->algo__crosstalk_compensation_y_plane_gradient_kcps;
 8009034:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009036:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
	cal_data.customer.algo__crosstalk_compensation_y_plane_gradient_kcps =
 800903a:	837b      	strh	r3, [r7, #26]
	cal_data.customer.ref_spad_char__total_rate_target_mcps =
		pC->ref_spad_char__total_rate_target_mcps;
 800903c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800903e:	8a9b      	ldrh	r3, [r3, #20]
	cal_data.customer.ref_spad_char__total_rate_target_mcps =
 8009040:	83bb      	strh	r3, [r7, #28]
	cal_data.customer.algo__part_to_part_range_offset_mm =
		pC->algo__part_to_part_range_offset_mm;
 8009042:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009044:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
	cal_data.customer.algo__part_to_part_range_offset_mm =
 8009048:	83fb      	strh	r3, [r7, #30]
	cal_data.customer.mm_config__inner_offset_mm =
		pC->mm_config__inner_offset_mm;
 800904a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800904c:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
	cal_data.customer.mm_config__inner_offset_mm =
 8009050:	843b      	strh	r3, [r7, #32]
	cal_data.customer.mm_config__outer_offset_mm =
		pC->mm_config__outer_offset_mm;
 8009052:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009054:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
	cal_data.customer.mm_config__outer_offset_mm =
 8009058:	847b      	strh	r3, [r7, #34]	; 0x22

	Status = VL53L1_set_part_to_part_data(Dev, &cal_data);
 800905a:	f107 0308 	add.w	r3, r7, #8
 800905e:	4619      	mov	r1, r3
 8009060:	6878      	ldr	r0, [r7, #4]
 8009062:	f000 fc4b 	bl	80098fc <VL53L1_set_part_to_part_data>
 8009066:	4603      	mov	r3, r0
 8009068:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	LOG_FUNCTION_END(Status);
	return Status;
 800906c:	f997 307f 	ldrsb.w	r3, [r7, #127]	; 0x7f

}
 8009070:	4618      	mov	r0, r3
 8009072:	3780      	adds	r7, #128	; 0x80
 8009074:	46bd      	mov	sp, r7
 8009076:	bd80      	pop	{r7, pc}
 8009078:	ecab0122 	.word	0xecab0122
 800907c:	ecab0102 	.word	0xecab0102

08009080 <VL53L1_GetCalibrationData>:

VL53L1_Error VL53L1_GetCalibrationData(VL53L1_DEV Dev,
		VL53L1_CalibrationData_t  *pCalibrationData)
{
 8009080:	b580      	push	{r7, lr}
 8009082:	b09e      	sub	sp, #120	; 0x78
 8009084:	af00      	add	r7, sp, #0
 8009086:	6078      	str	r0, [r7, #4]
 8009088:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800908a:	2300      	movs	r3, #0
 800908c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	VL53L1_customer_nvm_managed_t       *pC2;

	LOG_FUNCTION_START("");

	/* struct_version is filled inside get part to part function */
	Status = VL53L1_get_part_to_part_data(Dev, &cal_data);
 8009090:	f107 0308 	add.w	r3, r7, #8
 8009094:	4619      	mov	r1, r3
 8009096:	6878      	ldr	r0, [r7, #4]
 8009098:	f000 fcaa 	bl	80099f0 <VL53L1_get_part_to_part_data>
 800909c:	4603      	mov	r3, r0
 800909e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

	pCalibrationData->struct_version = cal_data.struct_version +
 80090a2:	68bb      	ldr	r3, [r7, #8]
 80090a4:	f103 0220 	add.w	r2, r3, #32
 80090a8:	683b      	ldr	r3, [r7, #0]
 80090aa:	601a      	str	r2, [r3, #0]
			VL53L1_ADDITIONAL_CALIBRATION_DATA_STRUCT_VERSION;


	/* memcpy(DEST, SRC, N)  */
	memcpy(
		&(pCalibrationData->add_off_cal_data),
 80090ac:	683b      	ldr	r3, [r7, #0]
 80090ae:	f103 0020 	add.w	r0, r3, #32
	memcpy(
 80090b2:	f107 0308 	add.w	r3, r7, #8
 80090b6:	331c      	adds	r3, #28
 80090b8:	2208      	movs	r2, #8
 80090ba:	4619      	mov	r1, r3
 80090bc:	f005 fa66 	bl	800e58c <memcpy>
		&(cal_data.add_off_cal_data),
		sizeof(VL53L1_additional_offset_cal_data_t));

	/* memcpy (DEST, SRC, N) */
	memcpy(
		&(pCalibrationData->optical_centre),
 80090c0:	683b      	ldr	r3, [r7, #0]
 80090c2:	3328      	adds	r3, #40	; 0x28
 80090c4:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
	memcpy(
 80090c6:	801a      	strh	r2, [r3, #0]
		&(cal_data.optical_centre),
		sizeof(VL53L1_optical_centre_t));

	/* memcpy (DEST, SRC, N) */
	memcpy(
		&(pCalibrationData->gain_cal),
 80090c8:	683b      	ldr	r3, [r7, #0]
 80090ca:	332a      	adds	r3, #42	; 0x2a
 80090cc:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
	memcpy(
 80090ce:	801a      	strh	r2, [r3, #0]
		&(cal_data.gain_cal),
		sizeof(VL53L1_gain_calibration_data_t));

	/* memcpy (DEST, SRC, N) */
	memcpy(
		&(pCalibrationData->cal_peak_rate_map),
 80090d0:	683b      	ldr	r3, [r7, #0]
 80090d2:	f103 002c 	add.w	r0, r3, #44	; 0x2c
	memcpy(
 80090d6:	f107 0308 	add.w	r3, r7, #8
 80090da:	3328      	adds	r3, #40	; 0x28
 80090dc:	223a      	movs	r2, #58	; 0x3a
 80090de:	4619      	mov	r1, r3
 80090e0:	f005 fa54 	bl	800e58c <memcpy>
		&(cal_data.cal_peak_rate_map),
		sizeof(VL53L1_cal_peak_rate_map_t));


	pC = &pCalibrationData->customer;
 80090e4:	683b      	ldr	r3, [r7, #0]
 80090e6:	3304      	adds	r3, #4
 80090e8:	673b      	str	r3, [r7, #112]	; 0x70
	pC2 = &cal_data.customer;
 80090ea:	f107 0308 	add.w	r3, r7, #8
 80090ee:	3304      	adds	r3, #4
 80090f0:	66fb      	str	r3, [r7, #108]	; 0x6c
	pC->global_config__spad_enables_ref_0 =
		pC2->global_config__spad_enables_ref_0;
 80090f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80090f4:	781a      	ldrb	r2, [r3, #0]
	pC->global_config__spad_enables_ref_0 =
 80090f6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80090f8:	701a      	strb	r2, [r3, #0]
	pC->global_config__spad_enables_ref_1 =
		pC2->global_config__spad_enables_ref_1;
 80090fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80090fc:	785a      	ldrb	r2, [r3, #1]
	pC->global_config__spad_enables_ref_1 =
 80090fe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009100:	705a      	strb	r2, [r3, #1]
	pC->global_config__spad_enables_ref_2 =
		pC2->global_config__spad_enables_ref_2;
 8009102:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009104:	789a      	ldrb	r2, [r3, #2]
	pC->global_config__spad_enables_ref_2 =
 8009106:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009108:	709a      	strb	r2, [r3, #2]
	pC->global_config__spad_enables_ref_3 =
		pC2->global_config__spad_enables_ref_3;
 800910a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800910c:	78da      	ldrb	r2, [r3, #3]
	pC->global_config__spad_enables_ref_3 =
 800910e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009110:	70da      	strb	r2, [r3, #3]
	pC->global_config__spad_enables_ref_4 =
		pC2->global_config__spad_enables_ref_4;
 8009112:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009114:	791a      	ldrb	r2, [r3, #4]
	pC->global_config__spad_enables_ref_4 =
 8009116:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009118:	711a      	strb	r2, [r3, #4]
	pC->global_config__spad_enables_ref_5 =
		pC2->global_config__spad_enables_ref_5;
 800911a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800911c:	795a      	ldrb	r2, [r3, #5]
	pC->global_config__spad_enables_ref_5 =
 800911e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009120:	715a      	strb	r2, [r3, #5]
	pC->global_config__ref_en_start_select =
		pC2->global_config__ref_en_start_select;
 8009122:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009124:	799a      	ldrb	r2, [r3, #6]
	pC->global_config__ref_en_start_select =
 8009126:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009128:	719a      	strb	r2, [r3, #6]
	pC->ref_spad_man__num_requested_ref_spads =
		pC2->ref_spad_man__num_requested_ref_spads;
 800912a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800912c:	79da      	ldrb	r2, [r3, #7]
	pC->ref_spad_man__num_requested_ref_spads =
 800912e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009130:	71da      	strb	r2, [r3, #7]
	pC->ref_spad_man__ref_location =
		pC2->ref_spad_man__ref_location;
 8009132:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009134:	7a1a      	ldrb	r2, [r3, #8]
	pC->ref_spad_man__ref_location =
 8009136:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009138:	721a      	strb	r2, [r3, #8]
	pC->algo__crosstalk_compensation_x_plane_gradient_kcps =
		pC2->algo__crosstalk_compensation_x_plane_gradient_kcps;
 800913a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800913c:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
	pC->algo__crosstalk_compensation_x_plane_gradient_kcps =
 8009140:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009142:	821a      	strh	r2, [r3, #16]
	pC->algo__crosstalk_compensation_y_plane_gradient_kcps =
		pC2->algo__crosstalk_compensation_y_plane_gradient_kcps;
 8009144:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009146:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
	pC->algo__crosstalk_compensation_y_plane_gradient_kcps =
 800914a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800914c:	825a      	strh	r2, [r3, #18]
	pC->ref_spad_char__total_rate_target_mcps =
		pC2->ref_spad_char__total_rate_target_mcps;
 800914e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009150:	8a1a      	ldrh	r2, [r3, #16]
	pC->ref_spad_char__total_rate_target_mcps =
 8009152:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009154:	829a      	strh	r2, [r3, #20]
	pC->algo__part_to_part_range_offset_mm =
		pC2->algo__part_to_part_range_offset_mm;
 8009156:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009158:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
	pC->algo__part_to_part_range_offset_mm =
 800915c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800915e:	82da      	strh	r2, [r3, #22]
	pC->mm_config__inner_offset_mm =
		pC2->mm_config__inner_offset_mm;
 8009160:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009162:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
	pC->mm_config__inner_offset_mm =
 8009166:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009168:	831a      	strh	r2, [r3, #24]
	pC->mm_config__outer_offset_mm =
		pC2->mm_config__outer_offset_mm;
 800916a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800916c:	f9b3 2016 	ldrsh.w	r2, [r3, #22]
	pC->mm_config__outer_offset_mm =
 8009170:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009172:	835a      	strh	r2, [r3, #26]

	pC->algo__crosstalk_compensation_plane_offset_kcps =
		(uint32_t)(
			pC2->algo__crosstalk_compensation_plane_offset_kcps);
 8009174:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009176:	895b      	ldrh	r3, [r3, #10]
		(uint32_t)(
 8009178:	461a      	mov	r2, r3
	pC->algo__crosstalk_compensation_plane_offset_kcps =
 800917a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800917c:	60da      	str	r2, [r3, #12]
	LOG_FUNCTION_END(Status);
	return Status;
 800917e:	f997 3077 	ldrsb.w	r3, [r7, #119]	; 0x77
}
 8009182:	4618      	mov	r0, r3
 8009184:	3778      	adds	r7, #120	; 0x78
 8009186:	46bd      	mov	sp, r7
 8009188:	bd80      	pop	{r7, pc}
	...

0800918c <VL53L1_LoadPatch>:

/* End Group PAL IRQ Triggered events Functions */


static VL53L1_Error VL53L1_LoadPatch(VL53L1_DEV Dev)
{
 800918c:	b580      	push	{r7, lr}
 800918e:	b0c6      	sub	sp, #280	; 0x118
 8009190:	af00      	add	r7, sp, #0
 8009192:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8009196:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800919a:	6018      	str	r0, [r3, #0]
	VL53L1_Error status = VL53L1_ERROR_NONE;
 800919c:	2300      	movs	r3, #0
 800919e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
	uint32_t patch_tuning = 0;
 80091a2:	2300      	movs	r3, #0
 80091a4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	uint8_t comms_buffer[256];
	uint32_t patch_power;
	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE)
 80091a8:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d10b      	bne.n	80091c8 <VL53L1_LoadPatch+0x3c>
		status = VL53L1_WrByte(
 80091b0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80091b4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80091b8:	2200      	movs	r2, #0
 80091ba:	2185      	movs	r1, #133	; 0x85
 80091bc:	6818      	ldr	r0, [r3, #0]
 80091be:	f005 f80b 	bl	800e1d8 <VL53L1_WrByte>
 80091c2:	4603      	mov	r3, r0
 80091c4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
				Dev,
				VL53L1_FIRMWARE__ENABLE,
				0x00);
	/* Force GO1 on */
	if (status == VL53L1_ERROR_NONE)
 80091c8:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d106      	bne.n	80091de <VL53L1_LoadPatch+0x52>
		VL53L1_enable_powerforce(Dev);
 80091d0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80091d4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80091d8:	6818      	ldr	r0, [r3, #0]
 80091da:	f003 f922 	bl	800c422 <VL53L1_enable_powerforce>

	patch_tuning = BDTable[VL53L1_TUNING_PHASECAL_PATCH_POWER];
 80091de:	4b7e      	ldr	r3, [pc, #504]	; (80093d8 <VL53L1_LoadPatch+0x24c>)
 80091e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091e2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

	switch(patch_tuning) {
 80091e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80091ea:	2b03      	cmp	r3, #3
 80091ec:	d81a      	bhi.n	8009224 <VL53L1_LoadPatch+0x98>
 80091ee:	a201      	add	r2, pc, #4	; (adr r2, 80091f4 <VL53L1_LoadPatch+0x68>)
 80091f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091f4:	08009205 	.word	0x08009205
 80091f8:	0800920d 	.word	0x0800920d
 80091fc:	08009215 	.word	0x08009215
 8009200:	0800921d 	.word	0x0800921d
	case 0:
		patch_power = 0x00;
 8009204:	2300      	movs	r3, #0
 8009206:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
		break;
 800920a:	e00e      	b.n	800922a <VL53L1_LoadPatch+0x9e>
	case 1:
		patch_power = 0x10;
 800920c:	2310      	movs	r3, #16
 800920e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
		break;
 8009212:	e00a      	b.n	800922a <VL53L1_LoadPatch+0x9e>
	case 2:
		patch_power = 0x20;
 8009214:	2320      	movs	r3, #32
 8009216:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
		break;
 800921a:	e006      	b.n	800922a <VL53L1_LoadPatch+0x9e>
	case 3:
		patch_power = 0x40;
 800921c:	2340      	movs	r3, #64	; 0x40
 800921e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
		break;
 8009222:	e002      	b.n	800922a <VL53L1_LoadPatch+0x9e>
	default:
		patch_power = 0x00;
 8009224:	2300      	movs	r3, #0
 8009226:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	}
	/* Set patch RAM offsets */
	if (status == VL53L1_ERROR_NONE) {
 800922a:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 800922e:	2b00      	cmp	r3, #0
 8009230:	d134      	bne.n	800929c <VL53L1_LoadPatch+0x110>
		/* Package up MultiByte transaction */
		comms_buffer[0] = 0x29;
 8009232:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8009236:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800923a:	2229      	movs	r2, #41	; 0x29
 800923c:	701a      	strb	r2, [r3, #0]
		comms_buffer[1] = 0xC9;
 800923e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8009242:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8009246:	22c9      	movs	r2, #201	; 0xc9
 8009248:	705a      	strb	r2, [r3, #1]
		comms_buffer[2] = 0x0E;
 800924a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800924e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8009252:	220e      	movs	r2, #14
 8009254:	709a      	strb	r2, [r3, #2]
		comms_buffer[3] = 0x40;
 8009256:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800925a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800925e:	2240      	movs	r2, #64	; 0x40
 8009260:	70da      	strb	r2, [r3, #3]
		comms_buffer[4] = 0x28;
 8009262:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8009266:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800926a:	2228      	movs	r2, #40	; 0x28
 800926c:	711a      	strb	r2, [r3, #4]
		comms_buffer[5] = patch_power;
 800926e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8009272:	b2da      	uxtb	r2, r3
 8009274:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8009278:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800927c:	715a      	strb	r2, [r3, #5]
		/* 0x10 for 60ms, 0x20 for 240ms and 0x40 for 3580ms */
		status = VL53L1_WriteMulti(
 800927e:	f107 020c 	add.w	r2, r7, #12
 8009282:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8009286:	f5a3 708a 	sub.w	r0, r3, #276	; 0x114
 800928a:	2306      	movs	r3, #6
 800928c:	f240 4176 	movw	r1, #1142	; 0x476
 8009290:	6800      	ldr	r0, [r0, #0]
 8009292:	f004 ff35 	bl	800e100 <VL53L1_WriteMulti>
 8009296:	4603      	mov	r3, r0
 8009298:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
				VL53L1_PATCH__OFFSET_0,
				comms_buffer,
				6);
	}
	/* Set patch breakpoints */
	if (status == VL53L1_ERROR_NONE) {
 800929c:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d132      	bne.n	800930a <VL53L1_LoadPatch+0x17e>
		comms_buffer[0] = 0x03;
 80092a4:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80092a8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80092ac:	2203      	movs	r2, #3
 80092ae:	701a      	strb	r2, [r3, #0]
		comms_buffer[1] = 0x6D;
 80092b0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80092b4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80092b8:	226d      	movs	r2, #109	; 0x6d
 80092ba:	705a      	strb	r2, [r3, #1]
		comms_buffer[2] = 0x03;
 80092bc:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80092c0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80092c4:	2203      	movs	r2, #3
 80092c6:	709a      	strb	r2, [r3, #2]
		comms_buffer[3] = 0x6F;
 80092c8:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80092cc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80092d0:	226f      	movs	r2, #111	; 0x6f
 80092d2:	70da      	strb	r2, [r3, #3]
		comms_buffer[4] = 0x07;
 80092d4:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80092d8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80092dc:	2207      	movs	r2, #7
 80092de:	711a      	strb	r2, [r3, #4]
		comms_buffer[5] = 0x29;
 80092e0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80092e4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80092e8:	2229      	movs	r2, #41	; 0x29
 80092ea:	715a      	strb	r2, [r3, #5]
		status = VL53L1_WriteMulti(
 80092ec:	f107 020c 	add.w	r2, r7, #12
 80092f0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80092f4:	f5a3 708a 	sub.w	r0, r3, #276	; 0x114
 80092f8:	2306      	movs	r3, #6
 80092fa:	f240 4196 	movw	r1, #1174	; 0x496
 80092fe:	6800      	ldr	r0, [r0, #0]
 8009300:	f004 fefe 	bl	800e100 <VL53L1_WriteMulti>
 8009304:	4603      	mov	r3, r0
 8009306:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
				VL53L1_PATCH__ADDRESS_0,
				comms_buffer,
				6);
	}
	/* Enable patch JMP patches */
	if (status == VL53L1_ERROR_NONE) {
 800930a:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 800930e:	2b00      	cmp	r3, #0
 8009310:	d11a      	bne.n	8009348 <VL53L1_LoadPatch+0x1bc>
		comms_buffer[0] = 0x00;
 8009312:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8009316:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800931a:	2200      	movs	r2, #0
 800931c:	701a      	strb	r2, [r3, #0]
		comms_buffer[1] = 0x07;
 800931e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8009322:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8009326:	2207      	movs	r2, #7
 8009328:	705a      	strb	r2, [r3, #1]
		status = VL53L1_WriteMulti(
 800932a:	f107 020c 	add.w	r2, r7, #12
 800932e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8009332:	f5a3 708a 	sub.w	r0, r3, #276	; 0x114
 8009336:	2302      	movs	r3, #2
 8009338:	f240 4172 	movw	r1, #1138	; 0x472
 800933c:	6800      	ldr	r0, [r0, #0]
 800933e:	f004 fedf 	bl	800e100 <VL53L1_WriteMulti>
 8009342:	4603      	mov	r3, r0
 8009344:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
				VL53L1_PATCH__JMP_ENABLES,
				comms_buffer,
				2);
	}
	/* Enable patch DATA patches */
	if (status == VL53L1_ERROR_NONE) {
 8009348:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 800934c:	2b00      	cmp	r3, #0
 800934e:	d11a      	bne.n	8009386 <VL53L1_LoadPatch+0x1fa>
		comms_buffer[0] = 0x00;
 8009350:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8009354:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8009358:	2200      	movs	r2, #0
 800935a:	701a      	strb	r2, [r3, #0]
		comms_buffer[1] = 0x07;
 800935c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8009360:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8009364:	2207      	movs	r2, #7
 8009366:	705a      	strb	r2, [r3, #1]
		status = VL53L1_WriteMulti(
 8009368:	f107 020c 	add.w	r2, r7, #12
 800936c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8009370:	f5a3 708a 	sub.w	r0, r3, #276	; 0x114
 8009374:	2302      	movs	r3, #2
 8009376:	f240 4174 	movw	r1, #1140	; 0x474
 800937a:	6800      	ldr	r0, [r0, #0]
 800937c:	f004 fec0 	bl	800e100 <VL53L1_WriteMulti>
 8009380:	4603      	mov	r3, r0
 8009382:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
				VL53L1_PATCH__DATA_ENABLES,
				comms_buffer,
				2);
	}
	/* Enable firmware patching */
	if (status == VL53L1_ERROR_NONE)
 8009386:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 800938a:	2b00      	cmp	r3, #0
 800938c:	d10c      	bne.n	80093a8 <VL53L1_LoadPatch+0x21c>
		status = VL53L1_WrByte(
 800938e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8009392:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8009396:	2201      	movs	r2, #1
 8009398:	f44f 618e 	mov.w	r1, #1136	; 0x470
 800939c:	6818      	ldr	r0, [r3, #0]
 800939e:	f004 ff1b 	bl	800e1d8 <VL53L1_WrByte>
 80093a2:	4603      	mov	r3, r0
 80093a4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
				Dev,
				VL53L1_PATCH__CTRL,
				0x01);
	/* Enable Firmware */
	if (status == VL53L1_ERROR_NONE)
 80093a8:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d10b      	bne.n	80093c8 <VL53L1_LoadPatch+0x23c>
		status = VL53L1_WrByte(
 80093b0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80093b4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80093b8:	2201      	movs	r2, #1
 80093ba:	2185      	movs	r1, #133	; 0x85
 80093bc:	6818      	ldr	r0, [r3, #0]
 80093be:	f004 ff0b 	bl	800e1d8 <VL53L1_WrByte>
 80093c2:	4603      	mov	r3, r0
 80093c4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
				VL53L1_FIRMWARE__ENABLE,
				0x01);

	LOG_FUNCTION_END(status);

	return status;
 80093c8:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
}
 80093cc:	4618      	mov	r0, r3
 80093ce:	f507 778c 	add.w	r7, r7, #280	; 0x118
 80093d2:	46bd      	mov	sp, r7
 80093d4:	bd80      	pop	{r7, pc}
 80093d6:	bf00      	nop
 80093d8:	20000020 	.word	0x20000020

080093dc <VL53L1_UnloadPatch>:

static VL53L1_Error VL53L1_UnloadPatch(VL53L1_DEV Dev)
{
 80093dc:	b580      	push	{r7, lr}
 80093de:	b084      	sub	sp, #16
 80093e0:	af00      	add	r7, sp, #0
 80093e2:	6078      	str	r0, [r7, #4]
	VL53L1_Error status = VL53L1_ERROR_NONE;
 80093e4:	2300      	movs	r3, #0
 80093e6:	73fb      	strb	r3, [r7, #15]
	/* Disable Firmware (allow full write access) */
	if (status == VL53L1_ERROR_NONE)
 80093e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d106      	bne.n	80093fe <VL53L1_UnloadPatch+0x22>
		status = VL53L1_WrByte(
 80093f0:	2200      	movs	r2, #0
 80093f2:	2185      	movs	r1, #133	; 0x85
 80093f4:	6878      	ldr	r0, [r7, #4]
 80093f6:	f004 feef 	bl	800e1d8 <VL53L1_WrByte>
 80093fa:	4603      	mov	r3, r0
 80093fc:	73fb      	strb	r3, [r7, #15]
				Dev,
				VL53L1_FIRMWARE__ENABLE,
				0x00);
	/* Force GO1 off */
	if (status == VL53L1_ERROR_NONE)
 80093fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009402:	2b00      	cmp	r3, #0
 8009404:	d102      	bne.n	800940c <VL53L1_UnloadPatch+0x30>
		VL53L1_disable_powerforce(Dev);
 8009406:	6878      	ldr	r0, [r7, #4]
 8009408:	f003 f81d 	bl	800c446 <VL53L1_disable_powerforce>
	/* Disable firmware patching */
	if (status == VL53L1_ERROR_NONE)
 800940c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009410:	2b00      	cmp	r3, #0
 8009412:	d107      	bne.n	8009424 <VL53L1_UnloadPatch+0x48>
		status = VL53L1_WrByte(
 8009414:	2200      	movs	r2, #0
 8009416:	f44f 618e 	mov.w	r1, #1136	; 0x470
 800941a:	6878      	ldr	r0, [r7, #4]
 800941c:	f004 fedc 	bl	800e1d8 <VL53L1_WrByte>
 8009420:	4603      	mov	r3, r0
 8009422:	73fb      	strb	r3, [r7, #15]
				Dev,
				VL53L1_PATCH__CTRL,
				0x00);
	/* Enable Firmware */
	if (status == VL53L1_ERROR_NONE)
 8009424:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009428:	2b00      	cmp	r3, #0
 800942a:	d106      	bne.n	800943a <VL53L1_UnloadPatch+0x5e>
		status = VL53L1_WrByte(
 800942c:	2201      	movs	r2, #1
 800942e:	2185      	movs	r1, #133	; 0x85
 8009430:	6878      	ldr	r0, [r7, #4]
 8009432:	f004 fed1 	bl	800e1d8 <VL53L1_WrByte>
 8009436:	4603      	mov	r3, r0
 8009438:	73fb      	strb	r3, [r7, #15]
				VL53L1_FIRMWARE__ENABLE,
				0x01);

	LOG_FUNCTION_END(status);

	return status;
 800943a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800943e:	4618      	mov	r0, r3
 8009440:	3710      	adds	r7, #16
 8009442:	46bd      	mov	sp, r7
 8009444:	bd80      	pop	{r7, pc}

08009446 <VL53L1_run_ref_spad_char>:

#ifndef VL53L1_NOCALIB
VL53L1_Error VL53L1_run_ref_spad_char(
	VL53L1_DEV        Dev,
	VL53L1_Error     *pcal_status)
{
 8009446:	b5b0      	push	{r4, r5, r7, lr}
 8009448:	b08c      	sub	sp, #48	; 0x30
 800944a:	af04      	add	r7, sp, #16
 800944c:	6078      	str	r0, [r7, #4]
 800944e:	6039      	str	r1, [r7, #0]
	/*
	 *  Runs Reference SPAD Characterisation
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8009450:	2300      	movs	r3, #0
 8009452:	77fb      	strb	r3, [r7, #31]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	61bb      	str	r3, [r7, #24]

	uint8_t comms_buffer[6];

	VL53L1_refspadchar_config_t *prefspadchar  = &(pdev->refspadchar);
 8009458:	69bb      	ldr	r3, [r7, #24]
 800945a:	f503 7388 	add.w	r3, r3, #272	; 0x110
 800945e:	617b      	str	r3, [r7, #20]

	/*
	 * Ensure power force is enabled
	 */

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 8009460:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009464:	2b00      	cmp	r3, #0
 8009466:	d104      	bne.n	8009472 <VL53L1_run_ref_spad_char+0x2c>
		status = VL53L1_enable_powerforce(Dev);
 8009468:	6878      	ldr	r0, [r7, #4]
 800946a:	f002 ffda 	bl	800c422 <VL53L1_enable_powerforce>
 800946e:	4603      	mov	r3, r0
 8009470:	77fb      	strb	r3, [r7, #31]

	/*
	 * Configure device
	 */

	if (status == VL53L1_ERROR_NONE)
 8009472:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009476:	2b00      	cmp	r3, #0
 8009478:	d117      	bne.n	80094aa <VL53L1_run_ref_spad_char+0x64>
		status =
			VL53L1_set_ref_spad_char_config(
 800947a:	697b      	ldr	r3, [r7, #20]
 800947c:	7858      	ldrb	r0, [r3, #1]
 800947e:	697b      	ldr	r3, [r7, #20]
 8009480:	685c      	ldr	r4, [r3, #4]
 8009482:	697b      	ldr	r3, [r7, #20]
 8009484:	891d      	ldrh	r5, [r3, #8]
 8009486:	697b      	ldr	r3, [r7, #20]
 8009488:	899b      	ldrh	r3, [r3, #12]
 800948a:	697a      	ldr	r2, [r7, #20]
 800948c:	8952      	ldrh	r2, [r2, #10]
 800948e:	69b9      	ldr	r1, [r7, #24]
 8009490:	f8b1 115e 	ldrh.w	r1, [r1, #350]	; 0x15e
 8009494:	9102      	str	r1, [sp, #8]
 8009496:	9201      	str	r2, [sp, #4]
 8009498:	9300      	str	r3, [sp, #0]
 800949a:	462b      	mov	r3, r5
 800949c:	4622      	mov	r2, r4
 800949e:	4601      	mov	r1, r0
 80094a0:	6878      	ldr	r0, [r7, #4]
 80094a2:	f003 fa4e 	bl	800c942 <VL53L1_set_ref_spad_char_config>
 80094a6:	4603      	mov	r3, r0
 80094a8:	77fb      	strb	r3, [r7, #31]

	/*
	 * Run device test
	 */

	if (status == VL53L1_ERROR_NONE)
 80094aa:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d107      	bne.n	80094c2 <VL53L1_run_ref_spad_char+0x7c>
		status = VL53L1_run_device_test(
 80094b2:	697b      	ldr	r3, [r7, #20]
 80094b4:	781b      	ldrb	r3, [r3, #0]
 80094b6:	4619      	mov	r1, r3
 80094b8:	6878      	ldr	r0, [r7, #4]
 80094ba:	f000 f88d 	bl	80095d8 <VL53L1_run_device_test>
 80094be:	4603      	mov	r3, r0
 80094c0:	77fb      	strb	r3, [r7, #31]

	/*
	 * Read results
	 */

	if (status == VL53L1_ERROR_NONE)
 80094c2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d108      	bne.n	80094dc <VL53L1_run_ref_spad_char+0x96>
		status =
			VL53L1_ReadMulti(
 80094ca:	f107 020c 	add.w	r2, r7, #12
 80094ce:	2302      	movs	r3, #2
 80094d0:	21d9      	movs	r1, #217	; 0xd9
 80094d2:	6878      	ldr	r0, [r7, #4]
 80094d4:	f004 fe4a 	bl	800e16c <VL53L1_ReadMulti>
 80094d8:	4603      	mov	r3, r0
 80094da:	77fb      	strb	r3, [r7, #31]
				Dev,
				VL53L1_REF_SPAD_CHAR_RESULT__NUM_ACTUAL_REF_SPADS,
				comms_buffer,
				2);

	if (status == VL53L1_ERROR_NONE) {
 80094dc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d107      	bne.n	80094f4 <VL53L1_run_ref_spad_char+0xae>
		pdev->dbg_results.ref_spad_char_result__num_actual_ref_spads =
				comms_buffer[0];
 80094e4:	7b3a      	ldrb	r2, [r7, #12]
		pdev->dbg_results.ref_spad_char_result__num_actual_ref_spads =
 80094e6:	69bb      	ldr	r3, [r7, #24]
 80094e8:	f883 22af 	strb.w	r2, [r3, #687]	; 0x2af
		pdev->dbg_results.ref_spad_char_result__ref_location =
				comms_buffer[1];
 80094ec:	7b7a      	ldrb	r2, [r7, #13]
		pdev->dbg_results.ref_spad_char_result__ref_location =
 80094ee:	69bb      	ldr	r3, [r7, #24]
 80094f0:	f883 22b0 	strb.w	r2, [r3, #688]	; 0x2b0

	/*
	 * copy results to customer nvm managed G02 registers
	 */

	if (status == VL53L1_ERROR_NONE)
 80094f4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d108      	bne.n	800950e <VL53L1_run_ref_spad_char+0xc8>
		status =
			VL53L1_WriteMulti(
 80094fc:	f107 020c 	add.w	r2, r7, #12
 8009500:	2302      	movs	r3, #2
 8009502:	2114      	movs	r1, #20
 8009504:	6878      	ldr	r0, [r7, #4]
 8009506:	f004 fdfb 	bl	800e100 <VL53L1_WriteMulti>
 800950a:	4603      	mov	r3, r0
 800950c:	77fb      	strb	r3, [r7, #31]
				Dev,
				VL53L1_REF_SPAD_MAN__NUM_REQUESTED_REF_SPADS,
				comms_buffer,
				2);

	if (status == VL53L1_ERROR_NONE) {
 800950e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009512:	2b00      	cmp	r3, #0
 8009514:	d107      	bne.n	8009526 <VL53L1_run_ref_spad_char+0xe0>
		pdev->customer.ref_spad_man__num_requested_ref_spads =
				comms_buffer[0];
 8009516:	7b3a      	ldrb	r2, [r7, #12]
		pdev->customer.ref_spad_man__num_requested_ref_spads =
 8009518:	69bb      	ldr	r3, [r7, #24]
 800951a:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
		pdev->customer.ref_spad_man__ref_location =
				comms_buffer[1];
 800951e:	7b7a      	ldrb	r2, [r7, #13]
		pdev->customer.ref_spad_man__ref_location =
 8009520:	69bb      	ldr	r3, [r7, #24]
 8009522:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
	 *  - RESULT__SPARE_0_SD_1
	 *  - RESULT__SPARE_1_SD_1
	 *  - RESULT__SPARE_2_SD_1
	 */

	if (status == VL53L1_ERROR_NONE)
 8009526:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800952a:	2b00      	cmp	r3, #0
 800952c:	d108      	bne.n	8009540 <VL53L1_run_ref_spad_char+0xfa>
		status =
			VL53L1_ReadMulti(
 800952e:	f107 020c 	add.w	r2, r7, #12
 8009532:	2306      	movs	r3, #6
 8009534:	21ac      	movs	r1, #172	; 0xac
 8009536:	6878      	ldr	r0, [r7, #4]
 8009538:	f004 fe18 	bl	800e16c <VL53L1_ReadMulti>
 800953c:	4603      	mov	r3, r0
 800953e:	77fb      	strb	r3, [r7, #31]
	/*
	 * copy reference SPAD enables to customer nvm managed
	 * G02 registers
	 */

	if (status == VL53L1_ERROR_NONE)
 8009540:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009544:	2b00      	cmp	r3, #0
 8009546:	d108      	bne.n	800955a <VL53L1_run_ref_spad_char+0x114>
		status =
			VL53L1_WriteMulti(
 8009548:	f107 020c 	add.w	r2, r7, #12
 800954c:	2306      	movs	r3, #6
 800954e:	210d      	movs	r1, #13
 8009550:	6878      	ldr	r0, [r7, #4]
 8009552:	f004 fdd5 	bl	800e100 <VL53L1_WriteMulti>
 8009556:	4603      	mov	r3, r0
 8009558:	77fb      	strb	r3, [r7, #31]
				Dev,
				VL53L1_GLOBAL_CONFIG__SPAD_ENABLES_REF_0,
				comms_buffer,
				6);

	if (status == VL53L1_ERROR_NONE) {
 800955a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800955e:	2b00      	cmp	r3, #0
 8009560:	d117      	bne.n	8009592 <VL53L1_run_ref_spad_char+0x14c>
		pdev->customer.global_config__spad_enables_ref_0 =
				comms_buffer[0];
 8009562:	7b3a      	ldrb	r2, [r7, #12]
		pdev->customer.global_config__spad_enables_ref_0 =
 8009564:	69bb      	ldr	r3, [r7, #24]
 8009566:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
		pdev->customer.global_config__spad_enables_ref_1 =
				comms_buffer[1];
 800956a:	7b7a      	ldrb	r2, [r7, #13]
		pdev->customer.global_config__spad_enables_ref_1 =
 800956c:	69bb      	ldr	r3, [r7, #24]
 800956e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
		pdev->customer.global_config__spad_enables_ref_2 =
				comms_buffer[2];
 8009572:	7bba      	ldrb	r2, [r7, #14]
		pdev->customer.global_config__spad_enables_ref_2 =
 8009574:	69bb      	ldr	r3, [r7, #24]
 8009576:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pdev->customer.global_config__spad_enables_ref_3 =
				comms_buffer[3];
 800957a:	7bfa      	ldrb	r2, [r7, #15]
		pdev->customer.global_config__spad_enables_ref_3 =
 800957c:	69bb      	ldr	r3, [r7, #24]
 800957e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
		pdev->customer.global_config__spad_enables_ref_4 =
				comms_buffer[4];
 8009582:	7c3a      	ldrb	r2, [r7, #16]
		pdev->customer.global_config__spad_enables_ref_4 =
 8009584:	69bb      	ldr	r3, [r7, #24]
 8009586:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
		pdev->customer.global_config__spad_enables_ref_5 =
				comms_buffer[5];
 800958a:	7c7a      	ldrb	r2, [r7, #17]
		pdev->customer.global_config__spad_enables_ref_5 =
 800958c:	69bb      	ldr	r3, [r7, #24]
 800958e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
			&(pdev->customer),
			"run_ref_spad_char():pdev->lldata.customer.",
			VL53L1_TRACE_MODULE_REF_SPAD_CHAR);
#endif

	if (status == VL53L1_ERROR_NONE) {
 8009592:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009596:	2b00      	cmp	r3, #0
 8009598:	d114      	bne.n	80095c4 <VL53L1_run_ref_spad_char+0x17e>

		switch (pdev->sys_results.result__range_status) {
 800959a:	69bb      	ldr	r3, [r7, #24]
 800959c:	f893 31cf 	ldrb.w	r3, [r3, #463]	; 0x1cf
 80095a0:	2b10      	cmp	r3, #16
 80095a2:	d00c      	beq.n	80095be <VL53L1_run_ref_spad_char+0x178>
 80095a4:	2b10      	cmp	r3, #16
 80095a6:	dc0e      	bgt.n	80095c6 <VL53L1_run_ref_spad_char+0x180>
 80095a8:	2b0e      	cmp	r3, #14
 80095aa:	d002      	beq.n	80095b2 <VL53L1_run_ref_spad_char+0x16c>
 80095ac:	2b0f      	cmp	r3, #15
 80095ae:	d003      	beq.n	80095b8 <VL53L1_run_ref_spad_char+0x172>
 80095b0:	e009      	b.n	80095c6 <VL53L1_run_ref_spad_char+0x180>

		case VL53L1_DEVICEERROR_REFSPADCHARNOTENOUGHDPADS:
			status = VL53L1_WARNING_REF_SPAD_CHAR_NOT_ENOUGH_SPADS;
 80095b2:	23e4      	movs	r3, #228	; 0xe4
 80095b4:	77fb      	strb	r3, [r7, #31]
			break;
 80095b6:	e006      	b.n	80095c6 <VL53L1_run_ref_spad_char+0x180>

		case VL53L1_DEVICEERROR_REFSPADCHARMORETHANTARGET:
			status = VL53L1_WARNING_REF_SPAD_CHAR_RATE_TOO_HIGH;
 80095b8:	23e3      	movs	r3, #227	; 0xe3
 80095ba:	77fb      	strb	r3, [r7, #31]
			break;
 80095bc:	e003      	b.n	80095c6 <VL53L1_run_ref_spad_char+0x180>

		case VL53L1_DEVICEERROR_REFSPADCHARLESSTHANTARGET:
			status = VL53L1_WARNING_REF_SPAD_CHAR_RATE_TOO_LOW;
 80095be:	23e2      	movs	r3, #226	; 0xe2
 80095c0:	77fb      	strb	r3, [r7, #31]
			break;
 80095c2:	e000      	b.n	80095c6 <VL53L1_run_ref_spad_char+0x180>
		}
	}
 80095c4:	bf00      	nop

	/*
	 * Save unfiltered status
	 */

	*pcal_status = status;
 80095c6:	683b      	ldr	r3, [r7, #0]
 80095c8:	7ffa      	ldrb	r2, [r7, #31]
 80095ca:	701a      	strb	r2, [r3, #0]
		status);


	LOG_FUNCTION_END(status);

	return status;
 80095cc:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80095d0:	4618      	mov	r0, r3
 80095d2:	3720      	adds	r7, #32
 80095d4:	46bd      	mov	sp, r7
 80095d6:	bdb0      	pop	{r4, r5, r7, pc}

080095d8 <VL53L1_run_device_test>:

#ifndef VL53L1_NOCALIB
VL53L1_Error VL53L1_run_device_test(
	VL53L1_DEV             Dev,
	VL53L1_DeviceTestMode  device_test_mode)
{
 80095d8:	b580      	push	{r7, lr}
 80095da:	b086      	sub	sp, #24
 80095dc:	af00      	add	r7, sp, #0
 80095de:	6078      	str	r0, [r7, #4]
 80095e0:	460b      	mov	r3, r1
 80095e2:	70fb      	strb	r3, [r7, #3]
	/*
	 *  Runs the selected Device Test Mode
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 80095e4:	2300      	movs	r3, #0
 80095e6:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	613b      	str	r3, [r7, #16]

	uint8_t      comms_buffer[2];
	uint8_t      gpio_hv_mux__ctrl = 0;
 80095ec:	2300      	movs	r3, #0
 80095ee:	72fb      	strb	r3, [r7, #11]

	/*
	 * Get current interrupt config
	 */

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 80095f0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d108      	bne.n	800960a <VL53L1_run_device_test+0x32>
		status =
			VL53L1_RdByte(
 80095f8:	f107 030b 	add.w	r3, r7, #11
 80095fc:	461a      	mov	r2, r3
 80095fe:	2130      	movs	r1, #48	; 0x30
 8009600:	6878      	ldr	r0, [r7, #4]
 8009602:	f004 fe45 	bl	800e290 <VL53L1_RdByte>
 8009606:	4603      	mov	r3, r0
 8009608:	75fb      	strb	r3, [r7, #23]
				Dev,
				VL53L1_GPIO_HV_MUX__CTRL,
				&gpio_hv_mux__ctrl);

	if (status == VL53L1_ERROR_NONE)
 800960a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800960e:	2b00      	cmp	r3, #0
 8009610:	d103      	bne.n	800961a <VL53L1_run_device_test+0x42>
		pdev->stat_cfg.gpio_hv_mux__ctrl = gpio_hv_mux__ctrl;
 8009612:	7afa      	ldrb	r2, [r7, #11]
 8009614:	693b      	ldr	r3, [r7, #16]
 8009616:	f883 2170 	strb.w	r2, [r3, #368]	; 0x170

	/*
	 * Trigger the test
	 */
	if (status == VL53L1_ERROR_NONE)
 800961a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800961e:	2b00      	cmp	r3, #0
 8009620:	d106      	bne.n	8009630 <VL53L1_run_device_test+0x58>
		status = VL53L1_start_test(
 8009622:	78fb      	ldrb	r3, [r7, #3]
 8009624:	4619      	mov	r1, r3
 8009626:	6878      	ldr	r0, [r7, #4]
 8009628:	f002 fe81 	bl	800c32e <VL53L1_start_test>
 800962c:	4603      	mov	r3, r0
 800962e:	75fb      	strb	r3, [r7, #23]
					device_test_mode);

	/*
	 * Wait for test completion
	 */
	if (status == VL53L1_ERROR_NONE)
 8009630:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009634:	2b00      	cmp	r3, #0
 8009636:	d104      	bne.n	8009642 <VL53L1_run_device_test+0x6a>
		status = VL53L1_wait_for_test_completion(Dev);
 8009638:	6878      	ldr	r0, [r7, #4]
 800963a:	f004 fc82 	bl	800df42 <VL53L1_wait_for_test_completion>
 800963e:	4603      	mov	r3, r0
 8009640:	75fb      	strb	r3, [r7, #23]

	/*
	 * Read range and report status
	 */
	if (status == VL53L1_ERROR_NONE)
 8009642:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009646:	2b00      	cmp	r3, #0
 8009648:	d108      	bne.n	800965c <VL53L1_run_device_test+0x84>
		status =
			VL53L1_ReadMulti(
 800964a:	f107 020c 	add.w	r2, r7, #12
 800964e:	2302      	movs	r3, #2
 8009650:	2189      	movs	r1, #137	; 0x89
 8009652:	6878      	ldr	r0, [r7, #4]
 8009654:	f004 fd8a 	bl	800e16c <VL53L1_ReadMulti>
 8009658:	4603      	mov	r3, r0
 800965a:	75fb      	strb	r3, [r7, #23]
				Dev,
				VL53L1_RESULT__RANGE_STATUS,
				comms_buffer,
				2);

	if (status == VL53L1_ERROR_NONE) {
 800965c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009660:	2b00      	cmp	r3, #0
 8009662:	d107      	bne.n	8009674 <VL53L1_run_device_test+0x9c>
		pdev->sys_results.result__range_status  = comms_buffer[0];
 8009664:	7b3a      	ldrb	r2, [r7, #12]
 8009666:	693b      	ldr	r3, [r7, #16]
 8009668:	f883 21cf 	strb.w	r2, [r3, #463]	; 0x1cf
		pdev->sys_results.result__report_status = comms_buffer[1];
 800966c:	7b7a      	ldrb	r2, [r7, #13]
 800966e:	693b      	ldr	r3, [r7, #16]
 8009670:	f883 21d0 	strb.w	r2, [r3, #464]	; 0x1d0
	}

	/* mask range status bits */

	pdev->sys_results.result__range_status &=
 8009674:	693b      	ldr	r3, [r7, #16]
 8009676:	f893 31cf 	ldrb.w	r3, [r3, #463]	; 0x1cf
 800967a:	f003 031f 	and.w	r3, r3, #31
 800967e:	b2da      	uxtb	r2, r3
 8009680:	693b      	ldr	r3, [r7, #16]
 8009682:	f883 21cf 	strb.w	r2, [r3, #463]	; 0x1cf
		VL53L1_RANGE_STATUS__RANGE_STATUS_MASK;

	if (status == VL53L1_ERROR_NONE) {
 8009686:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800968a:	2b00      	cmp	r3, #0
 800968c:	d108      	bne.n	80096a0 <VL53L1_run_device_test+0xc8>
			pdev->sys_results.result__report_status);

		/*
		 * Clear interrupt
		 */
		if (status == VL53L1_ERROR_NONE)
 800968e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009692:	2b00      	cmp	r3, #0
 8009694:	d104      	bne.n	80096a0 <VL53L1_run_device_test+0xc8>
			status = VL53L1_clear_interrupt(Dev);
 8009696:	6878      	ldr	r0, [r7, #4]
 8009698:	f002 fee7 	bl	800c46a <VL53L1_clear_interrupt>
 800969c:	4603      	mov	r3, r0
 800969e:	75fb      	strb	r3, [r7, #23]
	 * Clear test mode register
	 *  - required so that next test command will trigger
	 *    internal MCU interrupt
	 */

	if (status == VL53L1_ERROR_NONE)
 80096a0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d105      	bne.n	80096b4 <VL53L1_run_device_test+0xdc>
		status =
			VL53L1_start_test(
 80096a8:	2100      	movs	r1, #0
 80096aa:	6878      	ldr	r0, [r7, #4]
 80096ac:	f002 fe3f 	bl	800c32e <VL53L1_start_test>
 80096b0:	4603      	mov	r3, r0
 80096b2:	75fb      	strb	r3, [r7, #23]
				Dev,
				0x00);

	LOG_FUNCTION_END(status);

	return status;
 80096b4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80096b8:	4618      	mov	r0, r3
 80096ba:	3718      	adds	r7, #24
 80096bc:	46bd      	mov	sp, r7
 80096be:	bd80      	pop	{r7, pc}

080096c0 <VL53L1_data_init>:


VL53L1_Error VL53L1_data_init(
	VL53L1_DEV        Dev,
	uint8_t           read_p2p_data)
{
 80096c0:	b5b0      	push	{r4, r5, r7, lr}
 80096c2:	b088      	sub	sp, #32
 80096c4:	af04      	add	r7, sp, #16
 80096c6:	6078      	str	r0, [r7, #4]
 80096c8:	460b      	mov	r3, r1
 80096ca:	70fb      	strb	r3, [r7, #3]
	/*
	 * Initialise pdev data structure
	 */

	VL53L1_Error status       = VL53L1_ERROR_NONE;
 80096cc:	2300      	movs	r3, #0
 80096ce:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t    *pdev =
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	60bb      	str	r3, [r7, #8]
			VL53L1DevStructGetLLDriverHandle(Dev);

	VL53L1_init_ll_driver_state(
 80096d4:	2162      	movs	r1, #98	; 0x62
 80096d6:	6878      	ldr	r0, [r7, #4]
 80096d8:	f002 fb00 	bl	800bcdc <VL53L1_init_ll_driver_state>
			Dev,
			VL53L1_DEVICESTATE_UNKNOWN);

	pdev->wait_method             = VL53L1_WAIT_METHOD_BLOCKING;
 80096dc:	68bb      	ldr	r3, [r7, #8]
 80096de:	2200      	movs	r2, #0
 80096e0:	701a      	strb	r2, [r3, #0]
	pdev->preset_mode             = VL53L1_DEVICEPRESETMODE_STANDARD_RANGING;
 80096e2:	68bb      	ldr	r3, [r7, #8]
 80096e4:	2201      	movs	r2, #1
 80096e6:	705a      	strb	r2, [r3, #1]
	pdev->measurement_mode        = VL53L1_DEVICEMEASUREMENTMODE_STOP;
 80096e8:	68bb      	ldr	r3, [r7, #8]
 80096ea:	2200      	movs	r2, #0
 80096ec:	709a      	strb	r2, [r3, #2]

	pdev->offset_calibration_mode =
 80096ee:	68bb      	ldr	r3, [r7, #8]
 80096f0:	2201      	movs	r2, #1
 80096f2:	70da      	strb	r2, [r3, #3]
		VL53L1_OFFSETCALIBRATIONMODE__MM1_MM2__STANDARD;
	pdev->offset_correction_mode  =
 80096f4:	68bb      	ldr	r3, [r7, #8]
 80096f6:	2201      	movs	r2, #1
 80096f8:	711a      	strb	r2, [r3, #4]
		VL53L1_OFFSETCORRECTIONMODE__MM1_MM2_OFFSETS;

	pdev->phasecal_config_timeout_us  =  1000;
 80096fa:	68bb      	ldr	r3, [r7, #8]
 80096fc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009700:	609a      	str	r2, [r3, #8]
	pdev->mm_config_timeout_us        =  2000;
 8009702:	68bb      	ldr	r3, [r7, #8]
 8009704:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8009708:	60da      	str	r2, [r3, #12]
	pdev->range_config_timeout_us     = 13000;
 800970a:	68bb      	ldr	r3, [r7, #8]
 800970c:	f243 22c8 	movw	r2, #13000	; 0x32c8
 8009710:	611a      	str	r2, [r3, #16]
	pdev->inter_measurement_period_ms =   100;
 8009712:	68bb      	ldr	r3, [r7, #8]
 8009714:	2264      	movs	r2, #100	; 0x64
 8009716:	615a      	str	r2, [r3, #20]
	pdev->dss_config__target_total_rate_mcps = 0x0A00;
 8009718:	68bb      	ldr	r3, [r7, #8]
 800971a:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 800971e:	831a      	strh	r2, [r3, #24]
	pdev->debug_mode                  =  0x00;
 8009720:	68bb      	ldr	r3, [r7, #8]
 8009722:	2200      	movs	r2, #0
 8009724:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

	/* initialise gain calibration values to tuning parameter values */

	pdev->gain_cal.standard_ranging_gain_factor =
 8009728:	68bb      	ldr	r3, [r7, #8]
 800972a:	f240 72db 	movw	r2, #2011	; 0x7db
 800972e:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
			VL53L1_TUNINGPARM_LITE_RANGING_GAIN_FACTOR_DEFAULT;

	/*
	 * Initialise version structure
	 */
	VL53L1_init_version(Dev);
 8009732:	6878      	ldr	r0, [r7, #4]
 8009734:	f002 fab6 	bl	800bca4 <VL53L1_init_version>
	 *
	 *  Contains the key NVM data e.g identification info fast oscillator
	 *  freq, max trim and laser safety info
	 */

	if (read_p2p_data > 0 && status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 8009738:	78fb      	ldrb	r3, [r7, #3]
 800973a:	2b00      	cmp	r3, #0
 800973c:	d008      	beq.n	8009750 <VL53L1_data_init+0x90>
 800973e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009742:	2b00      	cmp	r3, #0
 8009744:	d104      	bne.n	8009750 <VL53L1_data_init+0x90>
			status = VL53L1_read_p2p_data(Dev);
 8009746:	6878      	ldr	r0, [r7, #4]
 8009748:	f000 f857 	bl	80097fa <VL53L1_read_p2p_data>
 800974c:	4603      	mov	r3, r0
 800974e:	73fb      	strb	r3, [r7, #15]

	/* Initialise Ref SPAD Char configuration structure */
#ifndef VL53L1_NOCALIB
	status =
		VL53L1_init_refspadchar_config_struct(
 8009750:	68bb      	ldr	r3, [r7, #8]
 8009752:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8009756:	4618      	mov	r0, r3
 8009758:	f001 fd86 	bl	800b268 <VL53L1_init_refspadchar_config_struct>
 800975c:	4603      	mov	r3, r0
 800975e:	73fb      	strb	r3, [r7, #15]
#endif

	/* Initialise SPAD Self Check (SSC) configuration structure */
#ifndef VL53L1_NOCALIB
	status =
		VL53L1_init_ssc_config_struct(
 8009760:	68bb      	ldr	r3, [r7, #8]
 8009762:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8009766:	4618      	mov	r0, r3
 8009768:	f001 fda2 	bl	800b2b0 <VL53L1_init_ssc_config_struct>
 800976c:	4603      	mov	r3, r0
 800976e:	73fb      	strb	r3, [r7, #15]

	/* Initialise Private Xtalk configuration structure
	 * - Fill with customer NVM data to begin
	 */
	status =
		VL53L1_init_xtalk_config_struct(
 8009770:	68bb      	ldr	r3, [r7, #8]
 8009772:	f103 0242 	add.w	r2, r3, #66	; 0x42
 8009776:	68bb      	ldr	r3, [r7, #8]
 8009778:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 800977c:	4619      	mov	r1, r3
 800977e:	4610      	mov	r0, r2
 8009780:	f001 fdb7 	bl	800b2f2 <VL53L1_init_xtalk_config_struct>
 8009784:	4603      	mov	r3, r0
 8009786:	73fb      	strb	r3, [r7, #15]

	/* Initialise Offset Calibration configuration structure
	 */
#ifndef VL53L1_NOCALIB
	status =
		VL53L1_init_offset_cal_config_struct(
 8009788:	68bb      	ldr	r3, [r7, #8]
 800978a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800978e:	4618      	mov	r0, r3
 8009790:	f001 fe11 	bl	800b3b6 <VL53L1_init_offset_cal_config_struct>
 8009794:	4603      	mov	r3, r0
 8009796:	73fb      	strb	r3, [r7, #15]

	/* Initialise Tuning Parameter structure
	 * - Added as part of Patch_AddingTuningParmStorage_11821
	 */
	status =
		VL53L1_init_tuning_parm_storage_struct(
 8009798:	68bb      	ldr	r3, [r7, #8]
 800979a:	33a4      	adds	r3, #164	; 0xa4
 800979c:	4618      	mov	r0, r3
 800979e:	f001 fe31 	bl	800b404 <VL53L1_init_tuning_parm_storage_struct>
 80097a2:	4603      	mov	r3, r0
 80097a4:	73fb      	strb	r3, [r7, #15]
			&(pdev->tuning_parms));

	status = VL53L1_set_vhv_loopbound(Dev,
 80097a6:	2120      	movs	r1, #32
 80097a8:	6878      	ldr	r0, [r7, #4]
 80097aa:	f000 fe1d 	bl	800a3e8 <VL53L1_set_vhv_loopbound>
 80097ae:	4603      	mov	r3, r0
 80097b0:	73fb      	strb	r3, [r7, #15]
	/*
	 * Initialise default settings - much happen *after*
	 * reading /setting  of static_nvm_managed
	 */

	if (status == VL53L1_ERROR_NONE)
 80097b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d116      	bne.n	80097e8 <VL53L1_data_init+0x128>
		status = VL53L1_set_preset_mode(
 80097ba:	68bb      	ldr	r3, [r7, #8]
 80097bc:	7858      	ldrb	r0, [r3, #1]
 80097be:	68bb      	ldr	r3, [r7, #8]
 80097c0:	8b1c      	ldrh	r4, [r3, #24]
 80097c2:	68bb      	ldr	r3, [r7, #8]
 80097c4:	689d      	ldr	r5, [r3, #8]
 80097c6:	68bb      	ldr	r3, [r7, #8]
 80097c8:	68db      	ldr	r3, [r3, #12]
 80097ca:	68ba      	ldr	r2, [r7, #8]
 80097cc:	6912      	ldr	r2, [r2, #16]
 80097ce:	68b9      	ldr	r1, [r7, #8]
 80097d0:	6949      	ldr	r1, [r1, #20]
 80097d2:	9102      	str	r1, [sp, #8]
 80097d4:	9201      	str	r2, [sp, #4]
 80097d6:	9300      	str	r3, [sp, #0]
 80097d8:	462b      	mov	r3, r5
 80097da:	4622      	mov	r2, r4
 80097dc:	4601      	mov	r1, r0
 80097de:	6878      	ldr	r0, [r7, #4]
 80097e0:	f000 fbaa 	bl	8009f38 <VL53L1_set_preset_mode>
 80097e4:	4603      	mov	r3, r0
 80097e6:	73fb      	strb	r3, [r7, #15]
						pdev->range_config_timeout_us,
						pdev->inter_measurement_period_ms);

	/* Initial Low Power Auto Mode data structures */
	/* Added for Patch_LowPowerAutoMode */
	VL53L1_low_power_auto_data_init(
 80097e8:	6878      	ldr	r0, [r7, #4]
 80097ea:	f003 f947 	bl	800ca7c <VL53L1_low_power_auto_data_init>

#endif

	LOG_FUNCTION_END(status);

	return status;
 80097ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80097f2:	4618      	mov	r0, r3
 80097f4:	3710      	adds	r7, #16
 80097f6:	46bd      	mov	sp, r7
 80097f8:	bdb0      	pop	{r4, r5, r7, pc}

080097fa <VL53L1_read_p2p_data>:


VL53L1_Error VL53L1_read_p2p_data(
	VL53L1_DEV        Dev)
{
 80097fa:	b580      	push	{r7, lr}
 80097fc:	b084      	sub	sp, #16
 80097fe:	af00      	add	r7, sp, #0
 8009800:	6078      	str	r0, [r7, #4]
	 *
	 *  Contains the key NVM data e.g identification info
	 *  fast oscillator freq, max trim and laser safety info
	 */

	VL53L1_Error status       = VL53L1_ERROR_NONE;
 8009802:	2300      	movs	r3, #0
 8009804:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE)
 800980a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800980e:	2b00      	cmp	r3, #0
 8009810:	d108      	bne.n	8009824 <VL53L1_read_p2p_data+0x2a>
		status = VL53L1_get_static_nvm_managed(
 8009812:	68bb      	ldr	r3, [r7, #8]
 8009814:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8009818:	4619      	mov	r1, r3
 800981a:	6878      	ldr	r0, [r7, #4]
 800981c:	f003 fb1b 	bl	800ce56 <VL53L1_get_static_nvm_managed>
 8009820:	4603      	mov	r3, r0
 8009822:	73fb      	strb	r3, [r7, #15]
						Dev,
						&(pdev->stat_nvm));

	if (status == VL53L1_ERROR_NONE)
 8009824:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009828:	2b00      	cmp	r3, #0
 800982a:	d107      	bne.n	800983c <VL53L1_read_p2p_data+0x42>
		status = VL53L1_get_customer_nvm_managed(
 800982c:	68bb      	ldr	r3, [r7, #8]
 800982e:	3342      	adds	r3, #66	; 0x42
 8009830:	4619      	mov	r1, r3
 8009832:	6878      	ldr	r0, [r7, #4]
 8009834:	f003 fc74 	bl	800d120 <VL53L1_get_customer_nvm_managed>
 8009838:	4603      	mov	r3, r0
 800983a:	73fb      	strb	r3, [r7, #15]
						Dev,
						&(pdev->customer));

	if (status == VL53L1_ERROR_NONE) {
 800983c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009840:	2b00      	cmp	r3, #0
 8009842:	d115      	bne.n	8009870 <VL53L1_read_p2p_data+0x76>

		status = VL53L1_get_nvm_copy_data(
 8009844:	68bb      	ldr	r3, [r7, #8]
 8009846:	f503 73fd 	add.w	r3, r3, #506	; 0x1fa
 800984a:	4619      	mov	r1, r3
 800984c:	6878      	ldr	r0, [r7, #4]
 800984e:	f004 fb4d 	bl	800deec <VL53L1_get_nvm_copy_data>
 8009852:	4603      	mov	r3, r0
 8009854:	73fb      	strb	r3, [r7, #15]
						Dev,
						&(pdev->nvm_copy_data));

		/* copy Return Good SPADs to buffer */
		if (status == VL53L1_ERROR_NONE)
 8009856:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800985a:	2b00      	cmp	r3, #0
 800985c:	d108      	bne.n	8009870 <VL53L1_read_p2p_data+0x76>
			VL53L1_copy_rtn_good_spads_to_buffer(
 800985e:	68bb      	ldr	r3, [r7, #8]
 8009860:	f503 72fd 	add.w	r2, r3, #506	; 0x1fa
 8009864:	68bb      	ldr	r3, [r7, #8]
 8009866:	33f0      	adds	r3, #240	; 0xf0
 8009868:	4619      	mov	r1, r3
 800986a:	4610      	mov	r0, r2
 800986c:	f002 fb99 	bl	800bfa2 <VL53L1_copy_rtn_good_spads_to_buffer>

	/*
	 * read slow osc calibration value
	 * counts per ms
	 */
	if (status == VL53L1_ERROR_NONE)
 8009870:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009874:	2b00      	cmp	r3, #0
 8009876:	d109      	bne.n	800988c <VL53L1_read_p2p_data+0x92>
		status =
			VL53L1_RdWord(
 8009878:	68bb      	ldr	r3, [r7, #8]
 800987a:	f503 732d 	add.w	r3, r3, #692	; 0x2b4
 800987e:	461a      	mov	r2, r3
 8009880:	21de      	movs	r1, #222	; 0xde
 8009882:	6878      	ldr	r0, [r7, #4]
 8009884:	f004 fd38 	bl	800e2f8 <VL53L1_RdWord>
 8009888:	4603      	mov	r3, r0
 800988a:	73fb      	strb	r3, [r7, #15]

	/*
	 * Check if there a sensible value for osc_measured__fast_osc__frequency
	 */

	if (pdev->stat_nvm.osc_measured__fast_osc__frequency < 0x1000) {
 800988c:	68bb      	ldr	r3, [r7, #8]
 800988e:	f8b3 315e 	ldrh.w	r3, [r3, #350]	; 0x15e
 8009892:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009896:	d204      	bcs.n	80098a2 <VL53L1_read_p2p_data+0xa8>
			VL53L1_TRACE_LEVEL_WARNING,
			"\nInvalid %s value (0x%04X) - forcing to 0x%04X\n\n",
			"pdev->stat_nvm.osc_measured__fast_osc__frequency",
			pdev->stat_nvm.osc_measured__fast_osc__frequency,
			0xBCCC);
		pdev->stat_nvm.osc_measured__fast_osc__frequency = 0xBCCC;
 8009898:	68bb      	ldr	r3, [r7, #8]
 800989a:	f64b 42cc 	movw	r2, #48332	; 0xbccc
 800989e:	f8a3 215e 	strh.w	r2, [r3, #350]	; 0x15e

	/*
	 * Get MM ROI - contains optical centre as SPAD number
	 */

	if (status == VL53L1_ERROR_NONE)
 80098a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d107      	bne.n	80098ba <VL53L1_read_p2p_data+0xc0>
		status =
			VL53L1_get_mode_mitigation_roi(
 80098aa:	68bb      	ldr	r3, [r7, #8]
 80098ac:	339e      	adds	r3, #158	; 0x9e
 80098ae:	4619      	mov	r1, r3
 80098b0:	6878      	ldr	r0, [r7, #4]
 80098b2:	f000 fa63 	bl	8009d7c <VL53L1_get_mode_mitigation_roi>
 80098b6:	4603      	mov	r3, r0
 80098b8:	73fb      	strb	r3, [r7, #15]

	/* catch parts where the optical centre is
	 * no programmed in to the NVM
	 */

	if (pdev->optical_centre.x_centre == 0 &&
 80098ba:	68bb      	ldr	r3, [r7, #8]
 80098bc:	f893 30a2 	ldrb.w	r3, [r3, #162]	; 0xa2
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d114      	bne.n	80098ee <VL53L1_read_p2p_data+0xf4>
		pdev->optical_centre.y_centre == 0) {
 80098c4:	68bb      	ldr	r3, [r7, #8]
 80098c6:	f893 30a3 	ldrb.w	r3, [r3, #163]	; 0xa3
	if (pdev->optical_centre.x_centre == 0 &&
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d10f      	bne.n	80098ee <VL53L1_read_p2p_data+0xf4>
		pdev->optical_centre.x_centre =
				pdev->mm_roi.x_centre << 4;
 80098ce:	68bb      	ldr	r3, [r7, #8]
 80098d0:	f893 309e 	ldrb.w	r3, [r3, #158]	; 0x9e
 80098d4:	011b      	lsls	r3, r3, #4
 80098d6:	b2da      	uxtb	r2, r3
		pdev->optical_centre.x_centre =
 80098d8:	68bb      	ldr	r3, [r7, #8]
 80098da:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
		pdev->optical_centre.y_centre =
				pdev->mm_roi.y_centre << 4;
 80098de:	68bb      	ldr	r3, [r7, #8]
 80098e0:	f893 309f 	ldrb.w	r3, [r3, #159]	; 0x9f
 80098e4:	011b      	lsls	r3, r3, #4
 80098e6:	b2da      	uxtb	r2, r3
		pdev->optical_centre.y_centre =
 80098e8:	68bb      	ldr	r3, [r7, #8]
 80098ea:	f883 20a3 	strb.w	r2, [r3, #163]	; 0xa3
	}

	LOG_FUNCTION_END(status);

	return status;
 80098ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80098f2:	4618      	mov	r0, r3
 80098f4:	3710      	adds	r7, #16
 80098f6:	46bd      	mov	sp, r7
 80098f8:	bd80      	pop	{r7, pc}
	...

080098fc <VL53L1_set_part_to_part_data>:


VL53L1_Error VL53L1_set_part_to_part_data(
	VL53L1_DEV                            Dev,
	VL53L1_calibration_data_t            *pcal_data)
{
 80098fc:	b580      	push	{r7, lr}
 80098fe:	b086      	sub	sp, #24
 8009900:	af00      	add	r7, sp, #0
 8009902:	6078      	str	r0, [r7, #4]
 8009904:	6039      	str	r1, [r7, #0]
	/**
	 * Uses memcpy to copy input data to pdev->customer
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009906:	2300      	movs	r3, #0
 8009908:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	60fb      	str	r3, [r7, #12]

	uint32_t tempu32;

	LOG_FUNCTION_START("");

	if (pcal_data->struct_version !=
 800990e:	683b      	ldr	r3, [r7, #0]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	4a36      	ldr	r2, [pc, #216]	; (80099ec <VL53L1_set_part_to_part_data+0xf0>)
 8009914:	4293      	cmp	r3, r2
 8009916:	d001      	beq.n	800991c <VL53L1_set_part_to_part_data+0x20>
		VL53L1_LL_CALIBRATION_DATA_STRUCT_VERSION) {
		status = VL53L1_ERROR_INVALID_PARAMS;
 8009918:	23fc      	movs	r3, #252	; 0xfc
 800991a:	75fb      	strb	r3, [r7, #23]
	}

	if (status == VL53L1_ERROR_NONE) {
 800991c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009920:	2b00      	cmp	r3, #0
 8009922:	d15d      	bne.n	80099e0 <VL53L1_set_part_to_part_data+0xe4>

		/* memcpy(DEST, SRC, N)  */
		memcpy(
			&(pdev->customer),
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	f103 0042 	add.w	r0, r3, #66	; 0x42
			&(pcal_data->customer),
 800992a:	683b      	ldr	r3, [r7, #0]
 800992c:	3304      	adds	r3, #4
		memcpy(
 800992e:	2218      	movs	r2, #24
 8009930:	4619      	mov	r1, r3
 8009932:	f004 fe2b 	bl	800e58c <memcpy>
			sizeof(VL53L1_customer_nvm_managed_t));

		/* memcpy(DEST, SRC, N)  */
		memcpy(
			&(pdev->add_off_cal_data),
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	f103 0094 	add.w	r0, r3, #148	; 0x94
			&(pcal_data->add_off_cal_data),
 800993c:	683b      	ldr	r3, [r7, #0]
 800993e:	331c      	adds	r3, #28
		memcpy(
 8009940:	2208      	movs	r2, #8
 8009942:	4619      	mov	r1, r3
 8009944:	f004 fe22 	bl	800e58c <memcpy>
			sizeof(VL53L1_additional_offset_cal_data_t));

		/* memcpy(DEST, SRC, N)  */
		memcpy(
			&(pdev->gain_cal),
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	339c      	adds	r3, #156	; 0x9c
			&(pcal_data->gain_cal),
 800994c:	683a      	ldr	r2, [r7, #0]
 800994e:	3226      	adds	r2, #38	; 0x26
 8009950:	8812      	ldrh	r2, [r2, #0]
 8009952:	b292      	uxth	r2, r2
		memcpy(
 8009954:	801a      	strh	r2, [r3, #0]
			sizeof(VL53L1_gain_calibration_data_t));

		/* memcpy(DEST, SRC, N)  */
		memcpy(
			&(pdev->cal_peak_rate_map),
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	f103 005a 	add.w	r0, r3, #90	; 0x5a
			&(pcal_data->cal_peak_rate_map),
 800995c:	683b      	ldr	r3, [r7, #0]
 800995e:	3328      	adds	r3, #40	; 0x28
		memcpy(
 8009960:	223a      	movs	r2, #58	; 0x3a
 8009962:	4619      	mov	r1, r3
 8009964:	f004 fe12 	bl	800e58c <memcpy>
		/*
		 *  Update internal xtalk data structures
		 */

		pdev->xtalk_cfg.algo__crosstalk_compensation_plane_offset_kcps =
			pdev->customer.algo__crosstalk_compensation_plane_offset_kcps;
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 800996e:	461a      	mov	r2, r3
		pdev->xtalk_cfg.algo__crosstalk_compensation_plane_offset_kcps =
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
		pdev->xtalk_cfg.algo__crosstalk_compensation_x_plane_gradient_kcps =
			pdev->customer.algo__crosstalk_compensation_x_plane_gradient_kcps;
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	f9b3 204e 	ldrsh.w	r2, [r3, #78]	; 0x4e
		pdev->xtalk_cfg.algo__crosstalk_compensation_x_plane_gradient_kcps =
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	f8a3 2130 	strh.w	r2, [r3, #304]	; 0x130
		pdev->xtalk_cfg.algo__crosstalk_compensation_y_plane_gradient_kcps =
			pdev->customer.algo__crosstalk_compensation_y_plane_gradient_kcps;
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	f9b3 2050 	ldrsh.w	r2, [r3, #80]	; 0x50
		pdev->xtalk_cfg.algo__crosstalk_compensation_y_plane_gradient_kcps =
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	f8a3 2132 	strh.w	r2, [r3, #306]	; 0x132

		/* Assess and update customer packet xtalk parameters */

		if (pdev->xtalk_cfg.global_crosstalk_compensation_enable == 0x00) {
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8009994:	2b00      	cmp	r3, #0
 8009996:	d10c      	bne.n	80099b2 <VL53L1_set_part_to_part_data+0xb6>
			pdev->customer.algo__crosstalk_compensation_plane_offset_kcps =
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	2200      	movs	r2, #0
 800999c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
				0x00;
			pdev->customer.algo__crosstalk_compensation_x_plane_gradient_kcps =
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	2200      	movs	r2, #0
 80099a4:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
				0x00;
			pdev->customer.algo__crosstalk_compensation_y_plane_gradient_kcps =
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	2200      	movs	r2, #0
 80099ac:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
 80099b0:	e016      	b.n	80099e0 <VL53L1_set_part_to_part_data+0xe4>
				0x00;
		} else {
			tempu32 = VL53L1_calc_crosstalk_plane_offset_with_margin(
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	f8d3 212c 	ldr.w	r2, [r3, #300]	; 0x12c
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	f9b3 313e 	ldrsh.w	r3, [r3, #318]	; 0x13e
 80099be:	4619      	mov	r1, r3
 80099c0:	4610      	mov	r0, r2
 80099c2:	f002 fe6f 	bl	800c6a4 <VL53L1_calc_crosstalk_plane_offset_with_margin>
 80099c6:	6138      	str	r0, [r7, #16]
				pdev->xtalk_cfg.algo__crosstalk_compensation_plane_offset_kcps,
				pdev->xtalk_cfg.lite_mode_crosstalk_margin_kcps);
			if (tempu32 > 0xFFFF) {	/* clip to 16 bits */
 80099c8:	693b      	ldr	r3, [r7, #16]
 80099ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80099ce:	d302      	bcc.n	80099d6 <VL53L1_set_part_to_part_data+0xda>
				tempu32 = 0xFFFF;
 80099d0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80099d4:	613b      	str	r3, [r7, #16]
			}
			pdev->customer.algo__crosstalk_compensation_plane_offset_kcps =
				(uint16_t)tempu32;
 80099d6:	693b      	ldr	r3, [r7, #16]
 80099d8:	b29a      	uxth	r2, r3
			pdev->customer.algo__crosstalk_compensation_plane_offset_kcps =
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
		}
	}

	LOG_FUNCTION_END(status);

	return status;
 80099e0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80099e4:	4618      	mov	r0, r3
 80099e6:	3718      	adds	r7, #24
 80099e8:	46bd      	mov	sp, r7
 80099ea:	bd80      	pop	{r7, pc}
 80099ec:	ecab0102 	.word	0xecab0102

080099f0 <VL53L1_get_part_to_part_data>:


VL53L1_Error VL53L1_get_part_to_part_data(
	VL53L1_DEV                      Dev,
	VL53L1_calibration_data_t      *pcal_data)
{
 80099f0:	b580      	push	{r7, lr}
 80099f2:	b084      	sub	sp, #16
 80099f4:	af00      	add	r7, sp, #0
 80099f6:	6078      	str	r0, [r7, #4]
 80099f8:	6039      	str	r1, [r7, #0]
	/**
	 * Uses memcpy to copy pdev->customer to output data
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80099fa:	2300      	movs	r3, #0
 80099fc:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pcal_data->struct_version =
 8009a02:	683b      	ldr	r3, [r7, #0]
 8009a04:	4a25      	ldr	r2, [pc, #148]	; (8009a9c <VL53L1_get_part_to_part_data+0xac>)
 8009a06:	601a      	str	r2, [r3, #0]
			VL53L1_LL_CALIBRATION_DATA_STRUCT_VERSION;

	/* memcpy(DEST, SRC, N)  */
	memcpy(
		&(pcal_data->customer),
 8009a08:	683b      	ldr	r3, [r7, #0]
 8009a0a:	1d18      	adds	r0, r3, #4
		&(pdev->customer),
 8009a0c:	68bb      	ldr	r3, [r7, #8]
 8009a0e:	3342      	adds	r3, #66	; 0x42
	memcpy(
 8009a10:	2218      	movs	r2, #24
 8009a12:	4619      	mov	r1, r3
 8009a14:	f004 fdba 	bl	800e58c <memcpy>
		sizeof(VL53L1_customer_nvm_managed_t));

	/* Overwrite Struct with xtalk config parameters */
	/* - customer struct versions are not golden copy */

	if (pdev->xtalk_cfg.algo__crosstalk_compensation_plane_offset_kcps > 0xFFFF) {
 8009a18:	68bb      	ldr	r3, [r7, #8]
 8009a1a:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 8009a1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009a22:	d304      	bcc.n	8009a2e <VL53L1_get_part_to_part_data+0x3e>
		pcal_data->customer.algo__crosstalk_compensation_plane_offset_kcps =
 8009a24:	683b      	ldr	r3, [r7, #0]
 8009a26:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009a2a:	81da      	strh	r2, [r3, #14]
 8009a2c:	e005      	b.n	8009a3a <VL53L1_get_part_to_part_data+0x4a>
			0xFFFF;
	} else {
		pcal_data->customer.algo__crosstalk_compensation_plane_offset_kcps =
			(uint16_t)pdev->xtalk_cfg.algo__crosstalk_compensation_plane_offset_kcps;
 8009a2e:	68bb      	ldr	r3, [r7, #8]
 8009a30:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 8009a34:	b29a      	uxth	r2, r3
		pcal_data->customer.algo__crosstalk_compensation_plane_offset_kcps =
 8009a36:	683b      	ldr	r3, [r7, #0]
 8009a38:	81da      	strh	r2, [r3, #14]
	}
	pcal_data->customer.algo__crosstalk_compensation_x_plane_gradient_kcps =
		pdev->xtalk_cfg.algo__crosstalk_compensation_x_plane_gradient_kcps;
 8009a3a:	68bb      	ldr	r3, [r7, #8]
 8009a3c:	f9b3 2130 	ldrsh.w	r2, [r3, #304]	; 0x130
	pcal_data->customer.algo__crosstalk_compensation_x_plane_gradient_kcps =
 8009a40:	683b      	ldr	r3, [r7, #0]
 8009a42:	821a      	strh	r2, [r3, #16]
	pcal_data->customer.algo__crosstalk_compensation_y_plane_gradient_kcps =
		pdev->xtalk_cfg.algo__crosstalk_compensation_y_plane_gradient_kcps;
 8009a44:	68bb      	ldr	r3, [r7, #8]
 8009a46:	f9b3 2132 	ldrsh.w	r2, [r3, #306]	; 0x132
	pcal_data->customer.algo__crosstalk_compensation_y_plane_gradient_kcps =
 8009a4a:	683b      	ldr	r3, [r7, #0]
 8009a4c:	825a      	strh	r2, [r3, #18]

	/* memcpy(DEST, SRC, N)  */
	memcpy(
		&(pcal_data->add_off_cal_data),
 8009a4e:	683b      	ldr	r3, [r7, #0]
 8009a50:	f103 001c 	add.w	r0, r3, #28
		&(pdev->add_off_cal_data),
 8009a54:	68bb      	ldr	r3, [r7, #8]
 8009a56:	3394      	adds	r3, #148	; 0x94
	memcpy(
 8009a58:	2208      	movs	r2, #8
 8009a5a:	4619      	mov	r1, r3
 8009a5c:	f004 fd96 	bl	800e58c <memcpy>
		sizeof(VL53L1_additional_offset_cal_data_t));

	/* memcpy(DEST, SRC, N)  */
	memcpy(
		&(pcal_data->optical_centre),
 8009a60:	683b      	ldr	r3, [r7, #0]
 8009a62:	3324      	adds	r3, #36	; 0x24
		&(pdev->optical_centre),
 8009a64:	68ba      	ldr	r2, [r7, #8]
 8009a66:	32a2      	adds	r2, #162	; 0xa2
 8009a68:	8812      	ldrh	r2, [r2, #0]
 8009a6a:	b292      	uxth	r2, r2
	memcpy(
 8009a6c:	801a      	strh	r2, [r3, #0]
		sizeof(VL53L1_optical_centre_t));

	/* memcpy(DEST, SRC, N)  */
	memcpy(
		&(pcal_data->gain_cal),
 8009a6e:	683b      	ldr	r3, [r7, #0]
 8009a70:	3326      	adds	r3, #38	; 0x26
		&(pdev->gain_cal),
 8009a72:	68ba      	ldr	r2, [r7, #8]
 8009a74:	329c      	adds	r2, #156	; 0x9c
 8009a76:	8812      	ldrh	r2, [r2, #0]
 8009a78:	b292      	uxth	r2, r2
	memcpy(
 8009a7a:	801a      	strh	r2, [r3, #0]
		sizeof(VL53L1_gain_calibration_data_t));

	/* memcpy(DEST, SRC, N)  */
	memcpy(
		&(pcal_data->cal_peak_rate_map),
 8009a7c:	683b      	ldr	r3, [r7, #0]
 8009a7e:	f103 0028 	add.w	r0, r3, #40	; 0x28
		&(pdev->cal_peak_rate_map),
 8009a82:	68bb      	ldr	r3, [r7, #8]
 8009a84:	335a      	adds	r3, #90	; 0x5a
	memcpy(
 8009a86:	223a      	movs	r2, #58	; 0x3a
 8009a88:	4619      	mov	r1, r3
 8009a8a:	f004 fd7f 	bl	800e58c <memcpy>
		sizeof(VL53L1_cal_peak_rate_map_t));

	LOG_FUNCTION_END(status);

	return status;
 8009a8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009a92:	4618      	mov	r0, r3
 8009a94:	3710      	adds	r7, #16
 8009a96:	46bd      	mov	sp, r7
 8009a98:	bd80      	pop	{r7, pc}
 8009a9a:	bf00      	nop
 8009a9c:	ecab0102 	.word	0xecab0102

08009aa0 <VL53L1_set_inter_measurement_period_ms>:


VL53L1_Error VL53L1_set_inter_measurement_period_ms(
	VL53L1_DEV              Dev,
	uint32_t                inter_measurement_period_ms)
{
 8009aa0:	b480      	push	{r7}
 8009aa2:	b085      	sub	sp, #20
 8009aa4:	af00      	add	r7, sp, #0
 8009aa6:	6078      	str	r0, [r7, #4]
 8009aa8:	6039      	str	r1, [r7, #0]
	/**
	 * Convenience function for setting the inter measurement period
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009aaa:	2300      	movs	r3, #0
 8009aac:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	if (pdev->dbg_results.result__osc_calibrate_val == 0)
 8009ab2:	68bb      	ldr	r3, [r7, #8]
 8009ab4:	f8b3 32b4 	ldrh.w	r3, [r3, #692]	; 0x2b4
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d101      	bne.n	8009ac0 <VL53L1_set_inter_measurement_period_ms+0x20>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 8009abc:	23f1      	movs	r3, #241	; 0xf1
 8009abe:	73fb      	strb	r3, [r7, #15]

	if (status == VL53L1_ERROR_NONE) {
 8009ac0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d10c      	bne.n	8009ae2 <VL53L1_set_inter_measurement_period_ms+0x42>
		pdev->inter_measurement_period_ms = inter_measurement_period_ms;
 8009ac8:	68bb      	ldr	r3, [r7, #8]
 8009aca:	683a      	ldr	r2, [r7, #0]
 8009acc:	615a      	str	r2, [r3, #20]
		pdev->tim_cfg.system__intermeasurement_period = \
			inter_measurement_period_ms *
			(uint32_t)pdev->dbg_results.result__osc_calibrate_val;
 8009ace:	68bb      	ldr	r3, [r7, #8]
 8009ad0:	f8b3 32b4 	ldrh.w	r3, [r3, #692]	; 0x2b4
 8009ad4:	461a      	mov	r2, r3
			inter_measurement_period_ms *
 8009ad6:	683b      	ldr	r3, [r7, #0]
 8009ad8:	fb03 f202 	mul.w	r2, r3, r2
		pdev->tim_cfg.system__intermeasurement_period = \
 8009adc:	68bb      	ldr	r3, [r7, #8]
 8009ade:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
	}

	LOG_FUNCTION_END(status);

	return status;
 8009ae2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009ae6:	4618      	mov	r0, r3
 8009ae8:	3714      	adds	r7, #20
 8009aea:	46bd      	mov	sp, r7
 8009aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af0:	4770      	bx	lr

08009af2 <VL53L1_get_inter_measurement_period_ms>:


VL53L1_Error VL53L1_get_inter_measurement_period_ms(
	VL53L1_DEV              Dev,
	uint32_t               *pinter_measurement_period_ms)
{
 8009af2:	b480      	push	{r7}
 8009af4:	b085      	sub	sp, #20
 8009af6:	af00      	add	r7, sp, #0
 8009af8:	6078      	str	r0, [r7, #4]
 8009afa:	6039      	str	r1, [r7, #0]
	/**
	 * Convenience function for getting the inter measurement period
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009afc:	2300      	movs	r3, #0
 8009afe:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	if (pdev->dbg_results.result__osc_calibrate_val == 0)
 8009b04:	68bb      	ldr	r3, [r7, #8]
 8009b06:	f8b3 32b4 	ldrh.w	r3, [r3, #692]	; 0x2b4
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d101      	bne.n	8009b12 <VL53L1_get_inter_measurement_period_ms+0x20>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 8009b0e:	23f1      	movs	r3, #241	; 0xf1
 8009b10:	73fb      	strb	r3, [r7, #15]

	if (status == VL53L1_ERROR_NONE)
 8009b12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d109      	bne.n	8009b2e <VL53L1_get_inter_measurement_period_ms+0x3c>
		*pinter_measurement_period_ms = \
			pdev->tim_cfg.system__intermeasurement_period /
 8009b1a:	68bb      	ldr	r3, [r7, #8]
 8009b1c:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
			(uint32_t)pdev->dbg_results.result__osc_calibrate_val;
 8009b20:	68ba      	ldr	r2, [r7, #8]
 8009b22:	f8b2 22b4 	ldrh.w	r2, [r2, #692]	; 0x2b4
			pdev->tim_cfg.system__intermeasurement_period /
 8009b26:	fbb3 f2f2 	udiv	r2, r3, r2
		*pinter_measurement_period_ms = \
 8009b2a:	683b      	ldr	r3, [r7, #0]
 8009b2c:	601a      	str	r2, [r3, #0]


	LOG_FUNCTION_END(status);

	return status;
 8009b2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009b32:	4618      	mov	r0, r3
 8009b34:	3714      	adds	r7, #20
 8009b36:	46bd      	mov	sp, r7
 8009b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b3c:	4770      	bx	lr

08009b3e <VL53L1_set_timeouts_us>:
VL53L1_Error VL53L1_set_timeouts_us(
	VL53L1_DEV          Dev,
	uint32_t            phasecal_config_timeout_us,
	uint32_t            mm_config_timeout_us,
	uint32_t            range_config_timeout_us)
{
 8009b3e:	b580      	push	{r7, lr}
 8009b40:	b088      	sub	sp, #32
 8009b42:	af02      	add	r7, sp, #8
 8009b44:	60f8      	str	r0, [r7, #12]
 8009b46:	60b9      	str	r1, [r7, #8]
 8009b48:	607a      	str	r2, [r7, #4]
 8009b4a:	603b      	str	r3, [r7, #0]
	/**
	 * Convenience function for setting the MM and range
	 * timeouts
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009b4c:	2300      	movs	r3, #0
 8009b4e:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev =
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	613b      	str	r3, [r7, #16]
			VL53L1DevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	if (pdev->stat_nvm.osc_measured__fast_osc__frequency == 0)
 8009b54:	693b      	ldr	r3, [r7, #16]
 8009b56:	f8b3 315e 	ldrh.w	r3, [r3, #350]	; 0x15e
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d101      	bne.n	8009b62 <VL53L1_set_timeouts_us+0x24>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 8009b5e:	23f1      	movs	r3, #241	; 0xf1
 8009b60:	75fb      	strb	r3, [r7, #23]

	if (status == VL53L1_ERROR_NONE) {
 8009b62:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d11b      	bne.n	8009ba2 <VL53L1_set_timeouts_us+0x64>

		pdev->phasecal_config_timeout_us = phasecal_config_timeout_us;
 8009b6a:	693b      	ldr	r3, [r7, #16]
 8009b6c:	68ba      	ldr	r2, [r7, #8]
 8009b6e:	609a      	str	r2, [r3, #8]
		pdev->mm_config_timeout_us       = mm_config_timeout_us;
 8009b70:	693b      	ldr	r3, [r7, #16]
 8009b72:	687a      	ldr	r2, [r7, #4]
 8009b74:	60da      	str	r2, [r3, #12]
		pdev->range_config_timeout_us    = range_config_timeout_us;
 8009b76:	693b      	ldr	r3, [r7, #16]
 8009b78:	683a      	ldr	r2, [r7, #0]
 8009b7a:	611a      	str	r2, [r3, #16]

		status =
			VL53L1_calc_timeout_register_values(
 8009b7c:	693b      	ldr	r3, [r7, #16]
 8009b7e:	f8b3 115e 	ldrh.w	r1, [r3, #350]	; 0x15e
 8009b82:	693b      	ldr	r3, [r7, #16]
 8009b84:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8009b88:	693a      	ldr	r2, [r7, #16]
 8009b8a:	f502 72ce 	add.w	r2, r2, #412	; 0x19c
 8009b8e:	9201      	str	r2, [sp, #4]
 8009b90:	9300      	str	r3, [sp, #0]
 8009b92:	460b      	mov	r3, r1
 8009b94:	683a      	ldr	r2, [r7, #0]
 8009b96:	6879      	ldr	r1, [r7, #4]
 8009b98:	68b8      	ldr	r0, [r7, #8]
 8009b9a:	f002 fe04 	bl	800c7a6 <VL53L1_calc_timeout_register_values>
 8009b9e:	4603      	mov	r3, r0
 8009ba0:	75fb      	strb	r3, [r7, #23]
				&(pdev->tim_cfg));
	}

	LOG_FUNCTION_END(status);

	return status;
 8009ba2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009ba6:	4618      	mov	r0, r3
 8009ba8:	3718      	adds	r7, #24
 8009baa:	46bd      	mov	sp, r7
 8009bac:	bd80      	pop	{r7, pc}

08009bae <VL53L1_get_timeouts_us>:
VL53L1_Error VL53L1_get_timeouts_us(
	VL53L1_DEV           Dev,
	uint32_t            *pphasecal_config_timeout_us,
	uint32_t            *pmm_config_timeout_us,
	uint32_t			*prange_config_timeout_us)
{
 8009bae:	b580      	push	{r7, lr}
 8009bb0:	b088      	sub	sp, #32
 8009bb2:	af00      	add	r7, sp, #0
 8009bb4:	60f8      	str	r0, [r7, #12]
 8009bb6:	60b9      	str	r1, [r7, #8]
 8009bb8:	607a      	str	r2, [r7, #4]
 8009bba:	603b      	str	r3, [r7, #0]
	/**
	 * Convenience function for getting the MM and range
	 * timeouts
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009bbc:	2300      	movs	r3, #0
 8009bbe:	77fb      	strb	r3, [r7, #31]
	VL53L1_LLDriverData_t *pdev =
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	61bb      	str	r3, [r7, #24]
			VL53L1DevStructGetLLDriverHandle(Dev);

	uint32_t  macro_period_us = 0;
 8009bc4:	2300      	movs	r3, #0
 8009bc6:	617b      	str	r3, [r7, #20]
	uint16_t  timeout_encoded = 0;
 8009bc8:	2300      	movs	r3, #0
 8009bca:	827b      	strh	r3, [r7, #18]

	LOG_FUNCTION_START("");

	if (pdev->stat_nvm.osc_measured__fast_osc__frequency == 0)
 8009bcc:	69bb      	ldr	r3, [r7, #24]
 8009bce:	f8b3 315e 	ldrh.w	r3, [r3, #350]	; 0x15e
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d101      	bne.n	8009bda <VL53L1_get_timeouts_us+0x2c>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 8009bd6:	23f1      	movs	r3, #241	; 0xf1
 8009bd8:	77fb      	strb	r3, [r7, #31]

	if (status == VL53L1_ERROR_NONE) {
 8009bda:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d14a      	bne.n	8009c78 <VL53L1_get_timeouts_us+0xca>

		/* Update Macro Period for Range A VCSEL Period */
		macro_period_us =
			VL53L1_calc_macro_period_us(
 8009be2:	69bb      	ldr	r3, [r7, #24]
 8009be4:	f8b3 215e 	ldrh.w	r2, [r3, #350]	; 0x15e
 8009be8:	69bb      	ldr	r3, [r7, #24]
 8009bea:	f893 31a2 	ldrb.w	r3, [r3, #418]	; 0x1a2
 8009bee:	4619      	mov	r1, r3
 8009bf0:	4610      	mov	r0, r2
 8009bf2:	f002 fc56 	bl	800c4a2 <VL53L1_calc_macro_period_us>
 8009bf6:	6178      	str	r0, [r7, #20]

		/*  Get Phase Cal Timing A timeout */

		*pphasecal_config_timeout_us =
			VL53L1_calc_timeout_us(
				(uint32_t)pdev->gen_cfg.phasecal_config__timeout_macrop,
 8009bf8:	69bb      	ldr	r3, [r7, #24]
 8009bfa:	f893 318b 	ldrb.w	r3, [r3, #395]	; 0x18b
			VL53L1_calc_timeout_us(
 8009bfe:	6979      	ldr	r1, [r7, #20]
 8009c00:	4618      	mov	r0, r3
 8009c02:	f002 fd0e 	bl	800c622 <VL53L1_calc_timeout_us>
 8009c06:	4602      	mov	r2, r0
		*pphasecal_config_timeout_us =
 8009c08:	68bb      	ldr	r3, [r7, #8]
 8009c0a:	601a      	str	r2, [r3, #0]
				macro_period_us);

		/*  Get MM Timing A timeout */

		timeout_encoded =
			(uint16_t)pdev->tim_cfg.mm_config__timeout_macrop_a_hi;
 8009c0c:	69bb      	ldr	r3, [r7, #24]
 8009c0e:	f893 319c 	ldrb.w	r3, [r3, #412]	; 0x19c
		timeout_encoded =
 8009c12:	827b      	strh	r3, [r7, #18]
		timeout_encoded = (timeout_encoded << 8) +
 8009c14:	8a7b      	ldrh	r3, [r7, #18]
 8009c16:	021b      	lsls	r3, r3, #8
 8009c18:	b29a      	uxth	r2, r3
			(uint16_t)pdev->tim_cfg.mm_config__timeout_macrop_a_lo;
 8009c1a:	69bb      	ldr	r3, [r7, #24]
 8009c1c:	f893 319d 	ldrb.w	r3, [r3, #413]	; 0x19d
 8009c20:	b29b      	uxth	r3, r3
		timeout_encoded = (timeout_encoded << 8) +
 8009c22:	4413      	add	r3, r2
 8009c24:	827b      	strh	r3, [r7, #18]

		*pmm_config_timeout_us =
			VL53L1_calc_decoded_timeout_us(
 8009c26:	8a7b      	ldrh	r3, [r7, #18]
 8009c28:	6979      	ldr	r1, [r7, #20]
 8009c2a:	4618      	mov	r0, r3
 8009c2c:	f002 fd60 	bl	800c6f0 <VL53L1_calc_decoded_timeout_us>
 8009c30:	4602      	mov	r2, r0
		*pmm_config_timeout_us =
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	601a      	str	r2, [r3, #0]
				macro_period_us);

		/* Get Range Timing A timeout */

		timeout_encoded =
			(uint16_t)pdev->tim_cfg.range_config__timeout_macrop_a_hi;
 8009c36:	69bb      	ldr	r3, [r7, #24]
 8009c38:	f893 31a0 	ldrb.w	r3, [r3, #416]	; 0x1a0
		timeout_encoded =
 8009c3c:	827b      	strh	r3, [r7, #18]
		timeout_encoded = (timeout_encoded << 8) +
 8009c3e:	8a7b      	ldrh	r3, [r7, #18]
 8009c40:	021b      	lsls	r3, r3, #8
 8009c42:	b29a      	uxth	r2, r3
			(uint16_t)pdev->tim_cfg.range_config__timeout_macrop_a_lo;
 8009c44:	69bb      	ldr	r3, [r7, #24]
 8009c46:	f893 31a1 	ldrb.w	r3, [r3, #417]	; 0x1a1
 8009c4a:	b29b      	uxth	r3, r3
		timeout_encoded = (timeout_encoded << 8) +
 8009c4c:	4413      	add	r3, r2
 8009c4e:	827b      	strh	r3, [r7, #18]

		*prange_config_timeout_us =
			VL53L1_calc_decoded_timeout_us(
 8009c50:	8a7b      	ldrh	r3, [r7, #18]
 8009c52:	6979      	ldr	r1, [r7, #20]
 8009c54:	4618      	mov	r0, r3
 8009c56:	f002 fd4b 	bl	800c6f0 <VL53L1_calc_decoded_timeout_us>
 8009c5a:	4602      	mov	r2, r0
		*prange_config_timeout_us =
 8009c5c:	683b      	ldr	r3, [r7, #0]
 8009c5e:	601a      	str	r2, [r3, #0]
				timeout_encoded,
				macro_period_us);

		pdev->phasecal_config_timeout_us = *pphasecal_config_timeout_us;
 8009c60:	68bb      	ldr	r3, [r7, #8]
 8009c62:	681a      	ldr	r2, [r3, #0]
 8009c64:	69bb      	ldr	r3, [r7, #24]
 8009c66:	609a      	str	r2, [r3, #8]
		pdev->mm_config_timeout_us       = *pmm_config_timeout_us;
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	681a      	ldr	r2, [r3, #0]
 8009c6c:	69bb      	ldr	r3, [r7, #24]
 8009c6e:	60da      	str	r2, [r3, #12]
		pdev->range_config_timeout_us    = *prange_config_timeout_us;
 8009c70:	683b      	ldr	r3, [r7, #0]
 8009c72:	681a      	ldr	r2, [r3, #0]
 8009c74:	69bb      	ldr	r3, [r7, #24]
 8009c76:	611a      	str	r2, [r3, #16]

	}

	LOG_FUNCTION_END(status);

	return status;
 8009c78:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8009c7c:	4618      	mov	r0, r3
 8009c7e:	3720      	adds	r7, #32
 8009c80:	46bd      	mov	sp, r7
 8009c82:	bd80      	pop	{r7, pc}

08009c84 <VL53L1_get_sequence_config_bit>:

VL53L1_Error VL53L1_get_sequence_config_bit(
	VL53L1_DEV                    Dev,
	VL53L1_DeviceSequenceConfig   bit_id,
	uint8_t                      *pvalue)
{
 8009c84:	b480      	push	{r7}
 8009c86:	b087      	sub	sp, #28
 8009c88:	af00      	add	r7, sp, #0
 8009c8a:	60f8      	str	r0, [r7, #12]
 8009c8c:	460b      	mov	r3, r1
 8009c8e:	607a      	str	r2, [r7, #4]
 8009c90:	72fb      	strb	r3, [r7, #11]
	/**
	 * Convenience function for getting sequence
	 * config enable bits
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009c92:	2300      	movs	r3, #0
 8009c94:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev =
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	613b      	str	r3, [r7, #16]
		VL53L1DevStructGetLLDriverHandle(Dev);

	uint8_t  bit_mask        = 0x01;
 8009c9a:	2301      	movs	r3, #1
 8009c9c:	75bb      	strb	r3, [r7, #22]

	if (bit_id <= VL53L1_DEVICESEQUENCECONFIG_RANGE) {
 8009c9e:	7afb      	ldrb	r3, [r7, #11]
 8009ca0:	2b07      	cmp	r3, #7
 8009ca2:	d81c      	bhi.n	8009cde <VL53L1_get_sequence_config_bit+0x5a>

		if (bit_id > 0) {
 8009ca4:	7afb      	ldrb	r3, [r7, #11]
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d004      	beq.n	8009cb4 <VL53L1_get_sequence_config_bit+0x30>
			bit_mask  = 0x01 << bit_id;
 8009caa:	7afb      	ldrb	r3, [r7, #11]
 8009cac:	2201      	movs	r2, #1
 8009cae:	fa02 f303 	lsl.w	r3, r2, r3
 8009cb2:	75bb      	strb	r3, [r7, #22]
		}

		*pvalue =
			pdev->dyn_cfg.system__sequence_config & bit_mask;
 8009cb4:	693b      	ldr	r3, [r7, #16]
 8009cb6:	f893 21c5 	ldrb.w	r2, [r3, #453]	; 0x1c5
		*pvalue =
 8009cba:	7dbb      	ldrb	r3, [r7, #22]
 8009cbc:	4013      	ands	r3, r2
 8009cbe:	b2da      	uxtb	r2, r3
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	701a      	strb	r2, [r3, #0]

		if (bit_id > 0) {
 8009cc4:	7afb      	ldrb	r3, [r7, #11]
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d00b      	beq.n	8009ce2 <VL53L1_get_sequence_config_bit+0x5e>
			*pvalue  = *pvalue >> bit_id;
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	781b      	ldrb	r3, [r3, #0]
 8009cce:	461a      	mov	r2, r3
 8009cd0:	7afb      	ldrb	r3, [r7, #11]
 8009cd2:	fa42 f303 	asr.w	r3, r2, r3
 8009cd6:	b2da      	uxtb	r2, r3
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	701a      	strb	r2, [r3, #0]
 8009cdc:	e001      	b.n	8009ce2 <VL53L1_get_sequence_config_bit+0x5e>
		}

	} else {
		status = VL53L1_ERROR_INVALID_PARAMS;
 8009cde:	23fc      	movs	r3, #252	; 0xfc
 8009ce0:	75fb      	strb	r3, [r7, #23]
	}

	return status;
 8009ce2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009ce6:	4618      	mov	r0, r3
 8009ce8:	371c      	adds	r7, #28
 8009cea:	46bd      	mov	sp, r7
 8009cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf0:	4770      	bx	lr

08009cf2 <VL53L1_set_user_zone>:


VL53L1_Error VL53L1_set_user_zone(
	VL53L1_DEV              Dev,
	VL53L1_user_zone_t     *puser_zone)
{
 8009cf2:	b580      	push	{r7, lr}
 8009cf4:	b084      	sub	sp, #16
 8009cf6:	af00      	add	r7, sp, #0
 8009cf8:	6078      	str	r0, [r7, #4]
 8009cfa:	6039      	str	r1, [r7, #0]
	/**
	 * Convenience function for setting the user ROI
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009cfc:	2300      	movs	r3, #0
 8009cfe:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	/* convert (row,col) location into a SPAD number */
	VL53L1_encode_row_col(
 8009d04:	683b      	ldr	r3, [r7, #0]
 8009d06:	7858      	ldrb	r0, [r3, #1]
 8009d08:	683b      	ldr	r3, [r7, #0]
 8009d0a:	7819      	ldrb	r1, [r3, #0]
 8009d0c:	68bb      	ldr	r3, [r7, #8]
 8009d0e:	f203 13c3 	addw	r3, r3, #451	; 0x1c3
 8009d12:	461a      	mov	r2, r3
 8009d14:	f002 fdc0 	bl	800c898 <VL53L1_encode_row_col>
		puser_zone->y_centre,
		puser_zone->x_centre,
		&(pdev->dyn_cfg.roi_config__user_roi_centre_spad));

	/* merge x and y sizes */
	VL53L1_encode_zone_size(
 8009d18:	683b      	ldr	r3, [r7, #0]
 8009d1a:	7898      	ldrb	r0, [r3, #2]
 8009d1c:	683b      	ldr	r3, [r7, #0]
 8009d1e:	78d9      	ldrb	r1, [r3, #3]
 8009d20:	68bb      	ldr	r3, [r7, #8]
 8009d22:	f503 73e2 	add.w	r3, r3, #452	; 0x1c4
 8009d26:	461a      	mov	r2, r3
 8009d28:	f002 fdf5 	bl	800c916 <VL53L1_encode_zone_size>

	/* need to add checks to ensure ROI is within array */

	LOG_FUNCTION_END(status);

	return status;
 8009d2c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009d30:	4618      	mov	r0, r3
 8009d32:	3710      	adds	r7, #16
 8009d34:	46bd      	mov	sp, r7
 8009d36:	bd80      	pop	{r7, pc}

08009d38 <VL53L1_get_user_zone>:


VL53L1_Error VL53L1_get_user_zone(
	VL53L1_DEV              Dev,
	VL53L1_user_zone_t     *puser_zone)
{
 8009d38:	b580      	push	{r7, lr}
 8009d3a:	b084      	sub	sp, #16
 8009d3c:	af00      	add	r7, sp, #0
 8009d3e:	6078      	str	r0, [r7, #4]
 8009d40:	6039      	str	r1, [r7, #0]
	/**
	 * Convenience function for getting the user ROI
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009d42:	2300      	movs	r3, #0
 8009d44:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	/* convert SPAD number into (row,col) location*/
	VL53L1_decode_row_col(
 8009d4a:	68bb      	ldr	r3, [r7, #8]
 8009d4c:	f893 01c3 	ldrb.w	r0, [r3, #451]	; 0x1c3
 8009d50:	683b      	ldr	r3, [r7, #0]
 8009d52:	3301      	adds	r3, #1
 8009d54:	683a      	ldr	r2, [r7, #0]
 8009d56:	4619      	mov	r1, r3
 8009d58:	f002 ff83 	bl	800cc62 <VL53L1_decode_row_col>
			pdev->dyn_cfg.roi_config__user_roi_centre_spad,
			&(puser_zone->y_centre),
			&(puser_zone->x_centre));

	/* extract x and y sizes */
	VL53L1_decode_zone_size(
 8009d5c:	68bb      	ldr	r3, [r7, #8]
 8009d5e:	f893 01c4 	ldrb.w	r0, [r3, #452]	; 0x1c4
 8009d62:	683b      	ldr	r3, [r7, #0]
 8009d64:	1c99      	adds	r1, r3, #2
 8009d66:	683b      	ldr	r3, [r7, #0]
 8009d68:	3303      	adds	r3, #3
 8009d6a:	461a      	mov	r2, r3
 8009d6c:	f002 fdbb 	bl	800c8e6 <VL53L1_decode_zone_size>
		&(puser_zone->width),
		&(puser_zone->height));

	LOG_FUNCTION_END(status);

	return status;
 8009d70:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009d74:	4618      	mov	r0, r3
 8009d76:	3710      	adds	r7, #16
 8009d78:	46bd      	mov	sp, r7
 8009d7a:	bd80      	pop	{r7, pc}

08009d7c <VL53L1_get_mode_mitigation_roi>:


VL53L1_Error VL53L1_get_mode_mitigation_roi(
	VL53L1_DEV              Dev,
	VL53L1_user_zone_t     *pmm_roi)
{
 8009d7c:	b580      	push	{r7, lr}
 8009d7e:	b086      	sub	sp, #24
 8009d80:	af00      	add	r7, sp, #0
 8009d82:	6078      	str	r0, [r7, #4]
 8009d84:	6039      	str	r1, [r7, #0]
	/**
	 * Convenience function for getting the mode mitigation ROI
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009d86:	2300      	movs	r3, #0
 8009d88:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	613b      	str	r3, [r7, #16]

	uint8_t  x       = 0;
 8009d8e:	2300      	movs	r3, #0
 8009d90:	73bb      	strb	r3, [r7, #14]
	uint8_t  y       = 0;
 8009d92:	2300      	movs	r3, #0
 8009d94:	737b      	strb	r3, [r7, #13]
	uint8_t  xy_size = 0;
 8009d96:	2300      	movs	r3, #0
 8009d98:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	/* convert SPAD number into (row,col) location */
	VL53L1_decode_row_col(
 8009d9a:	693b      	ldr	r3, [r7, #16]
 8009d9c:	f893 322a 	ldrb.w	r3, [r3, #554]	; 0x22a
 8009da0:	f107 020e 	add.w	r2, r7, #14
 8009da4:	f107 010d 	add.w	r1, r7, #13
 8009da8:	4618      	mov	r0, r3
 8009daa:	f002 ff5a 	bl	800cc62 <VL53L1_decode_row_col>
			pdev->nvm_copy_data.roi_config__mode_roi_centre_spad,
			&y,
			&x);

	pmm_roi->x_centre = x;
 8009dae:	7bba      	ldrb	r2, [r7, #14]
 8009db0:	683b      	ldr	r3, [r7, #0]
 8009db2:	701a      	strb	r2, [r3, #0]
	pmm_roi->y_centre = y;
 8009db4:	7b7a      	ldrb	r2, [r7, #13]
 8009db6:	683b      	ldr	r3, [r7, #0]
 8009db8:	705a      	strb	r2, [r3, #1]
	 * versus the API sense
	 *
	 * MS Nibble = height
	 * LS Nibble = width
	 */
	xy_size = pdev->nvm_copy_data.roi_config__mode_roi_xy_size;
 8009dba:	693b      	ldr	r3, [r7, #16]
 8009dbc:	f893 322b 	ldrb.w	r3, [r3, #555]	; 0x22b
 8009dc0:	73fb      	strb	r3, [r7, #15]

	pmm_roi->height = xy_size >> 4;
 8009dc2:	7bfb      	ldrb	r3, [r7, #15]
 8009dc4:	091b      	lsrs	r3, r3, #4
 8009dc6:	b2da      	uxtb	r2, r3
 8009dc8:	683b      	ldr	r3, [r7, #0]
 8009dca:	70da      	strb	r2, [r3, #3]
	pmm_roi->width  = xy_size & 0x0F;
 8009dcc:	7bfb      	ldrb	r3, [r7, #15]
 8009dce:	f003 030f 	and.w	r3, r3, #15
 8009dd2:	b2da      	uxtb	r2, r3
 8009dd4:	683b      	ldr	r3, [r7, #0]
 8009dd6:	709a      	strb	r2, [r3, #2]

	LOG_FUNCTION_END(status);

	return status;
 8009dd8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009ddc:	4618      	mov	r0, r3
 8009dde:	3718      	adds	r7, #24
 8009de0:	46bd      	mov	sp, r7
 8009de2:	bd80      	pop	{r7, pc}

08009de4 <VL53L1_get_preset_mode_timing_cfg>:
	VL53L1_DevicePresetModes     device_preset_mode,
	uint16_t                    *pdss_config__target_total_rate_mcps,
	uint32_t                    *pphasecal_config_timeout_us,
	uint32_t                    *pmm_config_timeout_us,
	uint32_t                    *prange_config_timeout_us)
{
 8009de4:	b480      	push	{r7}
 8009de6:	b087      	sub	sp, #28
 8009de8:	af00      	add	r7, sp, #0
 8009dea:	60f8      	str	r0, [r7, #12]
 8009dec:	607a      	str	r2, [r7, #4]
 8009dee:	603b      	str	r3, [r7, #0]
 8009df0:	460b      	mov	r3, r1
 8009df2:	72fb      	strb	r3, [r7, #11]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009df4:	2300      	movs	r3, #0
 8009df6:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");


	switch (device_preset_mode) {
 8009dfc:	7afb      	ldrb	r3, [r7, #11]
 8009dfe:	3b01      	subs	r3, #1
 8009e00:	2b25      	cmp	r3, #37	; 0x25
 8009e02:	f200 808e 	bhi.w	8009f22 <VL53L1_get_preset_mode_timing_cfg+0x13e>
 8009e06:	a201      	add	r2, pc, #4	; (adr r2, 8009e0c <VL53L1_get_preset_mode_timing_cfg+0x28>)
 8009e08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e0c:	08009ea5 	.word	0x08009ea5
 8009e10:	08009ea5 	.word	0x08009ea5
 8009e14:	08009ea5 	.word	0x08009ea5
 8009e18:	08009ea5 	.word	0x08009ea5
 8009e1c:	08009ea5 	.word	0x08009ea5
 8009e20:	08009ecf 	.word	0x08009ecf
 8009e24:	08009ecf 	.word	0x08009ecf
 8009e28:	08009ecf 	.word	0x08009ecf
 8009e2c:	08009f23 	.word	0x08009f23
 8009e30:	08009f23 	.word	0x08009f23
 8009e34:	08009f23 	.word	0x08009f23
 8009e38:	08009f23 	.word	0x08009f23
 8009e3c:	08009f23 	.word	0x08009f23
 8009e40:	08009f23 	.word	0x08009f23
 8009e44:	08009f23 	.word	0x08009f23
 8009e48:	08009f23 	.word	0x08009f23
 8009e4c:	08009ea5 	.word	0x08009ea5
 8009e50:	08009ecf 	.word	0x08009ecf
 8009e54:	08009f23 	.word	0x08009f23
 8009e58:	08009f23 	.word	0x08009f23
 8009e5c:	08009f23 	.word	0x08009f23
 8009e60:	08009f23 	.word	0x08009f23
 8009e64:	08009f23 	.word	0x08009f23
 8009e68:	08009f23 	.word	0x08009f23
 8009e6c:	08009f23 	.word	0x08009f23
 8009e70:	08009f23 	.word	0x08009f23
 8009e74:	08009f23 	.word	0x08009f23
 8009e78:	08009f23 	.word	0x08009f23
 8009e7c:	08009f23 	.word	0x08009f23
 8009e80:	08009f23 	.word	0x08009f23
 8009e84:	08009f23 	.word	0x08009f23
 8009e88:	08009f23 	.word	0x08009f23
 8009e8c:	08009f23 	.word	0x08009f23
 8009e90:	08009f23 	.word	0x08009f23
 8009e94:	08009f23 	.word	0x08009f23
 8009e98:	08009ef9 	.word	0x08009ef9
 8009e9c:	08009ef9 	.word	0x08009ef9
 8009ea0:	08009ef9 	.word	0x08009ef9
	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_LONG_RANGE:
	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM1_CAL:
	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM2_CAL:
	case VL53L1_DEVICEPRESETMODE_OLT:
		*pdss_config__target_total_rate_mcps =
				pdev->tuning_parms.tp_dss_target_lite_mcps;
 8009ea4:	693b      	ldr	r3, [r7, #16]
 8009ea6:	f8b3 20ca 	ldrh.w	r2, [r3, #202]	; 0xca
		*pdss_config__target_total_rate_mcps =
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
				pdev->tuning_parms.tp_phasecal_timeout_lite_us;
 8009eae:	693b      	ldr	r3, [r7, #16]
 8009eb0:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
		*pphasecal_config_timeout_us =
 8009eb4:	683b      	ldr	r3, [r7, #0]
 8009eb6:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
				pdev->tuning_parms.tp_mm_timeout_lite_us;
 8009eb8:	693b      	ldr	r3, [r7, #16]
 8009eba:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
		*pmm_config_timeout_us =
 8009ebe:	6a3b      	ldr	r3, [r7, #32]
 8009ec0:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
				pdev->tuning_parms.tp_range_timeout_lite_us;
 8009ec2:	693b      	ldr	r3, [r7, #16]
 8009ec4:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
		*prange_config_timeout_us =
 8009ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eca:	601a      	str	r2, [r3, #0]
	break;
 8009ecc:	e02c      	b.n	8009f28 <VL53L1_get_preset_mode_timing_cfg+0x144>
	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING:
	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING_SHORT_RANGE:
	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING_LONG_RANGE:
	case VL53L1_DEVICEPRESETMODE_SINGLESHOT_RANGING:
		*pdss_config__target_total_rate_mcps =
				pdev->tuning_parms.tp_dss_target_timed_mcps;
 8009ece:	693b      	ldr	r3, [r7, #16]
 8009ed0:	f8b3 20cc 	ldrh.w	r2, [r3, #204]	; 0xcc
		*pdss_config__target_total_rate_mcps =
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
				pdev->tuning_parms.tp_phasecal_timeout_timed_us;
 8009ed8:	693b      	ldr	r3, [r7, #16]
 8009eda:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
		*pphasecal_config_timeout_us =
 8009ede:	683b      	ldr	r3, [r7, #0]
 8009ee0:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
				pdev->tuning_parms.tp_mm_timeout_timed_us;
 8009ee2:	693b      	ldr	r3, [r7, #16]
 8009ee4:	f8d3 20dc 	ldr.w	r2, [r3, #220]	; 0xdc
		*pmm_config_timeout_us =
 8009ee8:	6a3b      	ldr	r3, [r7, #32]
 8009eea:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
				pdev->tuning_parms.tp_range_timeout_timed_us;
 8009eec:	693b      	ldr	r3, [r7, #16]
 8009eee:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
		*prange_config_timeout_us =
 8009ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ef4:	601a      	str	r2, [r3, #0]
	break;
 8009ef6:	e017      	b.n	8009f28 <VL53L1_get_preset_mode_timing_cfg+0x144>

	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_SHORT_RANGE:
	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_MEDIUM_RANGE:
	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_LONG_RANGE:
		*pdss_config__target_total_rate_mcps =
				pdev->tuning_parms.tp_dss_target_timed_mcps;
 8009ef8:	693b      	ldr	r3, [r7, #16]
 8009efa:	f8b3 20cc 	ldrh.w	r2, [r3, #204]	; 0xcc
		*pdss_config__target_total_rate_mcps =
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
				pdev->tuning_parms.tp_phasecal_timeout_timed_us;
 8009f02:	693b      	ldr	r3, [r7, #16]
 8009f04:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
		*pphasecal_config_timeout_us =
 8009f08:	683b      	ldr	r3, [r7, #0]
 8009f0a:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
				pdev->tuning_parms.tp_mm_timeout_lpa_us;
 8009f0c:	693b      	ldr	r3, [r7, #16]
 8009f0e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
		*pmm_config_timeout_us =
 8009f12:	6a3b      	ldr	r3, [r7, #32]
 8009f14:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
				pdev->tuning_parms.tp_range_timeout_lpa_us;
 8009f16:	693b      	ldr	r3, [r7, #16]
 8009f18:	f8d3 20ec 	ldr.w	r2, [r3, #236]	; 0xec
		*prange_config_timeout_us =
 8009f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f1e:	601a      	str	r2, [r3, #0]
	break;
 8009f20:	e002      	b.n	8009f28 <VL53L1_get_preset_mode_timing_cfg+0x144>

	default:
		status = VL53L1_ERROR_INVALID_PARAMS;
 8009f22:	23fc      	movs	r3, #252	; 0xfc
 8009f24:	75fb      	strb	r3, [r7, #23]
		break;
 8009f26:	bf00      	nop

	}

	LOG_FUNCTION_END(status);

	return status;
 8009f28:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009f2c:	4618      	mov	r0, r3
 8009f2e:	371c      	adds	r7, #28
 8009f30:	46bd      	mov	sp, r7
 8009f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f36:	4770      	bx	lr

08009f38 <VL53L1_set_preset_mode>:
	uint16_t                     dss_config__target_total_rate_mcps,
	uint32_t                     phasecal_config_timeout_us,
	uint32_t                     mm_config_timeout_us,
	uint32_t                     range_config_timeout_us,
	uint32_t                     inter_measurement_period_ms)
{
 8009f38:	b580      	push	{r7, lr}
 8009f3a:	b092      	sub	sp, #72	; 0x48
 8009f3c:	af04      	add	r7, sp, #16
 8009f3e:	60f8      	str	r0, [r7, #12]
 8009f40:	607b      	str	r3, [r7, #4]
 8009f42:	460b      	mov	r3, r1
 8009f44:	72fb      	strb	r3, [r7, #11]
 8009f46:	4613      	mov	r3, r2
 8009f48:	813b      	strh	r3, [r7, #8]
	/**
	 * Initializes static and dynamic data structures for
	 * the provided preset mode
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009f4a:	2300      	movs	r3, #0
 8009f4c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	VL53L1_LLDriverData_t *pdev =
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	633b      	str	r3, [r7, #48]	; 0x30
			VL53L1DevStructGetLLDriverHandle(Dev);

	VL53L1_static_config_t        *pstatic       = &(pdev->stat_cfg);
 8009f54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f56:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009f5a:	62fb      	str	r3, [r7, #44]	; 0x2c
	VL53L1_general_config_t       *pgeneral      = &(pdev->gen_cfg);
 8009f5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f5e:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8009f62:	62bb      	str	r3, [r7, #40]	; 0x28
	VL53L1_timing_config_t        *ptiming       = &(pdev->tim_cfg);
 8009f64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f66:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 8009f6a:	627b      	str	r3, [r7, #36]	; 0x24
	VL53L1_dynamic_config_t       *pdynamic      = &(pdev->dyn_cfg);
 8009f6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f6e:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 8009f72:	623b      	str	r3, [r7, #32]
	VL53L1_system_control_t       *psystem       = &(pdev->sys_ctrl);
 8009f74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f76:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8009f7a:	61fb      	str	r3, [r7, #28]
	VL53L1_tuning_parm_storage_t  *ptuning_parms = &(pdev->tuning_parms);
 8009f7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f7e:	33a4      	adds	r3, #164	; 0xa4
 8009f80:	61bb      	str	r3, [r7, #24]
	VL53L1_low_power_auto_data_t  *plpadata      =
 8009f82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f84:	f503 7339 	add.w	r3, r3, #740	; 0x2e4
 8009f88:	617b      	str	r3, [r7, #20]
					&(pdev->low_power_auto_data);

	LOG_FUNCTION_START("");

	/* save input settings */
	pdev->preset_mode                 = device_preset_mode;
 8009f8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f8c:	7afa      	ldrb	r2, [r7, #11]
 8009f8e:	705a      	strb	r2, [r3, #1]
	pdev->mm_config_timeout_us        = mm_config_timeout_us;
 8009f90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f92:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009f94:	60da      	str	r2, [r3, #12]
	pdev->range_config_timeout_us     = range_config_timeout_us;
 8009f96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f98:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009f9a:	611a      	str	r2, [r3, #16]
	pdev->inter_measurement_period_ms = inter_measurement_period_ms;
 8009f9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f9e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009fa0:	615a      	str	r2, [r3, #20]

	/* Reset LL Driver state variables */

	VL53L1_init_ll_driver_state(
 8009fa2:	2103      	movs	r1, #3
 8009fa4:	68f8      	ldr	r0, [r7, #12]
 8009fa6:	f001 fe99 	bl	800bcdc <VL53L1_init_ll_driver_state>
			Dev,
			VL53L1_DEVICESTATE_SW_STANDBY);

	/* apply selected preset */

	switch (device_preset_mode) {
 8009faa:	7afb      	ldrb	r3, [r7, #11]
 8009fac:	3b01      	subs	r3, #1
 8009fae:	2b25      	cmp	r3, #37	; 0x25
 8009fb0:	f200 810c 	bhi.w	800a1cc <VL53L1_set_preset_mode+0x294>
 8009fb4:	a201      	add	r2, pc, #4	; (adr r2, 8009fbc <VL53L1_set_preset_mode+0x84>)
 8009fb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fba:	bf00      	nop
 8009fbc:	0800a055 	.word	0x0800a055
 8009fc0:	0800a071 	.word	0x0800a071
 8009fc4:	0800a08d 	.word	0x0800a08d
 8009fc8:	0800a0a9 	.word	0x0800a0a9
 8009fcc:	0800a0c5 	.word	0x0800a0c5
 8009fd0:	0800a0e1 	.word	0x0800a0e1
 8009fd4:	0800a0fd 	.word	0x0800a0fd
 8009fd8:	0800a119 	.word	0x0800a119
 8009fdc:	0800a1cd 	.word	0x0800a1cd
 8009fe0:	0800a1cd 	.word	0x0800a1cd
 8009fe4:	0800a1cd 	.word	0x0800a1cd
 8009fe8:	0800a1cd 	.word	0x0800a1cd
 8009fec:	0800a1cd 	.word	0x0800a1cd
 8009ff0:	0800a1cd 	.word	0x0800a1cd
 8009ff4:	0800a1cd 	.word	0x0800a1cd
 8009ff8:	0800a1cd 	.word	0x0800a1cd
 8009ffc:	0800a135 	.word	0x0800a135
 800a000:	0800a151 	.word	0x0800a151
 800a004:	0800a1cd 	.word	0x0800a1cd
 800a008:	0800a1cd 	.word	0x0800a1cd
 800a00c:	0800a1cd 	.word	0x0800a1cd
 800a010:	0800a1cd 	.word	0x0800a1cd
 800a014:	0800a1cd 	.word	0x0800a1cd
 800a018:	0800a1cd 	.word	0x0800a1cd
 800a01c:	0800a1cd 	.word	0x0800a1cd
 800a020:	0800a1cd 	.word	0x0800a1cd
 800a024:	0800a1cd 	.word	0x0800a1cd
 800a028:	0800a1cd 	.word	0x0800a1cd
 800a02c:	0800a1cd 	.word	0x0800a1cd
 800a030:	0800a1cd 	.word	0x0800a1cd
 800a034:	0800a1cd 	.word	0x0800a1cd
 800a038:	0800a1cd 	.word	0x0800a1cd
 800a03c:	0800a1cd 	.word	0x0800a1cd
 800a040:	0800a1cd 	.word	0x0800a1cd
 800a044:	0800a1cd 	.word	0x0800a1cd
 800a048:	0800a16d 	.word	0x0800a16d
 800a04c:	0800a18d 	.word	0x0800a18d
 800a050:	0800a1ad 	.word	0x0800a1ad

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING:
		status = VL53L1_preset_mode_standard_ranging(
 800a054:	69bb      	ldr	r3, [r7, #24]
 800a056:	9301      	str	r3, [sp, #4]
 800a058:	69fb      	ldr	r3, [r7, #28]
 800a05a:	9300      	str	r3, [sp, #0]
 800a05c:	6a3b      	ldr	r3, [r7, #32]
 800a05e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a060:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a062:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a064:	f001 fa5d 	bl	800b522 <VL53L1_preset_mode_standard_ranging>
 800a068:	4603      	mov	r3, r0
 800a06a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 800a06e:	e0b1      	b.n	800a1d4 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_SHORT_RANGE:
		status = VL53L1_preset_mode_standard_ranging_short_range(
 800a070:	69bb      	ldr	r3, [r7, #24]
 800a072:	9301      	str	r3, [sp, #4]
 800a074:	69fb      	ldr	r3, [r7, #28]
 800a076:	9300      	str	r3, [sp, #0]
 800a078:	6a3b      	ldr	r3, [r7, #32]
 800a07a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a07c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a07e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a080:	f001 fb6d 	bl	800b75e <VL53L1_preset_mode_standard_ranging_short_range>
 800a084:	4603      	mov	r3, r0
 800a086:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 800a08a:	e0a3      	b.n	800a1d4 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_LONG_RANGE:
		status = VL53L1_preset_mode_standard_ranging_long_range(
 800a08c:	69bb      	ldr	r3, [r7, #24]
 800a08e:	9301      	str	r3, [sp, #4]
 800a090:	69fb      	ldr	r3, [r7, #28]
 800a092:	9300      	str	r3, [sp, #0]
 800a094:	6a3b      	ldr	r3, [r7, #32]
 800a096:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a098:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a09a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a09c:	f001 fba0 	bl	800b7e0 <VL53L1_preset_mode_standard_ranging_long_range>
 800a0a0:	4603      	mov	r3, r0
 800a0a2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 800a0a6:	e095      	b.n	800a1d4 <VL53L1_set_preset_mode+0x29c>

#ifndef VL53L1_NOCALIB
	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM1_CAL:
		status = VL53L1_preset_mode_standard_ranging_mm1_cal(
 800a0a8:	69bb      	ldr	r3, [r7, #24]
 800a0aa:	9301      	str	r3, [sp, #4]
 800a0ac:	69fb      	ldr	r3, [r7, #28]
 800a0ae:	9300      	str	r3, [sp, #0]
 800a0b0:	6a3b      	ldr	r3, [r7, #32]
 800a0b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a0b4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a0b6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a0b8:	f001 fbd3 	bl	800b862 <VL53L1_preset_mode_standard_ranging_mm1_cal>
 800a0bc:	4603      	mov	r3, r0
 800a0be:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 800a0c2:	e087      	b.n	800a1d4 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM2_CAL:
		status = VL53L1_preset_mode_standard_ranging_mm2_cal(
 800a0c4:	69bb      	ldr	r3, [r7, #24]
 800a0c6:	9301      	str	r3, [sp, #4]
 800a0c8:	69fb      	ldr	r3, [r7, #28]
 800a0ca:	9300      	str	r3, [sp, #0]
 800a0cc:	6a3b      	ldr	r3, [r7, #32]
 800a0ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a0d0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a0d2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a0d4:	f001 fbea 	bl	800b8ac <VL53L1_preset_mode_standard_ranging_mm2_cal>
 800a0d8:	4603      	mov	r3, r0
 800a0da:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 800a0de:	e079      	b.n	800a1d4 <VL53L1_set_preset_mode+0x29c>
#endif

	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING:
		status = VL53L1_preset_mode_timed_ranging(
 800a0e0:	69bb      	ldr	r3, [r7, #24]
 800a0e2:	9301      	str	r3, [sp, #4]
 800a0e4:	69fb      	ldr	r3, [r7, #28]
 800a0e6:	9300      	str	r3, [sp, #0]
 800a0e8:	6a3b      	ldr	r3, [r7, #32]
 800a0ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a0ec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a0ee:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a0f0:	f001 fc01 	bl	800b8f6 <VL53L1_preset_mode_timed_ranging>
 800a0f4:	4603      	mov	r3, r0
 800a0f6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 800a0fa:	e06b      	b.n	800a1d4 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING_SHORT_RANGE:
		status = VL53L1_preset_mode_timed_ranging_short_range(
 800a0fc:	69bb      	ldr	r3, [r7, #24]
 800a0fe:	9301      	str	r3, [sp, #4]
 800a100:	69fb      	ldr	r3, [r7, #28]
 800a102:	9300      	str	r3, [sp, #0]
 800a104:	6a3b      	ldr	r3, [r7, #32]
 800a106:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a108:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a10a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a10c:	f001 fc2d 	bl	800b96a <VL53L1_preset_mode_timed_ranging_short_range>
 800a110:	4603      	mov	r3, r0
 800a112:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 800a116:	e05d      	b.n	800a1d4 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING_LONG_RANGE:
		status = VL53L1_preset_mode_timed_ranging_long_range(
 800a118:	69bb      	ldr	r3, [r7, #24]
 800a11a:	9301      	str	r3, [sp, #4]
 800a11c:	69fb      	ldr	r3, [r7, #28]
 800a11e:	9300      	str	r3, [sp, #0]
 800a120:	6a3b      	ldr	r3, [r7, #32]
 800a122:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a124:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a126:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a128:	f001 fc59 	bl	800b9de <VL53L1_preset_mode_timed_ranging_long_range>
 800a12c:	4603      	mov	r3, r0
 800a12e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 800a132:	e04f      	b.n	800a1d4 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_OLT:
		status = VL53L1_preset_mode_olt(
 800a134:	69bb      	ldr	r3, [r7, #24]
 800a136:	9301      	str	r3, [sp, #4]
 800a138:	69fb      	ldr	r3, [r7, #28]
 800a13a:	9300      	str	r3, [sp, #0]
 800a13c:	6a3b      	ldr	r3, [r7, #32]
 800a13e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a140:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a142:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a144:	f001 fd2d 	bl	800bba2 <VL53L1_preset_mode_olt>
 800a148:	4603      	mov	r3, r0
 800a14a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 800a14e:	e041      	b.n	800a1d4 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_SINGLESHOT_RANGING:
		status = VL53L1_preset_mode_singleshot_ranging(
 800a150:	69bb      	ldr	r3, [r7, #24]
 800a152:	9301      	str	r3, [sp, #4]
 800a154:	69fb      	ldr	r3, [r7, #28]
 800a156:	9300      	str	r3, [sp, #0]
 800a158:	6a3b      	ldr	r3, [r7, #32]
 800a15a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a15c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a15e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a160:	f001 fce9 	bl	800bb36 <VL53L1_preset_mode_singleshot_ranging>
 800a164:	4603      	mov	r3, r0
 800a166:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 800a16a:	e033      	b.n	800a1d4 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_SHORT_RANGE:
		status = VL53L1_preset_mode_low_power_auto_short_ranging(
 800a16c:	697b      	ldr	r3, [r7, #20]
 800a16e:	9302      	str	r3, [sp, #8]
 800a170:	69bb      	ldr	r3, [r7, #24]
 800a172:	9301      	str	r3, [sp, #4]
 800a174:	69fb      	ldr	r3, [r7, #28]
 800a176:	9300      	str	r3, [sp, #0]
 800a178:	6a3b      	ldr	r3, [r7, #32]
 800a17a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a17c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a17e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a180:	f001 fc8d 	bl	800ba9e <VL53L1_preset_mode_low_power_auto_short_ranging>
 800a184:	4603      	mov	r3, r0
 800a186:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					plpadata);
		break;
 800a18a:	e023      	b.n	800a1d4 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_MEDIUM_RANGE:
		status = VL53L1_preset_mode_low_power_auto_ranging(
 800a18c:	697b      	ldr	r3, [r7, #20]
 800a18e:	9302      	str	r3, [sp, #8]
 800a190:	69bb      	ldr	r3, [r7, #24]
 800a192:	9301      	str	r3, [sp, #4]
 800a194:	69fb      	ldr	r3, [r7, #28]
 800a196:	9300      	str	r3, [sp, #0]
 800a198:	6a3b      	ldr	r3, [r7, #32]
 800a19a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a19c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a19e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a1a0:	f001 fc57 	bl	800ba52 <VL53L1_preset_mode_low_power_auto_ranging>
 800a1a4:	4603      	mov	r3, r0
 800a1a6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					plpadata);
		break;
 800a1aa:	e013      	b.n	800a1d4 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_LONG_RANGE:
		status = VL53L1_preset_mode_low_power_auto_long_ranging(
 800a1ac:	697b      	ldr	r3, [r7, #20]
 800a1ae:	9302      	str	r3, [sp, #8]
 800a1b0:	69bb      	ldr	r3, [r7, #24]
 800a1b2:	9301      	str	r3, [sp, #4]
 800a1b4:	69fb      	ldr	r3, [r7, #28]
 800a1b6:	9300      	str	r3, [sp, #0]
 800a1b8:	6a3b      	ldr	r3, [r7, #32]
 800a1ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a1bc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a1be:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a1c0:	f001 fc93 	bl	800baea <VL53L1_preset_mode_low_power_auto_long_ranging>
 800a1c4:	4603      	mov	r3, r0
 800a1c6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					plpadata);
		break;
 800a1ca:	e003      	b.n	800a1d4 <VL53L1_set_preset_mode+0x29c>

	default:
		status = VL53L1_ERROR_INVALID_PARAMS;
 800a1cc:	23fc      	movs	r3, #252	; 0xfc
 800a1ce:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		break;
 800a1d2:	bf00      	nop

	}

	/* update DSS target */

	if (status == VL53L1_ERROR_NONE) {
 800a1d4:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d105      	bne.n	800a1e8 <VL53L1_set_preset_mode+0x2b0>

		pstatic->dss_config__target_total_rate_mcps =
 800a1dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1de:	893a      	ldrh	r2, [r7, #8]
 800a1e0:	801a      	strh	r2, [r3, #0]
				dss_config__target_total_rate_mcps;
		pdev->dss_config__target_total_rate_mcps    =
 800a1e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1e4:	893a      	ldrh	r2, [r7, #8]
 800a1e6:	831a      	strh	r2, [r3, #24]
	/*
	 * Update the register timeout values based on input
	 * real time values and preset mode VCSEL periods
	 */

	if (status == VL53L1_ERROR_NONE)
 800a1e8:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d108      	bne.n	800a202 <VL53L1_set_preset_mode+0x2ca>
		status =
			VL53L1_set_timeouts_us(
 800a1f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a1f2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a1f4:	6879      	ldr	r1, [r7, #4]
 800a1f6:	68f8      	ldr	r0, [r7, #12]
 800a1f8:	f7ff fca1 	bl	8009b3e <VL53L1_set_timeouts_us>
 800a1fc:	4603      	mov	r3, r0
 800a1fe:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				Dev,
				phasecal_config_timeout_us,
				mm_config_timeout_us,
				range_config_timeout_us);

	if (status == VL53L1_ERROR_NONE)
 800a202:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800a206:	2b00      	cmp	r3, #0
 800a208:	d106      	bne.n	800a218 <VL53L1_set_preset_mode+0x2e0>
		status =
			VL53L1_set_inter_measurement_period_ms(
 800a20a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800a20c:	68f8      	ldr	r0, [r7, #12]
 800a20e:	f7ff fc47 	bl	8009aa0 <VL53L1_set_inter_measurement_period_ms>
 800a212:	4603      	mov	r3, r0
 800a214:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				Dev,
				inter_measurement_period_ms);

	LOG_FUNCTION_END(status);

	return status;
 800a218:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800a21c:	4618      	mov	r0, r3
 800a21e:	3738      	adds	r7, #56	; 0x38
 800a220:	46bd      	mov	sp, r7
 800a222:	bd80      	pop	{r7, pc}

0800a224 <VL53L1_enable_xtalk_compensation>:


VL53L1_Error  VL53L1_enable_xtalk_compensation(
	VL53L1_DEV                 Dev)
{
 800a224:	b580      	push	{r7, lr}
 800a226:	b086      	sub	sp, #24
 800a228:	af00      	add	r7, sp, #0
 800a22a:	6078      	str	r0, [r7, #4]
	 * Currently a very simple function to copy
	 * private xtalk parms into customer section and apply to device
	 *
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800a22c:	2300      	movs	r3, #0
 800a22e:	75fb      	strb	r3, [r7, #23]
	uint32_t tempu32;

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	/* Fill Public customer NVM data with Xtalk parms */
	tempu32 = VL53L1_calc_crosstalk_plane_offset_with_margin(
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	f8d3 212c 	ldr.w	r2, [r3, #300]	; 0x12c
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	f9b3 313e 	ldrsh.w	r3, [r3, #318]	; 0x13e
 800a240:	4619      	mov	r1, r3
 800a242:	4610      	mov	r0, r2
 800a244:	f002 fa2e 	bl	800c6a4 <VL53L1_calc_crosstalk_plane_offset_with_margin>
 800a248:	6138      	str	r0, [r7, #16]
		pdev->xtalk_cfg.algo__crosstalk_compensation_plane_offset_kcps,
		pdev->xtalk_cfg.lite_mode_crosstalk_margin_kcps);
	if (tempu32 > 0xFFFF) {
 800a24a:	693b      	ldr	r3, [r7, #16]
 800a24c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a250:	d302      	bcc.n	800a258 <VL53L1_enable_xtalk_compensation+0x34>
		tempu32 = 0xFFFF;
 800a252:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a256:	613b      	str	r3, [r7, #16]
	}
	pdev->customer.algo__crosstalk_compensation_plane_offset_kcps =
		(uint16_t)tempu32;
 800a258:	693b      	ldr	r3, [r7, #16]
 800a25a:	b29a      	uxth	r2, r3
	pdev->customer.algo__crosstalk_compensation_plane_offset_kcps =
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

	pdev->customer.algo__crosstalk_compensation_x_plane_gradient_kcps =
		pdev->xtalk_cfg.algo__crosstalk_compensation_x_plane_gradient_kcps;
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	f9b3 2130 	ldrsh.w	r2, [r3, #304]	; 0x130
	pdev->customer.algo__crosstalk_compensation_x_plane_gradient_kcps =
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

	pdev->customer.algo__crosstalk_compensation_y_plane_gradient_kcps =
		pdev->xtalk_cfg.algo__crosstalk_compensation_y_plane_gradient_kcps;
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	f9b3 2132 	ldrsh.w	r2, [r3, #306]	; 0x132
	pdev->customer.algo__crosstalk_compensation_y_plane_gradient_kcps =
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

	/* Enable Xtalk compensation */
	pdev->xtalk_cfg.global_crosstalk_compensation_enable = 0x01;
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	2201      	movs	r2, #1
 800a27e:	f883 213c 	strb.w	r2, [r3, #316]	; 0x13c

	/* Update Range Ignore Threshold Xtalk Parameter */

	if (status == VL53L1_ERROR_NONE) {
 800a282:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a286:	2b00      	cmp	r3, #0
 800a288:	d112      	bne.n	800a2b0 <VL53L1_enable_xtalk_compensation+0x8c>
		pdev->xtalk_cfg.crosstalk_range_ignore_threshold_rate_mcps =
			VL53L1_calc_range_ignore_threshold(
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	f8d3 012c 	ldr.w	r0, [r3, #300]	; 0x12c
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	f9b3 1130 	ldrsh.w	r1, [r3, #304]	; 0x130
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	f9b3 2132 	ldrsh.w	r2, [r3, #306]	; 0x132
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 800a2a2:	f002 f92d 	bl	800c500 <VL53L1_calc_range_ignore_threshold>
 800a2a6:	4603      	mov	r3, r0
 800a2a8:	461a      	mov	r2, r3
		pdev->xtalk_cfg.crosstalk_range_ignore_threshold_rate_mcps =
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	f8a3 2142 	strh.w	r2, [r3, #322]	; 0x142
				pdev->xtalk_cfg.crosstalk_range_ignore_threshold_mult);
	}

	/* Apply to device */

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 800a2b0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d107      	bne.n	800a2c8 <VL53L1_enable_xtalk_compensation+0xa4>
		status =
			VL53L1_set_customer_nvm_managed(
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	3342      	adds	r3, #66	; 0x42
 800a2bc:	4619      	mov	r1, r3
 800a2be:	6878      	ldr	r0, [r7, #4]
 800a2c0:	f002 ff07 	bl	800d0d2 <VL53L1_set_customer_nvm_managed>
 800a2c4:	4603      	mov	r3, r0
 800a2c6:	75fb      	strb	r3, [r7, #23]
				Dev,
				&(pdev->customer));

	LOG_FUNCTION_END(status);

	return status;
 800a2c8:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 800a2cc:	4618      	mov	r0, r3
 800a2ce:	3718      	adds	r7, #24
 800a2d0:	46bd      	mov	sp, r7
 800a2d2:	bd80      	pop	{r7, pc}

0800a2d4 <VL53L1_disable_xtalk_compensation>:
	return status;
}

VL53L1_Error  VL53L1_disable_xtalk_compensation(
	VL53L1_DEV                 Dev)
{
 800a2d4:	b580      	push	{r7, lr}
 800a2d6:	b084      	sub	sp, #16
 800a2d8:	af00      	add	r7, sp, #0
 800a2da:	6078      	str	r0, [r7, #4]
	 * Currently a very simple function to clear
	 * customer xtalk parms and apply to device
	 *
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800a2dc:	2300      	movs	r3, #0
 800a2de:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	/* Fill Public customer NVM data with Xtalk parms */
	pdev->customer.algo__crosstalk_compensation_plane_offset_kcps =
 800a2e4:	68bb      	ldr	r3, [r7, #8]
 800a2e6:	2200      	movs	r2, #0
 800a2e8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
		0x00;

	pdev->customer.algo__crosstalk_compensation_x_plane_gradient_kcps =
 800a2ec:	68bb      	ldr	r3, [r7, #8]
 800a2ee:	2200      	movs	r2, #0
 800a2f0:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
		0x00;

	pdev->customer.algo__crosstalk_compensation_y_plane_gradient_kcps =
 800a2f4:	68bb      	ldr	r3, [r7, #8]
 800a2f6:	2200      	movs	r2, #0
 800a2f8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
		0x00;


	/* Disable Global Xtalk comnpensation */
	pdev->xtalk_cfg.global_crosstalk_compensation_enable = 0x00;
 800a2fc:	68bb      	ldr	r3, [r7, #8]
 800a2fe:	2200      	movs	r2, #0
 800a300:	f883 213c 	strb.w	r2, [r3, #316]	; 0x13c

	/* Update Range Ignore Threshold Xtalk Parameter */

	if (status == VL53L1_ERROR_NONE) {
 800a304:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d103      	bne.n	800a314 <VL53L1_disable_xtalk_compensation+0x40>
		pdev->xtalk_cfg.crosstalk_range_ignore_threshold_rate_mcps =
 800a30c:	68bb      	ldr	r3, [r7, #8]
 800a30e:	2200      	movs	r2, #0
 800a310:	f8a3 2142 	strh.w	r2, [r3, #322]	; 0x142
			0x0000;
	}

	/* Apply to device */

	if (status == VL53L1_ERROR_NONE) { /*lint !e774 always true*/
 800a314:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d107      	bne.n	800a32c <VL53L1_disable_xtalk_compensation+0x58>
		status =
			VL53L1_set_customer_nvm_managed(
 800a31c:	68bb      	ldr	r3, [r7, #8]
 800a31e:	3342      	adds	r3, #66	; 0x42
 800a320:	4619      	mov	r1, r3
 800a322:	6878      	ldr	r0, [r7, #4]
 800a324:	f002 fed5 	bl	800d0d2 <VL53L1_set_customer_nvm_managed>
 800a328:	4603      	mov	r3, r0
 800a32a:	73fb      	strb	r3, [r7, #15]
				Dev,
				&(pdev->customer));
	}
	LOG_FUNCTION_END(status);

	return status;
 800a32c:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 800a330:	4618      	mov	r0, r3
 800a332:	3710      	adds	r7, #16
 800a334:	46bd      	mov	sp, r7
 800a336:	bd80      	pop	{r7, pc}

0800a338 <VL53L1_get_lite_sigma_threshold>:

VL53L1_Error VL53L1_get_lite_sigma_threshold(
	VL53L1_DEV                          Dev,
	uint16_t                           *plite_sigma)
{
 800a338:	b480      	push	{r7}
 800a33a:	b085      	sub	sp, #20
 800a33c:	af00      	add	r7, sp, #0
 800a33e:	6078      	str	r0, [r7, #4]
 800a340:	6039      	str	r1, [r7, #0]
	 * Gets the Sigma Threshold value for Lite Mode
	 *
	 * (fixed point 14.2)
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800a342:	2300      	movs	r3, #0
 800a344:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	*plite_sigma =
			pdev->tim_cfg.range_config__sigma_thresh;
 800a34a:	68bb      	ldr	r3, [r7, #8]
 800a34c:	f8b3 21a6 	ldrh.w	r2, [r3, #422]	; 0x1a6
	*plite_sigma =
 800a350:	683b      	ldr	r3, [r7, #0]
 800a352:	801a      	strh	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 800a354:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 800a358:	4618      	mov	r0, r3
 800a35a:	3714      	adds	r7, #20
 800a35c:	46bd      	mov	sp, r7
 800a35e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a362:	4770      	bx	lr

0800a364 <VL53L1_set_lite_sigma_threshold>:

VL53L1_Error VL53L1_set_lite_sigma_threshold(
	VL53L1_DEV                          Dev,
	uint16_t                           lite_sigma)
{
 800a364:	b480      	push	{r7}
 800a366:	b085      	sub	sp, #20
 800a368:	af00      	add	r7, sp, #0
 800a36a:	6078      	str	r0, [r7, #4]
 800a36c:	460b      	mov	r3, r1
 800a36e:	807b      	strh	r3, [r7, #2]
	 * Sets the Sigma threshold value for Lite mode
	 *
	 * (fixed point 14.2)
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800a370:	2300      	movs	r3, #0
 800a372:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->tim_cfg.range_config__sigma_thresh = lite_sigma;
 800a378:	68bb      	ldr	r3, [r7, #8]
 800a37a:	887a      	ldrh	r2, [r7, #2]
 800a37c:	f8a3 21a6 	strh.w	r2, [r3, #422]	; 0x1a6

	LOG_FUNCTION_END(status);

	return status;
 800a380:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 800a384:	4618      	mov	r0, r3
 800a386:	3714      	adds	r7, #20
 800a388:	46bd      	mov	sp, r7
 800a38a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a38e:	4770      	bx	lr

0800a390 <VL53L1_get_lite_min_count_rate>:

VL53L1_Error VL53L1_get_lite_min_count_rate(
	VL53L1_DEV                          Dev,
	uint16_t                           *plite_mincountrate)
{
 800a390:	b480      	push	{r7}
 800a392:	b085      	sub	sp, #20
 800a394:	af00      	add	r7, sp, #0
 800a396:	6078      	str	r0, [r7, #4]
 800a398:	6039      	str	r1, [r7, #0]
	 * Gets the Min Count Rate value for Lite Mode
	 *
	 * (fixed point 9.7 Mcps)
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800a39a:	2300      	movs	r3, #0
 800a39c:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	*plite_mincountrate =
			pdev->tim_cfg.range_config__min_count_rate_rtn_limit_mcps;
 800a3a2:	68bb      	ldr	r3, [r7, #8]
 800a3a4:	f8b3 21a8 	ldrh.w	r2, [r3, #424]	; 0x1a8
	*plite_mincountrate =
 800a3a8:	683b      	ldr	r3, [r7, #0]
 800a3aa:	801a      	strh	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 800a3ac:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 800a3b0:	4618      	mov	r0, r3
 800a3b2:	3714      	adds	r7, #20
 800a3b4:	46bd      	mov	sp, r7
 800a3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ba:	4770      	bx	lr

0800a3bc <VL53L1_set_lite_min_count_rate>:

VL53L1_Error VL53L1_set_lite_min_count_rate(
	VL53L1_DEV                          Dev,
	uint16_t                            lite_mincountrate)
{
 800a3bc:	b480      	push	{r7}
 800a3be:	b085      	sub	sp, #20
 800a3c0:	af00      	add	r7, sp, #0
 800a3c2:	6078      	str	r0, [r7, #4]
 800a3c4:	460b      	mov	r3, r1
 800a3c6:	807b      	strh	r3, [r7, #2]
	 * Sets the Min COunt Rate value for Lite mode
	 *
	 * (fixed point 19.7Mcps)
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800a3c8:	2300      	movs	r3, #0
 800a3ca:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->tim_cfg.range_config__min_count_rate_rtn_limit_mcps =
 800a3d0:	68bb      	ldr	r3, [r7, #8]
 800a3d2:	887a      	ldrh	r2, [r7, #2]
 800a3d4:	f8a3 21a8 	strh.w	r2, [r3, #424]	; 0x1a8
		lite_mincountrate;

	LOG_FUNCTION_END(status);

	return status;
 800a3d8:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 800a3dc:	4618      	mov	r0, r3
 800a3de:	3714      	adds	r7, #20
 800a3e0:	46bd      	mov	sp, r7
 800a3e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3e6:	4770      	bx	lr

0800a3e8 <VL53L1_set_vhv_loopbound>:


VL53L1_Error VL53L1_set_vhv_loopbound(
	VL53L1_DEV                   Dev,
	uint8_t                      vhv_loopbound)
{
 800a3e8:	b480      	push	{r7}
 800a3ea:	b085      	sub	sp, #20
 800a3ec:	af00      	add	r7, sp, #0
 800a3ee:	6078      	str	r0, [r7, #4]
 800a3f0:	460b      	mov	r3, r1
 800a3f2:	70fb      	strb	r3, [r7, #3]
	 * - ensure that any change here is followed by a
	 * init_and_start_range with full i2c packet
	 * configuration.
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800a3f4:	2300      	movs	r3, #0
 800a3f6:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
			(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
 800a3fc:	68bb      	ldr	r3, [r7, #8]
 800a3fe:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 800a402:	f003 0303 	and.w	r3, r3, #3
 800a406:	b2da      	uxtb	r2, r3
 800a408:	78fb      	ldrb	r3, [r7, #3]
 800a40a:	009b      	lsls	r3, r3, #2
 800a40c:	b2db      	uxtb	r3, r3
 800a40e:	4413      	add	r3, r2
 800a410:	b2da      	uxtb	r2, r3
	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
 800a412:	68bb      	ldr	r3, [r7, #8]
 800a414:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
			(vhv_loopbound * 4);

	LOG_FUNCTION_END(status);

	return status;
 800a418:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 800a41c:	4618      	mov	r0, r3
 800a41e:	3714      	adds	r7, #20
 800a420:	46bd      	mov	sp, r7
 800a422:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a426:	4770      	bx	lr

0800a428 <VL53L1_init_and_start_range>:

VL53L1_Error VL53L1_init_and_start_range(
	VL53L1_DEV                     Dev,
	uint8_t                        measurement_mode,
	VL53L1_DeviceConfigLevel       device_config_level)
{
 800a428:	b580      	push	{r7, lr}
 800a42a:	b0d0      	sub	sp, #320	; 0x140
 800a42c:	af00      	add	r7, sp, #0
 800a42e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800a432:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800a436:	6018      	str	r0, [r3, #0]
 800a438:	4608      	mov	r0, r1
 800a43a:	4611      	mov	r1, r2
 800a43c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800a440:	f2a3 133d 	subw	r3, r3, #317	; 0x13d
 800a444:	4602      	mov	r2, r0
 800a446:	701a      	strb	r2, [r3, #0]
 800a448:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800a44c:	f5a3 739f 	sub.w	r3, r3, #318	; 0x13e
 800a450:	460a      	mov	r2, r1
 800a452:	701a      	strb	r2, [r3, #0]
	 * system_control is always sent as the last byte of this
	 * register group (mode_start) either triggers the range
	 * or enables the next range
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800a454:	2300      	movs	r3, #0
 800a456:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800a45a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800a45e:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130

	uint8_t buffer[VL53L1_MAX_I2C_XFER_SIZE];

	VL53L1_static_nvm_managed_t   *pstatic_nvm   = &(pdev->stat_nvm);
 800a468:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a46c:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800a470:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	VL53L1_customer_nvm_managed_t *pcustomer_nvm = &(pdev->customer);
 800a474:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a478:	3342      	adds	r3, #66	; 0x42
 800a47a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	VL53L1_static_config_t        *pstatic       = &(pdev->stat_cfg);
 800a47e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a482:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a486:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	VL53L1_general_config_t       *pgeneral      = &(pdev->gen_cfg);
 800a48a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a48e:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800a492:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
	VL53L1_timing_config_t        *ptiming       = &(pdev->tim_cfg);
 800a496:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a49a:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 800a49e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	VL53L1_dynamic_config_t       *pdynamic      = &(pdev->dyn_cfg);
 800a4a2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a4a6:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800a4aa:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
	VL53L1_system_control_t       *psystem       = &(pdev->sys_ctrl);
 800a4ae:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a4b2:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800a4b6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114

	VL53L1_ll_driver_state_t  *pstate   = &(pdev->ll_state);
 800a4ba:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a4be:	332c      	adds	r3, #44	; 0x2c
 800a4c0:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110

	uint8_t  *pbuffer                   = &buffer[0];
 800a4c4:	f107 030c 	add.w	r3, r7, #12
 800a4c8:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
	uint16_t i                          = 0;
 800a4cc:	2300      	movs	r3, #0
 800a4ce:	f8a7 3136 	strh.w	r3, [r7, #310]	; 0x136
	uint16_t i2c_index                  = 0;
 800a4d2:	2300      	movs	r3, #0
 800a4d4:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134
	uint16_t i2c_buffer_offset_bytes    = 0;
 800a4d8:	2300      	movs	r3, #0
 800a4da:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
	uint16_t i2c_buffer_size_bytes      = 0;
 800a4de:	2300      	movs	r3, #0
 800a4e0:	f8a7 310c 	strh.w	r3, [r7, #268]	; 0x10c

	LOG_FUNCTION_START("");

	/* save measurement mode */
	pdev->measurement_mode = measurement_mode;
 800a4e4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a4e8:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 800a4ec:	f2a2 123d 	subw	r2, r2, #317	; 0x13d
 800a4f0:	7812      	ldrb	r2, [r2, #0]
 800a4f2:	709a      	strb	r2, [r3, #2]

	/* Merge measurement mode with mode_start */

	psystem->system__mode_start =
		(psystem->system__mode_start &
 800a4f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a4f8:	791b      	ldrb	r3, [r3, #4]
 800a4fa:	b25b      	sxtb	r3, r3
 800a4fc:	f003 030f 	and.w	r3, r3, #15
 800a500:	b25a      	sxtb	r2, r3
		VL53L1_DEVICEMEASUREMENTMODE_STOP_MASK) |
 800a502:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800a506:	f2a3 133d 	subw	r3, r3, #317	; 0x13d
 800a50a:	f993 3000 	ldrsb.w	r3, [r3]
 800a50e:	4313      	orrs	r3, r2
 800a510:	b25b      	sxtb	r3, r3
 800a512:	b2da      	uxtb	r2, r3
	psystem->system__mode_start =
 800a514:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a518:	711a      	strb	r2, [r3, #4]
		measurement_mode;

	/* copy in rit from xtalk config */

	pdev->stat_cfg.algo__range_ignore_threshold_mcps =
		pdev->xtalk_cfg.crosstalk_range_ignore_threshold_rate_mcps;
 800a51a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a51e:	f8b3 2142 	ldrh.w	r2, [r3, #322]	; 0x142
	pdev->stat_cfg.algo__range_ignore_threshold_mcps =
 800a522:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a526:	f8a3 217c 	strh.w	r2, [r3, #380]	; 0x17c
	/* Start Patch_LowPowerAutoMode */

	/* doing this ensures stop_range followed by a get_device_results does
	 * not mess up the counters */

	if (pdev->low_power_auto_data.low_power_auto_range_count == 0xFF) {
 800a52a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a52e:	f893 32e6 	ldrb.w	r3, [r3, #742]	; 0x2e6
 800a532:	2bff      	cmp	r3, #255	; 0xff
 800a534:	d104      	bne.n	800a540 <VL53L1_init_and_start_range+0x118>
		pdev->low_power_auto_data.low_power_auto_range_count = 0x0;
 800a536:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a53a:	2200      	movs	r2, #0
 800a53c:	f883 22e6 	strb.w	r2, [r3, #742]	; 0x2e6
	}

	/* For Presence. Override threshold config */
	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 800a540:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a544:	f893 32e5 	ldrb.w	r3, [r3, #741]	; 0x2e5
 800a548:	2b01      	cmp	r3, #1
 800a54a:	d139      	bne.n	800a5c0 <VL53L1_init_and_start_range+0x198>
		(pdev->low_power_auto_data.low_power_auto_range_count == 0)) {
 800a54c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a550:	f893 32e6 	ldrb.w	r3, [r3, #742]	; 0x2e6
	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 800a554:	2b00      	cmp	r3, #0
 800a556:	d133      	bne.n	800a5c0 <VL53L1_init_and_start_range+0x198>
		/* save interrupt config */
		pdev->low_power_auto_data.saved_interrupt_config =
			pdev->gen_cfg.system__interrupt_config_gpio;
 800a558:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a55c:	f893 2186 	ldrb.w	r2, [r3, #390]	; 0x186
		pdev->low_power_auto_data.saved_interrupt_config =
 800a560:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a564:	f883 22e7 	strb.w	r2, [r3, #743]	; 0x2e7
		/* set intr_new_measure_ready */
		pdev->gen_cfg.system__interrupt_config_gpio = 1 << 5;
 800a568:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a56c:	2220      	movs	r2, #32
 800a56e:	f883 2186 	strb.w	r2, [r3, #390]	; 0x186
		/* check MM1/MM2 disabled? */
		if ((pdev->dyn_cfg.system__sequence_config & (
 800a572:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a576:	f893 31c5 	ldrb.w	r3, [r3, #453]	; 0x1c5
 800a57a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d10c      	bne.n	800a59c <VL53L1_init_and_start_range+0x174>
			VL53L1_SEQUENCE_MM1_EN | VL53L1_SEQUENCE_MM2_EN)) ==
				0x0) {
			pdev->customer.algo__part_to_part_range_offset_mm =
				pdev->customer.mm_config__outer_offset_mm * 4;
 800a582:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a586:	f9b3 3058 	ldrsh.w	r3, [r3, #88]	; 0x58
 800a58a:	b29b      	uxth	r3, r3
 800a58c:	009b      	lsls	r3, r3, #2
 800a58e:	b29b      	uxth	r3, r3
 800a590:	b21a      	sxth	r2, r3
			pdev->customer.algo__part_to_part_range_offset_mm =
 800a592:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a596:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 800a59a:	e004      	b.n	800a5a6 <VL53L1_init_and_start_range+0x17e>
		} else {
			pdev->customer.algo__part_to_part_range_offset_mm = 0x0;
 800a59c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a5a0:	2200      	movs	r2, #0
 800a5a2:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
		}

		/* make sure config gets written out */
		if (device_config_level <
 800a5a6:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800a5aa:	f5a3 739f 	sub.w	r3, r3, #318	; 0x13e
 800a5ae:	781b      	ldrb	r3, [r3, #0]
 800a5b0:	2b04      	cmp	r3, #4
 800a5b2:	d805      	bhi.n	800a5c0 <VL53L1_init_and_start_range+0x198>
				VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS) {
			device_config_level =
 800a5b4:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800a5b8:	f5a3 739f 	sub.w	r3, r3, #318	; 0x13e
 800a5bc:	2205      	movs	r2, #5
 800a5be:	701a      	strb	r2, [r3, #0]
				VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS;
		}
	}

	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 800a5c0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a5c4:	f893 32e5 	ldrb.w	r3, [r3, #741]	; 0x2e5
 800a5c8:	2b01      	cmp	r3, #1
 800a5ca:	d113      	bne.n	800a5f4 <VL53L1_init_and_start_range+0x1cc>
		(pdev->low_power_auto_data.low_power_auto_range_count == 1)) {
 800a5cc:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a5d0:	f893 32e6 	ldrb.w	r3, [r3, #742]	; 0x2e6
	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 800a5d4:	2b01      	cmp	r3, #1
 800a5d6:	d10d      	bne.n	800a5f4 <VL53L1_init_and_start_range+0x1cc>
		/* restore interrupt config */
		pdev->gen_cfg.system__interrupt_config_gpio =
			pdev->low_power_auto_data.saved_interrupt_config;
 800a5d8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a5dc:	f893 22e7 	ldrb.w	r2, [r3, #743]	; 0x2e7
		pdev->gen_cfg.system__interrupt_config_gpio =
 800a5e0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a5e4:	f883 2186 	strb.w	r2, [r3, #390]	; 0x186

		/* make sure config gets written out including VHV config */
		device_config_level = VL53L1_DEVICECONFIGLEVEL_FULL;
 800a5e8:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800a5ec:	f5a3 739f 	sub.w	r3, r3, #318	; 0x13e
 800a5f0:	2206      	movs	r2, #6
 800a5f2:	701a      	strb	r2, [r3, #0]

	/*
	 * Determine Initial I2C index
	 */

	switch (device_config_level) {
 800a5f4:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800a5f8:	f5a3 739f 	sub.w	r3, r3, #318	; 0x13e
 800a5fc:	781b      	ldrb	r3, [r3, #0]
 800a5fe:	3b01      	subs	r3, #1
 800a600:	2b05      	cmp	r3, #5
 800a602:	d827      	bhi.n	800a654 <VL53L1_init_and_start_range+0x22c>
 800a604:	a201      	add	r2, pc, #4	; (adr r2, 800a60c <VL53L1_init_and_start_range+0x1e4>)
 800a606:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a60a:	bf00      	nop
 800a60c:	0800a64d 	.word	0x0800a64d
 800a610:	0800a645 	.word	0x0800a645
 800a614:	0800a63d 	.word	0x0800a63d
 800a618:	0800a635 	.word	0x0800a635
 800a61c:	0800a62d 	.word	0x0800a62d
 800a620:	0800a625 	.word	0x0800a625
	case VL53L1_DEVICECONFIGLEVEL_FULL:
		i2c_index = VL53L1_STATIC_NVM_MANAGED_I2C_INDEX;
 800a624:	2301      	movs	r3, #1
 800a626:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134
		break;
 800a62a:	e017      	b.n	800a65c <VL53L1_init_and_start_range+0x234>
	case VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS:
		i2c_index = VL53L1_CUSTOMER_NVM_MANAGED_I2C_INDEX;
 800a62c:	230d      	movs	r3, #13
 800a62e:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134
		break;
 800a632:	e013      	b.n	800a65c <VL53L1_init_and_start_range+0x234>
	case VL53L1_DEVICECONFIGLEVEL_STATIC_ONWARDS:
		i2c_index = VL53L1_STATIC_CONFIG_I2C_INDEX;
 800a634:	2324      	movs	r3, #36	; 0x24
 800a636:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134
		break;
 800a63a:	e00f      	b.n	800a65c <VL53L1_init_and_start_range+0x234>
	case VL53L1_DEVICECONFIGLEVEL_GENERAL_ONWARDS:
		i2c_index = VL53L1_GENERAL_CONFIG_I2C_INDEX;
 800a63c:	2344      	movs	r3, #68	; 0x44
 800a63e:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134
		break;
 800a642:	e00b      	b.n	800a65c <VL53L1_init_and_start_range+0x234>
	case VL53L1_DEVICECONFIGLEVEL_TIMING_ONWARDS:
		i2c_index = VL53L1_TIMING_CONFIG_I2C_INDEX;
 800a644:	235a      	movs	r3, #90	; 0x5a
 800a646:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134
		break;
 800a64a:	e007      	b.n	800a65c <VL53L1_init_and_start_range+0x234>
	case VL53L1_DEVICECONFIGLEVEL_DYNAMIC_ONWARDS:
		i2c_index = VL53L1_DYNAMIC_CONFIG_I2C_INDEX;
 800a64c:	2371      	movs	r3, #113	; 0x71
 800a64e:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134
		break;
 800a652:	e003      	b.n	800a65c <VL53L1_init_and_start_range+0x234>
	default:
		i2c_index = VL53L1_SYSTEM_CONTROL_I2C_INDEX;
 800a654:	2383      	movs	r3, #131	; 0x83
 800a656:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134
		break;
 800a65a:	bf00      	nop
	}

	/* I2C Buffer size */

	i2c_buffer_size_bytes = \
 800a65c:	f8b7 3134 	ldrh.w	r3, [r7, #308]	; 0x134
 800a660:	f1c3 0388 	rsb	r3, r3, #136	; 0x88
 800a664:	f8a7 310c 	strh.w	r3, [r7, #268]	; 0x10c
			 VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES) -
			 i2c_index;

	/* Initialize buffer */

	pbuffer = &buffer[0];
 800a668:	f107 030c 	add.w	r3, r7, #12
 800a66c:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
	for (i = 0 ; i < i2c_buffer_size_bytes ; i++) {
 800a670:	2300      	movs	r3, #0
 800a672:	f8a7 3136 	strh.w	r3, [r7, #310]	; 0x136
 800a676:	e00b      	b.n	800a690 <VL53L1_init_and_start_range+0x268>
		*pbuffer++ = 0;
 800a678:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800a67c:	1c5a      	adds	r2, r3, #1
 800a67e:	f8c7 2138 	str.w	r2, [r7, #312]	; 0x138
 800a682:	2200      	movs	r2, #0
 800a684:	701a      	strb	r2, [r3, #0]
	for (i = 0 ; i < i2c_buffer_size_bytes ; i++) {
 800a686:	f8b7 3136 	ldrh.w	r3, [r7, #310]	; 0x136
 800a68a:	3301      	adds	r3, #1
 800a68c:	f8a7 3136 	strh.w	r3, [r7, #310]	; 0x136
 800a690:	f8b7 2136 	ldrh.w	r2, [r7, #310]	; 0x136
 800a694:	f8b7 310c 	ldrh.w	r3, [r7, #268]	; 0x10c
 800a698:	429a      	cmp	r2, r3
 800a69a:	d3ed      	bcc.n	800a678 <VL53L1_init_and_start_range+0x250>
	}

	/* Build I2C buffer */

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_FULL &&
 800a69c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800a6a0:	f5a3 739f 	sub.w	r3, r3, #318	; 0x13e
 800a6a4:	781b      	ldrb	r3, [r3, #0]
 800a6a6:	2b05      	cmp	r3, #5
 800a6a8:	d917      	bls.n	800a6da <VL53L1_init_and_start_range+0x2b2>
 800a6aa:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d113      	bne.n	800a6da <VL53L1_init_and_start_range+0x2b2>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes = \
 800a6b2:	f8b7 3134 	ldrh.w	r3, [r7, #308]	; 0x134
 800a6b6:	f1c3 0301 	rsb	r3, r3, #1
 800a6ba:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_static_nvm_managed(
				pstatic_nvm,
				VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 800a6be:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_static_nvm_managed(
 800a6c2:	f107 020c 	add.w	r2, r7, #12
 800a6c6:	4413      	add	r3, r2
 800a6c8:	461a      	mov	r2, r3
 800a6ca:	210b      	movs	r1, #11
 800a6cc:	f8d7 012c 	ldr.w	r0, [r7, #300]	; 0x12c
 800a6d0:	f002 fb0c 	bl	800ccec <VL53L1_i2c_encode_static_nvm_managed>
 800a6d4:	4603      	mov	r3, r0
 800a6d6:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS &&
 800a6da:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800a6de:	f5a3 739f 	sub.w	r3, r3, #318	; 0x13e
 800a6e2:	781b      	ldrb	r3, [r3, #0]
 800a6e4:	2b04      	cmp	r3, #4
 800a6e6:	d917      	bls.n	800a718 <VL53L1_init_and_start_range+0x2f0>
 800a6e8:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d113      	bne.n	800a718 <VL53L1_init_and_start_range+0x2f0>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes = \
 800a6f0:	f8b7 3134 	ldrh.w	r3, [r7, #308]	; 0x134
 800a6f4:	f1c3 030d 	rsb	r3, r3, #13
 800a6f8:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_customer_nvm_managed(
				pcustomer_nvm,
				VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 800a6fc:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_customer_nvm_managed(
 800a700:	f107 020c 	add.w	r2, r7, #12
 800a704:	4413      	add	r3, r2
 800a706:	461a      	mov	r2, r3
 800a708:	2117      	movs	r1, #23
 800a70a:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 800a70e:	f002 fbc9 	bl	800cea4 <VL53L1_i2c_encode_customer_nvm_managed>
 800a712:	4603      	mov	r3, r0
 800a714:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_STATIC_ONWARDS &&
 800a718:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800a71c:	f5a3 739f 	sub.w	r3, r3, #318	; 0x13e
 800a720:	781b      	ldrb	r3, [r3, #0]
 800a722:	2b03      	cmp	r3, #3
 800a724:	d917      	bls.n	800a756 <VL53L1_init_and_start_range+0x32e>
 800a726:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d113      	bne.n	800a756 <VL53L1_init_and_start_range+0x32e>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes = \
 800a72e:	f8b7 3134 	ldrh.w	r3, [r7, #308]	; 0x134
 800a732:	f1c3 0324 	rsb	r3, r3, #36	; 0x24
 800a736:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_static_config(
				pstatic,
				VL53L1_STATIC_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 800a73a:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_static_config(
 800a73e:	f107 020c 	add.w	r2, r7, #12
 800a742:	4413      	add	r3, r2
 800a744:	461a      	mov	r2, r3
 800a746:	2120      	movs	r1, #32
 800a748:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 800a74c:	f002 fd0f 	bl	800d16e <VL53L1_i2c_encode_static_config>
 800a750:	4603      	mov	r3, r0
 800a752:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_GENERAL_ONWARDS &&
 800a756:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800a75a:	f5a3 739f 	sub.w	r3, r3, #318	; 0x13e
 800a75e:	781b      	ldrb	r3, [r3, #0]
 800a760:	2b02      	cmp	r3, #2
 800a762:	d917      	bls.n	800a794 <VL53L1_init_and_start_range+0x36c>
 800a764:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d113      	bne.n	800a794 <VL53L1_init_and_start_range+0x36c>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 800a76c:	f8b7 3134 	ldrh.w	r3, [r7, #308]	; 0x134
 800a770:	f1c3 0344 	rsb	r3, r3, #68	; 0x44
 800a774:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_general_config(
				pgeneral,
				VL53L1_GENERAL_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 800a778:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_general_config(
 800a77c:	f107 020c 	add.w	r2, r7, #12
 800a780:	4413      	add	r3, r2
 800a782:	461a      	mov	r2, r3
 800a784:	2116      	movs	r1, #22
 800a786:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 800a78a:	f002 fdd3 	bl	800d334 <VL53L1_i2c_encode_general_config>
 800a78e:	4603      	mov	r3, r0
 800a790:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_TIMING_ONWARDS &&
 800a794:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800a798:	f5a3 739f 	sub.w	r3, r3, #318	; 0x13e
 800a79c:	781b      	ldrb	r3, [r3, #0]
 800a79e:	2b01      	cmp	r3, #1
 800a7a0:	d917      	bls.n	800a7d2 <VL53L1_init_and_start_range+0x3aa>
 800a7a2:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d113      	bne.n	800a7d2 <VL53L1_init_and_start_range+0x3aa>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes = \
 800a7aa:	f8b7 3134 	ldrh.w	r3, [r7, #308]	; 0x134
 800a7ae:	f1c3 035a 	rsb	r3, r3, #90	; 0x5a
 800a7b2:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_timing_config(
				ptiming,
				VL53L1_TIMING_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 800a7b6:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_timing_config(
 800a7ba:	f107 020c 	add.w	r2, r7, #12
 800a7be:	4413      	add	r3, r2
 800a7c0:	461a      	mov	r2, r3
 800a7c2:	2117      	movs	r1, #23
 800a7c4:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 800a7c8:	f002 fe38 	bl	800d43c <VL53L1_i2c_encode_timing_config>
 800a7cc:	4603      	mov	r3, r0
 800a7ce:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_DYNAMIC_ONWARDS &&
 800a7d2:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800a7d6:	f5a3 739f 	sub.w	r3, r3, #318	; 0x13e
 800a7da:	781b      	ldrb	r3, [r3, #0]
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d036      	beq.n	800a84e <VL53L1_init_and_start_range+0x426>
 800a7e0:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d132      	bne.n	800a84e <VL53L1_init_and_start_range+0x426>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes = \
 800a7e8:	f8b7 3134 	ldrh.w	r3, [r7, #308]	; 0x134
 800a7ec:	f1c3 0371 	rsb	r3, r3, #113	; 0x71
 800a7f0:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
			VL53L1_DYNAMIC_CONFIG_I2C_INDEX - i2c_index;

		/* If in back to back mode, use GPH ID from cfg_state */
		if ((psystem->system__mode_start &
 800a7f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a7f8:	791b      	ldrb	r3, [r3, #4]
 800a7fa:	f003 0320 	and.w	r3, r3, #32
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d017      	beq.n	800a832 <VL53L1_init_and_start_range+0x40a>
			VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK) ==
			VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK) {
			pdynamic->system__grouped_parameter_hold_0 = pstate->cfg_gph_id | 0x01;
 800a802:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800a806:	789b      	ldrb	r3, [r3, #2]
 800a808:	f043 0301 	orr.w	r3, r3, #1
 800a80c:	b2da      	uxtb	r2, r3
 800a80e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800a812:	701a      	strb	r2, [r3, #0]
			pdynamic->system__grouped_parameter_hold_1 = pstate->cfg_gph_id | 0x01;
 800a814:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800a818:	789b      	ldrb	r3, [r3, #2]
 800a81a:	f043 0301 	orr.w	r3, r3, #1
 800a81e:	b2da      	uxtb	r2, r3
 800a820:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800a824:	731a      	strb	r2, [r3, #12]
			pdynamic->system__grouped_parameter_hold   = pstate->cfg_gph_id;
 800a826:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800a82a:	789a      	ldrb	r2, [r3, #2]
 800a82c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800a830:	749a      	strb	r2, [r3, #18]
		}
		status =
			VL53L1_i2c_encode_dynamic_config(
				pdynamic,
				VL53L1_DYNAMIC_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 800a832:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_dynamic_config(
 800a836:	f107 020c 	add.w	r2, r7, #12
 800a83a:	4413      	add	r3, r2
 800a83c:	461a      	mov	r2, r3
 800a83e:	2112      	movs	r1, #18
 800a840:	f8d7 0118 	ldr.w	r0, [r7, #280]	; 0x118
 800a844:	f002 fe7c 	bl	800d540 <VL53L1_i2c_encode_dynamic_config>
 800a848:	4603      	mov	r3, r0
 800a84a:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
	}

	if (status == VL53L1_ERROR_NONE) {
 800a84e:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 800a852:	2b00      	cmp	r3, #0
 800a854:	d113      	bne.n	800a87e <VL53L1_init_and_start_range+0x456>

		i2c_buffer_offset_bytes = \
 800a856:	f8b7 3134 	ldrh.w	r3, [r7, #308]	; 0x134
 800a85a:	f1c3 0383 	rsb	r3, r3, #131	; 0x83
 800a85e:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_system_control(
				psystem,
				VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 800a862:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_system_control(
 800a866:	f107 020c 	add.w	r2, r7, #12
 800a86a:	4413      	add	r3, r2
 800a86c:	461a      	mov	r2, r3
 800a86e:	2105      	movs	r1, #5
 800a870:	f8d7 0114 	ldr.w	r0, [r7, #276]	; 0x114
 800a874:	f002 fee9 	bl	800d64a <VL53L1_i2c_encode_system_control>
 800a878:	4603      	mov	r3, r0
 800a87a:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
	}

	/* Send I2C Buffer */

	if (status == VL53L1_ERROR_NONE) {
 800a87e:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 800a882:	2b00      	cmp	r3, #0
 800a884:	d10f      	bne.n	800a8a6 <VL53L1_init_and_start_range+0x47e>
		status =
			VL53L1_WriteMulti(
 800a886:	f8b7 310c 	ldrh.w	r3, [r7, #268]	; 0x10c
 800a88a:	f107 020c 	add.w	r2, r7, #12
 800a88e:	f8b7 1134 	ldrh.w	r1, [r7, #308]	; 0x134
 800a892:	f507 70a0 	add.w	r0, r7, #320	; 0x140
 800a896:	f5a0 709e 	sub.w	r0, r0, #316	; 0x13c
 800a89a:	6800      	ldr	r0, [r0, #0]
 800a89c:	f003 fc30 	bl	800e100 <VL53L1_WriteMulti>
 800a8a0:	4603      	mov	r3, r0
 800a8a2:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
	}

	/*
	 * Update LL Driver State
	 */
	if (status == VL53L1_ERROR_NONE)
 800a8a6:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d109      	bne.n	800a8c2 <VL53L1_init_and_start_range+0x49a>
		status = VL53L1_update_ll_driver_rd_state(Dev);
 800a8ae:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800a8b2:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800a8b6:	6818      	ldr	r0, [r3, #0]
 800a8b8:	f001 fa3a 	bl	800bd30 <VL53L1_update_ll_driver_rd_state>
 800a8bc:	4603      	mov	r3, r0
 800a8be:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f

	if (status == VL53L1_ERROR_NONE)
 800a8c2:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d109      	bne.n	800a8de <VL53L1_init_and_start_range+0x4b6>
		status = VL53L1_update_ll_driver_cfg_state(Dev);
 800a8ca:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800a8ce:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800a8d2:	6818      	ldr	r0, [r3, #0]
 800a8d4:	f001 faff 	bl	800bed6 <VL53L1_update_ll_driver_cfg_state>
 800a8d8:	4603      	mov	r3, r0
 800a8da:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f

	LOG_FUNCTION_END(status);

	return status;
 800a8de:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
}
 800a8e2:	4618      	mov	r0, r3
 800a8e4:	f507 77a0 	add.w	r7, r7, #320	; 0x140
 800a8e8:	46bd      	mov	sp, r7
 800a8ea:	bd80      	pop	{r7, pc}

0800a8ec <VL53L1_stop_range>:


VL53L1_Error VL53L1_stop_range(
	VL53L1_DEV     Dev)
{
 800a8ec:	b580      	push	{r7, lr}
 800a8ee:	b084      	sub	sp, #16
 800a8f0:	af00      	add	r7, sp, #0
 800a8f2:	6078      	str	r0, [r7, #4]
	/*
	 * Stops any in process range using the ABORT command
	 * Also clears all of the measurement mode bits
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800a8f4:	2300      	movs	r3, #0
 800a8f6:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev =
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	60bb      	str	r3, [r7, #8]
			VL53L1DevStructGetLLDriverHandle(Dev);

	/* Merge ABORT mode with mode_start */

	pdev->sys_ctrl.system__mode_start =
			(pdev->sys_ctrl.system__mode_start & VL53L1_DEVICEMEASUREMENTMODE_STOP_MASK) |
 800a8fc:	68bb      	ldr	r3, [r7, #8]
 800a8fe:	f893 31cc 	ldrb.w	r3, [r3, #460]	; 0x1cc
 800a902:	b25b      	sxtb	r3, r3
 800a904:	f003 030f 	and.w	r3, r3, #15
 800a908:	b25b      	sxtb	r3, r3
 800a90a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a90e:	b25b      	sxtb	r3, r3
 800a910:	b2da      	uxtb	r2, r3
	pdev->sys_ctrl.system__mode_start =
 800a912:	68bb      	ldr	r3, [r7, #8]
 800a914:	f883 21cc 	strb.w	r2, [r3, #460]	; 0x1cc
			 VL53L1_DEVICEMEASUREMENTMODE_ABORT;

	status = VL53L1_set_system_control(
 800a918:	68bb      	ldr	r3, [r7, #8]
 800a91a:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800a91e:	4619      	mov	r1, r3
 800a920:	6878      	ldr	r0, [r7, #4]
 800a922:	f002 fecd 	bl	800d6c0 <VL53L1_set_system_control>
 800a926:	4603      	mov	r3, r0
 800a928:	73fb      	strb	r3, [r7, #15]
				Dev,
				&pdev->sys_ctrl);

	/* Abort bit is auto clear so clear register group structure to match */
	pdev->sys_ctrl.system__mode_start =
			(pdev->sys_ctrl.system__mode_start & VL53L1_DEVICEMEASUREMENTMODE_STOP_MASK);
 800a92a:	68bb      	ldr	r3, [r7, #8]
 800a92c:	f893 31cc 	ldrb.w	r3, [r3, #460]	; 0x1cc
 800a930:	f003 030f 	and.w	r3, r3, #15
 800a934:	b2da      	uxtb	r2, r3
	pdev->sys_ctrl.system__mode_start =
 800a936:	68bb      	ldr	r3, [r7, #8]
 800a938:	f883 21cc 	strb.w	r2, [r3, #460]	; 0x1cc

	/* reset zone dynamic info */
	VL53L1_init_ll_driver_state(
 800a93c:	2103      	movs	r1, #3
 800a93e:	6878      	ldr	r0, [r7, #4]
 800a940:	f001 f9cc 	bl	800bcdc <VL53L1_init_ll_driver_state>
			Dev,
			VL53L1_DEVICESTATE_SW_STANDBY);

	/* reset low power auto */
	if (pdev->low_power_auto_data.is_low_power_auto_mode == 1)
 800a944:	68bb      	ldr	r3, [r7, #8]
 800a946:	f893 32e5 	ldrb.w	r3, [r3, #741]	; 0x2e5
 800a94a:	2b01      	cmp	r3, #1
 800a94c:	d102      	bne.n	800a954 <VL53L1_stop_range+0x68>
		VL53L1_low_power_auto_data_stop_range(Dev);
 800a94e:	6878      	ldr	r0, [r7, #4]
 800a950:	f002 f8c8 	bl	800cae4 <VL53L1_low_power_auto_data_stop_range>

	return status;
 800a954:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a958:	4618      	mov	r0, r3
 800a95a:	3710      	adds	r7, #16
 800a95c:	46bd      	mov	sp, r7
 800a95e:	bd80      	pop	{r7, pc}

0800a960 <VL53L1_get_measurement_results>:


VL53L1_Error VL53L1_get_measurement_results(
	VL53L1_DEV                     Dev,
	VL53L1_DeviceResultsLevel      device_results_level)
{
 800a960:	b580      	push	{r7, lr}
 800a962:	b0c8      	sub	sp, #288	; 0x120
 800a964:	af00      	add	r7, sp, #0
 800a966:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800a96a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800a96e:	6018      	str	r0, [r3, #0]
 800a970:	460a      	mov	r2, r1
 800a972:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800a976:	f2a3 131d 	subw	r3, r3, #285	; 0x11d
 800a97a:	701a      	strb	r2, [r3, #0]
	/*
	 * Read via a single I2C multiple byte transaction all
	 * of the requested device measurement data results
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800a97c:	2300      	movs	r3, #0
 800a97e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800a982:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800a986:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118

	uint8_t buffer[VL53L1_MAX_I2C_XFER_SIZE];

	VL53L1_system_results_t   *psystem_results = &(pdev->sys_results);
 800a990:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800a994:	f503 73e7 	add.w	r3, r3, #462	; 0x1ce
 800a998:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
	VL53L1_core_results_t     *pcore_results   = &(pdev->core_results);
 800a99c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800a9a0:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800a9a4:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	VL53L1_debug_results_t    *pdebug_results  = &(pdev->dbg_results);
 800a9a8:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800a9ac:	f503 732b 	add.w	r3, r3, #684	; 0x2ac
 800a9b0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

	uint16_t i2c_index               = VL53L1_SYSTEM_RESULTS_I2C_INDEX;
 800a9b4:	2388      	movs	r3, #136	; 0x88
 800a9b6:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
	uint16_t i2c_buffer_offset_bytes = 0;
 800a9ba:	2300      	movs	r3, #0
 800a9bc:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
	uint16_t i2c_buffer_size_bytes   = 0;
 800a9c0:	2300      	movs	r3, #0
 800a9c2:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c

	LOG_FUNCTION_START("");

	/* Determine multi byte read transaction size */

	switch (device_results_level) {
 800a9c6:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800a9ca:	f2a3 131d 	subw	r3, r3, #285	; 0x11d
 800a9ce:	781b      	ldrb	r3, [r3, #0]
 800a9d0:	2b01      	cmp	r3, #1
 800a9d2:	d008      	beq.n	800a9e6 <VL53L1_get_measurement_results+0x86>
 800a9d4:	2b02      	cmp	r3, #2
 800a9d6:	d10d      	bne.n	800a9f4 <VL53L1_get_measurement_results+0x94>
	case VL53L1_DEVICERESULTSLEVEL_FULL:
		i2c_buffer_size_bytes =
 800a9d8:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 800a9dc:	f5c3 7387 	rsb	r3, r3, #270	; 0x10e
 800a9e0:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c
				(VL53L1_DEBUG_RESULTS_I2C_INDEX +
				VL53L1_DEBUG_RESULTS_I2C_SIZE_BYTES) -
				i2c_index;
		break;
 800a9e4:	e00a      	b.n	800a9fc <VL53L1_get_measurement_results+0x9c>
	case VL53L1_DEVICERESULTSLEVEL_UPTO_CORE:
		i2c_buffer_size_bytes =
 800a9e6:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 800a9ea:	f1c3 03d5 	rsb	r3, r3, #213	; 0xd5
 800a9ee:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c
				(VL53L1_CORE_RESULTS_I2C_INDEX +
				VL53L1_CORE_RESULTS_I2C_SIZE_BYTES) -
				i2c_index;
		break;
 800a9f2:	e003      	b.n	800a9fc <VL53L1_get_measurement_results+0x9c>
	default:
		i2c_buffer_size_bytes =
 800a9f4:	232c      	movs	r3, #44	; 0x2c
 800a9f6:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c
				VL53L1_SYSTEM_RESULTS_I2C_SIZE_BYTES;
		break;
 800a9fa:	bf00      	nop
	}

	/* Read  Result Data */

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 800a9fc:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d10f      	bne.n	800aa24 <VL53L1_get_measurement_results+0xc4>
		status =
			VL53L1_ReadMulti(
 800aa04:	f8b7 311c 	ldrh.w	r3, [r7, #284]	; 0x11c
 800aa08:	f107 0208 	add.w	r2, r7, #8
 800aa0c:	f8b7 110a 	ldrh.w	r1, [r7, #266]	; 0x10a
 800aa10:	f507 7090 	add.w	r0, r7, #288	; 0x120
 800aa14:	f5a0 708e 	sub.w	r0, r0, #284	; 0x11c
 800aa18:	6800      	ldr	r0, [r0, #0]
 800aa1a:	f003 fba7 	bl	800e16c <VL53L1_ReadMulti>
 800aa1e:	4603      	mov	r3, r0
 800aa20:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
				buffer,
				(uint32_t)i2c_buffer_size_bytes);

	/* Decode  I2C buffer */

	if (device_results_level >= VL53L1_DEVICERESULTSLEVEL_FULL &&
 800aa24:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800aa28:	f2a3 131d 	subw	r3, r3, #285	; 0x11d
 800aa2c:	781b      	ldrb	r3, [r3, #0]
 800aa2e:	2b01      	cmp	r3, #1
 800aa30:	d917      	bls.n	800aa62 <VL53L1_get_measurement_results+0x102>
 800aa32:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d113      	bne.n	800aa62 <VL53L1_get_measurement_results+0x102>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 800aa3a:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 800aa3e:	f1c3 03d6 	rsb	r3, r3, #214	; 0xd6
 800aa42:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
				VL53L1_DEBUG_RESULTS_I2C_INDEX - i2c_index;

		status =
			VL53L1_i2c_decode_debug_results(
				VL53L1_DEBUG_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
 800aa46:	f8b7 3108 	ldrh.w	r3, [r7, #264]	; 0x108
			VL53L1_i2c_decode_debug_results(
 800aa4a:	f107 0208 	add.w	r2, r7, #8
 800aa4e:	4413      	add	r3, r2
 800aa50:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 800aa54:	4619      	mov	r1, r3
 800aa56:	2038      	movs	r0, #56	; 0x38
 800aa58:	f002 ffb0 	bl	800d9bc <VL53L1_i2c_decode_debug_results>
 800aa5c:	4603      	mov	r3, r0
 800aa5e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
				pdebug_results);
	}

	if (device_results_level >= VL53L1_DEVICERESULTSLEVEL_UPTO_CORE &&
 800aa62:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800aa66:	f2a3 131d 	subw	r3, r3, #285	; 0x11d
 800aa6a:	781b      	ldrb	r3, [r3, #0]
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d017      	beq.n	800aaa0 <VL53L1_get_measurement_results+0x140>
 800aa70:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d113      	bne.n	800aaa0 <VL53L1_get_measurement_results+0x140>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 800aa78:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 800aa7c:	f1c3 03b4 	rsb	r3, r3, #180	; 0xb4
 800aa80:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
				VL53L1_CORE_RESULTS_I2C_INDEX - i2c_index;

		status =
			VL53L1_i2c_decode_core_results(
				VL53L1_CORE_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
 800aa84:	f8b7 3108 	ldrh.w	r3, [r7, #264]	; 0x108
			VL53L1_i2c_decode_core_results(
 800aa88:	f107 0208 	add.w	r2, r7, #8
 800aa8c:	4413      	add	r3, r2
 800aa8e:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 800aa92:	4619      	mov	r1, r3
 800aa94:	2021      	movs	r0, #33	; 0x21
 800aa96:	f002 ff30 	bl	800d8fa <VL53L1_i2c_decode_core_results>
 800aa9a:	4603      	mov	r3, r0
 800aa9c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
				pcore_results);
	}

	if (status == VL53L1_ERROR_NONE) {
 800aaa0:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d110      	bne.n	800aaca <VL53L1_get_measurement_results+0x16a>

		i2c_buffer_offset_bytes = 0;
 800aaa8:	2300      	movs	r3, #0
 800aaaa:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
		status =
			VL53L1_i2c_decode_system_results(
				VL53L1_SYSTEM_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
 800aaae:	f8b7 3108 	ldrh.w	r3, [r7, #264]	; 0x108
			VL53L1_i2c_decode_system_results(
 800aab2:	f107 0208 	add.w	r2, r7, #8
 800aab6:	4413      	add	r3, r2
 800aab8:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800aabc:	4619      	mov	r1, r3
 800aabe:	202c      	movs	r0, #44	; 0x2c
 800aac0:	f002 fe25 	bl	800d70e <VL53L1_i2c_decode_system_results>
 800aac4:	4603      	mov	r3, r0
 800aac6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
				psystem_results);
	}

	LOG_FUNCTION_END(status);

	return status;
 800aaca:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
}
 800aace:	4618      	mov	r0, r3
 800aad0:	f507 7790 	add.w	r7, r7, #288	; 0x120
 800aad4:	46bd      	mov	sp, r7
 800aad6:	bd80      	pop	{r7, pc}

0800aad8 <VL53L1_get_device_results>:

VL53L1_Error VL53L1_get_device_results(
	VL53L1_DEV                    Dev,
	VL53L1_DeviceResultsLevel     device_results_level,
	VL53L1_range_results_t       *prange_results)
{
 800aad8:	b580      	push	{r7, lr}
 800aada:	b088      	sub	sp, #32
 800aadc:	af00      	add	r7, sp, #0
 800aade:	60f8      	str	r0, [r7, #12]
 800aae0:	460b      	mov	r3, r1
 800aae2:	607a      	str	r2, [r7, #4]
 800aae4:	72fb      	strb	r3, [r7, #11]
	 *  VL53L1_copy_sys_and_core_results_to_range_results()
	 *
	 *  The input measurement mode controls what happens next ...
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800aae6:	2300      	movs	r3, #0
 800aae8:	77fb      	strb	r3, [r7, #31]

	VL53L1_LLDriverData_t *pdev =
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	61bb      	str	r3, [r7, #24]
			VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_LLDriverResults_t *pres =
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	f503 733d 	add.w	r3, r3, #756	; 0x2f4
 800aaf4:	617b      	str	r3, [r7, #20]
			VL53L1DevStructGetLLResultsHandle(Dev);

	VL53L1_range_results_t   *presults = &(pres->range_results);
 800aaf6:	697b      	ldr	r3, [r7, #20]
 800aaf8:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");

	/* Get device results */

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 800aafa:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d106      	bne.n	800ab10 <VL53L1_get_device_results+0x38>
		status = VL53L1_get_measurement_results(
 800ab02:	7afb      	ldrb	r3, [r7, #11]
 800ab04:	4619      	mov	r1, r3
 800ab06:	68f8      	ldr	r0, [r7, #12]
 800ab08:	f7ff ff2a 	bl	800a960 <VL53L1_get_measurement_results>
 800ab0c:	4603      	mov	r3, r0
 800ab0e:	77fb      	strb	r3, [r7, #31]
						Dev,
						device_results_level);

	if (status == VL53L1_ERROR_NONE)
 800ab10:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d10c      	bne.n	800ab32 <VL53L1_get_device_results+0x5a>
		VL53L1_copy_sys_and_core_results_to_range_results(
				(int32_t)pdev->gain_cal.standard_ranging_gain_factor,
 800ab18:	69bb      	ldr	r3, [r7, #24]
 800ab1a:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
		VL53L1_copy_sys_and_core_results_to_range_results(
 800ab1e:	4618      	mov	r0, r3
 800ab20:	69bb      	ldr	r3, [r7, #24]
 800ab22:	f503 71e7 	add.w	r1, r3, #462	; 0x1ce
 800ab26:	69bb      	ldr	r3, [r7, #24]
 800ab28:	f503 7222 	add.w	r2, r3, #648	; 0x288
 800ab2c:	693b      	ldr	r3, [r7, #16]
 800ab2e:	f000 f85d 	bl	800abec <VL53L1_copy_sys_and_core_results_to_range_results>
				&(pdev->core_results),
				presults);

	/* Start Patch_LowPowerAutoMode */
	/* process results from first range of low power auto */
	if (pdev->low_power_auto_data.is_low_power_auto_mode == 1) {
 800ab32:	69bb      	ldr	r3, [r7, #24]
 800ab34:	f893 32e5 	ldrb.w	r3, [r3, #741]	; 0x2e5
 800ab38:	2b01      	cmp	r3, #1
 800ab3a:	d11f      	bne.n	800ab7c <VL53L1_get_device_results+0xa4>
		/* change to manual calibrations. Only needed on the
		 * first range out  */
		if ((status == VL53L1_ERROR_NONE) &&
 800ab3c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d10e      	bne.n	800ab62 <VL53L1_get_device_results+0x8a>
			(pdev->low_power_auto_data.low_power_auto_range_count == 0)) {
 800ab44:	69bb      	ldr	r3, [r7, #24]
 800ab46:	f893 32e6 	ldrb.w	r3, [r3, #742]	; 0x2e6
		if ((status == VL53L1_ERROR_NONE) &&
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d109      	bne.n	800ab62 <VL53L1_get_device_results+0x8a>
			status = VL53L1_low_power_auto_setup_manual_calibration(
 800ab4e:	68f8      	ldr	r0, [r7, #12]
 800ab50:	f002 f81b 	bl	800cb8a <VL53L1_low_power_auto_setup_manual_calibration>
 800ab54:	4603      	mov	r3, r0
 800ab56:	77fb      	strb	r3, [r7, #31]
					Dev);
			pdev->low_power_auto_data.low_power_auto_range_count = 1;
 800ab58:	69bb      	ldr	r3, [r7, #24]
 800ab5a:	2201      	movs	r2, #1
 800ab5c:	f883 22e6 	strb.w	r2, [r3, #742]	; 0x2e6
 800ab60:	e00c      	b.n	800ab7c <VL53L1_get_device_results+0xa4>
		} else if ((status == VL53L1_ERROR_NONE) &&
 800ab62:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d108      	bne.n	800ab7c <VL53L1_get_device_results+0xa4>
			(pdev->low_power_auto_data.low_power_auto_range_count == 1)) {
 800ab6a:	69bb      	ldr	r3, [r7, #24]
 800ab6c:	f893 32e6 	ldrb.w	r3, [r3, #742]	; 0x2e6
		} else if ((status == VL53L1_ERROR_NONE) &&
 800ab70:	2b01      	cmp	r3, #1
 800ab72:	d103      	bne.n	800ab7c <VL53L1_get_device_results+0xa4>
			pdev->low_power_auto_data.low_power_auto_range_count = 2;
 800ab74:	69bb      	ldr	r3, [r7, #24]
 800ab76:	2202      	movs	r2, #2
 800ab78:	f883 22e6 	strb.w	r2, [r3, #742]	; 0x2e6
	}
	/* End Patch_LowPowerAutoMode */

	/* copy current state into results */

	presults->cfg_device_state = pdev->ll_state.cfg_device_state;
 800ab7c:	69bb      	ldr	r3, [r7, #24]
 800ab7e:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800ab82:	693b      	ldr	r3, [r7, #16]
 800ab84:	701a      	strb	r2, [r3, #0]
	presults->rd_device_state  = pdev->ll_state.rd_device_state;
 800ab86:	69bb      	ldr	r3, [r7, #24]
 800ab88:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800ab8c:	693b      	ldr	r3, [r7, #16]
 800ab8e:	705a      	strb	r2, [r3, #1]

	/* copy internal structure to supplied output pointer */

	memcpy(
 800ab90:	2284      	movs	r2, #132	; 0x84
 800ab92:	6939      	ldr	r1, [r7, #16]
 800ab94:	6878      	ldr	r0, [r7, #4]
 800ab96:	f003 fcf9 	bl	800e58c <memcpy>
	/*
	 * Check LL driver and Device are in Sync
	 * If not an error is raised
	 */

	if (status == VL53L1_ERROR_NONE)
 800ab9a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	d104      	bne.n	800abac <VL53L1_get_device_results+0xd4>
		status = VL53L1_check_ll_driver_rd_state(Dev);
 800aba2:	68f8      	ldr	r0, [r7, #12]
 800aba4:	f001 f94c 	bl	800be40 <VL53L1_check_ll_driver_rd_state>
 800aba8:	4603      	mov	r3, r0
 800abaa:	77fb      	strb	r3, [r7, #31]
			VL53L1_TRACE_MODULE_RANGE_RESULTS_DATA);
#endif

	LOG_FUNCTION_END(status);

	return status;
 800abac:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800abb0:	4618      	mov	r0, r3
 800abb2:	3720      	adds	r7, #32
 800abb4:	46bd      	mov	sp, r7
 800abb6:	bd80      	pop	{r7, pc}

0800abb8 <VL53L1_clear_interrupt_and_enable_next_range>:


VL53L1_Error VL53L1_clear_interrupt_and_enable_next_range(
	VL53L1_DEV        Dev,
	uint8_t           measurement_mode)
{
 800abb8:	b580      	push	{r7, lr}
 800abba:	b084      	sub	sp, #16
 800abbc:	af00      	add	r7, sp, #0
 800abbe:	6078      	str	r0, [r7, #4]
 800abc0:	460b      	mov	r3, r1
 800abc2:	70fb      	strb	r3, [r7, #3]
	/*
	 * Enable next range by sending handshake which
	 * clears the interrupt
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800abc4:	2300      	movs	r3, #0
 800abc6:	73fb      	strb	r3, [r7, #15]
	/* Dynamic GPH Management     */
	/* Setup GPH absorption point and config values for next measurement */

	/* Update GPH registers, clear interrupt and set measurement mode */

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 800abc8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d107      	bne.n	800abe0 <VL53L1_clear_interrupt_and_enable_next_range+0x28>
		status = VL53L1_init_and_start_range(
 800abd0:	78fb      	ldrb	r3, [r7, #3]
 800abd2:	2203      	movs	r2, #3
 800abd4:	4619      	mov	r1, r3
 800abd6:	6878      	ldr	r0, [r7, #4]
 800abd8:	f7ff fc26 	bl	800a428 <VL53L1_init_and_start_range>
 800abdc:	4603      	mov	r3, r0
 800abde:	73fb      	strb	r3, [r7, #15]
					measurement_mode,
					VL53L1_DEVICECONFIGLEVEL_GENERAL_ONWARDS);

	LOG_FUNCTION_END(status);

	return status;
 800abe0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800abe4:	4618      	mov	r0, r3
 800abe6:	3710      	adds	r7, #16
 800abe8:	46bd      	mov	sp, r7
 800abea:	bd80      	pop	{r7, pc}

0800abec <VL53L1_copy_sys_and_core_results_to_range_results>:
void VL53L1_copy_sys_and_core_results_to_range_results(
	int32_t                           gain_factor,
	VL53L1_system_results_t          *psys,
	VL53L1_core_results_t            *pcore,
	VL53L1_range_results_t           *presults)
{
 800abec:	b480      	push	{r7}
 800abee:	b089      	sub	sp, #36	; 0x24
 800abf0:	af00      	add	r7, sp, #0
 800abf2:	60f8      	str	r0, [r7, #12]
 800abf4:	60b9      	str	r1, [r7, #8]
 800abf6:	607a      	str	r2, [r7, #4]
 800abf8:	603b      	str	r3, [r7, #0]
	uint8_t  i = 0;
 800abfa:	2300      	movs	r3, #0
 800abfc:	77fb      	strb	r3, [r7, #31]

	VL53L1_range_data_t *pdata;
	int32_t range_mm = 0;
 800abfe:	2300      	movs	r3, #0
 800ac00:	613b      	str	r3, [r7, #16]
	uint32_t tmpu32 = 0;
 800ac02:	2300      	movs	r3, #0
 800ac04:	617b      	str	r3, [r7, #20]

	LOG_FUNCTION_START("");

	/* copy results */

	presults->stream_count    = psys->result__stream_count;
 800ac06:	68bb      	ldr	r3, [r7, #8]
 800ac08:	78da      	ldrb	r2, [r3, #3]
 800ac0a:	683b      	ldr	r3, [r7, #0]
 800ac0c:	709a      	strb	r2, [r3, #2]

	pdata = &(presults->data[0]);
 800ac0e:	683b      	ldr	r3, [r7, #0]
 800ac10:	3304      	adds	r3, #4
 800ac12:	61bb      	str	r3, [r7, #24]

	for (i = 0 ; i < 2 ; i++) {
 800ac14:	2300      	movs	r3, #0
 800ac16:	77fb      	strb	r3, [r7, #31]
 800ac18:	e0d0      	b.n	800adbc <VL53L1_copy_sys_and_core_results_to_range_results+0x1d0>

		pdata->range_id     = i;
 800ac1a:	69bb      	ldr	r3, [r7, #24]
 800ac1c:	7ffa      	ldrb	r2, [r7, #31]
 800ac1e:	701a      	strb	r2, [r3, #0]
		pdata->time_stamp   = 0;
 800ac20:	69bb      	ldr	r3, [r7, #24]
 800ac22:	2200      	movs	r2, #0
 800ac24:	605a      	str	r2, [r3, #4]

		if ((psys->result__stream_count == 0) &&
 800ac26:	68bb      	ldr	r3, [r7, #8]
 800ac28:	78db      	ldrb	r3, [r3, #3]
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d10a      	bne.n	800ac44 <VL53L1_copy_sys_and_core_results_to_range_results+0x58>
			((psys->result__range_status & VL53L1_RANGE_STATUS__RANGE_STATUS_MASK) ==
 800ac2e:	68bb      	ldr	r3, [r7, #8]
 800ac30:	785b      	ldrb	r3, [r3, #1]
 800ac32:	f003 031f 	and.w	r3, r3, #31
		if ((psys->result__stream_count == 0) &&
 800ac36:	2b09      	cmp	r3, #9
 800ac38:	d104      	bne.n	800ac44 <VL53L1_copy_sys_and_core_results_to_range_results+0x58>
			VL53L1_DEVICEERROR_RANGECOMPLETE)) {
			pdata->range_status = VL53L1_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK;
 800ac3a:	69bb      	ldr	r3, [r7, #24]
 800ac3c:	2213      	movs	r2, #19
 800ac3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ac42:	e007      	b.n	800ac54 <VL53L1_copy_sys_and_core_results_to_range_results+0x68>
		} else {
			pdata->range_status =
					psys->result__range_status & VL53L1_RANGE_STATUS__RANGE_STATUS_MASK;
 800ac44:	68bb      	ldr	r3, [r7, #8]
 800ac46:	785b      	ldrb	r3, [r3, #1]
 800ac48:	f003 031f 	and.w	r3, r3, #31
 800ac4c:	b2da      	uxtb	r2, r3
			pdata->range_status =
 800ac4e:	69bb      	ldr	r3, [r7, #24]
 800ac50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
		}

		switch (i) {
 800ac54:	7ffb      	ldrb	r3, [r7, #31]
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d002      	beq.n	800ac60 <VL53L1_copy_sys_and_core_results_to_range_results+0x74>
 800ac5a:	2b01      	cmp	r3, #1
 800ac5c:	d05d      	beq.n	800ad1a <VL53L1_copy_sys_and_core_results_to_range_results+0x12e>
 800ac5e:	e0a7      	b.n	800adb0 <VL53L1_copy_sys_and_core_results_to_range_results+0x1c4>

		case 0:

			if (psys->result__report_status == VL53L1_DEVICEREPORTSTATUS_MM1)
 800ac60:	68bb      	ldr	r3, [r7, #8]
 800ac62:	789b      	ldrb	r3, [r3, #2]
 800ac64:	2b07      	cmp	r3, #7
 800ac66:	d104      	bne.n	800ac72 <VL53L1_copy_sys_and_core_results_to_range_results+0x86>
				pdata->actual_effective_spads =
					psys->result__mm_inner_actual_effective_spads_sd0;
 800ac68:	68bb      	ldr	r3, [r7, #8]
 800ac6a:	8a5a      	ldrh	r2, [r3, #18]
				pdata->actual_effective_spads =
 800ac6c:	69bb      	ldr	r3, [r7, #24]
 800ac6e:	821a      	strh	r2, [r3, #16]
 800ac70:	e00c      	b.n	800ac8c <VL53L1_copy_sys_and_core_results_to_range_results+0xa0>
			else if (psys->result__report_status == VL53L1_DEVICEREPORTSTATUS_MM2)
 800ac72:	68bb      	ldr	r3, [r7, #8]
 800ac74:	789b      	ldrb	r3, [r3, #2]
 800ac76:	2b08      	cmp	r3, #8
 800ac78:	d104      	bne.n	800ac84 <VL53L1_copy_sys_and_core_results_to_range_results+0x98>
				pdata->actual_effective_spads =
						psys->result__mm_outer_actual_effective_spads_sd0;
 800ac7a:	68bb      	ldr	r3, [r7, #8]
 800ac7c:	8a9a      	ldrh	r2, [r3, #20]
				pdata->actual_effective_spads =
 800ac7e:	69bb      	ldr	r3, [r7, #24]
 800ac80:	821a      	strh	r2, [r3, #16]
 800ac82:	e003      	b.n	800ac8c <VL53L1_copy_sys_and_core_results_to_range_results+0xa0>
			else
				pdata->actual_effective_spads =
					psys->result__dss_actual_effective_spads_sd0;
 800ac84:	68bb      	ldr	r3, [r7, #8]
 800ac86:	889a      	ldrh	r2, [r3, #4]
				pdata->actual_effective_spads =
 800ac88:	69bb      	ldr	r3, [r7, #24]
 800ac8a:	821a      	strh	r2, [r3, #16]

			pdata->peak_signal_count_rate_mcps =
				psys->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0;
 800ac8c:	68bb      	ldr	r3, [r7, #8]
 800ac8e:	8a1a      	ldrh	r2, [r3, #16]
			pdata->peak_signal_count_rate_mcps =
 800ac90:	69bb      	ldr	r3, [r7, #24]
 800ac92:	859a      	strh	r2, [r3, #44]	; 0x2c
			pdata->avg_signal_count_rate_mcps =
				psys->result__avg_signal_count_rate_mcps_sd0;
 800ac94:	68bb      	ldr	r3, [r7, #8]
 800ac96:	8ada      	ldrh	r2, [r3, #22]
			pdata->avg_signal_count_rate_mcps =
 800ac98:	69bb      	ldr	r3, [r7, #24]
 800ac9a:	85da      	strh	r2, [r3, #46]	; 0x2e
			pdata->ambient_count_rate_mcps =
				psys->result__ambient_count_rate_mcps_sd0;
 800ac9c:	68bb      	ldr	r3, [r7, #8]
 800ac9e:	891a      	ldrh	r2, [r3, #8]
			pdata->ambient_count_rate_mcps =
 800aca0:	69bb      	ldr	r3, [r7, #24]
 800aca2:	861a      	strh	r2, [r3, #48]	; 0x30

			/* Start Patch_SigmaEstimateAccuracyImprovement */

			/* shift up sigma estimate to 7 bit fractional and clip to 9 bit int */
			tmpu32 = ((uint32_t)psys->result__sigma_sd0 << 5);
 800aca4:	68bb      	ldr	r3, [r7, #8]
 800aca6:	895b      	ldrh	r3, [r3, #10]
 800aca8:	015b      	lsls	r3, r3, #5
 800acaa:	617b      	str	r3, [r7, #20]
			if (tmpu32 > 0xFFFF) {
 800acac:	697b      	ldr	r3, [r7, #20]
 800acae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800acb2:	d302      	bcc.n	800acba <VL53L1_copy_sys_and_core_results_to_range_results+0xce>
				tmpu32 = 0xFFFF;
 800acb4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800acb8:	617b      	str	r3, [r7, #20]
			}
			pdata->sigma_mm = (uint16_t)tmpu32;
 800acba:	697b      	ldr	r3, [r7, #20]
 800acbc:	b29a      	uxth	r2, r3
 800acbe:	69bb      	ldr	r3, [r7, #24]
 800acc0:	871a      	strh	r2, [r3, #56]	; 0x38

			/* End Patch_SigmaEstimateAccuracyImprovement */

			pdata->median_phase =
				psys->result__phase_sd0;
 800acc2:	68bb      	ldr	r3, [r7, #8]
 800acc4:	899a      	ldrh	r2, [r3, #12]
			pdata->median_phase =
 800acc6:	69bb      	ldr	r3, [r7, #24]
 800acc8:	875a      	strh	r2, [r3, #58]	; 0x3a

			range_mm =
				(int32_t)psys->result__final_crosstalk_corrected_range_mm_sd0;
 800acca:	68bb      	ldr	r3, [r7, #8]
 800accc:	89db      	ldrh	r3, [r3, #14]
			range_mm =
 800acce:	613b      	str	r3, [r7, #16]

			/* apply correction gain */
			range_mm *= gain_factor;
 800acd0:	693b      	ldr	r3, [r7, #16]
 800acd2:	68fa      	ldr	r2, [r7, #12]
 800acd4:	fb02 f303 	mul.w	r3, r2, r3
 800acd8:	613b      	str	r3, [r7, #16]
			range_mm += 0x0400;
 800acda:	693b      	ldr	r3, [r7, #16]
 800acdc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ace0:	613b      	str	r3, [r7, #16]
			range_mm /= 0x0800;
 800ace2:	693b      	ldr	r3, [r7, #16]
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	da01      	bge.n	800acec <VL53L1_copy_sys_and_core_results_to_range_results+0x100>
 800ace8:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 800acec:	12db      	asrs	r3, r3, #11
 800acee:	613b      	str	r3, [r7, #16]

			pdata->median_range_mm = (int16_t)range_mm;
 800acf0:	693b      	ldr	r3, [r7, #16]
 800acf2:	b21a      	sxth	r2, r3
 800acf4:	69bb      	ldr	r3, [r7, #24]
 800acf6:	879a      	strh	r2, [r3, #60]	; 0x3c

			pdata->ranging_total_events =
				pcore->result_core__ranging_total_events_sd0;
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	685a      	ldr	r2, [r3, #4]
			pdata->ranging_total_events =
 800acfc:	69bb      	ldr	r3, [r7, #24]
 800acfe:	625a      	str	r2, [r3, #36]	; 0x24
			pdata->signal_total_events =
				pcore->result_core__signal_total_events_sd0;
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	689a      	ldr	r2, [r3, #8]
			pdata->signal_total_events =
 800ad04:	69bb      	ldr	r3, [r7, #24]
 800ad06:	629a      	str	r2, [r3, #40]	; 0x28
			pdata->total_periods_elapsed =
				pcore->result_core__total_periods_elapsed_sd0;
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	68da      	ldr	r2, [r3, #12]
			pdata->total_periods_elapsed =
 800ad0c:	69bb      	ldr	r3, [r7, #24]
 800ad0e:	615a      	str	r2, [r3, #20]
			pdata->ambient_window_events =
				pcore->result_core__ambient_window_events_sd0;
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	681a      	ldr	r2, [r3, #0]
			pdata->ambient_window_events =
 800ad14:	69bb      	ldr	r3, [r7, #24]
 800ad16:	621a      	str	r2, [r3, #32]

			break;
 800ad18:	e04a      	b.n	800adb0 <VL53L1_copy_sys_and_core_results_to_range_results+0x1c4>
		case 1:

			pdata->actual_effective_spads =
				psys->result__dss_actual_effective_spads_sd1;
 800ad1a:	68bb      	ldr	r3, [r7, #8]
 800ad1c:	8b1a      	ldrh	r2, [r3, #24]
			pdata->actual_effective_spads =
 800ad1e:	69bb      	ldr	r3, [r7, #24]
 800ad20:	821a      	strh	r2, [r3, #16]
			pdata->peak_signal_count_rate_mcps =
				psys->result__peak_signal_count_rate_mcps_sd1;
 800ad22:	68bb      	ldr	r3, [r7, #8]
 800ad24:	8b5a      	ldrh	r2, [r3, #26]
			pdata->peak_signal_count_rate_mcps =
 800ad26:	69bb      	ldr	r3, [r7, #24]
 800ad28:	859a      	strh	r2, [r3, #44]	; 0x2c
			pdata->avg_signal_count_rate_mcps =
 800ad2a:	69bb      	ldr	r3, [r7, #24]
 800ad2c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ad30:	85da      	strh	r2, [r3, #46]	; 0x2e
				0xFFFF;
			pdata->ambient_count_rate_mcps =
				psys->result__ambient_count_rate_mcps_sd1;
 800ad32:	68bb      	ldr	r3, [r7, #8]
 800ad34:	8b9a      	ldrh	r2, [r3, #28]
			pdata->ambient_count_rate_mcps =
 800ad36:	69bb      	ldr	r3, [r7, #24]
 800ad38:	861a      	strh	r2, [r3, #48]	; 0x30

			/* Start Patch_SigmaEstimateAccuracyImprovement */

			/* shift up sigma estimate to 7 bit fractional and clip to 9 bit int */
			tmpu32 = ((uint32_t)psys->result__sigma_sd1 << 5);
 800ad3a:	68bb      	ldr	r3, [r7, #8]
 800ad3c:	8bdb      	ldrh	r3, [r3, #30]
 800ad3e:	015b      	lsls	r3, r3, #5
 800ad40:	617b      	str	r3, [r7, #20]
			if (tmpu32 > 0xFFFF) {
 800ad42:	697b      	ldr	r3, [r7, #20]
 800ad44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ad48:	d302      	bcc.n	800ad50 <VL53L1_copy_sys_and_core_results_to_range_results+0x164>
				tmpu32 = 0xFFFF;
 800ad4a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ad4e:	617b      	str	r3, [r7, #20]
			}
			pdata->sigma_mm = (uint16_t)tmpu32;
 800ad50:	697b      	ldr	r3, [r7, #20]
 800ad52:	b29a      	uxth	r2, r3
 800ad54:	69bb      	ldr	r3, [r7, #24]
 800ad56:	871a      	strh	r2, [r3, #56]	; 0x38

			/* End Patch_SigmaEstimateAccuracyImprovement */

			pdata->median_phase =
				psys->result__phase_sd1;
 800ad58:	68bb      	ldr	r3, [r7, #8]
 800ad5a:	8c1a      	ldrh	r2, [r3, #32]
			pdata->median_phase =
 800ad5c:	69bb      	ldr	r3, [r7, #24]
 800ad5e:	875a      	strh	r2, [r3, #58]	; 0x3a

			range_mm =
				(int32_t)psys->result__final_crosstalk_corrected_range_mm_sd1;
 800ad60:	68bb      	ldr	r3, [r7, #8]
 800ad62:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
			range_mm =
 800ad64:	613b      	str	r3, [r7, #16]

			/* apply correction gain */
			range_mm *= gain_factor;
 800ad66:	693b      	ldr	r3, [r7, #16]
 800ad68:	68fa      	ldr	r2, [r7, #12]
 800ad6a:	fb02 f303 	mul.w	r3, r2, r3
 800ad6e:	613b      	str	r3, [r7, #16]
			range_mm += 0x0400;
 800ad70:	693b      	ldr	r3, [r7, #16]
 800ad72:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ad76:	613b      	str	r3, [r7, #16]
			range_mm /= 0x0800;
 800ad78:	693b      	ldr	r3, [r7, #16]
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	da01      	bge.n	800ad82 <VL53L1_copy_sys_and_core_results_to_range_results+0x196>
 800ad7e:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 800ad82:	12db      	asrs	r3, r3, #11
 800ad84:	613b      	str	r3, [r7, #16]

			pdata->median_range_mm = (int16_t)range_mm;
 800ad86:	693b      	ldr	r3, [r7, #16]
 800ad88:	b21a      	sxth	r2, r3
 800ad8a:	69bb      	ldr	r3, [r7, #24]
 800ad8c:	879a      	strh	r2, [r3, #60]	; 0x3c

			pdata->ranging_total_events =
				pcore->result_core__ranging_total_events_sd1;
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	695a      	ldr	r2, [r3, #20]
			pdata->ranging_total_events =
 800ad92:	69bb      	ldr	r3, [r7, #24]
 800ad94:	625a      	str	r2, [r3, #36]	; 0x24
			pdata->signal_total_events =
				pcore->result_core__signal_total_events_sd1;
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	699a      	ldr	r2, [r3, #24]
			pdata->signal_total_events =
 800ad9a:	69bb      	ldr	r3, [r7, #24]
 800ad9c:	629a      	str	r2, [r3, #40]	; 0x28
			pdata->total_periods_elapsed  =
				pcore->result_core__total_periods_elapsed_sd1;
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	69da      	ldr	r2, [r3, #28]
			pdata->total_periods_elapsed  =
 800ada2:	69bb      	ldr	r3, [r7, #24]
 800ada4:	615a      	str	r2, [r3, #20]
			pdata->ambient_window_events =
				pcore->result_core__ambient_window_events_sd1;
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	691a      	ldr	r2, [r3, #16]
			pdata->ambient_window_events =
 800adaa:	69bb      	ldr	r3, [r7, #24]
 800adac:	621a      	str	r2, [r3, #32]

			break;
 800adae:	bf00      	nop
		}

		pdata++;
 800adb0:	69bb      	ldr	r3, [r7, #24]
 800adb2:	3340      	adds	r3, #64	; 0x40
 800adb4:	61bb      	str	r3, [r7, #24]
	for (i = 0 ; i < 2 ; i++) {
 800adb6:	7ffb      	ldrb	r3, [r7, #31]
 800adb8:	3301      	adds	r3, #1
 800adba:	77fb      	strb	r3, [r7, #31]
 800adbc:	7ffb      	ldrb	r3, [r7, #31]
 800adbe:	2b01      	cmp	r3, #1
 800adc0:	f67f af2b 	bls.w	800ac1a <VL53L1_copy_sys_and_core_results_to_range_results+0x2e>

	/* Update Global Device Status for results
	 * - Default to no update
	 */

	presults->device_status = VL53L1_DEVICEERROR_NOUPDATE;
 800adc4:	683b      	ldr	r3, [r7, #0]
 800adc6:	2200      	movs	r2, #0
 800adc8:	70da      	strb	r2, [r3, #3]
	 * - If device error condition, update device status
	 * - Remove device status from range status output this should
	 * only contain information relating to range data
	 */

	switch (psys->result__range_status &
 800adca:	68bb      	ldr	r3, [r7, #8]
 800adcc:	785b      	ldrb	r3, [r3, #1]
 800adce:	f003 031f 	and.w	r3, r3, #31
 800add2:	2b11      	cmp	r3, #17
 800add4:	bf8c      	ite	hi
 800add6:	2201      	movhi	r2, #1
 800add8:	2200      	movls	r2, #0
 800adda:	b2d2      	uxtb	r2, r2
 800addc:	2a00      	cmp	r2, #0
 800adde:	d116      	bne.n	800ae0e <VL53L1_copy_sys_and_core_results_to_range_results+0x222>
 800ade0:	2201      	movs	r2, #1
 800ade2:	409a      	lsls	r2, r3
 800ade4:	4b0d      	ldr	r3, [pc, #52]	; (800ae1c <VL53L1_copy_sys_and_core_results_to_range_results+0x230>)
 800ade6:	4013      	ands	r3, r2
 800ade8:	2b00      	cmp	r3, #0
 800adea:	bf14      	ite	ne
 800adec:	2301      	movne	r3, #1
 800adee:	2300      	moveq	r3, #0
 800adf0:	b2db      	uxtb	r3, r3
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d00b      	beq.n	800ae0e <VL53L1_copy_sys_and_core_results_to_range_results+0x222>
	case VL53L1_DEVICEERROR_VCSELWATCHDOGTESTFAILURE:
	case VL53L1_DEVICEERROR_NOVHVVALUEFOUND:
	case VL53L1_DEVICEERROR_USERROICLIP:
	case VL53L1_DEVICEERROR_MULTCLIPFAIL:

		presults->device_status = (psys->result__range_status &
 800adf6:	68bb      	ldr	r3, [r7, #8]
 800adf8:	785b      	ldrb	r3, [r3, #1]
 800adfa:	f003 031f 	and.w	r3, r3, #31
 800adfe:	b2da      	uxtb	r2, r3
 800ae00:	683b      	ldr	r3, [r7, #0]
 800ae02:	70da      	strb	r2, [r3, #3]
				VL53L1_RANGE_STATUS__RANGE_STATUS_MASK);

		presults->data[0].range_status = VL53L1_DEVICEERROR_NOUPDATE;
 800ae04:	683b      	ldr	r3, [r7, #0]
 800ae06:	2200      	movs	r2, #0
 800ae08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	break;
 800ae0c:	bf00      	nop

	}

	LOG_FUNCTION_END(0);
}
 800ae0e:	bf00      	nop
 800ae10:	3724      	adds	r7, #36	; 0x24
 800ae12:	46bd      	mov	sp, r7
 800ae14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae18:	4770      	bx	lr
 800ae1a:	bf00      	nop
 800ae1c:	0002200e 	.word	0x0002200e

0800ae20 <VL53L1_get_tuning_parm>:

VL53L1_Error VL53L1_get_tuning_parm(
	VL53L1_DEV                     Dev,
	VL53L1_TuningParms             tuning_parm_key,
	int32_t                       *ptuning_parm_value)
{
 800ae20:	b480      	push	{r7}
 800ae22:	b087      	sub	sp, #28
 800ae24:	af00      	add	r7, sp, #0
 800ae26:	60f8      	str	r0, [r7, #12]
 800ae28:	460b      	mov	r3, r1
 800ae2a:	607a      	str	r2, [r7, #4]
 800ae2c:	817b      	strh	r3, [r7, #10]
	 * Gets the requested tuning parm value
	 * - Large case statement for returns
	 * - if key does not match, INVALID parm error returned
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800ae2e:	2300      	movs	r3, #0
 800ae30:	75fb      	strb	r3, [r7, #23]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");

	switch (tuning_parm_key) {
 800ae36:	897b      	ldrh	r3, [r7, #10]
 800ae38:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 800ae3c:	2b38      	cmp	r3, #56	; 0x38
 800ae3e:	f200 8204 	bhi.w	800b24a <VL53L1_get_tuning_parm+0x42a>
 800ae42:	a201      	add	r2, pc, #4	; (adr r2, 800ae48 <VL53L1_get_tuning_parm+0x28>)
 800ae44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae48:	0800af2d 	.word	0x0800af2d
 800ae4c:	0800af3b 	.word	0x0800af3b
 800ae50:	0800af49 	.word	0x0800af49
 800ae54:	0800af57 	.word	0x0800af57
 800ae58:	0800af65 	.word	0x0800af65
 800ae5c:	0800af73 	.word	0x0800af73
 800ae60:	0800af81 	.word	0x0800af81
 800ae64:	0800af8f 	.word	0x0800af8f
 800ae68:	0800af9d 	.word	0x0800af9d
 800ae6c:	0800afab 	.word	0x0800afab
 800ae70:	0800afb9 	.word	0x0800afb9
 800ae74:	0800afc7 	.word	0x0800afc7
 800ae78:	0800afd5 	.word	0x0800afd5
 800ae7c:	0800afe3 	.word	0x0800afe3
 800ae80:	0800aff1 	.word	0x0800aff1
 800ae84:	0800afff 	.word	0x0800afff
 800ae88:	0800b00d 	.word	0x0800b00d
 800ae8c:	0800b01b 	.word	0x0800b01b
 800ae90:	0800b029 	.word	0x0800b029
 800ae94:	0800b037 	.word	0x0800b037
 800ae98:	0800b045 	.word	0x0800b045
 800ae9c:	0800b053 	.word	0x0800b053
 800aea0:	0800b061 	.word	0x0800b061
 800aea4:	0800b06f 	.word	0x0800b06f
 800aea8:	0800b07d 	.word	0x0800b07d
 800aeac:	0800b08b 	.word	0x0800b08b
 800aeb0:	0800b099 	.word	0x0800b099
 800aeb4:	0800b0a7 	.word	0x0800b0a7
 800aeb8:	0800b0b5 	.word	0x0800b0b5
 800aebc:	0800b0c3 	.word	0x0800b0c3
 800aec0:	0800b0d1 	.word	0x0800b0d1
 800aec4:	0800b0df 	.word	0x0800b0df
 800aec8:	0800b0ed 	.word	0x0800b0ed
 800aecc:	0800b0fb 	.word	0x0800b0fb
 800aed0:	0800b109 	.word	0x0800b109
 800aed4:	0800b117 	.word	0x0800b117
 800aed8:	0800b125 	.word	0x0800b125
 800aedc:	0800b133 	.word	0x0800b133
 800aee0:	0800b141 	.word	0x0800b141
 800aee4:	0800b14f 	.word	0x0800b14f
 800aee8:	0800b15d 	.word	0x0800b15d
 800aeec:	0800b16b 	.word	0x0800b16b
 800aef0:	0800b179 	.word	0x0800b179
 800aef4:	0800b187 	.word	0x0800b187
 800aef8:	0800b195 	.word	0x0800b195
 800aefc:	0800b1a3 	.word	0x0800b1a3
 800af00:	0800b1b1 	.word	0x0800b1b1
 800af04:	0800b1bf 	.word	0x0800b1bf
 800af08:	0800b1cd 	.word	0x0800b1cd
 800af0c:	0800b1db 	.word	0x0800b1db
 800af10:	0800b1e9 	.word	0x0800b1e9
 800af14:	0800b1f7 	.word	0x0800b1f7
 800af18:	0800b205 	.word	0x0800b205
 800af1c:	0800b213 	.word	0x0800b213
 800af20:	0800b221 	.word	0x0800b221
 800af24:	0800b22f 	.word	0x0800b22f
 800af28:	0800b23d 	.word	0x0800b23d

	case VL53L1_TUNINGPARM_VERSION:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_tuning_parm_version;
 800af2c:	693b      	ldr	r3, [r7, #16]
 800af2e:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	; 0xa4
 800af32:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	601a      	str	r2, [r3, #0]
	break;
 800af38:	e18e      	b.n	800b258 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_KEY_TABLE_VERSION:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_tuning_parm_key_table_version;
 800af3a:	693b      	ldr	r3, [r7, #16]
 800af3c:	f8b3 30a6 	ldrh.w	r3, [r3, #166]	; 0xa6
 800af40:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	601a      	str	r2, [r3, #0]
	break;
 800af46:	e187      	b.n	800b258 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LLD_VERSION:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_tuning_parm_lld_version;
 800af48:	693b      	ldr	r3, [r7, #16]
 800af4a:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 800af4e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	601a      	str	r2, [r3, #0]
	break;
 800af54:	e180      	b.n	800b258 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_CONSISTENCY_LITE_PHASE_TOLERANCE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_consistency_lite_phase_tolerance;
 800af56:	693b      	ldr	r3, [r7, #16]
 800af58:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 800af5c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	601a      	str	r2, [r3, #0]
	break;
 800af62:	e179      	b.n	800b258 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_PHASECAL_TARGET:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_phasecal_target;
 800af64:	693b      	ldr	r3, [r7, #16]
 800af66:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800af6a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	601a      	str	r2, [r3, #0]
	break;
 800af70:	e172      	b.n	800b258 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_CAL_REPEAT_RATE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_cal_repeat_rate;
 800af72:	693b      	ldr	r3, [r7, #16]
 800af74:	f8b3 30b2 	ldrh.w	r3, [r3, #178]	; 0xb2
 800af78:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	601a      	str	r2, [r3, #0]
	break;
 800af7e:	e16b      	b.n	800b258 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_RANGING_GAIN_FACTOR:
		*ptuning_parm_value =
				(int32_t)pdev->gain_cal.standard_ranging_gain_factor;
 800af80:	693b      	ldr	r3, [r7, #16]
 800af82:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 800af86:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	601a      	str	r2, [r3, #0]
	break;
 800af8c:	e164      	b.n	800b258 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_MIN_CLIP_MM:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_min_clip;
 800af8e:	693b      	ldr	r3, [r7, #16]
 800af90:	f893 30b4 	ldrb.w	r3, [r3, #180]	; 0xb4
 800af94:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	601a      	str	r2, [r3, #0]
	break;
 800af9a:	e15d      	b.n	800b258 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_LONG_SIGMA_THRESH_MM:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_long_sigma_thresh_mm;
 800af9c:	693b      	ldr	r3, [r7, #16]
 800af9e:	f8b3 30b6 	ldrh.w	r3, [r3, #182]	; 0xb6
 800afa2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	601a      	str	r2, [r3, #0]
	break;
 800afa8:	e156      	b.n	800b258 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_MED_SIGMA_THRESH_MM:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_med_sigma_thresh_mm;
 800afaa:	693b      	ldr	r3, [r7, #16]
 800afac:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	; 0xb8
 800afb0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	601a      	str	r2, [r3, #0]
	break;
 800afb6:	e14f      	b.n	800b258 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_SHORT_SIGMA_THRESH_MM:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_short_sigma_thresh_mm;
 800afb8:	693b      	ldr	r3, [r7, #16]
 800afba:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	; 0xba
 800afbe:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	601a      	str	r2, [r3, #0]
	break;
 800afc4:	e148      	b.n	800b258 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_LONG_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_long_min_count_rate_rtn_mcps;
 800afc6:	693b      	ldr	r3, [r7, #16]
 800afc8:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	; 0xbc
 800afcc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	601a      	str	r2, [r3, #0]
	break;
 800afd2:	e141      	b.n	800b258 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_MED_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_med_min_count_rate_rtn_mcps;
 800afd4:	693b      	ldr	r3, [r7, #16]
 800afd6:	f8b3 30be 	ldrh.w	r3, [r3, #190]	; 0xbe
 800afda:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	601a      	str	r2, [r3, #0]
	break;
 800afe0:	e13a      	b.n	800b258 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_SHORT_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_short_min_count_rate_rtn_mcps;
 800afe2:	693b      	ldr	r3, [r7, #16]
 800afe4:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	; 0xc0
 800afe8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	601a      	str	r2, [r3, #0]
	break;
 800afee:	e133      	b.n	800b258 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_SIGMA_EST_PULSE_WIDTH:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_sigma_est_pulse_width_ns;
 800aff0:	693b      	ldr	r3, [r7, #16]
 800aff2:	f893 30c2 	ldrb.w	r3, [r3, #194]	; 0xc2
 800aff6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	601a      	str	r2, [r3, #0]
	break;
 800affc:	e12c      	b.n	800b258 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_SIGMA_EST_AMB_WIDTH_NS:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_sigma_est_amb_width_ns;
 800affe:	693b      	ldr	r3, [r7, #16]
 800b000:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
 800b004:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	601a      	str	r2, [r3, #0]
	break;
 800b00a:	e125      	b.n	800b258 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_SIGMA_REF_MM:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_sigma_ref_mm;
 800b00c:	693b      	ldr	r3, [r7, #16]
 800b00e:	f893 30c4 	ldrb.w	r3, [r3, #196]	; 0xc4
 800b012:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	601a      	str	r2, [r3, #0]
	break;
 800b018:	e11e      	b.n	800b258 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_RIT_MULT:
		*ptuning_parm_value =
				(int32_t)pdev->xtalk_cfg.crosstalk_range_ignore_threshold_mult;
 800b01a:	693b      	ldr	r3, [r7, #16]
 800b01c:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 800b020:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	601a      	str	r2, [r3, #0]
	break;
 800b026:	e117      	b.n	800b258 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_SEED_CONFIG:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_seed_cfg ;
 800b028:	693b      	ldr	r3, [r7, #16]
 800b02a:	f893 30c5 	ldrb.w	r3, [r3, #197]	; 0xc5
 800b02e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	601a      	str	r2, [r3, #0]
	break;
 800b034:	e110      	b.n	800b258 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_QUANTIFIER:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_quantifier;
 800b036:	693b      	ldr	r3, [r7, #16]
 800b038:	f893 30c7 	ldrb.w	r3, [r3, #199]	; 0xc7
 800b03c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	601a      	str	r2, [r3, #0]
	break;
 800b042:	e109      	b.n	800b258 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_FIRST_ORDER_SELECT:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_first_order_select;
 800b044:	693b      	ldr	r3, [r7, #16]
 800b046:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
 800b04a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	601a      	str	r2, [r3, #0]
	break;
 800b050:	e102      	b.n	800b258 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_XTALK_MARGIN_KCPS:
		*ptuning_parm_value =
				(int32_t)pdev->xtalk_cfg.lite_mode_crosstalk_margin_kcps;
 800b052:	693b      	ldr	r3, [r7, #16]
 800b054:	f9b3 313e 	ldrsh.w	r3, [r3, #318]	; 0x13e
 800b058:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	601a      	str	r2, [r3, #0]
	break;
 800b05e:	e0fb      	b.n	800b258 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_LONG_RANGE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_long;
 800b060:	693b      	ldr	r3, [r7, #16]
 800b062:	f893 30aa 	ldrb.w	r3, [r3, #170]	; 0xaa
 800b066:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	601a      	str	r2, [r3, #0]
	break;
 800b06c:	e0f4      	b.n	800b258 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_MED_RANGE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_med;
 800b06e:	693b      	ldr	r3, [r7, #16]
 800b070:	f893 30ab 	ldrb.w	r3, [r3, #171]	; 0xab
 800b074:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	601a      	str	r2, [r3, #0]
	break;
 800b07a:	e0ed      	b.n	800b258 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_SHORT_RANGE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_short;
 800b07c:	693b      	ldr	r3, [r7, #16]
 800b07e:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
 800b082:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	601a      	str	r2, [r3, #0]
	break;
 800b088:	e0e6      	b.n	800b258 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_LONG_RANGE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_long;
 800b08a:	693b      	ldr	r3, [r7, #16]
 800b08c:	f893 30ad 	ldrb.w	r3, [r3, #173]	; 0xad
 800b090:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	601a      	str	r2, [r3, #0]
	break;
 800b096:	e0df      	b.n	800b258 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_MED_RANGE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_med;
 800b098:	693b      	ldr	r3, [r7, #16]
 800b09a:	f893 30ae 	ldrb.w	r3, [r3, #174]	; 0xae
 800b09e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	601a      	str	r2, [r3, #0]
	break;
 800b0a4:	e0d8      	b.n	800b258 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_SHORT_RANGE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_short;
 800b0a6:	693b      	ldr	r3, [r7, #16]
 800b0a8:	f893 30af 	ldrb.w	r3, [r3, #175]	; 0xaf
 800b0ac:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	601a      	str	r2, [r3, #0]
	break;
 800b0b2:	e0d1      	b.n	800b258 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_TIMED_SEED_CONFIG:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_timed_seed_cfg;
 800b0b4:	693b      	ldr	r3, [r7, #16]
 800b0b6:	f893 30c6 	ldrb.w	r3, [r3, #198]	; 0xc6
 800b0ba:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	601a      	str	r2, [r3, #0]
	break;
 800b0c0:	e0ca      	b.n	800b258 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_VHV_LOOPBOUND:
		*ptuning_parm_value =
				(int32_t)pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound;
 800b0c2:	693b      	ldr	r3, [r7, #16]
 800b0c4:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 800b0c8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	601a      	str	r2, [r3, #0]
	break;
 800b0ce:	e0c3      	b.n	800b258 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_REFSPADCHAR_DEVICE_TEST_MODE:
		*ptuning_parm_value =
				(int32_t)pdev->refspadchar.device_test_mode;
 800b0d0:	693b      	ldr	r3, [r7, #16]
 800b0d2:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 800b0d6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	601a      	str	r2, [r3, #0]
	break;
 800b0dc:	e0bc      	b.n	800b258 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_REFSPADCHAR_VCSEL_PERIOD:
		*ptuning_parm_value =
				(int32_t)pdev->refspadchar.vcsel_period;
 800b0de:	693b      	ldr	r3, [r7, #16]
 800b0e0:	f893 3111 	ldrb.w	r3, [r3, #273]	; 0x111
 800b0e4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	601a      	str	r2, [r3, #0]
	break;
 800b0ea:	e0b5      	b.n	800b258 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_REFSPADCHAR_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->refspadchar.timeout_us;
 800b0ec:	693b      	ldr	r3, [r7, #16]
 800b0ee:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800b0f2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	601a      	str	r2, [r3, #0]
	break;
 800b0f8:	e0ae      	b.n	800b258 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_REFSPADCHAR_TARGET_COUNT_RATE_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->refspadchar.target_count_rate_mcps;
 800b0fa:	693b      	ldr	r3, [r7, #16]
 800b0fc:	f8b3 3118 	ldrh.w	r3, [r3, #280]	; 0x118
 800b100:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	601a      	str	r2, [r3, #0]
	break;
 800b106:	e0a7      	b.n	800b258 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_REFSPADCHAR_MIN_COUNTRATE_LIMIT_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->refspadchar.min_count_rate_limit_mcps;
 800b108:	693b      	ldr	r3, [r7, #16]
 800b10a:	f8b3 311a 	ldrh.w	r3, [r3, #282]	; 0x11a
 800b10e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	601a      	str	r2, [r3, #0]
	break;
 800b114:	e0a0      	b.n	800b258 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_REFSPADCHAR_MAX_COUNTRATE_LIMIT_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->refspadchar.max_count_rate_limit_mcps;
 800b116:	693b      	ldr	r3, [r7, #16]
 800b118:	f8b3 311c 	ldrh.w	r3, [r3, #284]	; 0x11c
 800b11c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	601a      	str	r2, [r3, #0]
	break;
 800b122:	e099      	b.n	800b258 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_OFFSET_CAL_DSS_RATE_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->offsetcal_cfg.dss_config__target_total_rate_mcps;;
 800b124:	693b      	ldr	r3, [r7, #16]
 800b126:	f8b3 3144 	ldrh.w	r3, [r3, #324]	; 0x144
 800b12a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	601a      	str	r2, [r3, #0]
	break;
 800b130:	e092      	b.n	800b258 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_OFFSET_CAL_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->offsetcal_cfg.phasecal_config_timeout_us;
 800b132:	693b      	ldr	r3, [r7, #16]
 800b134:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800b138:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	601a      	str	r2, [r3, #0]
	break;
 800b13e:	e08b      	b.n	800b258 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_OFFSET_CAL_MM_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->offsetcal_cfg.mm_config_timeout_us;
 800b140:	693b      	ldr	r3, [r7, #16]
 800b142:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 800b146:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	601a      	str	r2, [r3, #0]
	break;
 800b14c:	e084      	b.n	800b258 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_OFFSET_CAL_RANGE_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->offsetcal_cfg.range_config_timeout_us;
 800b14e:	693b      	ldr	r3, [r7, #16]
 800b150:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 800b154:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	601a      	str	r2, [r3, #0]
	break;
 800b15a:	e07d      	b.n	800b258 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_OFFSET_CAL_PRE_SAMPLES:
		*ptuning_parm_value =
				(int32_t)pdev->offsetcal_cfg.pre_num_of_samples;
 800b15c:	693b      	ldr	r3, [r7, #16]
 800b15e:	f893 3154 	ldrb.w	r3, [r3, #340]	; 0x154
 800b162:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	601a      	str	r2, [r3, #0]
	break;
 800b168:	e076      	b.n	800b258 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_OFFSET_CAL_MM1_SAMPLES:
		*ptuning_parm_value =
			(int32_t)pdev->offsetcal_cfg.mm1_num_of_samples;
 800b16a:	693b      	ldr	r3, [r7, #16]
 800b16c:	f893 3155 	ldrb.w	r3, [r3, #341]	; 0x155
 800b170:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	601a      	str	r2, [r3, #0]
	break;
 800b176:	e06f      	b.n	800b258 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_OFFSET_CAL_MM2_SAMPLES:
		*ptuning_parm_value =
				(int32_t)pdev->offsetcal_cfg.mm2_num_of_samples;
 800b178:	693b      	ldr	r3, [r7, #16]
 800b17a:	f893 3156 	ldrb.w	r3, [r3, #342]	; 0x156
 800b17e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	601a      	str	r2, [r3, #0]
	break;
 800b184:	e068      	b.n	800b258 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_SPADMAP_VCSEL_PERIOD:
		*ptuning_parm_value =
				(int32_t)pdev->ssc_cfg.vcsel_period;
 800b186:	693b      	ldr	r3, [r7, #16]
 800b188:	f893 3121 	ldrb.w	r3, [r3, #289]	; 0x121
 800b18c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	601a      	str	r2, [r3, #0]
	break;
 800b192:	e061      	b.n	800b258 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_SPADMAP_VCSEL_START:
		*ptuning_parm_value =
				(int32_t)pdev->ssc_cfg.vcsel_start;
 800b194:	693b      	ldr	r3, [r7, #16]
 800b196:	f893 3122 	ldrb.w	r3, [r3, #290]	; 0x122
 800b19a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	601a      	str	r2, [r3, #0]
	break;
 800b1a0:	e05a      	b.n	800b258 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_SPADMAP_RATE_LIMIT_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->ssc_cfg.rate_limit_mcps;
 800b1a2:	693b      	ldr	r3, [r7, #16]
 800b1a4:	f8b3 3128 	ldrh.w	r3, [r3, #296]	; 0x128
 800b1a8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	601a      	str	r2, [r3, #0]
	break;
 800b1ae:	e053      	b.n	800b258 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_dss_target_lite_mcps;
 800b1b0:	693b      	ldr	r3, [r7, #16]
 800b1b2:	f8b3 30ca 	ldrh.w	r3, [r3, #202]	; 0xca
 800b1b6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	601a      	str	r2, [r3, #0]
	break;
 800b1bc:	e04c      	b.n	800b258 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_TIMED_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_dss_target_timed_mcps;
 800b1be:	693b      	ldr	r3, [r7, #16]
 800b1c0:	f8b3 30cc 	ldrh.w	r3, [r3, #204]	; 0xcc
 800b1c4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	601a      	str	r2, [r3, #0]
	break;
 800b1ca:	e045      	b.n	800b258 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_phasecal_timeout_lite_us;
 800b1cc:	693b      	ldr	r3, [r7, #16]
 800b1ce:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 800b1d2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	601a      	str	r2, [r3, #0]
	break;
 800b1d8:	e03e      	b.n	800b258 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_TIMED_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_phasecal_timeout_timed_us;
 800b1da:	693b      	ldr	r3, [r7, #16]
 800b1dc:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800b1e0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	601a      	str	r2, [r3, #0]
	break;
 800b1e6:	e037      	b.n	800b258 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_mm_timeout_lite_us;
 800b1e8:	693b      	ldr	r3, [r7, #16]
 800b1ea:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800b1ee:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	601a      	str	r2, [r3, #0]
	break;
 800b1f4:	e030      	b.n	800b258 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_TIMED_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_mm_timeout_timed_us;
 800b1f6:	693b      	ldr	r3, [r7, #16]
 800b1f8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800b1fc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	601a      	str	r2, [r3, #0]
	break;
 800b202:	e029      	b.n	800b258 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_range_timeout_lite_us;
 800b204:	693b      	ldr	r3, [r7, #16]
 800b206:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800b20a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	601a      	str	r2, [r3, #0]
	break;
 800b210:	e022      	b.n	800b258 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_TIMED_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_range_timeout_timed_us;
 800b212:	693b      	ldr	r3, [r7, #16]
 800b214:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800b218:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	601a      	str	r2, [r3, #0]
	break;
 800b21e:	e01b      	b.n	800b258 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND:
		*ptuning_parm_value =
				(int32_t)pdev->low_power_auto_data.vhv_loop_bound;
 800b220:	693b      	ldr	r3, [r7, #16]
 800b222:	f893 32e4 	ldrb.w	r3, [r3, #740]	; 0x2e4
 800b226:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	601a      	str	r2, [r3, #0]
	break;
 800b22c:	e014      	b.n	800b258 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LOWPOWERAUTO_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_mm_timeout_lpa_us;
 800b22e:	693b      	ldr	r3, [r7, #16]
 800b230:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b234:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	601a      	str	r2, [r3, #0]
	break;
 800b23a:	e00d      	b.n	800b258 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LOWPOWERAUTO_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_range_timeout_lpa_us;
 800b23c:	693b      	ldr	r3, [r7, #16]
 800b23e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800b242:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	601a      	str	r2, [r3, #0]
	break;
 800b248:	e006      	b.n	800b258 <VL53L1_get_tuning_parm+0x438>


	default:
		*ptuning_parm_value = 0x7FFFFFFF;
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800b250:	601a      	str	r2, [r3, #0]
		status = VL53L1_ERROR_INVALID_PARAMS;
 800b252:	23fc      	movs	r3, #252	; 0xfc
 800b254:	75fb      	strb	r3, [r7, #23]
	break;
 800b256:	bf00      	nop

	}

	LOG_FUNCTION_END(status);

	return status;
 800b258:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b25c:	4618      	mov	r0, r3
 800b25e:	371c      	adds	r7, #28
 800b260:	46bd      	mov	sp, r7
 800b262:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b266:	4770      	bx	lr

0800b268 <VL53L1_init_refspadchar_config_struct>:


#ifndef VL53L1_NOCALIB
VL53L1_Error VL53L1_init_refspadchar_config_struct(
	VL53L1_refspadchar_config_t   *pdata)
{
 800b268:	b480      	push	{r7}
 800b26a:	b085      	sub	sp, #20
 800b26c:	af00      	add	r7, sp, #0
 800b26e:	6078      	str	r0, [r7, #4]
	/*
	 * Initializes Ref SPAD Char data structures preset mode
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800b270:	2300      	movs	r3, #0
 800b272:	73fb      	strb	r3, [r7, #15]
	 * target_count_rate_mcps    = 0x0A00 - 9.7 -> 20.0 Mcps
	 * min_count_rate_limit_mcps = 0x0500 - 9.7 -> 10.0 Mcps
	 * max_count_rate_limit_mcps = 0x1400 - 9.7 -> 40.0 Mcps
	 */

	pdata->device_test_mode =
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	2208      	movs	r2, #8
 800b278:	701a      	strb	r2, [r3, #0]
			VL53L1_TUNINGPARM_REFSPADCHAR_DEVICE_TEST_MODE_DEFAULT;
	pdata->vcsel_period              =
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	220b      	movs	r2, #11
 800b27e:	705a      	strb	r2, [r3, #1]
			VL53L1_TUNINGPARM_REFSPADCHAR_VCSEL_PERIOD_DEFAULT;
	pdata->timeout_us                =
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b286:	605a      	str	r2, [r3, #4]
			VL53L1_TUNINGPARM_REFSPADCHAR_PHASECAL_TIMEOUT_US_DEFAULT;
	pdata->target_count_rate_mcps    =
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 800b28e:	811a      	strh	r2, [r3, #8]
			VL53L1_TUNINGPARM_REFSPADCHAR_TARGET_COUNT_RATE_MCPS_DEFAULT;
	pdata->min_count_rate_limit_mcps =
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 800b296:	815a      	strh	r2, [r3, #10]
			VL53L1_TUNINGPARM_REFSPADCHAR_MIN_COUNTRATE_LIMIT_MCPS_DEFAULT;
	pdata->max_count_rate_limit_mcps =
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 800b29e:	819a      	strh	r2, [r3, #12]
			VL53L1_TUNINGPARM_REFSPADCHAR_MAX_COUNTRATE_LIMIT_MCPS_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 800b2a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b2a4:	4618      	mov	r0, r3
 800b2a6:	3714      	adds	r7, #20
 800b2a8:	46bd      	mov	sp, r7
 800b2aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ae:	4770      	bx	lr

0800b2b0 <VL53L1_init_ssc_config_struct>:


#ifndef VL53L1_NOCALIB
VL53L1_Error VL53L1_init_ssc_config_struct(
	VL53L1_ssc_config_t   *pdata)
{
 800b2b0:	b480      	push	{r7}
 800b2b2:	b085      	sub	sp, #20
 800b2b4:	af00      	add	r7, sp, #0
 800b2b6:	6078      	str	r0, [r7, #4]
	/*
	 * Initializes SPAD Self Check (SSC) data structure
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800b2b8:	2300      	movs	r3, #0
 800b2ba:	73fb      	strb	r3, [r7, #15]
	/* SPAD Select Check Configuration */

	/* 0 - store RTN count rates
	 * 1 - store REF count rates
	 */
	pdata->array_select = VL53L1_DEVICESSCARRAY_RTN;
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	2200      	movs	r2, #0
 800b2c0:	701a      	strb	r2, [r3, #0]

	/* VCSEL period register value  0x12 (18) -> 38 VCSEL clocks */
	pdata->vcsel_period =
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	2212      	movs	r2, #18
 800b2c6:	705a      	strb	r2, [r3, #1]
			VL53L1_TUNINGPARM_SPADMAP_VCSEL_PERIOD_DEFAULT;

	/* VCSEL pulse start */
	pdata->vcsel_start  =
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	220f      	movs	r2, #15
 800b2cc:	709a      	strb	r2, [r3, #2]
			VL53L1_TUNINGPARM_SPADMAP_VCSEL_START_DEFAULT;

	/* VCSEL pulse width */
	pdata->vcsel_width  = 0x02;
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	2202      	movs	r2, #2
 800b2d2:	70da      	strb	r2, [r3, #3]

	/* SSC timeout [us] */
	pdata->timeout_us   = 36000;
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	f648 42a0 	movw	r2, #36000	; 0x8ca0
 800b2da:	605a      	str	r2, [r3, #4]

	/* SSC rate limit [Mcps]
	 * - 9.7 for VCSEL ON
	 * - 1.15 for VCSEL OFF
	 */
	pdata->rate_limit_mcps =
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	220c      	movs	r2, #12
 800b2e0:	811a      	strh	r2, [r3, #8]
			VL53L1_TUNINGPARM_SPADMAP_RATE_LIMIT_MCPS_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 800b2e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b2e6:	4618      	mov	r0, r3
 800b2e8:	3714      	adds	r7, #20
 800b2ea:	46bd      	mov	sp, r7
 800b2ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2f0:	4770      	bx	lr

0800b2f2 <VL53L1_init_xtalk_config_struct>:


VL53L1_Error VL53L1_init_xtalk_config_struct(
	VL53L1_customer_nvm_managed_t *pnvm,
	VL53L1_xtalk_config_t   *pdata)
{
 800b2f2:	b580      	push	{r7, lr}
 800b2f4:	b084      	sub	sp, #16
 800b2f6:	af00      	add	r7, sp, #0
 800b2f8:	6078      	str	r0, [r7, #4]
 800b2fa:	6039      	str	r1, [r7, #0]
	/*
	 * Initializes Xtalk Config structure
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800b2fc:	2300      	movs	r3, #0
 800b2fe:	73fb      	strb	r3, [r7, #15]
	 */

	/* Store xtalk data into golden copy */

	pdata->algo__crosstalk_compensation_plane_offset_kcps      =
		pnvm->algo__crosstalk_compensation_plane_offset_kcps;
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	895b      	ldrh	r3, [r3, #10]
 800b304:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_plane_offset_kcps      =
 800b306:	683b      	ldr	r3, [r7, #0]
 800b308:	601a      	str	r2, [r3, #0]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_x_plane_gradient_kcps;
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps  =
 800b310:	683b      	ldr	r3, [r7, #0]
 800b312:	809a      	strh	r2, [r3, #4]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_y_plane_gradient_kcps;
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps  =
 800b31a:	683b      	ldr	r3, [r7, #0]
 800b31c:	80da      	strh	r2, [r3, #6]

	/* Store NVM defaults for later use */

	pdata->nvm_default__crosstalk_compensation_plane_offset_kcps      =
		(uint32_t)pnvm->algo__crosstalk_compensation_plane_offset_kcps;
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	895b      	ldrh	r3, [r3, #10]
 800b322:	461a      	mov	r2, r3
	pdata->nvm_default__crosstalk_compensation_plane_offset_kcps      =
 800b324:	683b      	ldr	r3, [r7, #0]
 800b326:	609a      	str	r2, [r3, #8]
	pdata->nvm_default__crosstalk_compensation_x_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_x_plane_gradient_kcps;
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
	pdata->nvm_default__crosstalk_compensation_x_plane_gradient_kcps  =
 800b32e:	683b      	ldr	r3, [r7, #0]
 800b330:	819a      	strh	r2, [r3, #12]
	pdata->nvm_default__crosstalk_compensation_y_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_y_plane_gradient_kcps;
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
	pdata->nvm_default__crosstalk_compensation_y_plane_gradient_kcps  =
 800b338:	683b      	ldr	r3, [r7, #0]
 800b33a:	81da      	strh	r2, [r3, #14]

	pdata->lite_mode_crosstalk_margin_kcps                     =
 800b33c:	683b      	ldr	r3, [r7, #0]
 800b33e:	2200      	movs	r2, #0
 800b340:	825a      	strh	r2, [r3, #18]
			VL53L1_TUNINGPARM_LITE_XTALK_MARGIN_KCPS_DEFAULT;

	/* Default for Range Ignore Threshold Mult = 2.0 */

	pdata->crosstalk_range_ignore_threshold_mult =
 800b342:	683b      	ldr	r3, [r7, #0]
 800b344:	2240      	movs	r2, #64	; 0x40
 800b346:	751a      	strb	r2, [r3, #20]
			VL53L1_TUNINGPARM_LITE_RIT_MULT_DEFAULT;

	if ((pdata->algo__crosstalk_compensation_plane_offset_kcps == 0x00)
 800b348:	683b      	ldr	r3, [r7, #0]
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	d10d      	bne.n	800b36c <VL53L1_init_xtalk_config_struct+0x7a>
		&& (pdata->algo__crosstalk_compensation_x_plane_gradient_kcps == 0x00)
 800b350:	683b      	ldr	r3, [r7, #0]
 800b352:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800b356:	2b00      	cmp	r3, #0
 800b358:	d108      	bne.n	800b36c <VL53L1_init_xtalk_config_struct+0x7a>
		&& (pdata->algo__crosstalk_compensation_y_plane_gradient_kcps == 0x00))
 800b35a:	683b      	ldr	r3, [r7, #0]
 800b35c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800b360:	2b00      	cmp	r3, #0
 800b362:	d103      	bne.n	800b36c <VL53L1_init_xtalk_config_struct+0x7a>
		pdata->global_crosstalk_compensation_enable = 0x00;
 800b364:	683b      	ldr	r3, [r7, #0]
 800b366:	2200      	movs	r2, #0
 800b368:	741a      	strb	r2, [r3, #16]
 800b36a:	e002      	b.n	800b372 <VL53L1_init_xtalk_config_struct+0x80>
	else
		pdata->global_crosstalk_compensation_enable = 0x01;
 800b36c:	683b      	ldr	r3, [r7, #0]
 800b36e:	2201      	movs	r2, #1
 800b370:	741a      	strb	r2, [r3, #16]


	if ((status == VL53L1_ERROR_NONE) &&
 800b372:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b376:	2b00      	cmp	r3, #0
 800b378:	d114      	bne.n	800b3a4 <VL53L1_init_xtalk_config_struct+0xb2>
		(pdata->global_crosstalk_compensation_enable == 0x01)) {
 800b37a:	683b      	ldr	r3, [r7, #0]
 800b37c:	7c1b      	ldrb	r3, [r3, #16]
	if ((status == VL53L1_ERROR_NONE) &&
 800b37e:	2b01      	cmp	r3, #1
 800b380:	d110      	bne.n	800b3a4 <VL53L1_init_xtalk_config_struct+0xb2>
		pdata->crosstalk_range_ignore_threshold_rate_mcps =
			VL53L1_calc_range_ignore_threshold(
 800b382:	683b      	ldr	r3, [r7, #0]
 800b384:	6818      	ldr	r0, [r3, #0]
 800b386:	683b      	ldr	r3, [r7, #0]
 800b388:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 800b38c:	683b      	ldr	r3, [r7, #0]
 800b38e:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 800b392:	683b      	ldr	r3, [r7, #0]
 800b394:	7d1b      	ldrb	r3, [r3, #20]
 800b396:	f001 f8b3 	bl	800c500 <VL53L1_calc_range_ignore_threshold>
 800b39a:	4603      	mov	r3, r0
 800b39c:	461a      	mov	r2, r3
		pdata->crosstalk_range_ignore_threshold_rate_mcps =
 800b39e:	683b      	ldr	r3, [r7, #0]
 800b3a0:	82da      	strh	r2, [r3, #22]
 800b3a2:	e002      	b.n	800b3aa <VL53L1_init_xtalk_config_struct+0xb8>
				pdata->algo__crosstalk_compensation_plane_offset_kcps,
				pdata->algo__crosstalk_compensation_x_plane_gradient_kcps,
				pdata->algo__crosstalk_compensation_y_plane_gradient_kcps,
				pdata->crosstalk_range_ignore_threshold_mult);
	} else {
		pdata->crosstalk_range_ignore_threshold_rate_mcps = 0;
 800b3a4:	683b      	ldr	r3, [r7, #0]
 800b3a6:	2200      	movs	r2, #0
 800b3a8:	82da      	strh	r2, [r3, #22]
	}

	LOG_FUNCTION_END(status);

	return status;
 800b3aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b3ae:	4618      	mov	r0, r3
 800b3b0:	3710      	adds	r7, #16
 800b3b2:	46bd      	mov	sp, r7
 800b3b4:	bd80      	pop	{r7, pc}

0800b3b6 <VL53L1_init_offset_cal_config_struct>:

#ifndef VL53L1_NOCALIB
VL53L1_Error VL53L1_init_offset_cal_config_struct(
	VL53L1_offsetcal_config_t   *pdata)
{
 800b3b6:	b480      	push	{r7}
 800b3b8:	b085      	sub	sp, #20
 800b3ba:	af00      	add	r7, sp, #0
 800b3bc:	6078      	str	r0, [r7, #4]
	/*
	 * Initializes Offset Calibration Config structure
	 * - for use with VL53L1_run_offset_calibration()
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800b3be:	2300      	movs	r3, #0
 800b3c0:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	/* Preset Timeout and DSS defaults */

	pdata->dss_config__target_total_rate_mcps          =
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 800b3c8:	801a      	strh	r2, [r3, #0]
			VL53L1_TUNINGPARM_OFFSET_CAL_DSS_RATE_MCPS_DEFAULT;
	/* 20.0 Mcps */
	pdata->phasecal_config_timeout_us                  =
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b3d0:	605a      	str	r2, [r3, #4]
			VL53L1_TUNINGPARM_OFFSET_CAL_PHASECAL_TIMEOUT_US_DEFAULT;
	/* 1000 us */
	pdata->range_config_timeout_us                     =
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	f243 22c8 	movw	r2, #13000	; 0x32c8
 800b3d8:	609a      	str	r2, [r3, #8]
			VL53L1_TUNINGPARM_OFFSET_CAL_RANGE_TIMEOUT_US_DEFAULT;
	/* 13000 us */
	pdata->mm_config_timeout_us                        =
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	f243 22c8 	movw	r2, #13000	; 0x32c8
 800b3e0:	60da      	str	r2, [r3, #12]
			VL53L1_TUNINGPARM_OFFSET_CAL_MM_TIMEOUT_US_DEFAULT;
	/* 13000 us - Added as part of Patch_AddedOffsetCalMMTuningParm_11791 */

	/* Init number of averaged samples */

	pdata->pre_num_of_samples                          =
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	2208      	movs	r2, #8
 800b3e6:	741a      	strb	r2, [r3, #16]
			VL53L1_TUNINGPARM_OFFSET_CAL_PRE_SAMPLES_DEFAULT;
	pdata->mm1_num_of_samples                          =
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	2228      	movs	r2, #40	; 0x28
 800b3ec:	745a      	strb	r2, [r3, #17]
			VL53L1_TUNINGPARM_OFFSET_CAL_MM1_SAMPLES_DEFAULT;
	pdata->mm2_num_of_samples                          =
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	2209      	movs	r2, #9
 800b3f2:	749a      	strb	r2, [r3, #18]
			VL53L1_TUNINGPARM_OFFSET_CAL_MM2_SAMPLES_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 800b3f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b3f8:	4618      	mov	r0, r3
 800b3fa:	3714      	adds	r7, #20
 800b3fc:	46bd      	mov	sp, r7
 800b3fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b402:	4770      	bx	lr

0800b404 <VL53L1_init_tuning_parm_storage_struct>:
#endif

VL53L1_Error VL53L1_init_tuning_parm_storage_struct(
	VL53L1_tuning_parm_storage_t   *pdata)
{
 800b404:	b480      	push	{r7}
 800b406:	b085      	sub	sp, #20
 800b408:	af00      	add	r7, sp, #0
 800b40a:	6078      	str	r0, [r7, #4]
	/*
	 * Initializes  Tuning Param storage structure
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800b40c:	2300      	movs	r3, #0
 800b40e:	73fb      	strb	r3, [r7, #15]
	 *
	 * - Custom overwrite possible from vl53l1_set_tuning_parms()
	 * - via tuning file input
	 */

	pdata->tp_tuning_parm_version              =
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	f248 0203 	movw	r2, #32771	; 0x8003
 800b416:	801a      	strh	r2, [r3, #0]
			VL53L1_TUNINGPARM_VERSION_DEFAULT;
	pdata->tp_tuning_parm_key_table_version    =
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	f248 0201 	movw	r2, #32769	; 0x8001
 800b41e:	805a      	strh	r2, [r3, #2]
			VL53L1_TUNINGPARM_KEY_TABLE_VERSION_DEFAULT;
	pdata->tp_tuning_parm_lld_version          =
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	f248 0241 	movw	r2, #32833	; 0x8041
 800b426:	809a      	strh	r2, [r3, #4]
			VL53L1_TUNINGPARM_LLD_VERSION_DEFAULT;
	pdata->tp_init_phase_rtn_lite_long         =
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	220e      	movs	r2, #14
 800b42c:	719a      	strb	r2, [r3, #6]
			VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_lite_med          =
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	220a      	movs	r2, #10
 800b432:	71da      	strb	r2, [r3, #7]
			VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_lite_short        =
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	2206      	movs	r2, #6
 800b438:	721a      	strb	r2, [r3, #8]
			VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_SHORT_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_long         =
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	220e      	movs	r2, #14
 800b43e:	725a      	strb	r2, [r3, #9]
			VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_med          =
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	220a      	movs	r2, #10
 800b444:	729a      	strb	r2, [r3, #10]
			VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_short        =
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	2206      	movs	r2, #6
 800b44a:	72da      	strb	r2, [r3, #11]
			VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_SHORT_RANGE_DEFAULT;
	pdata->tp_consistency_lite_phase_tolerance =
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	2202      	movs	r2, #2
 800b450:	731a      	strb	r2, [r3, #12]
			VL53L1_TUNINGPARM_CONSISTENCY_LITE_PHASE_TOLERANCE_DEFAULT;
	pdata->tp_phasecal_target                  =
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	2221      	movs	r2, #33	; 0x21
 800b456:	735a      	strb	r2, [r3, #13]
			VL53L1_TUNINGPARM_PHASECAL_TARGET_DEFAULT;
	pdata->tp_cal_repeat_rate                  =
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	2200      	movs	r2, #0
 800b45c:	81da      	strh	r2, [r3, #14]
			VL53L1_TUNINGPARM_LITE_CAL_REPEAT_RATE_DEFAULT;
	pdata->tp_lite_min_clip                    =
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	2200      	movs	r2, #0
 800b462:	741a      	strb	r2, [r3, #16]
			VL53L1_TUNINGPARM_LITE_MIN_CLIP_MM_DEFAULT;
	pdata->tp_lite_long_sigma_thresh_mm        =
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800b46a:	825a      	strh	r2, [r3, #18]
			VL53L1_TUNINGPARM_LITE_LONG_SIGMA_THRESH_MM_DEFAULT;
	pdata->tp_lite_med_sigma_thresh_mm         =
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800b472:	829a      	strh	r2, [r3, #20]
			VL53L1_TUNINGPARM_LITE_MED_SIGMA_THRESH_MM_DEFAULT;
	pdata->tp_lite_short_sigma_thresh_mm       =
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800b47a:	82da      	strh	r2, [r3, #22]
			VL53L1_TUNINGPARM_LITE_SHORT_SIGMA_THRESH_MM_DEFAULT;
	pdata->tp_lite_long_min_count_rate_rtn_mcps  =
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	22c0      	movs	r2, #192	; 0xc0
 800b480:	831a      	strh	r2, [r3, #24]
			VL53L1_TUNINGPARM_LITE_LONG_MIN_COUNT_RATE_RTN_MCPS_DEFAULT;
	pdata->tp_lite_med_min_count_rate_rtn_mcps   =
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	22c0      	movs	r2, #192	; 0xc0
 800b486:	835a      	strh	r2, [r3, #26]
			VL53L1_TUNINGPARM_LITE_MED_MIN_COUNT_RATE_RTN_MCPS_DEFAULT;
	pdata->tp_lite_short_min_count_rate_rtn_mcps =
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	22c0      	movs	r2, #192	; 0xc0
 800b48c:	839a      	strh	r2, [r3, #28]
			VL53L1_TUNINGPARM_LITE_SHORT_MIN_COUNT_RATE_RTN_MCPS_DEFAULT;
	pdata->tp_lite_sigma_est_pulse_width_ns      =
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	2208      	movs	r2, #8
 800b492:	779a      	strb	r2, [r3, #30]
			VL53L1_TUNINGPARM_LITE_SIGMA_EST_PULSE_WIDTH_DEFAULT;
	pdata->tp_lite_sigma_est_amb_width_ns        =
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	2210      	movs	r2, #16
 800b498:	77da      	strb	r2, [r3, #31]
			VL53L1_TUNINGPARM_LITE_SIGMA_EST_AMB_WIDTH_NS_DEFAULT;
	pdata->tp_lite_sigma_ref_mm                  =
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	2201      	movs	r2, #1
 800b49e:	f883 2020 	strb.w	r2, [r3, #32]
			VL53L1_TUNINGPARM_LITE_SIGMA_REF_MM_DEFAULT;
	pdata->tp_lite_seed_cfg                      =
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	2202      	movs	r2, #2
 800b4a6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			VL53L1_TUNINGPARM_LITE_SEED_CONFIG_DEFAULT;
	pdata->tp_timed_seed_cfg                     =
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	2201      	movs	r2, #1
 800b4ae:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
			VL53L1_TUNINGPARM_TIMED_SEED_CONFIG_DEFAULT;
	pdata->tp_lite_quantifier                    =
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	2202      	movs	r2, #2
 800b4b6:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
			VL53L1_TUNINGPARM_LITE_QUANTIFIER_DEFAULT;
	pdata->tp_lite_first_order_select            =
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	2200      	movs	r2, #0
 800b4be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			VL53L1_TUNINGPARM_LITE_FIRST_ORDER_SELECT_DEFAULT;

	/* Preset Mode Configurations */
	/* - New parms added as part of Patch_TuningParmPresetModeAddition_11839 */

	pdata->tp_dss_target_lite_mcps               =
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 800b4c8:	84da      	strh	r2, [r3, #38]	; 0x26
			VL53L1_TUNINGPARM_LITE_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_dss_target_timed_mcps              =
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 800b4d0:	851a      	strh	r2, [r3, #40]	; 0x28
			VL53L1_TUNINGPARM_TIMED_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_phasecal_timeout_lite_us           =
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	f248 0230 	movw	r2, #32816	; 0x8030
 800b4d8:	62da      	str	r2, [r3, #44]	; 0x2c
			VL53L1_TUNINGPARM_LITE_PHASECAL_CONFIG_TIMEOUT_US;
	pdata->tp_phasecal_timeout_timed_us          =
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b4e0:	631a      	str	r2, [r3, #48]	; 0x30
			VL53L1_TUNINGPARM_TIMED_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_lite_us                 =
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800b4e8:	635a      	str	r2, [r3, #52]	; 0x34
			VL53L1_TUNINGPARM_LITE_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_timed_us                =
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800b4f0:	639a      	str	r2, [r3, #56]	; 0x38
			VL53L1_TUNINGPARM_TIMED_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_lite_us              =
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	f24f 6218 	movw	r2, #63000	; 0xf618
 800b4f8:	641a      	str	r2, [r3, #64]	; 0x40
			VL53L1_TUNINGPARM_LITE_RANGE_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_timed_us             =
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	f243 22c8 	movw	r2, #13000	; 0x32c8
 800b500:	645a      	str	r2, [r3, #68]	; 0x44
			VL53L1_TUNINGPARM_TIMED_RANGE_CONFIG_TIMEOUT_US_DEFAULT;

	/* Added for Patch_LowPowerAutoMode */

	pdata->tp_mm_timeout_lpa_us =
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 800b508:	63da      	str	r2, [r3, #60]	; 0x3c
			VL53L1_TUNINGPARM_LOWPOWERAUTO_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_lpa_us =
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800b510:	649a      	str	r2, [r3, #72]	; 0x48
			VL53L1_TUNINGPARM_LOWPOWERAUTO_RANGE_CONFIG_TIMEOUT_US_DEFAULT;


	LOG_FUNCTION_END(status);

	return status;
 800b512:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b516:	4618      	mov	r0, r3
 800b518:	3714      	adds	r7, #20
 800b51a:	46bd      	mov	sp, r7
 800b51c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b520:	4770      	bx	lr

0800b522 <VL53L1_preset_mode_standard_ranging>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 800b522:	b480      	push	{r7}
 800b524:	b087      	sub	sp, #28
 800b526:	af00      	add	r7, sp, #0
 800b528:	60f8      	str	r0, [r7, #12]
 800b52a:	60b9      	str	r1, [r7, #8]
 800b52c:	607a      	str	r2, [r7, #4]
 800b52e:	603b      	str	r3, [r7, #0]
	 *  - back to back
	 *
	 *  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800b530:	2300      	movs	r3, #0
 800b532:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	/* Static Configuration */

	/* dss_config__target_total_rate_mcps = 20.0 Mcps 9.7 fp */
	pstatic->dss_config__target_total_rate_mcps               = 0x0A00;
 800b534:	68fb      	ldr	r3, [r7, #12]
 800b536:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 800b53a:	801a      	strh	r2, [r3, #0]
	pstatic->debug__ctrl                                      = 0x00;
 800b53c:	68fb      	ldr	r3, [r7, #12]
 800b53e:	2200      	movs	r2, #0
 800b540:	709a      	strb	r2, [r3, #2]
	pstatic->test_mode__ctrl                                  = 0x00;
 800b542:	68fb      	ldr	r3, [r7, #12]
 800b544:	2200      	movs	r2, #0
 800b546:	70da      	strb	r2, [r3, #3]
	pstatic->clk_gating__ctrl                                 = 0x00;
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	2200      	movs	r2, #0
 800b54c:	711a      	strb	r2, [r3, #4]
	pstatic->nvm_bist__ctrl                                   = 0x00;
 800b54e:	68fb      	ldr	r3, [r7, #12]
 800b550:	2200      	movs	r2, #0
 800b552:	715a      	strb	r2, [r3, #5]
	pstatic->nvm_bist__num_nvm_words                          = 0x00;
 800b554:	68fb      	ldr	r3, [r7, #12]
 800b556:	2200      	movs	r2, #0
 800b558:	719a      	strb	r2, [r3, #6]
	pstatic->nvm_bist__start_address                          = 0x00;
 800b55a:	68fb      	ldr	r3, [r7, #12]
 800b55c:	2200      	movs	r2, #0
 800b55e:	71da      	strb	r2, [r3, #7]
	pstatic->host_if__status                                  = 0x00;
 800b560:	68fb      	ldr	r3, [r7, #12]
 800b562:	2200      	movs	r2, #0
 800b564:	721a      	strb	r2, [r3, #8]
	pstatic->pad_i2c_hv__config                               = 0x00;
 800b566:	68fb      	ldr	r3, [r7, #12]
 800b568:	2200      	movs	r2, #0
 800b56a:	725a      	strb	r2, [r3, #9]
	pstatic->pad_i2c_hv__extsup_config                        = 0x00;
 800b56c:	68fb      	ldr	r3, [r7, #12]
 800b56e:	2200      	movs	r2, #0
 800b570:	729a      	strb	r2, [r3, #10]

	/*
	 *  0 - gpio__extsup_hv
	 *  1 - gpio__vmodeint_hv
	 */
	pstatic->gpio_hv_pad__ctrl                                = 0x00;
 800b572:	68fb      	ldr	r3, [r7, #12]
 800b574:	2200      	movs	r2, #0
 800b576:	72da      	strb	r2, [r3, #11]
	 * Set interrupt active low
	 *
	 *  3:0 - gpio__mux_select_hv
	 *    4 - gpio__mux_active_high_hv
	 */
	pstatic->gpio_hv_mux__ctrl  = \
 800b578:	68fb      	ldr	r3, [r7, #12]
 800b57a:	2211      	movs	r2, #17
 800b57c:	731a      	strb	r2, [r3, #12]
			VL53L1_DEVICEINTERRUPTPOLARITY_ACTIVE_LOW | \
			VL53L1_DEVICEGPIOMODE_OUTPUT_RANGE_AND_ERROR_INTERRUPTS;

	pstatic->gpio__tio_hv_status                              = 0x02;
 800b57e:	68fb      	ldr	r3, [r7, #12]
 800b580:	2202      	movs	r2, #2
 800b582:	735a      	strb	r2, [r3, #13]
	pstatic->gpio__fio_hv_status                              = 0x00;
 800b584:	68fb      	ldr	r3, [r7, #12]
 800b586:	2200      	movs	r2, #0
 800b588:	739a      	strb	r2, [r3, #14]
	pstatic->ana_config__spad_sel_pswidth                     = 0x02;
 800b58a:	68fb      	ldr	r3, [r7, #12]
 800b58c:	2202      	movs	r2, #2
 800b58e:	73da      	strb	r2, [r3, #15]
	pstatic->ana_config__vcsel_pulse_width_offset             = 0x08;
 800b590:	68fb      	ldr	r3, [r7, #12]
 800b592:	2208      	movs	r2, #8
 800b594:	741a      	strb	r2, [r3, #16]
	pstatic->ana_config__fast_osc__config_ctrl                = 0x00;
 800b596:	68fb      	ldr	r3, [r7, #12]
 800b598:	2200      	movs	r2, #0
 800b59a:	745a      	strb	r2, [r3, #17]

	pstatic->sigma_estimator__effective_pulse_width_ns        =
			ptuning_parms->tp_lite_sigma_est_pulse_width_ns;
 800b59c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b59e:	7f9a      	ldrb	r2, [r3, #30]
	pstatic->sigma_estimator__effective_pulse_width_ns        =
 800b5a0:	68fb      	ldr	r3, [r7, #12]
 800b5a2:	749a      	strb	r2, [r3, #18]
	pstatic->sigma_estimator__effective_ambient_width_ns      =
			ptuning_parms->tp_lite_sigma_est_amb_width_ns;
 800b5a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5a6:	7fda      	ldrb	r2, [r3, #31]
	pstatic->sigma_estimator__effective_ambient_width_ns      =
 800b5a8:	68fb      	ldr	r3, [r7, #12]
 800b5aa:	74da      	strb	r2, [r3, #19]
	pstatic->sigma_estimator__sigma_ref_mm                    =
			ptuning_parms->tp_lite_sigma_ref_mm;
 800b5ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5ae:	f893 2020 	ldrb.w	r2, [r3, #32]
	pstatic->sigma_estimator__sigma_ref_mm                    =
 800b5b2:	68fb      	ldr	r3, [r7, #12]
 800b5b4:	751a      	strb	r2, [r3, #20]
	/* Minimum allowable value of 1 - 0 disables the feature */
	pstatic->algo__crosstalk_compensation_valid_height_mm     = 0x01;
 800b5b6:	68fb      	ldr	r3, [r7, #12]
 800b5b8:	2201      	movs	r2, #1
 800b5ba:	755a      	strb	r2, [r3, #21]
	pstatic->spare_host_config__static_config_spare_0         = 0x00;
 800b5bc:	68fb      	ldr	r3, [r7, #12]
 800b5be:	2200      	movs	r2, #0
 800b5c0:	759a      	strb	r2, [r3, #22]
	pstatic->spare_host_config__static_config_spare_1         = 0x00;
 800b5c2:	68fb      	ldr	r3, [r7, #12]
 800b5c4:	2200      	movs	r2, #0
 800b5c6:	75da      	strb	r2, [r3, #23]

	pstatic->algo__range_ignore_threshold_mcps                = 0x0000;
 800b5c8:	68fb      	ldr	r3, [r7, #12]
 800b5ca:	2200      	movs	r2, #0
 800b5cc:	831a      	strh	r2, [r3, #24]

	/* set RIT distance to 20 mm */
	pstatic->algo__range_ignore_valid_height_mm               = 0xff;
 800b5ce:	68fb      	ldr	r3, [r7, #12]
 800b5d0:	22ff      	movs	r2, #255	; 0xff
 800b5d2:	769a      	strb	r2, [r3, #26]
	pstatic->algo__range_min_clip                             =
			ptuning_parms->tp_lite_min_clip;
 800b5d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5d6:	7c1a      	ldrb	r2, [r3, #16]
	pstatic->algo__range_min_clip                             =
 800b5d8:	68fb      	ldr	r3, [r7, #12]
 800b5da:	76da      	strb	r2, [r3, #27]
	 * Phase consistency check limit - format 1.3 fp
	 * 0x02 -> 0.25
	 * 0x08 -> 1.00
	 */
	pstatic->algo__consistency_check__tolerance               =
			ptuning_parms->tp_consistency_lite_phase_tolerance;
 800b5dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5de:	7b1a      	ldrb	r2, [r3, #12]
	pstatic->algo__consistency_check__tolerance               =
 800b5e0:	68fb      	ldr	r3, [r7, #12]
 800b5e2:	771a      	strb	r2, [r3, #28]
	pstatic->spare_host_config__static_config_spare_2         = 0x00;
 800b5e4:	68fb      	ldr	r3, [r7, #12]
 800b5e6:	2200      	movs	r2, #0
 800b5e8:	775a      	strb	r2, [r3, #29]
	pstatic->sd_config__reset_stages_msb                      = 0x00;
 800b5ea:	68fb      	ldr	r3, [r7, #12]
 800b5ec:	2200      	movs	r2, #0
 800b5ee:	779a      	strb	r2, [r3, #30]
	pstatic->sd_config__reset_stages_lsb                      = 0x00;
 800b5f0:	68fb      	ldr	r3, [r7, #12]
 800b5f2:	2200      	movs	r2, #0
 800b5f4:	77da      	strb	r2, [r3, #31]

	pgeneral->gph_config__stream_count_update_value           = 0x00;
 800b5f6:	68bb      	ldr	r3, [r7, #8]
 800b5f8:	2200      	movs	r2, #0
 800b5fa:	701a      	strb	r2, [r3, #0]
	pgeneral->global_config__stream_divider                   = 0x00;
 800b5fc:	68bb      	ldr	r3, [r7, #8]
 800b5fe:	2200      	movs	r2, #0
 800b600:	705a      	strb	r2, [r3, #1]
	pgeneral->system__interrupt_config_gpio =
 800b602:	68bb      	ldr	r3, [r7, #8]
 800b604:	2220      	movs	r2, #32
 800b606:	709a      	strb	r2, [r3, #2]
			VL53L1_INTERRUPT_CONFIG_NEW_SAMPLE_READY;
	pgeneral->cal_config__vcsel_start                         = 0x0B;
 800b608:	68bb      	ldr	r3, [r7, #8]
 800b60a:	220b      	movs	r2, #11
 800b60c:	70da      	strb	r2, [r3, #3]
	 * 60 * 60 ranges (once every minute @ 60Hz)
	 * 0 - disables
	 * 12-bit value -> 4095 max
	 */
	pgeneral->cal_config__repeat_rate                         =
			ptuning_parms->tp_cal_repeat_rate;
 800b60e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b610:	89da      	ldrh	r2, [r3, #14]
	pgeneral->cal_config__repeat_rate                         =
 800b612:	68bb      	ldr	r3, [r7, #8]
 800b614:	809a      	strh	r2, [r3, #4]
	pgeneral->global_config__vcsel_width                      = 0x02;
 800b616:	68bb      	ldr	r3, [r7, #8]
 800b618:	2202      	movs	r2, #2
 800b61a:	719a      	strb	r2, [r3, #6]
	/* 13 macro periods gives a timeout of 1ms */
	pgeneral->phasecal_config__timeout_macrop                 = 0x0D;
 800b61c:	68bb      	ldr	r3, [r7, #8]
 800b61e:	220d      	movs	r2, #13
 800b620:	71da      	strb	r2, [r3, #7]
	/* Phase cal target phase 2.0625 - 4.4 fp -> 0x21*/
	pgeneral->phasecal_config__target                         =
			ptuning_parms->tp_phasecal_target;
 800b622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b624:	7b5a      	ldrb	r2, [r3, #13]
	pgeneral->phasecal_config__target                         =
 800b626:	68bb      	ldr	r3, [r7, #8]
 800b628:	721a      	strb	r2, [r3, #8]
	pgeneral->phasecal_config__override                       = 0x00;
 800b62a:	68bb      	ldr	r3, [r7, #8]
 800b62c:	2200      	movs	r2, #0
 800b62e:	725a      	strb	r2, [r3, #9]
	pgeneral->dss_config__roi_mode_control =
 800b630:	68bb      	ldr	r3, [r7, #8]
 800b632:	2201      	movs	r2, #1
 800b634:	729a      	strb	r2, [r3, #10]
			VL53L1_DEVICEDSSMODE__TARGET_RATE;
	/* format for threshold high and low is 9.7 fp */
	pgeneral->system__thresh_rate_high                        = 0x0000;
 800b636:	68bb      	ldr	r3, [r7, #8]
 800b638:	2200      	movs	r2, #0
 800b63a:	819a      	strh	r2, [r3, #12]
	pgeneral->system__thresh_rate_low                         = 0x0000;
 800b63c:	68bb      	ldr	r3, [r7, #8]
 800b63e:	2200      	movs	r2, #0
 800b640:	81da      	strh	r2, [r3, #14]
	/* The format for manual effective spads is 8.8 -> 0x8C00 = 140.00 */
	pgeneral->dss_config__manual_effective_spads_select       = 0x8C00;
 800b642:	68bb      	ldr	r3, [r7, #8]
 800b644:	f44f 420c 	mov.w	r2, #35840	; 0x8c00
 800b648:	821a      	strh	r2, [r3, #16]
	pgeneral->dss_config__manual_block_select                 = 0x00;
 800b64a:	68bb      	ldr	r3, [r7, #8]
 800b64c:	2200      	movs	r2, #0
 800b64e:	749a      	strb	r2, [r3, #18]
	 * Aperture attenuation value - format 0.8
	 *
	 * Nominal:  5x   -> 0.200000 * 256 = 51 = 0x33
	 * Measured: 4.6x -> 0.217391 * 256 = 56 = 0x38
	 */
	pgeneral->dss_config__aperture_attenuation                = 0x38;
 800b650:	68bb      	ldr	r3, [r7, #8]
 800b652:	2238      	movs	r2, #56	; 0x38
 800b654:	74da      	strb	r2, [r3, #19]
	pgeneral->dss_config__max_spads_limit                     = 0xFF;
 800b656:	68bb      	ldr	r3, [r7, #8]
 800b658:	22ff      	movs	r2, #255	; 0xff
 800b65a:	751a      	strb	r2, [r3, #20]
	pgeneral->dss_config__min_spads_limit                     = 0x01;
 800b65c:	68bb      	ldr	r3, [r7, #8]
 800b65e:	2201      	movs	r2, #1
 800b660:	755a      	strb	r2, [r3, #21]

	/* Timing Configuration */

	/* Default timing of 2ms */
	ptiming->mm_config__timeout_macrop_a_hi                   = 0x00;
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	2200      	movs	r2, #0
 800b666:	701a      	strb	r2, [r3, #0]
	ptiming->mm_config__timeout_macrop_a_lo                   = 0x1a;
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	221a      	movs	r2, #26
 800b66c:	705a      	strb	r2, [r3, #1]
	ptiming->mm_config__timeout_macrop_b_hi                   = 0x00;
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	2200      	movs	r2, #0
 800b672:	709a      	strb	r2, [r3, #2]
	ptiming->mm_config__timeout_macrop_b_lo                   = 0x20;
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	2220      	movs	r2, #32
 800b678:	70da      	strb	r2, [r3, #3]
	/* Setup for 30ms default */
	ptiming->range_config__timeout_macrop_a_hi                = 0x01;
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	2201      	movs	r2, #1
 800b67e:	711a      	strb	r2, [r3, #4]
	ptiming->range_config__timeout_macrop_a_lo                = 0xCC;
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	22cc      	movs	r2, #204	; 0xcc
 800b684:	715a      	strb	r2, [r3, #5]
	/* register value 11 gives a 24 VCSEL period */
	ptiming->range_config__vcsel_period_a                     = 0x0B;
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	220b      	movs	r2, #11
 800b68a:	719a      	strb	r2, [r3, #6]
	/* Setup for 30ms default */
	ptiming->range_config__timeout_macrop_b_hi                = 0x01;
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	2201      	movs	r2, #1
 800b690:	71da      	strb	r2, [r3, #7]
	ptiming->range_config__timeout_macrop_b_lo                = 0xF5;
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	22f5      	movs	r2, #245	; 0xf5
 800b696:	721a      	strb	r2, [r3, #8]
	/* register value  09 gives a 20 VCSEL period */
	ptiming->range_config__vcsel_period_b                     = 0x09;
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	2209      	movs	r2, #9
 800b69c:	725a      	strb	r2, [r3, #9]
	 *
	 * 0x003C -> 15.0 mm
	 * 0x0050 -> 20.0 mm
	 */
	ptiming->range_config__sigma_thresh                       =
			ptuning_parms->tp_lite_med_sigma_thresh_mm;
 800b69e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6a0:	8a9a      	ldrh	r2, [r3, #20]
	ptiming->range_config__sigma_thresh                       =
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	815a      	strh	r2, [r3, #10]
	 *  Rate Limit - format 9.7fp
	 *  0x0020 -> 0.250 Mcps
	 *  0x0080 -> 1.000 Mcps
	 */
	ptiming->range_config__min_count_rate_rtn_limit_mcps      =
			ptuning_parms->tp_lite_med_min_count_rate_rtn_mcps;
 800b6a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6a8:	8b5a      	ldrh	r2, [r3, #26]
	ptiming->range_config__min_count_rate_rtn_limit_mcps      =
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	819a      	strh	r2, [r3, #12]

	/* Phase limit register formats = 5.3
	 * low   = 0x08 ->  1.0
	 * high  = 0x78 -> 15.0 -> 3.0m
	 */
	ptiming->range_config__valid_phase_low                    = 0x08;
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	2208      	movs	r2, #8
 800b6b2:	739a      	strb	r2, [r3, #14]
	ptiming->range_config__valid_phase_high                   = 0x78;
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	2278      	movs	r2, #120	; 0x78
 800b6b8:	73da      	strb	r2, [r3, #15]
	ptiming->system__intermeasurement_period                  = 0x00000000;
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	2200      	movs	r2, #0
 800b6be:	611a      	str	r2, [r3, #16]
	ptiming->system__fractional_enable                        = 0x00;
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	2200      	movs	r2, #0
 800b6c4:	751a      	strb	r2, [r3, #20]

	/* Dynamic Configuration */

	pdynamic->system__grouped_parameter_hold_0                 = 0x01;
 800b6c6:	683b      	ldr	r3, [r7, #0]
 800b6c8:	2201      	movs	r2, #1
 800b6ca:	701a      	strb	r2, [r3, #0]

	pdynamic->system__thresh_high                              = 0x0000;
 800b6cc:	683b      	ldr	r3, [r7, #0]
 800b6ce:	2200      	movs	r2, #0
 800b6d0:	805a      	strh	r2, [r3, #2]
	pdynamic->system__thresh_low                               = 0x0000;
 800b6d2:	683b      	ldr	r3, [r7, #0]
 800b6d4:	2200      	movs	r2, #0
 800b6d6:	809a      	strh	r2, [r3, #4]
	pdynamic->system__enable_xtalk_per_quadrant                = 0x00;
 800b6d8:	683b      	ldr	r3, [r7, #0]
 800b6da:	2200      	movs	r2, #0
 800b6dc:	719a      	strb	r2, [r3, #6]
	pdynamic->system__seed_config =
			ptuning_parms->tp_lite_seed_cfg;
 800b6de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6e0:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
	pdynamic->system__seed_config =
 800b6e4:	683b      	ldr	r3, [r7, #0]
 800b6e6:	71da      	strb	r2, [r3, #7]

	/* Timing A */
	pdynamic->sd_config__woi_sd0                               = 0x0B;
 800b6e8:	683b      	ldr	r3, [r7, #0]
 800b6ea:	220b      	movs	r2, #11
 800b6ec:	721a      	strb	r2, [r3, #8]
	/* Timing B */
	pdynamic->sd_config__woi_sd1                               = 0x09;
 800b6ee:	683b      	ldr	r3, [r7, #0]
 800b6f0:	2209      	movs	r2, #9
 800b6f2:	725a      	strb	r2, [r3, #9]

	pdynamic->sd_config__initial_phase_sd0                     =
			ptuning_parms->tp_init_phase_rtn_lite_med;
 800b6f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6f6:	79da      	ldrb	r2, [r3, #7]
	pdynamic->sd_config__initial_phase_sd0                     =
 800b6f8:	683b      	ldr	r3, [r7, #0]
 800b6fa:	729a      	strb	r2, [r3, #10]
	pdynamic->sd_config__initial_phase_sd1                     =
			ptuning_parms->tp_init_phase_ref_lite_med;;
 800b6fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6fe:	7a9a      	ldrb	r2, [r3, #10]
	pdynamic->sd_config__initial_phase_sd1                     =
 800b700:	683b      	ldr	r3, [r7, #0]
 800b702:	72da      	strb	r2, [r3, #11]

	pdynamic->system__grouped_parameter_hold_1                 = 0x01;
 800b704:	683b      	ldr	r3, [r7, #0]
 800b706:	2201      	movs	r2, #1
 800b708:	731a      	strb	r2, [r3, #12]
	 *
	 *  Setting below 2nd order, Quantifier = 1024
	 */

	pdynamic->sd_config__first_order_select =
			ptuning_parms->tp_lite_first_order_select;
 800b70a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b70c:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
	pdynamic->sd_config__first_order_select =
 800b710:	683b      	ldr	r3, [r7, #0]
 800b712:	735a      	strb	r2, [r3, #13]
	pdynamic->sd_config__quantifier         =
			ptuning_parms->tp_lite_quantifier;
 800b714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b716:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
	pdynamic->sd_config__quantifier         =
 800b71a:	683b      	ldr	r3, [r7, #0]
 800b71c:	739a      	strb	r2, [r3, #14]

	/* Below defaults will be overwritten by zone_cfg
	 * Spad no = 199 (0xC7)
	 * Spad no =  63 (0x3F)
	 */
	pdynamic->roi_config__user_roi_centre_spad              = 0xC7;
 800b71e:	683b      	ldr	r3, [r7, #0]
 800b720:	22c7      	movs	r2, #199	; 0xc7
 800b722:	73da      	strb	r2, [r3, #15]
	/* 16x16 ROI */
	pdynamic->roi_config__user_roi_requested_global_xy_size = 0xFF;
 800b724:	683b      	ldr	r3, [r7, #0]
 800b726:	22ff      	movs	r2, #255	; 0xff
 800b728:	741a      	strb	r2, [r3, #16]


	pdynamic->system__sequence_config                          = \
 800b72a:	683b      	ldr	r3, [r7, #0]
 800b72c:	22db      	movs	r2, #219	; 0xdb
 800b72e:	745a      	strb	r2, [r3, #17]
			VL53L1_SEQUENCE_DSS1_EN | \
			VL53L1_SEQUENCE_DSS2_EN | \
			VL53L1_SEQUENCE_MM2_EN | \
			VL53L1_SEQUENCE_RANGE_EN;

	pdynamic->system__grouped_parameter_hold                   = 0x02;
 800b730:	683b      	ldr	r3, [r7, #0]
 800b732:	2202      	movs	r2, #2
 800b734:	749a      	strb	r2, [r3, #18]

	/* System control */


	psystem->system__stream_count_ctrl                         = 0x00;
 800b736:	6a3b      	ldr	r3, [r7, #32]
 800b738:	2200      	movs	r2, #0
 800b73a:	705a      	strb	r2, [r3, #1]
	psystem->firmware__enable                                  = 0x01;
 800b73c:	6a3b      	ldr	r3, [r7, #32]
 800b73e:	2201      	movs	r2, #1
 800b740:	709a      	strb	r2, [r3, #2]
	psystem->system__interrupt_clear                           = \
 800b742:	6a3b      	ldr	r3, [r7, #32]
 800b744:	2201      	movs	r2, #1
 800b746:	70da      	strb	r2, [r3, #3]
			VL53L1_CLEAR_RANGE_INT;

	psystem->system__mode_start                                = \
 800b748:	6a3b      	ldr	r3, [r7, #32]
 800b74a:	2221      	movs	r2, #33	; 0x21
 800b74c:	711a      	strb	r2, [r3, #4]
			VL53L1_DEVICEREADOUTMODE_SINGLE_SD | \
			VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;

	LOG_FUNCTION_END(status);

	return status;
 800b74e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b752:	4618      	mov	r0, r3
 800b754:	371c      	adds	r7, #28
 800b756:	46bd      	mov	sp, r7
 800b758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b75c:	4770      	bx	lr

0800b75e <VL53L1_preset_mode_standard_ranging_short_range>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 800b75e:	b580      	push	{r7, lr}
 800b760:	b088      	sub	sp, #32
 800b762:	af02      	add	r7, sp, #8
 800b764:	60f8      	str	r0, [r7, #12]
 800b766:	60b9      	str	r1, [r7, #8]
 800b768:	607a      	str	r2, [r7, #4]
 800b76a:	603b      	str	r3, [r7, #0]
	 * (up to 1.4 metres)
	 *
	 * PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800b76c:	2300      	movs	r3, #0
 800b76e:	75fb      	strb	r3, [r7, #23]

	/* Call standard ranging configuration followed by
	 * overrides for the  short range configuration
	 */

	status = VL53L1_preset_mode_standard_ranging(
 800b770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b772:	9301      	str	r3, [sp, #4]
 800b774:	6a3b      	ldr	r3, [r7, #32]
 800b776:	9300      	str	r3, [sp, #0]
 800b778:	683b      	ldr	r3, [r7, #0]
 800b77a:	687a      	ldr	r2, [r7, #4]
 800b77c:	68b9      	ldr	r1, [r7, #8]
 800b77e:	68f8      	ldr	r0, [r7, #12]
 800b780:	f7ff fecf 	bl	800b522 <VL53L1_preset_mode_standard_ranging>
 800b784:	4603      	mov	r3, r0
 800b786:	75fb      	strb	r3, [r7, #23]
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 800b788:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	d121      	bne.n	800b7d4 <VL53L1_preset_mode_standard_ranging_short_range+0x76>
		 * min_count_rate_rtn_limit_mcps = 0x0080 ->  9.7fp ->  1.0 Mcps
		 * valid_phase_low               = 0x08 -> 5.3fp -> 1.0
		 * valid_phase_high              = 0x38 -> 5.3fp -> 7.0 -> 1.4m
		 */

		ptiming->range_config__vcsel_period_a                = 0x07;
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	2207      	movs	r2, #7
 800b794:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b                = 0x05;
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	2205      	movs	r2, #5
 800b79a:	725a      	strb	r2, [r3, #9]
		ptiming->range_config__sigma_thresh                  =
				ptuning_parms->tp_lite_short_sigma_thresh_mm;
 800b79c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b79e:	8ada      	ldrh	r2, [r3, #22]
		ptiming->range_config__sigma_thresh                  =
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	815a      	strh	r2, [r3, #10]
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
				ptuning_parms->tp_lite_short_min_count_rate_rtn_mcps;
 800b7a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7a6:	8b9a      	ldrh	r2, [r3, #28]
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	819a      	strh	r2, [r3, #12]
		ptiming->range_config__valid_phase_low               = 0x08;
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	2208      	movs	r2, #8
 800b7b0:	739a      	strb	r2, [r3, #14]
		ptiming->range_config__valid_phase_high              = 0x38;
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	2238      	movs	r2, #56	; 0x38
 800b7b6:	73da      	strb	r2, [r3, #15]
		/* Dynamic Configuration
		 * SD0 -> Timing A
		 * SD1 -> Timing B
		 */

		pdynamic->sd_config__woi_sd0                         = 0x07;
 800b7b8:	683b      	ldr	r3, [r7, #0]
 800b7ba:	2207      	movs	r2, #7
 800b7bc:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1                         = 0x05;
 800b7be:	683b      	ldr	r3, [r7, #0]
 800b7c0:	2205      	movs	r2, #5
 800b7c2:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0               =
				ptuning_parms->tp_init_phase_rtn_lite_short;
 800b7c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7c6:	7a1a      	ldrb	r2, [r3, #8]
		pdynamic->sd_config__initial_phase_sd0               =
 800b7c8:	683b      	ldr	r3, [r7, #0]
 800b7ca:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1               =
				ptuning_parms->tp_init_phase_ref_lite_short;
 800b7cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7ce:	7ada      	ldrb	r2, [r3, #11]
		pdynamic->sd_config__initial_phase_sd1               =
 800b7d0:	683b      	ldr	r3, [r7, #0]
 800b7d2:	72da      	strb	r2, [r3, #11]
	}

	LOG_FUNCTION_END(status);

	return status;
 800b7d4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b7d8:	4618      	mov	r0, r3
 800b7da:	3718      	adds	r7, #24
 800b7dc:	46bd      	mov	sp, r7
 800b7de:	bd80      	pop	{r7, pc}

0800b7e0 <VL53L1_preset_mode_standard_ranging_long_range>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 800b7e0:	b580      	push	{r7, lr}
 800b7e2:	b088      	sub	sp, #32
 800b7e4:	af02      	add	r7, sp, #8
 800b7e6:	60f8      	str	r0, [r7, #12]
 800b7e8:	60b9      	str	r1, [r7, #8]
 800b7ea:	607a      	str	r2, [r7, #4]
 800b7ec:	603b      	str	r3, [r7, #0]
	 * (up to 4.8 metres)
	 *
	 *  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800b7ee:	2300      	movs	r3, #0
 800b7f0:	75fb      	strb	r3, [r7, #23]

	/* Call standard ranging configuration with
	 * overrides for long range configuration
	 */

	status = VL53L1_preset_mode_standard_ranging(
 800b7f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7f4:	9301      	str	r3, [sp, #4]
 800b7f6:	6a3b      	ldr	r3, [r7, #32]
 800b7f8:	9300      	str	r3, [sp, #0]
 800b7fa:	683b      	ldr	r3, [r7, #0]
 800b7fc:	687a      	ldr	r2, [r7, #4]
 800b7fe:	68b9      	ldr	r1, [r7, #8]
 800b800:	68f8      	ldr	r0, [r7, #12]
 800b802:	f7ff fe8e 	bl	800b522 <VL53L1_preset_mode_standard_ranging>
 800b806:	4603      	mov	r3, r0
 800b808:	75fb      	strb	r3, [r7, #23]
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 800b80a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b80e:	2b00      	cmp	r3, #0
 800b810:	d121      	bne.n	800b856 <VL53L1_preset_mode_standard_ranging_long_range+0x76>
		 * min_count_rate_rtn_limit_mcps = 0x0080 ->  9.7fp ->  1.0 Mcps
		 * valid_phase_low               = 0x08 -> 5.3fp ->  1.0
		 * valid_phase_high              = 0xB8 -> 5.3fp -> 23.0 -> 4.6m
		 */

		ptiming->range_config__vcsel_period_a                = 0x0F;
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	220f      	movs	r2, #15
 800b816:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b                = 0x0D;
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	220d      	movs	r2, #13
 800b81c:	725a      	strb	r2, [r3, #9]
		ptiming->range_config__sigma_thresh                  =
				ptuning_parms->tp_lite_long_sigma_thresh_mm;
 800b81e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b820:	8a5a      	ldrh	r2, [r3, #18]
		ptiming->range_config__sigma_thresh                  =
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	815a      	strh	r2, [r3, #10]
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
				ptuning_parms->tp_lite_long_min_count_rate_rtn_mcps;
 800b826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b828:	8b1a      	ldrh	r2, [r3, #24]
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	819a      	strh	r2, [r3, #12]
		ptiming->range_config__valid_phase_low               = 0x08;
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	2208      	movs	r2, #8
 800b832:	739a      	strb	r2, [r3, #14]
		ptiming->range_config__valid_phase_high              = 0xB8;
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	22b8      	movs	r2, #184	; 0xb8
 800b838:	73da      	strb	r2, [r3, #15]
		/* Dynamic Configuration
		 * SD0 -> Timing A
		 * SD1 -> Timing B
		 */

		pdynamic->sd_config__woi_sd0                         = 0x0F;
 800b83a:	683b      	ldr	r3, [r7, #0]
 800b83c:	220f      	movs	r2, #15
 800b83e:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1                         = 0x0D;
 800b840:	683b      	ldr	r3, [r7, #0]
 800b842:	220d      	movs	r2, #13
 800b844:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0               =
				ptuning_parms->tp_init_phase_rtn_lite_long;
 800b846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b848:	799a      	ldrb	r2, [r3, #6]
		pdynamic->sd_config__initial_phase_sd0               =
 800b84a:	683b      	ldr	r3, [r7, #0]
 800b84c:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1               =
				ptuning_parms->tp_init_phase_ref_lite_long;
 800b84e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b850:	7a5a      	ldrb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd1               =
 800b852:	683b      	ldr	r3, [r7, #0]
 800b854:	72da      	strb	r2, [r3, #11]
	}

	LOG_FUNCTION_END(status);

	return status;
 800b856:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b85a:	4618      	mov	r0, r3
 800b85c:	3718      	adds	r7, #24
 800b85e:	46bd      	mov	sp, r7
 800b860:	bd80      	pop	{r7, pc}

0800b862 <VL53L1_preset_mode_standard_ranging_mm1_cal>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 800b862:	b580      	push	{r7, lr}
 800b864:	b088      	sub	sp, #32
 800b866:	af02      	add	r7, sp, #8
 800b868:	60f8      	str	r0, [r7, #12]
 800b86a:	60b9      	str	r1, [r7, #8]
 800b86c:	607a      	str	r2, [r7, #4]
 800b86e:	603b      	str	r3, [r7, #0]
	 * VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM1_CAL
	 *
	 * PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800b870:	2300      	movs	r3, #0
 800b872:	75fb      	strb	r3, [r7, #23]

	/* Call standard ranging configuration with
	 * overrides for long range configuration
	 */

	status = VL53L1_preset_mode_standard_ranging(
 800b874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b876:	9301      	str	r3, [sp, #4]
 800b878:	6a3b      	ldr	r3, [r7, #32]
 800b87a:	9300      	str	r3, [sp, #0]
 800b87c:	683b      	ldr	r3, [r7, #0]
 800b87e:	687a      	ldr	r2, [r7, #4]
 800b880:	68b9      	ldr	r1, [r7, #8]
 800b882:	68f8      	ldr	r0, [r7, #12]
 800b884:	f7ff fe4d 	bl	800b522 <VL53L1_preset_mode_standard_ranging>
 800b888:	4603      	mov	r3, r0
 800b88a:	75fb      	strb	r3, [r7, #23]
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 800b88c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b890:	2b00      	cmp	r3, #0
 800b892:	d105      	bne.n	800b8a0 <VL53L1_preset_mode_standard_ranging_mm1_cal+0x3e>

		pgeneral->dss_config__roi_mode_control =
 800b894:	68bb      	ldr	r3, [r7, #8]
 800b896:	2202      	movs	r2, #2
 800b898:	729a      	strb	r2, [r3, #10]
				VL53L1_DEVICEDSSMODE__REQUESTED_EFFFECTIVE_SPADS;

		pdynamic->system__sequence_config  = \
 800b89a:	683b      	ldr	r3, [r7, #0]
 800b89c:	223b      	movs	r2, #59	; 0x3b
 800b89e:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_MM1_EN;
	}

	LOG_FUNCTION_END(status);

	return status;
 800b8a0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b8a4:	4618      	mov	r0, r3
 800b8a6:	3718      	adds	r7, #24
 800b8a8:	46bd      	mov	sp, r7
 800b8aa:	bd80      	pop	{r7, pc}

0800b8ac <VL53L1_preset_mode_standard_ranging_mm2_cal>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 800b8ac:	b580      	push	{r7, lr}
 800b8ae:	b088      	sub	sp, #32
 800b8b0:	af02      	add	r7, sp, #8
 800b8b2:	60f8      	str	r0, [r7, #12]
 800b8b4:	60b9      	str	r1, [r7, #8]
 800b8b6:	607a      	str	r2, [r7, #4]
 800b8b8:	603b      	str	r3, [r7, #0]
	 * VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM2_CAL
	 *
	 * PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800b8ba:	2300      	movs	r3, #0
 800b8bc:	75fb      	strb	r3, [r7, #23]

	/* Call standard ranging configuration with
	 * overrides for long range configuration
	 */

	status = VL53L1_preset_mode_standard_ranging(
 800b8be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8c0:	9301      	str	r3, [sp, #4]
 800b8c2:	6a3b      	ldr	r3, [r7, #32]
 800b8c4:	9300      	str	r3, [sp, #0]
 800b8c6:	683b      	ldr	r3, [r7, #0]
 800b8c8:	687a      	ldr	r2, [r7, #4]
 800b8ca:	68b9      	ldr	r1, [r7, #8]
 800b8cc:	68f8      	ldr	r0, [r7, #12]
 800b8ce:	f7ff fe28 	bl	800b522 <VL53L1_preset_mode_standard_ranging>
 800b8d2:	4603      	mov	r3, r0
 800b8d4:	75fb      	strb	r3, [r7, #23]
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 800b8d6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d105      	bne.n	800b8ea <VL53L1_preset_mode_standard_ranging_mm2_cal+0x3e>

		pgeneral->dss_config__roi_mode_control =
 800b8de:	68bb      	ldr	r3, [r7, #8]
 800b8e0:	2202      	movs	r2, #2
 800b8e2:	729a      	strb	r2, [r3, #10]
				VL53L1_DEVICEDSSMODE__REQUESTED_EFFFECTIVE_SPADS;

		pdynamic->system__sequence_config  = \
 800b8e4:	683b      	ldr	r3, [r7, #0]
 800b8e6:	225b      	movs	r2, #91	; 0x5b
 800b8e8:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_MM2_EN;
	}

	LOG_FUNCTION_END(status);

	return status;
 800b8ea:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b8ee:	4618      	mov	r0, r3
 800b8f0:	3718      	adds	r7, #24
 800b8f2:	46bd      	mov	sp, r7
 800b8f4:	bd80      	pop	{r7, pc}

0800b8f6 <VL53L1_preset_mode_timed_ranging>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 800b8f6:	b580      	push	{r7, lr}
 800b8f8:	b088      	sub	sp, #32
 800b8fa:	af02      	add	r7, sp, #8
 800b8fc:	60f8      	str	r0, [r7, #12]
 800b8fe:	60b9      	str	r1, [r7, #8]
 800b900:	607a      	str	r2, [r7, #4]
 800b902:	603b      	str	r3, [r7, #0]
	*  - timed
	*
	*  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800b904:	2300      	movs	r3, #0
 800b906:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_standard_ranging(
 800b908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b90a:	9301      	str	r3, [sp, #4]
 800b90c:	6a3b      	ldr	r3, [r7, #32]
 800b90e:	9300      	str	r3, [sp, #0]
 800b910:	683b      	ldr	r3, [r7, #0]
 800b912:	687a      	ldr	r2, [r7, #4]
 800b914:	68b9      	ldr	r1, [r7, #8]
 800b916:	68f8      	ldr	r0, [r7, #12]
 800b918:	f7ff fe03 	bl	800b522 <VL53L1_preset_mode_standard_ranging>
 800b91c:	4603      	mov	r3, r0
 800b91e:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 800b920:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b924:	2b00      	cmp	r3, #0
 800b926:	d11a      	bne.n	800b95e <VL53L1_preset_mode_timed_ranging+0x68>

		/* Dynamic Configuration */

		/* Disable GPH  */
		pdynamic->system__grouped_parameter_hold = 0x00;
 800b928:	683b      	ldr	r3, [r7, #0]
 800b92a:	2200      	movs	r2, #0
 800b92c:	749a      	strb	r2, [r3, #18]

		/* Re-Configure timing budget default for 13ms */
		ptiming->range_config__timeout_macrop_a_hi                = 0x00;
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	2200      	movs	r2, #0
 800b932:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo                = 0xB1;
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	22b1      	movs	r2, #177	; 0xb1
 800b938:	715a      	strb	r2, [r3, #5]
		/* Setup for 13ms default */
		ptiming->range_config__timeout_macrop_b_hi                = 0x00;
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	2200      	movs	r2, #0
 800b93e:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo                = 0xD4;
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	22d4      	movs	r2, #212	; 0xd4
 800b944:	721a      	strb	r2, [r3, #8]

		/* Timing Configuration */

		ptiming->system__intermeasurement_period = 0x00000600;
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800b94c:	611a      	str	r2, [r3, #16]
		pdynamic->system__seed_config =
				ptuning_parms->tp_timed_seed_cfg;
 800b94e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b950:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
		pdynamic->system__seed_config =
 800b954:	683b      	ldr	r3, [r7, #0]
 800b956:	71da      	strb	r2, [r3, #7]

		/* System control */

		/* Configure Timed/Psuedo-solo mode */
		psystem->system__mode_start =
 800b958:	6a3b      	ldr	r3, [r7, #32]
 800b95a:	2240      	movs	r2, #64	; 0x40
 800b95c:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_TIMED;
	}

	LOG_FUNCTION_END(status);

	return status;
 800b95e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b962:	4618      	mov	r0, r3
 800b964:	3718      	adds	r7, #24
 800b966:	46bd      	mov	sp, r7
 800b968:	bd80      	pop	{r7, pc}

0800b96a <VL53L1_preset_mode_timed_ranging_short_range>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 800b96a:	b580      	push	{r7, lr}
 800b96c:	b088      	sub	sp, #32
 800b96e:	af02      	add	r7, sp, #8
 800b970:	60f8      	str	r0, [r7, #12]
 800b972:	60b9      	str	r1, [r7, #8]
 800b974:	607a      	str	r2, [r7, #4]
 800b976:	603b      	str	r3, [r7, #0]
	*  - timed
	*
	*  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800b978:	2300      	movs	r3, #0
 800b97a:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_standard_ranging_short_range(
 800b97c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b97e:	9301      	str	r3, [sp, #4]
 800b980:	6a3b      	ldr	r3, [r7, #32]
 800b982:	9300      	str	r3, [sp, #0]
 800b984:	683b      	ldr	r3, [r7, #0]
 800b986:	687a      	ldr	r2, [r7, #4]
 800b988:	68b9      	ldr	r1, [r7, #8]
 800b98a:	68f8      	ldr	r0, [r7, #12]
 800b98c:	f7ff fee7 	bl	800b75e <VL53L1_preset_mode_standard_ranging_short_range>
 800b990:	4603      	mov	r3, r0
 800b992:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 800b994:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b998:	2b00      	cmp	r3, #0
 800b99a:	d11a      	bne.n	800b9d2 <VL53L1_preset_mode_timed_ranging_short_range+0x68>

		/* Dynamic Configuration */

		/* Disable GPH  */
		pdynamic->system__grouped_parameter_hold = 0x00;
 800b99c:	683b      	ldr	r3, [r7, #0]
 800b99e:	2200      	movs	r2, #0
 800b9a0:	749a      	strb	r2, [r3, #18]


		/* Timing Configuration */

		/* Re-Configure timing budget default for 13ms */
		ptiming->range_config__timeout_macrop_a_hi                = 0x01;
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	2201      	movs	r2, #1
 800b9a6:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo                = 0x84;
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	2284      	movs	r2, #132	; 0x84
 800b9ac:	715a      	strb	r2, [r3, #5]
		/* Setup for 13ms default */
		ptiming->range_config__timeout_macrop_b_hi                = 0x01;
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	2201      	movs	r2, #1
 800b9b2:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo                = 0xB1;
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	22b1      	movs	r2, #177	; 0xb1
 800b9b8:	721a      	strb	r2, [r3, #8]

		ptiming->system__intermeasurement_period = 0x00000600;
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800b9c0:	611a      	str	r2, [r3, #16]
		pdynamic->system__seed_config =
				ptuning_parms->tp_timed_seed_cfg;
 800b9c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9c4:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
		pdynamic->system__seed_config =
 800b9c8:	683b      	ldr	r3, [r7, #0]
 800b9ca:	71da      	strb	r2, [r3, #7]

		/* System control */

		/* Configure Timed/Psuedo-solo mode */
		psystem->system__mode_start =
 800b9cc:	6a3b      	ldr	r3, [r7, #32]
 800b9ce:	2240      	movs	r2, #64	; 0x40
 800b9d0:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_TIMED;
	}

	LOG_FUNCTION_END(status);

	return status;
 800b9d2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b9d6:	4618      	mov	r0, r3
 800b9d8:	3718      	adds	r7, #24
 800b9da:	46bd      	mov	sp, r7
 800b9dc:	bd80      	pop	{r7, pc}

0800b9de <VL53L1_preset_mode_timed_ranging_long_range>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 800b9de:	b580      	push	{r7, lr}
 800b9e0:	b088      	sub	sp, #32
 800b9e2:	af02      	add	r7, sp, #8
 800b9e4:	60f8      	str	r0, [r7, #12]
 800b9e6:	60b9      	str	r1, [r7, #8]
 800b9e8:	607a      	str	r2, [r7, #4]
 800b9ea:	603b      	str	r3, [r7, #0]
	*  - timed
	*
	*  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800b9ec:	2300      	movs	r3, #0
 800b9ee:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_standard_ranging_long_range(
 800b9f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9f2:	9301      	str	r3, [sp, #4]
 800b9f4:	6a3b      	ldr	r3, [r7, #32]
 800b9f6:	9300      	str	r3, [sp, #0]
 800b9f8:	683b      	ldr	r3, [r7, #0]
 800b9fa:	687a      	ldr	r2, [r7, #4]
 800b9fc:	68b9      	ldr	r1, [r7, #8]
 800b9fe:	68f8      	ldr	r0, [r7, #12]
 800ba00:	f7ff feee 	bl	800b7e0 <VL53L1_preset_mode_standard_ranging_long_range>
 800ba04:	4603      	mov	r3, r0
 800ba06:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 800ba08:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	d11a      	bne.n	800ba46 <VL53L1_preset_mode_timed_ranging_long_range+0x68>

		/* Dynamic Configuration */

		/* Disable GPH  */
		pdynamic->system__grouped_parameter_hold = 0x00;
 800ba10:	683b      	ldr	r3, [r7, #0]
 800ba12:	2200      	movs	r2, #0
 800ba14:	749a      	strb	r2, [r3, #18]


		/* Timing Configuration */

		/* Re-Configure timing budget default for 13ms */
		ptiming->range_config__timeout_macrop_a_hi                = 0x00;
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	2200      	movs	r2, #0
 800ba1a:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo                = 0x97;
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	2297      	movs	r2, #151	; 0x97
 800ba20:	715a      	strb	r2, [r3, #5]
		/* Setup for 13ms default */
		ptiming->range_config__timeout_macrop_b_hi                = 0x00;
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	2200      	movs	r2, #0
 800ba26:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo                = 0xB1;
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	22b1      	movs	r2, #177	; 0xb1
 800ba2c:	721a      	strb	r2, [r3, #8]

		ptiming->system__intermeasurement_period = 0x00000600;
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800ba34:	611a      	str	r2, [r3, #16]
		pdynamic->system__seed_config =
				ptuning_parms->tp_timed_seed_cfg;
 800ba36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba38:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
		pdynamic->system__seed_config =
 800ba3c:	683b      	ldr	r3, [r7, #0]
 800ba3e:	71da      	strb	r2, [r3, #7]

		/* System control */

		/* Configure Timed/Psuedo-solo mode */
		psystem->system__mode_start =
 800ba40:	6a3b      	ldr	r3, [r7, #32]
 800ba42:	2240      	movs	r2, #64	; 0x40
 800ba44:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_TIMED;
	}

	LOG_FUNCTION_END(status);

	return status;
 800ba46:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ba4a:	4618      	mov	r0, r3
 800ba4c:	3718      	adds	r7, #24
 800ba4e:	46bd      	mov	sp, r7
 800ba50:	bd80      	pop	{r7, pc}

0800ba52 <VL53L1_preset_mode_low_power_auto_ranging>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_low_power_auto_data_t *plpadata)
{
 800ba52:	b580      	push	{r7, lr}
 800ba54:	b088      	sub	sp, #32
 800ba56:	af02      	add	r7, sp, #8
 800ba58:	60f8      	str	r0, [r7, #12]
 800ba5a:	60b9      	str	r1, [r7, #8]
 800ba5c:	607a      	str	r2, [r7, #4]
 800ba5e:	603b      	str	r3, [r7, #0]
	*  - special low power auto mode for Presence application
	*
	*  PLEASE NOTE THE SETTINGS BELOW ARE PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800ba60:	2300      	movs	r3, #0
 800ba62:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_timed_ranging(
 800ba64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba66:	9301      	str	r3, [sp, #4]
 800ba68:	6a3b      	ldr	r3, [r7, #32]
 800ba6a:	9300      	str	r3, [sp, #0]
 800ba6c:	683b      	ldr	r3, [r7, #0]
 800ba6e:	687a      	ldr	r2, [r7, #4]
 800ba70:	68b9      	ldr	r1, [r7, #8]
 800ba72:	68f8      	ldr	r0, [r7, #12]
 800ba74:	f7ff ff3f 	bl	800b8f6 <VL53L1_preset_mode_timed_ranging>
 800ba78:	4603      	mov	r3, r0
 800ba7a:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now setup the low power auto mode */

	if (status == VL53L1_ERROR_NONE) {
 800ba7c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d106      	bne.n	800ba92 <VL53L1_preset_mode_low_power_auto_ranging+0x40>
		status = VL53L1_config_low_power_auto_mode(
 800ba84:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ba86:	6839      	ldr	r1, [r7, #0]
 800ba88:	68b8      	ldr	r0, [r7, #8]
 800ba8a:	f001 f865 	bl	800cb58 <VL53L1_config_low_power_auto_mode>
 800ba8e:	4603      	mov	r3, r0
 800ba90:	75fb      	strb	r3, [r7, #23]
				);
	}

	LOG_FUNCTION_END(status);

	return status;
 800ba92:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ba96:	4618      	mov	r0, r3
 800ba98:	3718      	adds	r7, #24
 800ba9a:	46bd      	mov	sp, r7
 800ba9c:	bd80      	pop	{r7, pc}

0800ba9e <VL53L1_preset_mode_low_power_auto_short_ranging>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_low_power_auto_data_t *plpadata)
{
 800ba9e:	b580      	push	{r7, lr}
 800baa0:	b088      	sub	sp, #32
 800baa2:	af02      	add	r7, sp, #8
 800baa4:	60f8      	str	r0, [r7, #12]
 800baa6:	60b9      	str	r1, [r7, #8]
 800baa8:	607a      	str	r2, [r7, #4]
 800baaa:	603b      	str	r3, [r7, #0]
	*  - special low power auto mode for Presence application
	*
	*  PLEASE NOTE THE SETTINGS BELOW ARE PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800baac:	2300      	movs	r3, #0
 800baae:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_timed_ranging_short_range(
 800bab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bab2:	9301      	str	r3, [sp, #4]
 800bab4:	6a3b      	ldr	r3, [r7, #32]
 800bab6:	9300      	str	r3, [sp, #0]
 800bab8:	683b      	ldr	r3, [r7, #0]
 800baba:	687a      	ldr	r2, [r7, #4]
 800babc:	68b9      	ldr	r1, [r7, #8]
 800babe:	68f8      	ldr	r0, [r7, #12]
 800bac0:	f7ff ff53 	bl	800b96a <VL53L1_preset_mode_timed_ranging_short_range>
 800bac4:	4603      	mov	r3, r0
 800bac6:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now setup the low power auto mode */

	if (status == VL53L1_ERROR_NONE) {
 800bac8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bacc:	2b00      	cmp	r3, #0
 800bace:	d106      	bne.n	800bade <VL53L1_preset_mode_low_power_auto_short_ranging+0x40>
		status = VL53L1_config_low_power_auto_mode(
 800bad0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bad2:	6839      	ldr	r1, [r7, #0]
 800bad4:	68b8      	ldr	r0, [r7, #8]
 800bad6:	f001 f83f 	bl	800cb58 <VL53L1_config_low_power_auto_mode>
 800bada:	4603      	mov	r3, r0
 800badc:	75fb      	strb	r3, [r7, #23]
				);
	}

	LOG_FUNCTION_END(status);

	return status;
 800bade:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bae2:	4618      	mov	r0, r3
 800bae4:	3718      	adds	r7, #24
 800bae6:	46bd      	mov	sp, r7
 800bae8:	bd80      	pop	{r7, pc}

0800baea <VL53L1_preset_mode_low_power_auto_long_ranging>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_low_power_auto_data_t *plpadata)
{
 800baea:	b580      	push	{r7, lr}
 800baec:	b088      	sub	sp, #32
 800baee:	af02      	add	r7, sp, #8
 800baf0:	60f8      	str	r0, [r7, #12]
 800baf2:	60b9      	str	r1, [r7, #8]
 800baf4:	607a      	str	r2, [r7, #4]
 800baf6:	603b      	str	r3, [r7, #0]
	*  - special low power auto mode for Presence application
	*
	*  PLEASE NOTE THE SETTINGS BELOW ARE PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800baf8:	2300      	movs	r3, #0
 800bafa:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_timed_ranging_long_range(
 800bafc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bafe:	9301      	str	r3, [sp, #4]
 800bb00:	6a3b      	ldr	r3, [r7, #32]
 800bb02:	9300      	str	r3, [sp, #0]
 800bb04:	683b      	ldr	r3, [r7, #0]
 800bb06:	687a      	ldr	r2, [r7, #4]
 800bb08:	68b9      	ldr	r1, [r7, #8]
 800bb0a:	68f8      	ldr	r0, [r7, #12]
 800bb0c:	f7ff ff67 	bl	800b9de <VL53L1_preset_mode_timed_ranging_long_range>
 800bb10:	4603      	mov	r3, r0
 800bb12:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now setup the low power auto mode */

	if (status == VL53L1_ERROR_NONE) {
 800bb14:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	d106      	bne.n	800bb2a <VL53L1_preset_mode_low_power_auto_long_ranging+0x40>
		status = VL53L1_config_low_power_auto_mode(
 800bb1c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bb1e:	6839      	ldr	r1, [r7, #0]
 800bb20:	68b8      	ldr	r0, [r7, #8]
 800bb22:	f001 f819 	bl	800cb58 <VL53L1_config_low_power_auto_mode>
 800bb26:	4603      	mov	r3, r0
 800bb28:	75fb      	strb	r3, [r7, #23]
				);
	}

	LOG_FUNCTION_END(status);

	return status;
 800bb2a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bb2e:	4618      	mov	r0, r3
 800bb30:	3718      	adds	r7, #24
 800bb32:	46bd      	mov	sp, r7
 800bb34:	bd80      	pop	{r7, pc}

0800bb36 <VL53L1_preset_mode_singleshot_ranging>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 800bb36:	b580      	push	{r7, lr}
 800bb38:	b088      	sub	sp, #32
 800bb3a:	af02      	add	r7, sp, #8
 800bb3c:	60f8      	str	r0, [r7, #12]
 800bb3e:	60b9      	str	r1, [r7, #8]
 800bb40:	607a      	str	r2, [r7, #4]
 800bb42:	603b      	str	r3, [r7, #0]
	*  - timed
	*
	*  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800bb44:	2300      	movs	r3, #0
 800bb46:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_standard_ranging(
 800bb48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb4a:	9301      	str	r3, [sp, #4]
 800bb4c:	6a3b      	ldr	r3, [r7, #32]
 800bb4e:	9300      	str	r3, [sp, #0]
 800bb50:	683b      	ldr	r3, [r7, #0]
 800bb52:	687a      	ldr	r2, [r7, #4]
 800bb54:	68b9      	ldr	r1, [r7, #8]
 800bb56:	68f8      	ldr	r0, [r7, #12]
 800bb58:	f7ff fce3 	bl	800b522 <VL53L1_preset_mode_standard_ranging>
 800bb5c:	4603      	mov	r3, r0
 800bb5e:	75fb      	strb	r3, [r7, #23]
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 800bb60:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	d116      	bne.n	800bb96 <VL53L1_preset_mode_singleshot_ranging+0x60>

		/* Dynamic Configuration */

		/* Disable GPH  */
		pdynamic->system__grouped_parameter_hold = 0x00;
 800bb68:	683b      	ldr	r3, [r7, #0]
 800bb6a:	2200      	movs	r2, #0
 800bb6c:	749a      	strb	r2, [r3, #18]

		/* Timing Configuration */

		/* Re-Configure timing budget default for 13ms */
		ptiming->range_config__timeout_macrop_a_hi                = 0x00;
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	2200      	movs	r2, #0
 800bb72:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo                = 0xB1;
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	22b1      	movs	r2, #177	; 0xb1
 800bb78:	715a      	strb	r2, [r3, #5]
		/* Setup for 13ms default */
		ptiming->range_config__timeout_macrop_b_hi                = 0x00;
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	2200      	movs	r2, #0
 800bb7e:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo                = 0xD4;
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	22d4      	movs	r2, #212	; 0xd4
 800bb84:	721a      	strb	r2, [r3, #8]

		pdynamic->system__seed_config =
				ptuning_parms->tp_timed_seed_cfg;
 800bb86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb88:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
		pdynamic->system__seed_config =
 800bb8c:	683b      	ldr	r3, [r7, #0]
 800bb8e:	71da      	strb	r2, [r3, #7]

		/* System control */

		/* Configure Timed/Psuedo-solo mode */
		psystem->system__mode_start = \
 800bb90:	6a3b      	ldr	r3, [r7, #32]
 800bb92:	2210      	movs	r2, #16
 800bb94:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_SINGLESHOT;
	}

	LOG_FUNCTION_END(status);

	return status;
 800bb96:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bb9a:	4618      	mov	r0, r3
 800bb9c:	3718      	adds	r7, #24
 800bb9e:	46bd      	mov	sp, r7
 800bba0:	bd80      	pop	{r7, pc}

0800bba2 <VL53L1_preset_mode_olt>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 800bba2:	b580      	push	{r7, lr}
 800bba4:	b088      	sub	sp, #32
 800bba6:	af02      	add	r7, sp, #8
 800bba8:	60f8      	str	r0, [r7, #12]
 800bbaa:	60b9      	str	r1, [r7, #8]
 800bbac:	607a      	str	r2, [r7, #4]
 800bbae:	603b      	str	r3, [r7, #0]
	 * VL53L1_DEVICEPRESETMODE_OLT
	 *
	 *  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800bbb0:	2300      	movs	r3, #0
 800bbb2:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_standard_ranging(
 800bbb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbb6:	9301      	str	r3, [sp, #4]
 800bbb8:	6a3b      	ldr	r3, [r7, #32]
 800bbba:	9300      	str	r3, [sp, #0]
 800bbbc:	683b      	ldr	r3, [r7, #0]
 800bbbe:	687a      	ldr	r2, [r7, #4]
 800bbc0:	68b9      	ldr	r1, [r7, #8]
 800bbc2:	68f8      	ldr	r0, [r7, #12]
 800bbc4:	f7ff fcad 	bl	800b522 <VL53L1_preset_mode_standard_ranging>
 800bbc8:	4603      	mov	r3, r0
 800bbca:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now override OLT specific registers */

	if (status == VL53L1_ERROR_NONE) {
 800bbcc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	d102      	bne.n	800bbda <VL53L1_preset_mode_olt+0x38>

		/* Disables requirement for host handshake */
		psystem->system__stream_count_ctrl  = 0x01;
 800bbd4:	6a3b      	ldr	r3, [r7, #32]
 800bbd6:	2201      	movs	r2, #1
 800bbd8:	705a      	strb	r2, [r3, #1]
	}

	LOG_FUNCTION_END(status);

	return status;
 800bbda:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bbde:	4618      	mov	r0, r3
 800bbe0:	3718      	adds	r7, #24
 800bbe2:	46bd      	mov	sp, r7
 800bbe4:	bd80      	pop	{r7, pc}
	...

0800bbe8 <VL53L1_get_range_status_string>:


VL53L1_Error VL53L1_get_range_status_string(
	uint8_t   RangeStatus,
	char    *pRangeStatusString)
{
 800bbe8:	b580      	push	{r7, lr}
 800bbea:	b084      	sub	sp, #16
 800bbec:	af00      	add	r7, sp, #0
 800bbee:	4603      	mov	r3, r0
 800bbf0:	6039      	str	r1, [r7, #0]
 800bbf2:	71fb      	strb	r3, [r7, #7]
	VL53L1_Error status = VL53L1_ERROR_NONE;
 800bbf4:	2300      	movs	r3, #0
 800bbf6:	73fb      	strb	r3, [r7, #15]

#ifdef VL53L1_USE_EMPTY_STRING
	SUPPRESS_UNUSED_WARNING(RangeStatus);
	VL53L1_COPYSTRING(pRangeStatusString, "");
#else
	switch (RangeStatus) {
 800bbf8:	79fb      	ldrb	r3, [r7, #7]
 800bbfa:	2b05      	cmp	r3, #5
 800bbfc:	d838      	bhi.n	800bc70 <VL53L1_get_range_status_string+0x88>
 800bbfe:	a201      	add	r2, pc, #4	; (adr r2, 800bc04 <VL53L1_get_range_status_string+0x1c>)
 800bc00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc04:	0800bc1d 	.word	0x0800bc1d
 800bc08:	0800bc2b 	.word	0x0800bc2b
 800bc0c:	0800bc39 	.word	0x0800bc39
 800bc10:	0800bc47 	.word	0x0800bc47
 800bc14:	0800bc55 	.word	0x0800bc55
 800bc18:	0800bc63 	.word	0x0800bc63
	case 0:
		VL53L1_COPYSTRING(pRangeStatusString,
 800bc1c:	f240 12ff 	movw	r2, #511	; 0x1ff
 800bc20:	4919      	ldr	r1, [pc, #100]	; (800bc88 <VL53L1_get_range_status_string+0xa0>)
 800bc22:	6838      	ldr	r0, [r7, #0]
 800bc24:	f003 f9f7 	bl	800f016 <strncpy>
			VL53L1_STRING_RANGESTATUS_RANGEVALID);
	break;
 800bc28:	e028      	b.n	800bc7c <VL53L1_get_range_status_string+0x94>
	case 1:
		VL53L1_COPYSTRING(pRangeStatusString,
 800bc2a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800bc2e:	4917      	ldr	r1, [pc, #92]	; (800bc8c <VL53L1_get_range_status_string+0xa4>)
 800bc30:	6838      	ldr	r0, [r7, #0]
 800bc32:	f003 f9f0 	bl	800f016 <strncpy>
			VL53L1_STRING_RANGESTATUS_SIGMA);
	break;
 800bc36:	e021      	b.n	800bc7c <VL53L1_get_range_status_string+0x94>
	case 2:
		VL53L1_COPYSTRING(pRangeStatusString,
 800bc38:	f240 12ff 	movw	r2, #511	; 0x1ff
 800bc3c:	4914      	ldr	r1, [pc, #80]	; (800bc90 <VL53L1_get_range_status_string+0xa8>)
 800bc3e:	6838      	ldr	r0, [r7, #0]
 800bc40:	f003 f9e9 	bl	800f016 <strncpy>
			VL53L1_STRING_RANGESTATUS_SIGNAL);
	break;
 800bc44:	e01a      	b.n	800bc7c <VL53L1_get_range_status_string+0x94>
	case 3:
		VL53L1_COPYSTRING(pRangeStatusString,
 800bc46:	f240 12ff 	movw	r2, #511	; 0x1ff
 800bc4a:	4912      	ldr	r1, [pc, #72]	; (800bc94 <VL53L1_get_range_status_string+0xac>)
 800bc4c:	6838      	ldr	r0, [r7, #0]
 800bc4e:	f003 f9e2 	bl	800f016 <strncpy>
			VL53L1_STRING_RANGESTATUS_MINRANGE);
	break;
 800bc52:	e013      	b.n	800bc7c <VL53L1_get_range_status_string+0x94>
	case 4:
		VL53L1_COPYSTRING(pRangeStatusString,
 800bc54:	f240 12ff 	movw	r2, #511	; 0x1ff
 800bc58:	490f      	ldr	r1, [pc, #60]	; (800bc98 <VL53L1_get_range_status_string+0xb0>)
 800bc5a:	6838      	ldr	r0, [r7, #0]
 800bc5c:	f003 f9db 	bl	800f016 <strncpy>
			VL53L1_STRING_RANGESTATUS_PHASE);
	break;
 800bc60:	e00c      	b.n	800bc7c <VL53L1_get_range_status_string+0x94>
	case 5:
		VL53L1_COPYSTRING(pRangeStatusString,
 800bc62:	f240 12ff 	movw	r2, #511	; 0x1ff
 800bc66:	490d      	ldr	r1, [pc, #52]	; (800bc9c <VL53L1_get_range_status_string+0xb4>)
 800bc68:	6838      	ldr	r0, [r7, #0]
 800bc6a:	f003 f9d4 	bl	800f016 <strncpy>
			VL53L1_STRING_RANGESTATUS_HW);
	break;
 800bc6e:	e005      	b.n	800bc7c <VL53L1_get_range_status_string+0x94>

	default: /**/
		VL53L1_COPYSTRING(pRangeStatusString,
 800bc70:	f240 12ff 	movw	r2, #511	; 0x1ff
 800bc74:	490a      	ldr	r1, [pc, #40]	; (800bca0 <VL53L1_get_range_status_string+0xb8>)
 800bc76:	6838      	ldr	r0, [r7, #0]
 800bc78:	f003 f9cd 	bl	800f016 <strncpy>
			VL53L1_STRING_RANGESTATUS_NONE);
	}
#endif

	LOG_FUNCTION_END(status);
	return status;
 800bc7c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800bc80:	4618      	mov	r0, r3
 800bc82:	3710      	adds	r7, #16
 800bc84:	46bd      	mov	sp, r7
 800bc86:	bd80      	pop	{r7, pc}
 800bc88:	08013230 	.word	0x08013230
 800bc8c:	0801323c 	.word	0x0801323c
 800bc90:	08013248 	.word	0x08013248
 800bc94:	08013254 	.word	0x08013254
 800bc98:	08013264 	.word	0x08013264
 800bc9c:	08013270 	.word	0x08013270
 800bca0:	08013280 	.word	0x08013280

0800bca4 <VL53L1_init_version>:
	level, VL53L1_TRACE_FUNCTION_NONE, ##__VA_ARGS__)


void  VL53L1_init_version(
	VL53L1_DEV        Dev)
{
 800bca4:	b480      	push	{r7}
 800bca6:	b085      	sub	sp, #20
 800bca8:	af00      	add	r7, sp, #0
 800bcaa:	6078      	str	r0, [r7, #4]
	/**
	 * Initialise version structure
	 */

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	60fb      	str	r3, [r7, #12]

	pdev->version.ll_major    = VL53L1_LL_API_IMPLEMENTATION_VER_MAJOR;
 800bcb0:	68fb      	ldr	r3, [r7, #12]
 800bcb2:	2201      	movs	r2, #1
 800bcb4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	pdev->version.ll_minor    = VL53L1_LL_API_IMPLEMENTATION_VER_MINOR;
 800bcb8:	68fb      	ldr	r3, [r7, #12]
 800bcba:	2202      	movs	r2, #2
 800bcbc:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	pdev->version.ll_build    = VL53L1_LL_API_IMPLEMENTATION_VER_SUB;
 800bcc0:	68fb      	ldr	r3, [r7, #12]
 800bcc2:	220d      	movs	r2, #13
 800bcc4:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	pdev->version.ll_revision = VL53L1_LL_API_IMPLEMENTATION_VER_REVISION;
 800bcc8:	68fb      	ldr	r3, [r7, #12]
 800bcca:	f640 028e 	movw	r2, #2190	; 0x88e
 800bcce:	625a      	str	r2, [r3, #36]	; 0x24
}
 800bcd0:	bf00      	nop
 800bcd2:	3714      	adds	r7, #20
 800bcd4:	46bd      	mov	sp, r7
 800bcd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcda:	4770      	bx	lr

0800bcdc <VL53L1_init_ll_driver_state>:


void  VL53L1_init_ll_driver_state(
	VL53L1_DEV         Dev,
	VL53L1_DeviceState device_state)
{
 800bcdc:	b480      	push	{r7}
 800bcde:	b085      	sub	sp, #20
 800bce0:	af00      	add	r7, sp, #0
 800bce2:	6078      	str	r0, [r7, #4]
 800bce4:	460b      	mov	r3, r1
 800bce6:	70fb      	strb	r3, [r7, #3]
	/**
	 * Initialise LL Driver state variables
	 */

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	60fb      	str	r3, [r7, #12]
	VL53L1_ll_driver_state_t *pstate = &(pdev->ll_state);
 800bcec:	68fb      	ldr	r3, [r7, #12]
 800bcee:	332c      	adds	r3, #44	; 0x2c
 800bcf0:	60bb      	str	r3, [r7, #8]

	pstate->cfg_device_state  = device_state;
 800bcf2:	68bb      	ldr	r3, [r7, #8]
 800bcf4:	78fa      	ldrb	r2, [r7, #3]
 800bcf6:	701a      	strb	r2, [r3, #0]
	pstate->cfg_stream_count  = 0;
 800bcf8:	68bb      	ldr	r3, [r7, #8]
 800bcfa:	2200      	movs	r2, #0
 800bcfc:	705a      	strb	r2, [r3, #1]
	pstate->cfg_gph_id        = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800bcfe:	68bb      	ldr	r3, [r7, #8]
 800bd00:	2202      	movs	r2, #2
 800bd02:	709a      	strb	r2, [r3, #2]
	pstate->cfg_timing_status = 0;
 800bd04:	68bb      	ldr	r3, [r7, #8]
 800bd06:	2200      	movs	r2, #0
 800bd08:	70da      	strb	r2, [r3, #3]

	pstate->rd_device_state   = device_state;
 800bd0a:	68bb      	ldr	r3, [r7, #8]
 800bd0c:	78fa      	ldrb	r2, [r7, #3]
 800bd0e:	711a      	strb	r2, [r3, #4]
	pstate->rd_stream_count   = 0;
 800bd10:	68bb      	ldr	r3, [r7, #8]
 800bd12:	2200      	movs	r2, #0
 800bd14:	715a      	strb	r2, [r3, #5]
	pstate->rd_gph_id         = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800bd16:	68bb      	ldr	r3, [r7, #8]
 800bd18:	2202      	movs	r2, #2
 800bd1a:	719a      	strb	r2, [r3, #6]
	pstate->rd_timing_status  = 0;
 800bd1c:	68bb      	ldr	r3, [r7, #8]
 800bd1e:	2200      	movs	r2, #0
 800bd20:	71da      	strb	r2, [r3, #7]

}
 800bd22:	bf00      	nop
 800bd24:	3714      	adds	r7, #20
 800bd26:	46bd      	mov	sp, r7
 800bd28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd2c:	4770      	bx	lr
	...

0800bd30 <VL53L1_update_ll_driver_rd_state>:


VL53L1_Error  VL53L1_update_ll_driver_rd_state(
	VL53L1_DEV         Dev)
{
 800bd30:	b480      	push	{r7}
 800bd32:	b087      	sub	sp, #28
 800bd34:	af00      	add	r7, sp, #0
 800bd36:	6078      	str	r0, [r7, #4]
	 * VL53L1_DEVICESTATE_RANGING_WAIT_GPH_SYNC
	 * VL53L1_DEVICESTATE_RANGING_GATHER_DATA
	 * VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA
	 */

	VL53L1_Error        status  = VL53L1_ERROR_NONE;
 800bd38:	2300      	movs	r3, #0
 800bd3a:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	613b      	str	r3, [r7, #16]
	VL53L1_ll_driver_state_t *pstate = &(pdev->ll_state);
 800bd40:	693b      	ldr	r3, [r7, #16]
 800bd42:	332c      	adds	r3, #44	; 0x2c
 800bd44:	60fb      	str	r3, [r7, #12]

#ifdef VL53L1_LOGGING
	VL53L1_print_ll_driver_state(pstate);
#endif

	if ((pdev->sys_ctrl.system__mode_start &
 800bd46:	693b      	ldr	r3, [r7, #16]
 800bd48:	f893 31cc 	ldrb.w	r3, [r3, #460]	; 0x1cc
 800bd4c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	d10c      	bne.n	800bd6e <VL53L1_update_ll_driver_rd_state+0x3e>
		VL53L1_DEVICEMEASUREMENTMODE_MODE_MASK) == 0x00) {

		pstate->rd_device_state  = VL53L1_DEVICESTATE_SW_STANDBY;
 800bd54:	68fb      	ldr	r3, [r7, #12]
 800bd56:	2203      	movs	r2, #3
 800bd58:	711a      	strb	r2, [r3, #4]
		pstate->rd_stream_count  = 0;
 800bd5a:	68fb      	ldr	r3, [r7, #12]
 800bd5c:	2200      	movs	r2, #0
 800bd5e:	715a      	strb	r2, [r3, #5]
		pstate->rd_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800bd60:	68fb      	ldr	r3, [r7, #12]
 800bd62:	2202      	movs	r2, #2
 800bd64:	719a      	strb	r2, [r3, #6]
		pstate->rd_timing_status = 0;
 800bd66:	68fb      	ldr	r3, [r7, #12]
 800bd68:	2200      	movs	r2, #0
 800bd6a:	71da      	strb	r2, [r3, #7]
 800bd6c:	e060      	b.n	800be30 <VL53L1_update_ll_driver_rd_state+0x100>

		/*
		 * implement read stream count
		 */

		if (pstate->rd_stream_count == 0xFF) {
 800bd6e:	68fb      	ldr	r3, [r7, #12]
 800bd70:	795b      	ldrb	r3, [r3, #5]
 800bd72:	2bff      	cmp	r3, #255	; 0xff
 800bd74:	d103      	bne.n	800bd7e <VL53L1_update_ll_driver_rd_state+0x4e>
			pstate->rd_stream_count = 0x80;
 800bd76:	68fb      	ldr	r3, [r7, #12]
 800bd78:	2280      	movs	r2, #128	; 0x80
 800bd7a:	715a      	strb	r2, [r3, #5]
 800bd7c:	e005      	b.n	800bd8a <VL53L1_update_ll_driver_rd_state+0x5a>
		} else {
			pstate->rd_stream_count++;
 800bd7e:	68fb      	ldr	r3, [r7, #12]
 800bd80:	795b      	ldrb	r3, [r3, #5]
 800bd82:	3301      	adds	r3, #1
 800bd84:	b2da      	uxtb	r2, r3
 800bd86:	68fb      	ldr	r3, [r7, #12]
 800bd88:	715a      	strb	r2, [r3, #5]

		/*
		 * Toggle grouped parameter hold ID
		 */

		pstate->rd_gph_id ^= VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800bd8a:	68fb      	ldr	r3, [r7, #12]
 800bd8c:	799b      	ldrb	r3, [r3, #6]
 800bd8e:	f083 0302 	eor.w	r3, r3, #2
 800bd92:	b2da      	uxtb	r2, r3
 800bd94:	68fb      	ldr	r3, [r7, #12]
 800bd96:	719a      	strb	r2, [r3, #6]

		/* Ok now ranging  */

		switch (pstate->rd_device_state) {
 800bd98:	68fb      	ldr	r3, [r7, #12]
 800bd9a:	791b      	ldrb	r3, [r3, #4]
 800bd9c:	3b03      	subs	r3, #3
 800bd9e:	2b05      	cmp	r3, #5
 800bda0:	d839      	bhi.n	800be16 <VL53L1_update_ll_driver_rd_state+0xe6>
 800bda2:	a201      	add	r2, pc, #4	; (adr r2, 800bda8 <VL53L1_update_ll_driver_rd_state+0x78>)
 800bda4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bda8:	0800bdc1 	.word	0x0800bdc1
 800bdac:	0800be17 	.word	0x0800be17
 800bdb0:	0800be17 	.word	0x0800be17
 800bdb4:	0800bdeb 	.word	0x0800bdeb
 800bdb8:	0800bdf9 	.word	0x0800bdf9
 800bdbc:	0800be01 	.word	0x0800be01

		case VL53L1_DEVICESTATE_SW_STANDBY:

			if ((pdev->dyn_cfg.system__grouped_parameter_hold &
 800bdc0:	693b      	ldr	r3, [r7, #16]
 800bdc2:	f893 31c6 	ldrb.w	r3, [r3, #454]	; 0x1c6
 800bdc6:	f003 0302 	and.w	r3, r3, #2
 800bdca:	2b00      	cmp	r3, #0
 800bdcc:	dd03      	ble.n	800bdd6 <VL53L1_update_ll_driver_rd_state+0xa6>
				VL53L1_GROUPEDPARAMETERHOLD_ID_MASK) > 0) {
				pstate->rd_device_state =
 800bdce:	68fb      	ldr	r3, [r7, #12]
 800bdd0:	2206      	movs	r2, #6
 800bdd2:	711a      	strb	r2, [r3, #4]
 800bdd4:	e002      	b.n	800bddc <VL53L1_update_ll_driver_rd_state+0xac>
					VL53L1_DEVICESTATE_RANGING_WAIT_GPH_SYNC;
			} else {
				pstate->rd_device_state =
 800bdd6:	68fb      	ldr	r3, [r7, #12]
 800bdd8:	2208      	movs	r2, #8
 800bdda:	711a      	strb	r2, [r3, #4]
					VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA;
			}

			pstate->rd_stream_count  = 0;
 800bddc:	68fb      	ldr	r3, [r7, #12]
 800bdde:	2200      	movs	r2, #0
 800bde0:	715a      	strb	r2, [r3, #5]
			pstate->rd_timing_status = 0;
 800bde2:	68fb      	ldr	r3, [r7, #12]
 800bde4:	2200      	movs	r2, #0
 800bde6:	71da      	strb	r2, [r3, #7]

		break;
 800bde8:	e022      	b.n	800be30 <VL53L1_update_ll_driver_rd_state+0x100>

		case VL53L1_DEVICESTATE_RANGING_WAIT_GPH_SYNC:

			pstate->rd_stream_count = 0;
 800bdea:	68fb      	ldr	r3, [r7, #12]
 800bdec:	2200      	movs	r2, #0
 800bdee:	715a      	strb	r2, [r3, #5]
			pstate->rd_device_state =
 800bdf0:	68fb      	ldr	r3, [r7, #12]
 800bdf2:	2208      	movs	r2, #8
 800bdf4:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA;

		break;
 800bdf6:	e01b      	b.n	800be30 <VL53L1_update_ll_driver_rd_state+0x100>

		case VL53L1_DEVICESTATE_RANGING_GATHER_DATA:

			pstate->rd_device_state =
 800bdf8:	68fb      	ldr	r3, [r7, #12]
 800bdfa:	2208      	movs	r2, #8
 800bdfc:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA;

		break;
 800bdfe:	e017      	b.n	800be30 <VL53L1_update_ll_driver_rd_state+0x100>

		case VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA:

			pstate->rd_timing_status ^= 0x01;
 800be00:	68fb      	ldr	r3, [r7, #12]
 800be02:	79db      	ldrb	r3, [r3, #7]
 800be04:	f083 0301 	eor.w	r3, r3, #1
 800be08:	b2da      	uxtb	r2, r3
 800be0a:	68fb      	ldr	r3, [r7, #12]
 800be0c:	71da      	strb	r2, [r3, #7]

			pstate->rd_device_state =
 800be0e:	68fb      	ldr	r3, [r7, #12]
 800be10:	2208      	movs	r2, #8
 800be12:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA;

		break;
 800be14:	e00c      	b.n	800be30 <VL53L1_update_ll_driver_rd_state+0x100>

		default:

			pstate->rd_device_state  =
 800be16:	68fb      	ldr	r3, [r7, #12]
 800be18:	2203      	movs	r2, #3
 800be1a:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICESTATE_SW_STANDBY;
			pstate->rd_stream_count  = 0;
 800be1c:	68fb      	ldr	r3, [r7, #12]
 800be1e:	2200      	movs	r2, #0
 800be20:	715a      	strb	r2, [r3, #5]
			pstate->rd_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800be22:	68fb      	ldr	r3, [r7, #12]
 800be24:	2202      	movs	r2, #2
 800be26:	719a      	strb	r2, [r3, #6]
			pstate->rd_timing_status = 0;
 800be28:	68fb      	ldr	r3, [r7, #12]
 800be2a:	2200      	movs	r2, #0
 800be2c:	71da      	strb	r2, [r3, #7]

		break;
 800be2e:	bf00      	nop
	VL53L1_print_ll_driver_state(pstate);
#endif

	LOG_FUNCTION_END(status);

	return status;
 800be30:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800be34:	4618      	mov	r0, r3
 800be36:	371c      	adds	r7, #28
 800be38:	46bd      	mov	sp, r7
 800be3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be3e:	4770      	bx	lr

0800be40 <VL53L1_check_ll_driver_rd_state>:


VL53L1_Error VL53L1_check_ll_driver_rd_state(
	VL53L1_DEV         Dev)
{
 800be40:	b480      	push	{r7}
 800be42:	b089      	sub	sp, #36	; 0x24
 800be44:	af00      	add	r7, sp, #0
 800be46:	6078      	str	r0, [r7, #4]
	 * matches the state and stream count received from the device
	 *
	 * Check is only use in back to back mode
	 */

	VL53L1_Error         status = VL53L1_ERROR_NONE;
 800be48:	2300      	movs	r3, #0
 800be4a:	77fb      	strb	r3, [r7, #31]
	VL53L1_LLDriverData_t  *pdev =
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	61bb      	str	r3, [r7, #24]
			VL53L1DevStructGetLLDriverHandle(Dev);

	VL53L1_ll_driver_state_t  *pstate       = &(pdev->ll_state);
 800be50:	69bb      	ldr	r3, [r7, #24]
 800be52:	332c      	adds	r3, #44	; 0x2c
 800be54:	617b      	str	r3, [r7, #20]
	VL53L1_system_results_t   *psys_results = &(pdev->sys_results);
 800be56:	69bb      	ldr	r3, [r7, #24]
 800be58:	f503 73e7 	add.w	r3, r3, #462	; 0x1ce
 800be5c:	613b      	str	r3, [r7, #16]

	uint8_t   device_range_status   = 0;
 800be5e:	2300      	movs	r3, #0
 800be60:	73fb      	strb	r3, [r7, #15]
	uint8_t   device_stream_count   = 0;
 800be62:	2300      	movs	r3, #0
 800be64:	73bb      	strb	r3, [r7, #14]
	uint8_t   device_gph_id         = 0;
 800be66:	2300      	movs	r3, #0
 800be68:	737b      	strb	r3, [r7, #13]
#ifdef VL53L1_LOGGING
	VL53L1_print_ll_driver_state(pstate);
#endif

	device_range_status =
			psys_results->result__range_status &
 800be6a:	693b      	ldr	r3, [r7, #16]
 800be6c:	785b      	ldrb	r3, [r3, #1]
	device_range_status =
 800be6e:	f003 031f 	and.w	r3, r3, #31
 800be72:	73fb      	strb	r3, [r7, #15]
			VL53L1_RANGE_STATUS__RANGE_STATUS_MASK;

	device_stream_count = psys_results->result__stream_count;
 800be74:	693b      	ldr	r3, [r7, #16]
 800be76:	78db      	ldrb	r3, [r3, #3]
 800be78:	73bb      	strb	r3, [r7, #14]

	/* load the correct GPH ID */
	device_gph_id = (psys_results->result__interrupt_status &
 800be7a:	693b      	ldr	r3, [r7, #16]
 800be7c:	781b      	ldrb	r3, [r3, #0]
		VL53L1_INTERRUPT_STATUS__GPH_ID_INT_STATUS_MASK) >> 4;
 800be7e:	111b      	asrs	r3, r3, #4
 800be80:	b2db      	uxtb	r3, r3
	device_gph_id = (psys_results->result__interrupt_status &
 800be82:	f003 0302 	and.w	r3, r3, #2
 800be86:	737b      	strb	r3, [r7, #13]

	/* only apply checks in back to back mode */

	if ((pdev->sys_ctrl.system__mode_start &
 800be88:	69bb      	ldr	r3, [r7, #24]
 800be8a:	f893 31cc 	ldrb.w	r3, [r3, #460]	; 0x1cc
 800be8e:	f003 0320 	and.w	r3, r3, #32
 800be92:	2b00      	cmp	r3, #0
 800be94:	d017      	beq.n	800bec6 <VL53L1_check_ll_driver_rd_state+0x86>
		 *
		 * In theory the stream count should zero for the GPH interrupt
		 * but that is not the case after at abort ....
		 */

		if (pstate->rd_device_state ==
 800be96:	697b      	ldr	r3, [r7, #20]
 800be98:	791b      	ldrb	r3, [r3, #4]
 800be9a:	2b06      	cmp	r3, #6
 800be9c:	d105      	bne.n	800beaa <VL53L1_check_ll_driver_rd_state+0x6a>
			VL53L1_DEVICESTATE_RANGING_WAIT_GPH_SYNC) {

			if (device_range_status !=
 800be9e:	7bfb      	ldrb	r3, [r7, #15]
 800bea0:	2b12      	cmp	r3, #18
 800bea2:	d010      	beq.n	800bec6 <VL53L1_check_ll_driver_rd_state+0x86>
				VL53L1_DEVICEERROR_GPHSTREAMCOUNT0READY) {
				status = VL53L1_ERROR_GPH_SYNC_CHECK_FAIL;
 800bea4:	23ef      	movs	r3, #239	; 0xef
 800bea6:	77fb      	strb	r3, [r7, #31]
 800bea8:	e00d      	b.n	800bec6 <VL53L1_check_ll_driver_rd_state+0x86>
			}
		} else {
			if (pstate->rd_stream_count != device_stream_count) {
 800beaa:	697b      	ldr	r3, [r7, #20]
 800beac:	795b      	ldrb	r3, [r3, #5]
 800beae:	7bba      	ldrb	r2, [r7, #14]
 800beb0:	429a      	cmp	r2, r3
 800beb2:	d001      	beq.n	800beb8 <VL53L1_check_ll_driver_rd_state+0x78>
				status = VL53L1_ERROR_STREAM_COUNT_CHECK_FAIL;
 800beb4:	23ee      	movs	r3, #238	; 0xee
 800beb6:	77fb      	strb	r3, [r7, #31]

		/*
		 * Check Read state GPH ID
		 */

		if (pstate->rd_gph_id != device_gph_id) {
 800beb8:	697b      	ldr	r3, [r7, #20]
 800beba:	799b      	ldrb	r3, [r3, #6]
 800bebc:	7b7a      	ldrb	r2, [r7, #13]
 800bebe:	429a      	cmp	r2, r3
 800bec0:	d001      	beq.n	800bec6 <VL53L1_check_ll_driver_rd_state+0x86>
			status = VL53L1_ERROR_GPH_ID_CHECK_FAIL;
 800bec2:	23ed      	movs	r3, #237	; 0xed
 800bec4:	77fb      	strb	r3, [r7, #31]

	} /* if back to back */

	LOG_FUNCTION_END(status);

	return status;
 800bec6:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800beca:	4618      	mov	r0, r3
 800becc:	3724      	adds	r7, #36	; 0x24
 800bece:	46bd      	mov	sp, r7
 800bed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bed4:	4770      	bx	lr

0800bed6 <VL53L1_update_ll_driver_cfg_state>:


VL53L1_Error  VL53L1_update_ll_driver_cfg_state(
	VL53L1_DEV         Dev)
{
 800bed6:	b480      	push	{r7}
 800bed8:	b087      	sub	sp, #28
 800beda:	af00      	add	r7, sp, #0
 800bedc:	6078      	str	r0, [r7, #4]
	/**
	 * State machine for configuration device state
	 */

	VL53L1_Error         status = VL53L1_ERROR_NONE;
 800bede:	2300      	movs	r3, #0
 800bee0:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t  *pdev =
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	613b      	str	r3, [r7, #16]
			VL53L1DevStructGetLLDriverHandle(Dev);

	VL53L1_ll_driver_state_t *pstate = &(pdev->ll_state);
 800bee6:	693b      	ldr	r3, [r7, #16]
 800bee8:	332c      	adds	r3, #44	; 0x2c
 800beea:	60fb      	str	r3, [r7, #12]
	VL53L1_print_ll_driver_state(pstate);
#endif

	/* if top bits of mode start reset are zero then in standby state */

	if ((pdev->sys_ctrl.system__mode_start &
 800beec:	693b      	ldr	r3, [r7, #16]
 800beee:	f893 31cc 	ldrb.w	r3, [r3, #460]	; 0x1cc
 800bef2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	d10c      	bne.n	800bf14 <VL53L1_update_ll_driver_cfg_state+0x3e>
		VL53L1_DEVICEMEASUREMENTMODE_MODE_MASK) == 0x00) {

		pstate->cfg_device_state  = VL53L1_DEVICESTATE_SW_STANDBY;
 800befa:	68fb      	ldr	r3, [r7, #12]
 800befc:	2203      	movs	r2, #3
 800befe:	701a      	strb	r2, [r3, #0]
		pstate->cfg_stream_count  = 0;
 800bf00:	68fb      	ldr	r3, [r7, #12]
 800bf02:	2200      	movs	r2, #0
 800bf04:	705a      	strb	r2, [r3, #1]
		pstate->cfg_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800bf06:	68fb      	ldr	r3, [r7, #12]
 800bf08:	2202      	movs	r2, #2
 800bf0a:	709a      	strb	r2, [r3, #2]
		pstate->cfg_timing_status = 0;
 800bf0c:	68fb      	ldr	r3, [r7, #12]
 800bf0e:	2200      	movs	r2, #0
 800bf10:	70da      	strb	r2, [r3, #3]
 800bf12:	e03e      	b.n	800bf92 <VL53L1_update_ll_driver_cfg_state+0xbc>

		/*
		 * implement configuration stream count
		 */

		if (pstate->cfg_stream_count == 0xFF) {
 800bf14:	68fb      	ldr	r3, [r7, #12]
 800bf16:	785b      	ldrb	r3, [r3, #1]
 800bf18:	2bff      	cmp	r3, #255	; 0xff
 800bf1a:	d103      	bne.n	800bf24 <VL53L1_update_ll_driver_cfg_state+0x4e>
			pstate->cfg_stream_count = 0x80;
 800bf1c:	68fb      	ldr	r3, [r7, #12]
 800bf1e:	2280      	movs	r2, #128	; 0x80
 800bf20:	705a      	strb	r2, [r3, #1]
 800bf22:	e005      	b.n	800bf30 <VL53L1_update_ll_driver_cfg_state+0x5a>
		} else {
			pstate->cfg_stream_count++;
 800bf24:	68fb      	ldr	r3, [r7, #12]
 800bf26:	785b      	ldrb	r3, [r3, #1]
 800bf28:	3301      	adds	r3, #1
 800bf2a:	b2da      	uxtb	r2, r3
 800bf2c:	68fb      	ldr	r3, [r7, #12]
 800bf2e:	705a      	strb	r2, [r3, #1]

		/*
		 * Toggle grouped parameter hold ID
		 */

		pstate->cfg_gph_id ^= VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800bf30:	68fb      	ldr	r3, [r7, #12]
 800bf32:	789b      	ldrb	r3, [r3, #2]
 800bf34:	f083 0302 	eor.w	r3, r3, #2
 800bf38:	b2da      	uxtb	r2, r3
 800bf3a:	68fb      	ldr	r3, [r7, #12]
 800bf3c:	709a      	strb	r2, [r3, #2]

		/*
		 * Implement configuration state machine
		 */

		switch (pstate->cfg_device_state) {
 800bf3e:	68fb      	ldr	r3, [r7, #12]
 800bf40:	781b      	ldrb	r3, [r3, #0]
 800bf42:	2b03      	cmp	r3, #3
 800bf44:	d002      	beq.n	800bf4c <VL53L1_update_ll_driver_cfg_state+0x76>
 800bf46:	2b04      	cmp	r3, #4
 800bf48:	d00e      	beq.n	800bf68 <VL53L1_update_ll_driver_cfg_state+0x92>
 800bf4a:	e015      	b.n	800bf78 <VL53L1_update_ll_driver_cfg_state+0xa2>

		case VL53L1_DEVICESTATE_SW_STANDBY:

			pstate->cfg_timing_status ^= 0x01;
 800bf4c:	68fb      	ldr	r3, [r7, #12]
 800bf4e:	78db      	ldrb	r3, [r3, #3]
 800bf50:	f083 0301 	eor.w	r3, r3, #1
 800bf54:	b2da      	uxtb	r2, r3
 800bf56:	68fb      	ldr	r3, [r7, #12]
 800bf58:	70da      	strb	r2, [r3, #3]
			pstate->cfg_stream_count = 1;
 800bf5a:	68fb      	ldr	r3, [r7, #12]
 800bf5c:	2201      	movs	r2, #1
 800bf5e:	705a      	strb	r2, [r3, #1]

			pstate->cfg_device_state = VL53L1_DEVICESTATE_RANGING_DSS_AUTO;
 800bf60:	68fb      	ldr	r3, [r7, #12]
 800bf62:	2204      	movs	r2, #4
 800bf64:	701a      	strb	r2, [r3, #0]
		break;
 800bf66:	e014      	b.n	800bf92 <VL53L1_update_ll_driver_cfg_state+0xbc>

		case VL53L1_DEVICESTATE_RANGING_DSS_AUTO:

			pstate->cfg_timing_status ^= 0x01;
 800bf68:	68fb      	ldr	r3, [r7, #12]
 800bf6a:	78db      	ldrb	r3, [r3, #3]
 800bf6c:	f083 0301 	eor.w	r3, r3, #1
 800bf70:	b2da      	uxtb	r2, r3
 800bf72:	68fb      	ldr	r3, [r7, #12]
 800bf74:	70da      	strb	r2, [r3, #3]

		break;
 800bf76:	e00c      	b.n	800bf92 <VL53L1_update_ll_driver_cfg_state+0xbc>

		default:

			pstate->cfg_device_state = VL53L1_DEVICESTATE_SW_STANDBY;
 800bf78:	68fb      	ldr	r3, [r7, #12]
 800bf7a:	2203      	movs	r2, #3
 800bf7c:	701a      	strb	r2, [r3, #0]
			pstate->cfg_stream_count = 0;
 800bf7e:	68fb      	ldr	r3, [r7, #12]
 800bf80:	2200      	movs	r2, #0
 800bf82:	705a      	strb	r2, [r3, #1]
			pstate->cfg_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800bf84:	68fb      	ldr	r3, [r7, #12]
 800bf86:	2202      	movs	r2, #2
 800bf88:	709a      	strb	r2, [r3, #2]
			pstate->cfg_timing_status = 0;
 800bf8a:	68fb      	ldr	r3, [r7, #12]
 800bf8c:	2200      	movs	r2, #0
 800bf8e:	70da      	strb	r2, [r3, #3]

		break;
 800bf90:	bf00      	nop
	VL53L1_print_ll_driver_state(pstate);
#endif

	LOG_FUNCTION_END(status);

	return status;
 800bf92:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bf96:	4618      	mov	r0, r3
 800bf98:	371c      	adds	r7, #28
 800bf9a:	46bd      	mov	sp, r7
 800bf9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfa0:	4770      	bx	lr

0800bfa2 <VL53L1_copy_rtn_good_spads_to_buffer>:


void VL53L1_copy_rtn_good_spads_to_buffer(
	VL53L1_nvm_copy_data_t  *pdata,
	uint8_t                 *pbuffer)
{
 800bfa2:	b480      	push	{r7}
 800bfa4:	b083      	sub	sp, #12
 800bfa6:	af00      	add	r7, sp, #0
 800bfa8:	6078      	str	r0, [r7, #4]
 800bfaa:	6039      	str	r1, [r7, #0]
	/*
	 * Convenience function to copy return SPAD enables to buffer
	 */

	*(pbuffer +  0) = pdata->global_config__spad_enables_rtn_0;
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	7c1a      	ldrb	r2, [r3, #16]
 800bfb0:	683b      	ldr	r3, [r7, #0]
 800bfb2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  1) = pdata->global_config__spad_enables_rtn_1;
 800bfb4:	683b      	ldr	r3, [r7, #0]
 800bfb6:	3301      	adds	r3, #1
 800bfb8:	687a      	ldr	r2, [r7, #4]
 800bfba:	7c52      	ldrb	r2, [r2, #17]
 800bfbc:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  2) = pdata->global_config__spad_enables_rtn_2;
 800bfbe:	683b      	ldr	r3, [r7, #0]
 800bfc0:	3302      	adds	r3, #2
 800bfc2:	687a      	ldr	r2, [r7, #4]
 800bfc4:	7c92      	ldrb	r2, [r2, #18]
 800bfc6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  3) = pdata->global_config__spad_enables_rtn_3;
 800bfc8:	683b      	ldr	r3, [r7, #0]
 800bfca:	3303      	adds	r3, #3
 800bfcc:	687a      	ldr	r2, [r7, #4]
 800bfce:	7cd2      	ldrb	r2, [r2, #19]
 800bfd0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  4) = pdata->global_config__spad_enables_rtn_4;
 800bfd2:	683b      	ldr	r3, [r7, #0]
 800bfd4:	3304      	adds	r3, #4
 800bfd6:	687a      	ldr	r2, [r7, #4]
 800bfd8:	7d12      	ldrb	r2, [r2, #20]
 800bfda:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  5) = pdata->global_config__spad_enables_rtn_5;
 800bfdc:	683b      	ldr	r3, [r7, #0]
 800bfde:	3305      	adds	r3, #5
 800bfe0:	687a      	ldr	r2, [r7, #4]
 800bfe2:	7d52      	ldrb	r2, [r2, #21]
 800bfe4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  6) = pdata->global_config__spad_enables_rtn_6;
 800bfe6:	683b      	ldr	r3, [r7, #0]
 800bfe8:	3306      	adds	r3, #6
 800bfea:	687a      	ldr	r2, [r7, #4]
 800bfec:	7d92      	ldrb	r2, [r2, #22]
 800bfee:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  7) = pdata->global_config__spad_enables_rtn_7;
 800bff0:	683b      	ldr	r3, [r7, #0]
 800bff2:	3307      	adds	r3, #7
 800bff4:	687a      	ldr	r2, [r7, #4]
 800bff6:	7dd2      	ldrb	r2, [r2, #23]
 800bff8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  8) = pdata->global_config__spad_enables_rtn_8;
 800bffa:	683b      	ldr	r3, [r7, #0]
 800bffc:	3308      	adds	r3, #8
 800bffe:	687a      	ldr	r2, [r7, #4]
 800c000:	7e12      	ldrb	r2, [r2, #24]
 800c002:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  9) = pdata->global_config__spad_enables_rtn_9;
 800c004:	683b      	ldr	r3, [r7, #0]
 800c006:	3309      	adds	r3, #9
 800c008:	687a      	ldr	r2, [r7, #4]
 800c00a:	7e52      	ldrb	r2, [r2, #25]
 800c00c:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 10) = pdata->global_config__spad_enables_rtn_10;
 800c00e:	683b      	ldr	r3, [r7, #0]
 800c010:	330a      	adds	r3, #10
 800c012:	687a      	ldr	r2, [r7, #4]
 800c014:	7e92      	ldrb	r2, [r2, #26]
 800c016:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 11) = pdata->global_config__spad_enables_rtn_11;
 800c018:	683b      	ldr	r3, [r7, #0]
 800c01a:	330b      	adds	r3, #11
 800c01c:	687a      	ldr	r2, [r7, #4]
 800c01e:	7ed2      	ldrb	r2, [r2, #27]
 800c020:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 12) = pdata->global_config__spad_enables_rtn_12;
 800c022:	683b      	ldr	r3, [r7, #0]
 800c024:	330c      	adds	r3, #12
 800c026:	687a      	ldr	r2, [r7, #4]
 800c028:	7f12      	ldrb	r2, [r2, #28]
 800c02a:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 13) = pdata->global_config__spad_enables_rtn_13;
 800c02c:	683b      	ldr	r3, [r7, #0]
 800c02e:	330d      	adds	r3, #13
 800c030:	687a      	ldr	r2, [r7, #4]
 800c032:	7f52      	ldrb	r2, [r2, #29]
 800c034:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 14) = pdata->global_config__spad_enables_rtn_14;
 800c036:	683b      	ldr	r3, [r7, #0]
 800c038:	330e      	adds	r3, #14
 800c03a:	687a      	ldr	r2, [r7, #4]
 800c03c:	7f92      	ldrb	r2, [r2, #30]
 800c03e:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 15) = pdata->global_config__spad_enables_rtn_15;
 800c040:	683b      	ldr	r3, [r7, #0]
 800c042:	330f      	adds	r3, #15
 800c044:	687a      	ldr	r2, [r7, #4]
 800c046:	7fd2      	ldrb	r2, [r2, #31]
 800c048:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 16) = pdata->global_config__spad_enables_rtn_16;
 800c04a:	683b      	ldr	r3, [r7, #0]
 800c04c:	3310      	adds	r3, #16
 800c04e:	687a      	ldr	r2, [r7, #4]
 800c050:	f892 2020 	ldrb.w	r2, [r2, #32]
 800c054:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 17) = pdata->global_config__spad_enables_rtn_17;
 800c056:	683b      	ldr	r3, [r7, #0]
 800c058:	3311      	adds	r3, #17
 800c05a:	687a      	ldr	r2, [r7, #4]
 800c05c:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 800c060:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 18) = pdata->global_config__spad_enables_rtn_18;
 800c062:	683b      	ldr	r3, [r7, #0]
 800c064:	3312      	adds	r3, #18
 800c066:	687a      	ldr	r2, [r7, #4]
 800c068:	f892 2022 	ldrb.w	r2, [r2, #34]	; 0x22
 800c06c:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 19) = pdata->global_config__spad_enables_rtn_19;
 800c06e:	683b      	ldr	r3, [r7, #0]
 800c070:	3313      	adds	r3, #19
 800c072:	687a      	ldr	r2, [r7, #4]
 800c074:	f892 2023 	ldrb.w	r2, [r2, #35]	; 0x23
 800c078:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 20) = pdata->global_config__spad_enables_rtn_20;
 800c07a:	683b      	ldr	r3, [r7, #0]
 800c07c:	3314      	adds	r3, #20
 800c07e:	687a      	ldr	r2, [r7, #4]
 800c080:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 800c084:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 21) = pdata->global_config__spad_enables_rtn_21;
 800c086:	683b      	ldr	r3, [r7, #0]
 800c088:	3315      	adds	r3, #21
 800c08a:	687a      	ldr	r2, [r7, #4]
 800c08c:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 800c090:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 22) = pdata->global_config__spad_enables_rtn_22;
 800c092:	683b      	ldr	r3, [r7, #0]
 800c094:	3316      	adds	r3, #22
 800c096:	687a      	ldr	r2, [r7, #4]
 800c098:	f892 2026 	ldrb.w	r2, [r2, #38]	; 0x26
 800c09c:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 23) = pdata->global_config__spad_enables_rtn_23;
 800c09e:	683b      	ldr	r3, [r7, #0]
 800c0a0:	3317      	adds	r3, #23
 800c0a2:	687a      	ldr	r2, [r7, #4]
 800c0a4:	f892 2027 	ldrb.w	r2, [r2, #39]	; 0x27
 800c0a8:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 24) = pdata->global_config__spad_enables_rtn_24;
 800c0aa:	683b      	ldr	r3, [r7, #0]
 800c0ac:	3318      	adds	r3, #24
 800c0ae:	687a      	ldr	r2, [r7, #4]
 800c0b0:	f892 2028 	ldrb.w	r2, [r2, #40]	; 0x28
 800c0b4:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 25) = pdata->global_config__spad_enables_rtn_25;
 800c0b6:	683b      	ldr	r3, [r7, #0]
 800c0b8:	3319      	adds	r3, #25
 800c0ba:	687a      	ldr	r2, [r7, #4]
 800c0bc:	f892 2029 	ldrb.w	r2, [r2, #41]	; 0x29
 800c0c0:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 26) = pdata->global_config__spad_enables_rtn_26;
 800c0c2:	683b      	ldr	r3, [r7, #0]
 800c0c4:	331a      	adds	r3, #26
 800c0c6:	687a      	ldr	r2, [r7, #4]
 800c0c8:	f892 202a 	ldrb.w	r2, [r2, #42]	; 0x2a
 800c0cc:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 27) = pdata->global_config__spad_enables_rtn_27;
 800c0ce:	683b      	ldr	r3, [r7, #0]
 800c0d0:	331b      	adds	r3, #27
 800c0d2:	687a      	ldr	r2, [r7, #4]
 800c0d4:	f892 202b 	ldrb.w	r2, [r2, #43]	; 0x2b
 800c0d8:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 28) = pdata->global_config__spad_enables_rtn_28;
 800c0da:	683b      	ldr	r3, [r7, #0]
 800c0dc:	331c      	adds	r3, #28
 800c0de:	687a      	ldr	r2, [r7, #4]
 800c0e0:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 800c0e4:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 29) = pdata->global_config__spad_enables_rtn_29;
 800c0e6:	683b      	ldr	r3, [r7, #0]
 800c0e8:	331d      	adds	r3, #29
 800c0ea:	687a      	ldr	r2, [r7, #4]
 800c0ec:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 800c0f0:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 30) = pdata->global_config__spad_enables_rtn_30;
 800c0f2:	683b      	ldr	r3, [r7, #0]
 800c0f4:	331e      	adds	r3, #30
 800c0f6:	687a      	ldr	r2, [r7, #4]
 800c0f8:	f892 202e 	ldrb.w	r2, [r2, #46]	; 0x2e
 800c0fc:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 31) = pdata->global_config__spad_enables_rtn_31;
 800c0fe:	683b      	ldr	r3, [r7, #0]
 800c100:	331f      	adds	r3, #31
 800c102:	687a      	ldr	r2, [r7, #4]
 800c104:	f892 202f 	ldrb.w	r2, [r2, #47]	; 0x2f
 800c108:	701a      	strb	r2, [r3, #0]
}
 800c10a:	bf00      	nop
 800c10c:	370c      	adds	r7, #12
 800c10e:	46bd      	mov	sp, r7
 800c110:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c114:	4770      	bx	lr

0800c116 <VL53L1_i2c_encode_uint16_t>:

void VL53L1_i2c_encode_uint16_t(
	uint16_t    ip_value,
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800c116:	b480      	push	{r7}
 800c118:	b085      	sub	sp, #20
 800c11a:	af00      	add	r7, sp, #0
 800c11c:	4603      	mov	r3, r0
 800c11e:	603a      	str	r2, [r7, #0]
 800c120:	80fb      	strh	r3, [r7, #6]
 800c122:	460b      	mov	r3, r1
 800c124:	80bb      	strh	r3, [r7, #4]
	/*
	 * Encodes a uint16_t register value into an I2C write buffer
	 * MS byte first order (as per I2C register map.
	 */

	uint16_t   i    = 0;
 800c126:	2300      	movs	r3, #0
 800c128:	81fb      	strh	r3, [r7, #14]
	uint16_t   data = 0;
 800c12a:	2300      	movs	r3, #0
 800c12c:	81bb      	strh	r3, [r7, #12]

	data =  ip_value;
 800c12e:	88fb      	ldrh	r3, [r7, #6]
 800c130:	81bb      	strh	r3, [r7, #12]

	for (i = 0; i < count ; i++) {
 800c132:	2300      	movs	r3, #0
 800c134:	81fb      	strh	r3, [r7, #14]
 800c136:	e00e      	b.n	800c156 <VL53L1_i2c_encode_uint16_t+0x40>
		pbuffer[count-i-1] = (uint8_t)(data & 0x00FF);
 800c138:	88ba      	ldrh	r2, [r7, #4]
 800c13a:	89fb      	ldrh	r3, [r7, #14]
 800c13c:	1ad3      	subs	r3, r2, r3
 800c13e:	3b01      	subs	r3, #1
 800c140:	683a      	ldr	r2, [r7, #0]
 800c142:	4413      	add	r3, r2
 800c144:	89ba      	ldrh	r2, [r7, #12]
 800c146:	b2d2      	uxtb	r2, r2
 800c148:	701a      	strb	r2, [r3, #0]
		data = data >> 8;
 800c14a:	89bb      	ldrh	r3, [r7, #12]
 800c14c:	0a1b      	lsrs	r3, r3, #8
 800c14e:	81bb      	strh	r3, [r7, #12]
	for (i = 0; i < count ; i++) {
 800c150:	89fb      	ldrh	r3, [r7, #14]
 800c152:	3301      	adds	r3, #1
 800c154:	81fb      	strh	r3, [r7, #14]
 800c156:	89fa      	ldrh	r2, [r7, #14]
 800c158:	88bb      	ldrh	r3, [r7, #4]
 800c15a:	429a      	cmp	r2, r3
 800c15c:	d3ec      	bcc.n	800c138 <VL53L1_i2c_encode_uint16_t+0x22>
	}
}
 800c15e:	bf00      	nop
 800c160:	bf00      	nop
 800c162:	3714      	adds	r7, #20
 800c164:	46bd      	mov	sp, r7
 800c166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c16a:	4770      	bx	lr

0800c16c <VL53L1_i2c_decode_uint16_t>:

uint16_t VL53L1_i2c_decode_uint16_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800c16c:	b480      	push	{r7}
 800c16e:	b085      	sub	sp, #20
 800c170:	af00      	add	r7, sp, #0
 800c172:	4603      	mov	r3, r0
 800c174:	6039      	str	r1, [r7, #0]
 800c176:	80fb      	strh	r3, [r7, #6]
	/*
	 * Decodes a uint16_t from the input I2C read buffer
	 * (MS byte first order)
	 */

	uint16_t   value = 0x00;
 800c178:	2300      	movs	r3, #0
 800c17a:	81fb      	strh	r3, [r7, #14]

	while (count-- > 0) {
 800c17c:	e00a      	b.n	800c194 <VL53L1_i2c_decode_uint16_t+0x28>
		value = (value << 8) | (uint16_t)*pbuffer++;
 800c17e:	89fb      	ldrh	r3, [r7, #14]
 800c180:	021b      	lsls	r3, r3, #8
 800c182:	b21a      	sxth	r2, r3
 800c184:	683b      	ldr	r3, [r7, #0]
 800c186:	1c59      	adds	r1, r3, #1
 800c188:	6039      	str	r1, [r7, #0]
 800c18a:	781b      	ldrb	r3, [r3, #0]
 800c18c:	b21b      	sxth	r3, r3
 800c18e:	4313      	orrs	r3, r2
 800c190:	b21b      	sxth	r3, r3
 800c192:	81fb      	strh	r3, [r7, #14]
	while (count-- > 0) {
 800c194:	88fb      	ldrh	r3, [r7, #6]
 800c196:	1e5a      	subs	r2, r3, #1
 800c198:	80fa      	strh	r2, [r7, #6]
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	d1ef      	bne.n	800c17e <VL53L1_i2c_decode_uint16_t+0x12>
	}

	return value;
 800c19e:	89fb      	ldrh	r3, [r7, #14]
}
 800c1a0:	4618      	mov	r0, r3
 800c1a2:	3714      	adds	r7, #20
 800c1a4:	46bd      	mov	sp, r7
 800c1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1aa:	4770      	bx	lr

0800c1ac <VL53L1_i2c_encode_int16_t>:

void VL53L1_i2c_encode_int16_t(
	int16_t     ip_value,
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800c1ac:	b480      	push	{r7}
 800c1ae:	b085      	sub	sp, #20
 800c1b0:	af00      	add	r7, sp, #0
 800c1b2:	4603      	mov	r3, r0
 800c1b4:	603a      	str	r2, [r7, #0]
 800c1b6:	80fb      	strh	r3, [r7, #6]
 800c1b8:	460b      	mov	r3, r1
 800c1ba:	80bb      	strh	r3, [r7, #4]
	/*
	 * Encodes a int16_t register value into an I2C write buffer
	 * MS byte first order (as per I2C register map.
	 */

	uint16_t   i    = 0;
 800c1bc:	2300      	movs	r3, #0
 800c1be:	81fb      	strh	r3, [r7, #14]
	int16_t    data = 0;
 800c1c0:	2300      	movs	r3, #0
 800c1c2:	81bb      	strh	r3, [r7, #12]

	data =  ip_value;
 800c1c4:	88fb      	ldrh	r3, [r7, #6]
 800c1c6:	81bb      	strh	r3, [r7, #12]

	for (i = 0; i < count ; i++) {
 800c1c8:	2300      	movs	r3, #0
 800c1ca:	81fb      	strh	r3, [r7, #14]
 800c1cc:	e00f      	b.n	800c1ee <VL53L1_i2c_encode_int16_t+0x42>
		pbuffer[count-i-1] = (uint8_t)(data & 0x00FF);
 800c1ce:	88ba      	ldrh	r2, [r7, #4]
 800c1d0:	89fb      	ldrh	r3, [r7, #14]
 800c1d2:	1ad3      	subs	r3, r2, r3
 800c1d4:	3b01      	subs	r3, #1
 800c1d6:	683a      	ldr	r2, [r7, #0]
 800c1d8:	4413      	add	r3, r2
 800c1da:	89ba      	ldrh	r2, [r7, #12]
 800c1dc:	b2d2      	uxtb	r2, r2
 800c1de:	701a      	strb	r2, [r3, #0]
		data = data >> 8;
 800c1e0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800c1e4:	121b      	asrs	r3, r3, #8
 800c1e6:	81bb      	strh	r3, [r7, #12]
	for (i = 0; i < count ; i++) {
 800c1e8:	89fb      	ldrh	r3, [r7, #14]
 800c1ea:	3301      	adds	r3, #1
 800c1ec:	81fb      	strh	r3, [r7, #14]
 800c1ee:	89fa      	ldrh	r2, [r7, #14]
 800c1f0:	88bb      	ldrh	r3, [r7, #4]
 800c1f2:	429a      	cmp	r2, r3
 800c1f4:	d3eb      	bcc.n	800c1ce <VL53L1_i2c_encode_int16_t+0x22>
	}
}
 800c1f6:	bf00      	nop
 800c1f8:	bf00      	nop
 800c1fa:	3714      	adds	r7, #20
 800c1fc:	46bd      	mov	sp, r7
 800c1fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c202:	4770      	bx	lr

0800c204 <VL53L1_i2c_decode_int16_t>:

int16_t VL53L1_i2c_decode_int16_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800c204:	b480      	push	{r7}
 800c206:	b085      	sub	sp, #20
 800c208:	af00      	add	r7, sp, #0
 800c20a:	4603      	mov	r3, r0
 800c20c:	6039      	str	r1, [r7, #0]
 800c20e:	80fb      	strh	r3, [r7, #6]
	/*
	 * Decodes a int16_t from the input I2C read buffer
	 * (MS byte first order)
	 */

	int16_t    value = 0x00;
 800c210:	2300      	movs	r3, #0
 800c212:	81fb      	strh	r3, [r7, #14]

	/* implement sign extension */
	if (*pbuffer >= 0x80) {
 800c214:	683b      	ldr	r3, [r7, #0]
 800c216:	781b      	ldrb	r3, [r3, #0]
 800c218:	b25b      	sxtb	r3, r3
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	da0e      	bge.n	800c23c <VL53L1_i2c_decode_int16_t+0x38>
		value = 0xFFFF;
 800c21e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c222:	81fb      	strh	r3, [r7, #14]
	}

	while (count-- > 0) {
 800c224:	e00a      	b.n	800c23c <VL53L1_i2c_decode_int16_t+0x38>
		value = (value << 8) | (int16_t)*pbuffer++;
 800c226:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800c22a:	021b      	lsls	r3, r3, #8
 800c22c:	b21a      	sxth	r2, r3
 800c22e:	683b      	ldr	r3, [r7, #0]
 800c230:	1c59      	adds	r1, r3, #1
 800c232:	6039      	str	r1, [r7, #0]
 800c234:	781b      	ldrb	r3, [r3, #0]
 800c236:	b21b      	sxth	r3, r3
 800c238:	4313      	orrs	r3, r2
 800c23a:	81fb      	strh	r3, [r7, #14]
	while (count-- > 0) {
 800c23c:	88fb      	ldrh	r3, [r7, #6]
 800c23e:	1e5a      	subs	r2, r3, #1
 800c240:	80fa      	strh	r2, [r7, #6]
 800c242:	2b00      	cmp	r3, #0
 800c244:	d1ef      	bne.n	800c226 <VL53L1_i2c_decode_int16_t+0x22>
	}

	return value;
 800c246:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 800c24a:	4618      	mov	r0, r3
 800c24c:	3714      	adds	r7, #20
 800c24e:	46bd      	mov	sp, r7
 800c250:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c254:	4770      	bx	lr

0800c256 <VL53L1_i2c_encode_uint32_t>:

void VL53L1_i2c_encode_uint32_t(
	uint32_t    ip_value,
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800c256:	b480      	push	{r7}
 800c258:	b087      	sub	sp, #28
 800c25a:	af00      	add	r7, sp, #0
 800c25c:	60f8      	str	r0, [r7, #12]
 800c25e:	460b      	mov	r3, r1
 800c260:	607a      	str	r2, [r7, #4]
 800c262:	817b      	strh	r3, [r7, #10]
	/*
	 * Encodes a uint32_t register value into an I2C write buffer
	 * MS byte first order (as per I2C register map.
	 */

	uint16_t   i    = 0;
 800c264:	2300      	movs	r3, #0
 800c266:	82fb      	strh	r3, [r7, #22]
	uint32_t   data = 0;
 800c268:	2300      	movs	r3, #0
 800c26a:	613b      	str	r3, [r7, #16]

	data =  ip_value;
 800c26c:	68fb      	ldr	r3, [r7, #12]
 800c26e:	613b      	str	r3, [r7, #16]

	for (i = 0; i < count ; i++) {
 800c270:	2300      	movs	r3, #0
 800c272:	82fb      	strh	r3, [r7, #22]
 800c274:	e00e      	b.n	800c294 <VL53L1_i2c_encode_uint32_t+0x3e>
		pbuffer[count-i-1] = (uint8_t)(data & 0x00FF);
 800c276:	897a      	ldrh	r2, [r7, #10]
 800c278:	8afb      	ldrh	r3, [r7, #22]
 800c27a:	1ad3      	subs	r3, r2, r3
 800c27c:	3b01      	subs	r3, #1
 800c27e:	687a      	ldr	r2, [r7, #4]
 800c280:	4413      	add	r3, r2
 800c282:	693a      	ldr	r2, [r7, #16]
 800c284:	b2d2      	uxtb	r2, r2
 800c286:	701a      	strb	r2, [r3, #0]
		data = data >> 8;
 800c288:	693b      	ldr	r3, [r7, #16]
 800c28a:	0a1b      	lsrs	r3, r3, #8
 800c28c:	613b      	str	r3, [r7, #16]
	for (i = 0; i < count ; i++) {
 800c28e:	8afb      	ldrh	r3, [r7, #22]
 800c290:	3301      	adds	r3, #1
 800c292:	82fb      	strh	r3, [r7, #22]
 800c294:	8afa      	ldrh	r2, [r7, #22]
 800c296:	897b      	ldrh	r3, [r7, #10]
 800c298:	429a      	cmp	r2, r3
 800c29a:	d3ec      	bcc.n	800c276 <VL53L1_i2c_encode_uint32_t+0x20>
	}
}
 800c29c:	bf00      	nop
 800c29e:	bf00      	nop
 800c2a0:	371c      	adds	r7, #28
 800c2a2:	46bd      	mov	sp, r7
 800c2a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2a8:	4770      	bx	lr

0800c2aa <VL53L1_i2c_decode_uint32_t>:

uint32_t VL53L1_i2c_decode_uint32_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800c2aa:	b480      	push	{r7}
 800c2ac:	b085      	sub	sp, #20
 800c2ae:	af00      	add	r7, sp, #0
 800c2b0:	4603      	mov	r3, r0
 800c2b2:	6039      	str	r1, [r7, #0]
 800c2b4:	80fb      	strh	r3, [r7, #6]
	/*
	 * Decodes a uint32_t from the input I2C read buffer
	 * (MS byte first order)
	 */

	uint32_t   value = 0x00;
 800c2b6:	2300      	movs	r3, #0
 800c2b8:	60fb      	str	r3, [r7, #12]

	while (count-- > 0) {
 800c2ba:	e007      	b.n	800c2cc <VL53L1_i2c_decode_uint32_t+0x22>
		value = (value << 8) | (uint32_t)*pbuffer++;
 800c2bc:	68fb      	ldr	r3, [r7, #12]
 800c2be:	021a      	lsls	r2, r3, #8
 800c2c0:	683b      	ldr	r3, [r7, #0]
 800c2c2:	1c59      	adds	r1, r3, #1
 800c2c4:	6039      	str	r1, [r7, #0]
 800c2c6:	781b      	ldrb	r3, [r3, #0]
 800c2c8:	4313      	orrs	r3, r2
 800c2ca:	60fb      	str	r3, [r7, #12]
	while (count-- > 0) {
 800c2cc:	88fb      	ldrh	r3, [r7, #6]
 800c2ce:	1e5a      	subs	r2, r3, #1
 800c2d0:	80fa      	strh	r2, [r7, #6]
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	d1f2      	bne.n	800c2bc <VL53L1_i2c_decode_uint32_t+0x12>
	}

	return value;
 800c2d6:	68fb      	ldr	r3, [r7, #12]
}
 800c2d8:	4618      	mov	r0, r3
 800c2da:	3714      	adds	r7, #20
 800c2dc:	46bd      	mov	sp, r7
 800c2de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2e2:	4770      	bx	lr

0800c2e4 <VL53L1_i2c_decode_int32_t>:
}

int32_t VL53L1_i2c_decode_int32_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800c2e4:	b480      	push	{r7}
 800c2e6:	b085      	sub	sp, #20
 800c2e8:	af00      	add	r7, sp, #0
 800c2ea:	4603      	mov	r3, r0
 800c2ec:	6039      	str	r1, [r7, #0]
 800c2ee:	80fb      	strh	r3, [r7, #6]
	/*
	 * Decodes a int32_t from the input I2C read buffer
	 * (MS byte first order)
	 */

	int32_t    value = 0x00;
 800c2f0:	2300      	movs	r3, #0
 800c2f2:	60fb      	str	r3, [r7, #12]

	/* implement sign extension */
	if (*pbuffer >= 0x80) {
 800c2f4:	683b      	ldr	r3, [r7, #0]
 800c2f6:	781b      	ldrb	r3, [r3, #0]
 800c2f8:	b25b      	sxtb	r3, r3
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	da0b      	bge.n	800c316 <VL53L1_i2c_decode_int32_t+0x32>
		value = 0xFFFFFFFF;
 800c2fe:	f04f 33ff 	mov.w	r3, #4294967295
 800c302:	60fb      	str	r3, [r7, #12]
	}

	while (count-- > 0) {
 800c304:	e007      	b.n	800c316 <VL53L1_i2c_decode_int32_t+0x32>
		value = (value << 8) | (int32_t)*pbuffer++;
 800c306:	68fb      	ldr	r3, [r7, #12]
 800c308:	021a      	lsls	r2, r3, #8
 800c30a:	683b      	ldr	r3, [r7, #0]
 800c30c:	1c59      	adds	r1, r3, #1
 800c30e:	6039      	str	r1, [r7, #0]
 800c310:	781b      	ldrb	r3, [r3, #0]
 800c312:	4313      	orrs	r3, r2
 800c314:	60fb      	str	r3, [r7, #12]
	while (count-- > 0) {
 800c316:	88fb      	ldrh	r3, [r7, #6]
 800c318:	1e5a      	subs	r2, r3, #1
 800c31a:	80fa      	strh	r2, [r7, #6]
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	d1f2      	bne.n	800c306 <VL53L1_i2c_decode_int32_t+0x22>
	}

	return value;
 800c320:	68fb      	ldr	r3, [r7, #12]
}
 800c322:	4618      	mov	r0, r3
 800c324:	3714      	adds	r7, #20
 800c326:	46bd      	mov	sp, r7
 800c328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c32c:	4770      	bx	lr

0800c32e <VL53L1_start_test>:

#ifndef VL53L1_NOCALIB
VL53L1_Error VL53L1_start_test(
	VL53L1_DEV    Dev,
	uint8_t       test_mode__ctrl)
{
 800c32e:	b580      	push	{r7, lr}
 800c330:	b084      	sub	sp, #16
 800c332:	af00      	add	r7, sp, #0
 800c334:	6078      	str	r0, [r7, #4]
 800c336:	460b      	mov	r3, r1
 800c338:	70fb      	strb	r3, [r7, #3]
	/*
	 * Triggers the start of a test mode
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800c33a:	2300      	movs	r3, #0
 800c33c:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE) { /*lint !e774 always true*/
 800c33e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c342:	2b00      	cmp	r3, #0
 800c344:	d107      	bne.n	800c356 <VL53L1_start_test+0x28>
		status = VL53L1_WrByte(
 800c346:	78fb      	ldrb	r3, [r7, #3]
 800c348:	461a      	mov	r2, r3
 800c34a:	2127      	movs	r1, #39	; 0x27
 800c34c:	6878      	ldr	r0, [r7, #4]
 800c34e:	f001 ff43 	bl	800e1d8 <VL53L1_WrByte>
 800c352:	4603      	mov	r3, r0
 800c354:	73fb      	strb	r3, [r7, #15]
					test_mode__ctrl);
	}

	LOG_FUNCTION_END(status);

	return status;
 800c356:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c35a:	4618      	mov	r0, r3
 800c35c:	3710      	adds	r7, #16
 800c35e:	46bd      	mov	sp, r7
 800c360:	bd80      	pop	{r7, pc}

0800c362 <VL53L1_set_firmware_enable_register>:


VL53L1_Error VL53L1_set_firmware_enable_register(
	VL53L1_DEV    Dev,
	uint8_t       value)
{
 800c362:	b580      	push	{r7, lr}
 800c364:	b084      	sub	sp, #16
 800c366:	af00      	add	r7, sp, #0
 800c368:	6078      	str	r0, [r7, #4]
 800c36a:	460b      	mov	r3, r1
 800c36c:	70fb      	strb	r3, [r7, #3]
	/*
	 * Set FIRMWARE__ENABLE register
	 */

	VL53L1_Error status         = VL53L1_ERROR_NONE;
 800c36e:	2300      	movs	r3, #0
 800c370:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	60bb      	str	r3, [r7, #8]

	pdev->sys_ctrl.firmware__enable = value;
 800c376:	68bb      	ldr	r3, [r7, #8]
 800c378:	78fa      	ldrb	r2, [r7, #3]
 800c37a:	f883 21ca 	strb.w	r2, [r3, #458]	; 0x1ca

	status = VL53L1_WrByte(
 800c37e:	68bb      	ldr	r3, [r7, #8]
 800c380:	f893 31ca 	ldrb.w	r3, [r3, #458]	; 0x1ca
 800c384:	461a      	mov	r2, r3
 800c386:	2185      	movs	r1, #133	; 0x85
 800c388:	6878      	ldr	r0, [r7, #4]
 800c38a:	f001 ff25 	bl	800e1d8 <VL53L1_WrByte>
 800c38e:	4603      	mov	r3, r0
 800c390:	73fb      	strb	r3, [r7, #15]
				Dev,
				VL53L1_FIRMWARE__ENABLE,
				pdev->sys_ctrl.firmware__enable);

	return status;
 800c392:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c396:	4618      	mov	r0, r3
 800c398:	3710      	adds	r7, #16
 800c39a:	46bd      	mov	sp, r7
 800c39c:	bd80      	pop	{r7, pc}

0800c39e <VL53L1_enable_firmware>:

VL53L1_Error VL53L1_enable_firmware(
	VL53L1_DEV    Dev)
{
 800c39e:	b580      	push	{r7, lr}
 800c3a0:	b084      	sub	sp, #16
 800c3a2:	af00      	add	r7, sp, #0
 800c3a4:	6078      	str	r0, [r7, #4]
	/*
	 * Enable firmware
	 */

	VL53L1_Error status       = VL53L1_ERROR_NONE;
 800c3a6:	2300      	movs	r3, #0
 800c3a8:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	status = VL53L1_set_firmware_enable_register(Dev, 0x01);
 800c3aa:	2101      	movs	r1, #1
 800c3ac:	6878      	ldr	r0, [r7, #4]
 800c3ae:	f7ff ffd8 	bl	800c362 <VL53L1_set_firmware_enable_register>
 800c3b2:	4603      	mov	r3, r0
 800c3b4:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(status);

	return status;
 800c3b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c3ba:	4618      	mov	r0, r3
 800c3bc:	3710      	adds	r7, #16
 800c3be:	46bd      	mov	sp, r7
 800c3c0:	bd80      	pop	{r7, pc}

0800c3c2 <VL53L1_disable_firmware>:


VL53L1_Error VL53L1_disable_firmware(
	VL53L1_DEV    Dev)
{
 800c3c2:	b580      	push	{r7, lr}
 800c3c4:	b084      	sub	sp, #16
 800c3c6:	af00      	add	r7, sp, #0
 800c3c8:	6078      	str	r0, [r7, #4]
	/*
	 * Disable firmware
	 */

	VL53L1_Error status       = VL53L1_ERROR_NONE;
 800c3ca:	2300      	movs	r3, #0
 800c3cc:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	status = VL53L1_set_firmware_enable_register(Dev, 0x00);
 800c3ce:	2100      	movs	r1, #0
 800c3d0:	6878      	ldr	r0, [r7, #4]
 800c3d2:	f7ff ffc6 	bl	800c362 <VL53L1_set_firmware_enable_register>
 800c3d6:	4603      	mov	r3, r0
 800c3d8:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(status);

	return status;
 800c3da:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c3de:	4618      	mov	r0, r3
 800c3e0:	3710      	adds	r7, #16
 800c3e2:	46bd      	mov	sp, r7
 800c3e4:	bd80      	pop	{r7, pc}

0800c3e6 <VL53L1_set_powerforce_register>:


VL53L1_Error VL53L1_set_powerforce_register(
	VL53L1_DEV    Dev,
	uint8_t       value)
{
 800c3e6:	b580      	push	{r7, lr}
 800c3e8:	b084      	sub	sp, #16
 800c3ea:	af00      	add	r7, sp, #0
 800c3ec:	6078      	str	r0, [r7, #4]
 800c3ee:	460b      	mov	r3, r1
 800c3f0:	70fb      	strb	r3, [r7, #3]
	/*
	 * Set power force register
	 */

	VL53L1_Error status       = VL53L1_ERROR_NONE;
 800c3f2:	2300      	movs	r3, #0
 800c3f4:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	60bb      	str	r3, [r7, #8]

	pdev->sys_ctrl.power_management__go1_power_force = value;
 800c3fa:	68bb      	ldr	r3, [r7, #8]
 800c3fc:	78fa      	ldrb	r2, [r7, #3]
 800c3fe:	f883 21c8 	strb.w	r2, [r3, #456]	; 0x1c8

	status = VL53L1_WrByte(
 800c402:	68bb      	ldr	r3, [r7, #8]
 800c404:	f893 31c8 	ldrb.w	r3, [r3, #456]	; 0x1c8
 800c408:	461a      	mov	r2, r3
 800c40a:	2183      	movs	r1, #131	; 0x83
 800c40c:	6878      	ldr	r0, [r7, #4]
 800c40e:	f001 fee3 	bl	800e1d8 <VL53L1_WrByte>
 800c412:	4603      	mov	r3, r0
 800c414:	73fb      	strb	r3, [r7, #15]
			Dev,
			VL53L1_POWER_MANAGEMENT__GO1_POWER_FORCE,
			pdev->sys_ctrl.power_management__go1_power_force);

	return status;
 800c416:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c41a:	4618      	mov	r0, r3
 800c41c:	3710      	adds	r7, #16
 800c41e:	46bd      	mov	sp, r7
 800c420:	bd80      	pop	{r7, pc}

0800c422 <VL53L1_enable_powerforce>:


VL53L1_Error VL53L1_enable_powerforce(
	VL53L1_DEV    Dev)
{
 800c422:	b580      	push	{r7, lr}
 800c424:	b084      	sub	sp, #16
 800c426:	af00      	add	r7, sp, #0
 800c428:	6078      	str	r0, [r7, #4]
	/*
	 * Enable power force
	 */

	VL53L1_Error status       = VL53L1_ERROR_NONE;
 800c42a:	2300      	movs	r3, #0
 800c42c:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	status = VL53L1_set_powerforce_register(Dev, 0x01);
 800c42e:	2101      	movs	r1, #1
 800c430:	6878      	ldr	r0, [r7, #4]
 800c432:	f7ff ffd8 	bl	800c3e6 <VL53L1_set_powerforce_register>
 800c436:	4603      	mov	r3, r0
 800c438:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(status);

	return status;
 800c43a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c43e:	4618      	mov	r0, r3
 800c440:	3710      	adds	r7, #16
 800c442:	46bd      	mov	sp, r7
 800c444:	bd80      	pop	{r7, pc}

0800c446 <VL53L1_disable_powerforce>:


VL53L1_Error VL53L1_disable_powerforce(
	VL53L1_DEV    Dev)
{
 800c446:	b580      	push	{r7, lr}
 800c448:	b084      	sub	sp, #16
 800c44a:	af00      	add	r7, sp, #0
 800c44c:	6078      	str	r0, [r7, #4]
	/*
	 * Disable power force
	 */

	VL53L1_Error status       = VL53L1_ERROR_NONE;
 800c44e:	2300      	movs	r3, #0
 800c450:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	status = VL53L1_set_powerforce_register(Dev, 0x00);
 800c452:	2100      	movs	r1, #0
 800c454:	6878      	ldr	r0, [r7, #4]
 800c456:	f7ff ffc6 	bl	800c3e6 <VL53L1_set_powerforce_register>
 800c45a:	4603      	mov	r3, r0
 800c45c:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(status);

	return status;
 800c45e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c462:	4618      	mov	r0, r3
 800c464:	3710      	adds	r7, #16
 800c466:	46bd      	mov	sp, r7
 800c468:	bd80      	pop	{r7, pc}

0800c46a <VL53L1_clear_interrupt>:


VL53L1_Error VL53L1_clear_interrupt(
	VL53L1_DEV    Dev)
{
 800c46a:	b580      	push	{r7, lr}
 800c46c:	b084      	sub	sp, #16
 800c46e:	af00      	add	r7, sp, #0
 800c470:	6078      	str	r0, [r7, #4]
	/*
	 * Clear Ranging interrupt by writing to
	 */

	VL53L1_Error status       = VL53L1_ERROR_NONE;
 800c472:	2300      	movs	r3, #0
 800c474:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->sys_ctrl.system__interrupt_clear = VL53L1_CLEAR_RANGE_INT;
 800c47a:	68bb      	ldr	r3, [r7, #8]
 800c47c:	2201      	movs	r2, #1
 800c47e:	f883 21cb 	strb.w	r2, [r3, #459]	; 0x1cb

	status = VL53L1_WrByte(
 800c482:	68bb      	ldr	r3, [r7, #8]
 800c484:	f893 31cb 	ldrb.w	r3, [r3, #459]	; 0x1cb
 800c488:	461a      	mov	r2, r3
 800c48a:	2186      	movs	r1, #134	; 0x86
 800c48c:	6878      	ldr	r0, [r7, #4]
 800c48e:	f001 fea3 	bl	800e1d8 <VL53L1_WrByte>
 800c492:	4603      	mov	r3, r0
 800c494:	73fb      	strb	r3, [r7, #15]
					VL53L1_SYSTEM__INTERRUPT_CLEAR,
					pdev->sys_ctrl.system__interrupt_clear);

	LOG_FUNCTION_END(status);

	return status;
 800c496:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c49a:	4618      	mov	r0, r3
 800c49c:	3710      	adds	r7, #16
 800c49e:	46bd      	mov	sp, r7
 800c4a0:	bd80      	pop	{r7, pc}

0800c4a2 <VL53L1_calc_macro_period_us>:
#endif

uint32_t VL53L1_calc_macro_period_us(
	uint16_t  fast_osc_frequency,
	uint8_t   vcsel_period)
{
 800c4a2:	b580      	push	{r7, lr}
 800c4a4:	b086      	sub	sp, #24
 800c4a6:	af00      	add	r7, sp, #0
 800c4a8:	4603      	mov	r3, r0
 800c4aa:	460a      	mov	r2, r1
 800c4ac:	80fb      	strh	r3, [r7, #6]
 800c4ae:	4613      	mov	r3, r2
 800c4b0:	717b      	strb	r3, [r7, #5]
	 *
	 * Macro period fixed point format = unsigned 12.12
	 * Maximum supported macro period  = 4095.9999 us
	 */

	uint32_t  pll_period_us        = 0;
 800c4b2:	2300      	movs	r3, #0
 800c4b4:	617b      	str	r3, [r7, #20]
	uint8_t   vcsel_period_pclks   = 0;
 800c4b6:	2300      	movs	r3, #0
 800c4b8:	74fb      	strb	r3, [r7, #19]
	uint32_t  macro_period_us      = 0;
 800c4ba:	2300      	movs	r3, #0
 800c4bc:	60fb      	str	r3, [r7, #12]

	/*  Calculate PLL period in [us] from the  fast_osc_frequency
	 *  Fast osc frequency fixed point format = unsigned 4.12
	 */

	pll_period_us = VL53L1_calc_pll_period_us(fast_osc_frequency);
 800c4be:	88fb      	ldrh	r3, [r7, #6]
 800c4c0:	4618      	mov	r0, r3
 800c4c2:	f000 fba7 	bl	800cc14 <VL53L1_calc_pll_period_us>
 800c4c6:	6178      	str	r0, [r7, #20]

	/*  VCSEL period
	 *  - the real VCSEL period in PLL clocks = 2*(VCSEL_PERIOD+1)
	 */

	vcsel_period_pclks = VL53L1_decode_vcsel_period(vcsel_period);
 800c4c8:	797b      	ldrb	r3, [r7, #5]
 800c4ca:	4618      	mov	r0, r3
 800c4cc:	f000 fbb6 	bl	800cc3c <VL53L1_decode_vcsel_period>
 800c4d0:	4603      	mov	r3, r0
 800c4d2:	74fb      	strb	r3, [r7, #19]
	 *  Max bits (24 - 6) + 12 = 30-bits usage
	 *
	 *  Downshift by 6 before multiplying by the VCSEL Period
	 */

	macro_period_us =
 800c4d4:	697a      	ldr	r2, [r7, #20]
 800c4d6:	4613      	mov	r3, r2
 800c4d8:	00db      	lsls	r3, r3, #3
 800c4da:	4413      	add	r3, r2
 800c4dc:	021b      	lsls	r3, r3, #8
 800c4de:	60fb      	str	r3, [r7, #12]
			(uint32_t)VL53L1_MACRO_PERIOD_VCSEL_PERIODS *
			pll_period_us;
	macro_period_us = macro_period_us >> 6;
 800c4e0:	68fb      	ldr	r3, [r7, #12]
 800c4e2:	099b      	lsrs	r3, r3, #6
 800c4e4:	60fb      	str	r3, [r7, #12]

	macro_period_us = macro_period_us * (uint32_t)vcsel_period_pclks;
 800c4e6:	7cfa      	ldrb	r2, [r7, #19]
 800c4e8:	68fb      	ldr	r3, [r7, #12]
 800c4ea:	fb02 f303 	mul.w	r3, r2, r3
 800c4ee:	60fb      	str	r3, [r7, #12]
	macro_period_us = macro_period_us >> 6;
 800c4f0:	68fb      	ldr	r3, [r7, #12]
 800c4f2:	099b      	lsrs	r3, r3, #6
 800c4f4:	60fb      	str	r3, [r7, #12]
			macro_period_us);
#endif

	LOG_FUNCTION_END(0);

	return macro_period_us;
 800c4f6:	68fb      	ldr	r3, [r7, #12]
}
 800c4f8:	4618      	mov	r0, r3
 800c4fa:	3718      	adds	r7, #24
 800c4fc:	46bd      	mov	sp, r7
 800c4fe:	bd80      	pop	{r7, pc}

0800c500 <VL53L1_calc_range_ignore_threshold>:
uint16_t VL53L1_calc_range_ignore_threshold(
	uint32_t central_rate,
	int16_t  x_gradient,
	int16_t  y_gradient,
	uint8_t  rate_mult)
{
 800c500:	b480      	push	{r7}
 800c502:	b089      	sub	sp, #36	; 0x24
 800c504:	af00      	add	r7, sp, #0
 800c506:	60f8      	str	r0, [r7, #12]
 800c508:	4608      	mov	r0, r1
 800c50a:	4611      	mov	r1, r2
 800c50c:	461a      	mov	r2, r3
 800c50e:	4603      	mov	r3, r0
 800c510:	817b      	strh	r3, [r7, #10]
 800c512:	460b      	mov	r3, r1
 800c514:	813b      	strh	r3, [r7, #8]
 800c516:	4613      	mov	r3, r2
 800c518:	71fb      	strb	r3, [r7, #7]
	 * Range ignore threshold rate is then multiplied by user input
	 * rate_mult (in 3.5 fractional format)
	 *
	 */

	int32_t    range_ignore_thresh_int  = 0;
 800c51a:	2300      	movs	r3, #0
 800c51c:	617b      	str	r3, [r7, #20]
	uint16_t   range_ignore_thresh_kcps = 0;
 800c51e:	2300      	movs	r3, #0
 800c520:	83fb      	strh	r3, [r7, #30]
	int32_t    central_rate_int         = 0;
 800c522:	2300      	movs	r3, #0
 800c524:	613b      	str	r3, [r7, #16]
	int16_t    x_gradient_int           = 0;
 800c526:	2300      	movs	r3, #0
 800c528:	83bb      	strh	r3, [r7, #28]
	int16_t    y_gradient_int           = 0;
 800c52a:	2300      	movs	r3, #0
 800c52c:	837b      	strh	r3, [r7, #26]

	LOG_FUNCTION_START("");

	/* Shift central_rate to .13 fractional for simple addition */

	central_rate_int = ((int32_t)central_rate * (1 << 4)) / (1000);
 800c52e:	68fb      	ldr	r3, [r7, #12]
 800c530:	011b      	lsls	r3, r3, #4
 800c532:	4a23      	ldr	r2, [pc, #140]	; (800c5c0 <VL53L1_calc_range_ignore_threshold+0xc0>)
 800c534:	fb82 1203 	smull	r1, r2, r2, r3
 800c538:	1192      	asrs	r2, r2, #6
 800c53a:	17db      	asrs	r3, r3, #31
 800c53c:	1ad3      	subs	r3, r2, r3
 800c53e:	613b      	str	r3, [r7, #16]

	if (x_gradient < 0) {
 800c540:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800c544:	2b00      	cmp	r3, #0
 800c546:	da03      	bge.n	800c550 <VL53L1_calc_range_ignore_threshold+0x50>
		x_gradient_int = x_gradient * -1;
 800c548:	897b      	ldrh	r3, [r7, #10]
 800c54a:	425b      	negs	r3, r3
 800c54c:	b29b      	uxth	r3, r3
 800c54e:	83bb      	strh	r3, [r7, #28]
	}

	if (y_gradient < 0) {
 800c550:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800c554:	2b00      	cmp	r3, #0
 800c556:	da03      	bge.n	800c560 <VL53L1_calc_range_ignore_threshold+0x60>
		y_gradient_int = y_gradient * -1;
 800c558:	893b      	ldrh	r3, [r7, #8]
 800c55a:	425b      	negs	r3, r3
 800c55c:	b29b      	uxth	r3, r3
 800c55e:	837b      	strh	r3, [r7, #26]

	/* Calculate full rate per spad - worst case from measured xtalk */
	/* Generated here from .11 fractional kcps */
	/* Additional factor of 4 applied to bring fractional precision to .13 */

	range_ignore_thresh_int = (8 * x_gradient_int * 4) + (8 * y_gradient_int * 4);
 800c560:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 800c564:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800c568:	4413      	add	r3, r2
 800c56a:	015b      	lsls	r3, r3, #5
 800c56c:	617b      	str	r3, [r7, #20]

	/* Convert Kcps to Mcps */

	range_ignore_thresh_int = range_ignore_thresh_int / 1000;
 800c56e:	697b      	ldr	r3, [r7, #20]
 800c570:	4a13      	ldr	r2, [pc, #76]	; (800c5c0 <VL53L1_calc_range_ignore_threshold+0xc0>)
 800c572:	fb82 1203 	smull	r1, r2, r2, r3
 800c576:	1192      	asrs	r2, r2, #6
 800c578:	17db      	asrs	r3, r3, #31
 800c57a:	1ad3      	subs	r3, r2, r3
 800c57c:	617b      	str	r3, [r7, #20]

	/* Combine with Central Rate - Mcps .13 format*/

	range_ignore_thresh_int = range_ignore_thresh_int + central_rate_int;
 800c57e:	697a      	ldr	r2, [r7, #20]
 800c580:	693b      	ldr	r3, [r7, #16]
 800c582:	4413      	add	r3, r2
 800c584:	617b      	str	r3, [r7, #20]

	/* Mult by user input */

	range_ignore_thresh_int = (int32_t)rate_mult * range_ignore_thresh_int;
 800c586:	79fa      	ldrb	r2, [r7, #7]
 800c588:	697b      	ldr	r3, [r7, #20]
 800c58a:	fb02 f303 	mul.w	r3, r2, r3
 800c58e:	617b      	str	r3, [r7, #20]

	range_ignore_thresh_int = (range_ignore_thresh_int + (1<<4)) / (1<<5);
 800c590:	697b      	ldr	r3, [r7, #20]
 800c592:	3310      	adds	r3, #16
 800c594:	2b00      	cmp	r3, #0
 800c596:	da00      	bge.n	800c59a <VL53L1_calc_range_ignore_threshold+0x9a>
 800c598:	331f      	adds	r3, #31
 800c59a:	115b      	asrs	r3, r3, #5
 800c59c:	617b      	str	r3, [r7, #20]

	/* Finally clip and output in correct format */

	if (range_ignore_thresh_int > 0xFFFF) {
 800c59e:	697b      	ldr	r3, [r7, #20]
 800c5a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c5a4:	db03      	blt.n	800c5ae <VL53L1_calc_range_ignore_threshold+0xae>
		range_ignore_thresh_kcps = 0xFFFF;
 800c5a6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c5aa:	83fb      	strh	r3, [r7, #30]
 800c5ac:	e001      	b.n	800c5b2 <VL53L1_calc_range_ignore_threshold+0xb2>
	} else {
		range_ignore_thresh_kcps = (uint16_t)range_ignore_thresh_int;
 800c5ae:	697b      	ldr	r3, [r7, #20]
 800c5b0:	83fb      	strh	r3, [r7, #30]
			range_ignore_thresh_kcps);
#endif

	LOG_FUNCTION_END(0);

	return range_ignore_thresh_kcps;
 800c5b2:	8bfb      	ldrh	r3, [r7, #30]
}
 800c5b4:	4618      	mov	r0, r3
 800c5b6:	3724      	adds	r7, #36	; 0x24
 800c5b8:	46bd      	mov	sp, r7
 800c5ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5be:	4770      	bx	lr
 800c5c0:	10624dd3 	.word	0x10624dd3

0800c5c4 <VL53L1_calc_timeout_mclks>:


uint32_t VL53L1_calc_timeout_mclks(
	uint32_t timeout_us,
	uint32_t macro_period_us)
{
 800c5c4:	b480      	push	{r7}
 800c5c6:	b085      	sub	sp, #20
 800c5c8:	af00      	add	r7, sp, #0
 800c5ca:	6078      	str	r0, [r7, #4]
 800c5cc:	6039      	str	r1, [r7, #0]
	 *  Max timeout in 20.12 format = 32-bits
	 *
	 *  Macro period [us] = 12.12 format
	 */

	uint32_t timeout_mclks   = 0;
 800c5ce:	2300      	movs	r3, #0
 800c5d0:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	timeout_mclks   =
			((timeout_us << 12) + (macro_period_us>>1)) /
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	031a      	lsls	r2, r3, #12
 800c5d6:	683b      	ldr	r3, [r7, #0]
 800c5d8:	085b      	lsrs	r3, r3, #1
 800c5da:	441a      	add	r2, r3
	timeout_mclks   =
 800c5dc:	683b      	ldr	r3, [r7, #0]
 800c5de:	fbb2 f3f3 	udiv	r3, r2, r3
 800c5e2:	60fb      	str	r3, [r7, #12]
			macro_period_us;

	LOG_FUNCTION_END(0);

	return timeout_mclks;
 800c5e4:	68fb      	ldr	r3, [r7, #12]
}
 800c5e6:	4618      	mov	r0, r3
 800c5e8:	3714      	adds	r7, #20
 800c5ea:	46bd      	mov	sp, r7
 800c5ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5f0:	4770      	bx	lr

0800c5f2 <VL53L1_calc_encoded_timeout>:


uint16_t VL53L1_calc_encoded_timeout(
	uint32_t timeout_us,
	uint32_t macro_period_us)
{
 800c5f2:	b580      	push	{r7, lr}
 800c5f4:	b084      	sub	sp, #16
 800c5f6:	af00      	add	r7, sp, #0
 800c5f8:	6078      	str	r0, [r7, #4]
 800c5fa:	6039      	str	r1, [r7, #0]
	 *  Max timeout in 20.12 format = 32-bits
	 *
	 *  Macro period [us] = 12.12 format
	 */

	uint32_t timeout_mclks   = 0;
 800c5fc:	2300      	movs	r3, #0
 800c5fe:	60fb      	str	r3, [r7, #12]
	uint16_t timeout_encoded = 0;
 800c600:	2300      	movs	r3, #0
 800c602:	817b      	strh	r3, [r7, #10]

	LOG_FUNCTION_START("");

	timeout_mclks   =
		VL53L1_calc_timeout_mclks(timeout_us, macro_period_us);
 800c604:	6839      	ldr	r1, [r7, #0]
 800c606:	6878      	ldr	r0, [r7, #4]
 800c608:	f7ff ffdc 	bl	800c5c4 <VL53L1_calc_timeout_mclks>
 800c60c:	60f8      	str	r0, [r7, #12]

	timeout_encoded =
		VL53L1_encode_timeout(timeout_mclks);
 800c60e:	68f8      	ldr	r0, [r7, #12]
 800c610:	f000 f887 	bl	800c722 <VL53L1_encode_timeout>
 800c614:	4603      	mov	r3, r0
 800c616:	817b      	strh	r3, [r7, #10]
			timeout_encoded, timeout_encoded);
#endif

	LOG_FUNCTION_END(0);

	return timeout_encoded;
 800c618:	897b      	ldrh	r3, [r7, #10]
}
 800c61a:	4618      	mov	r0, r3
 800c61c:	3710      	adds	r7, #16
 800c61e:	46bd      	mov	sp, r7
 800c620:	bd80      	pop	{r7, pc}

0800c622 <VL53L1_calc_timeout_us>:


uint32_t VL53L1_calc_timeout_us(
	uint32_t timeout_mclks,
	uint32_t macro_period_us)
{
 800c622:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800c626:	b087      	sub	sp, #28
 800c628:	af00      	add	r7, sp, #0
 800c62a:	6078      	str	r0, [r7, #4]
 800c62c:	6039      	str	r1, [r7, #0]
	 *  Max timeout in 20.12 format = 32-bits
	 *
	 *  Macro period [us] = 12.12 format
	 */

	uint32_t timeout_us     = 0;
 800c62e:	2100      	movs	r1, #0
 800c630:	6179      	str	r1, [r7, #20]
	uint64_t tmp            = 0;
 800c632:	f04f 0000 	mov.w	r0, #0
 800c636:	f04f 0100 	mov.w	r1, #0
 800c63a:	e9c7 0102 	strd	r0, r1, [r7, #8]

	LOG_FUNCTION_START("");

	tmp  = (uint64_t)timeout_mclks * (uint64_t)macro_period_us;
 800c63e:	6879      	ldr	r1, [r7, #4]
 800c640:	2000      	movs	r0, #0
 800c642:	4688      	mov	r8, r1
 800c644:	4681      	mov	r9, r0
 800c646:	6839      	ldr	r1, [r7, #0]
 800c648:	2000      	movs	r0, #0
 800c64a:	460c      	mov	r4, r1
 800c64c:	4605      	mov	r5, r0
 800c64e:	fb04 f009 	mul.w	r0, r4, r9
 800c652:	fb08 f105 	mul.w	r1, r8, r5
 800c656:	4401      	add	r1, r0
 800c658:	fba8 2304 	umull	r2, r3, r8, r4
 800c65c:	4419      	add	r1, r3
 800c65e:	460b      	mov	r3, r1
 800c660:	e9c7 2302 	strd	r2, r3, [r7, #8]
 800c664:	e9c7 2302 	strd	r2, r3, [r7, #8]
	tmp += 0x00800;
 800c668:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c66c:	f512 6a00 	adds.w	sl, r2, #2048	; 0x800
 800c670:	f143 0b00 	adc.w	fp, r3, #0
 800c674:	e9c7 ab02 	strd	sl, fp, [r7, #8]
	tmp  = tmp >> 12;
 800c678:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800c67c:	f04f 0200 	mov.w	r2, #0
 800c680:	f04f 0300 	mov.w	r3, #0
 800c684:	0b02      	lsrs	r2, r0, #12
 800c686:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 800c68a:	0b0b      	lsrs	r3, r1, #12
 800c68c:	e9c7 2302 	strd	r2, r3, [r7, #8]

	timeout_us = (uint32_t)tmp;
 800c690:	68bb      	ldr	r3, [r7, #8]
 800c692:	617b      	str	r3, [r7, #20]
			timeout_us, timeout_us);
#endif

	LOG_FUNCTION_END(0);

	return timeout_us;
 800c694:	697b      	ldr	r3, [r7, #20]
}
 800c696:	4618      	mov	r0, r3
 800c698:	371c      	adds	r7, #28
 800c69a:	46bd      	mov	sp, r7
 800c69c:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800c6a0:	4770      	bx	lr
	...

0800c6a4 <VL53L1_calc_crosstalk_plane_offset_with_margin>:

uint32_t VL53L1_calc_crosstalk_plane_offset_with_margin(
		uint32_t     plane_offset_kcps,
		int16_t      margin_offset_kcps)
{
 800c6a4:	b480      	push	{r7}
 800c6a6:	b085      	sub	sp, #20
 800c6a8:	af00      	add	r7, sp, #0
 800c6aa:	6078      	str	r0, [r7, #4]
 800c6ac:	460b      	mov	r3, r1
 800c6ae:	807b      	strh	r3, [r7, #2]
	uint32_t plane_offset_with_margin = 0;
 800c6b0:	2300      	movs	r3, #0
 800c6b2:	60bb      	str	r3, [r7, #8]
	int32_t  plane_offset_kcps_temp   = 0;
 800c6b4:	2300      	movs	r3, #0
 800c6b6:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	plane_offset_kcps_temp =
		(int32_t)plane_offset_kcps +
		(int32_t)margin_offset_kcps;
 800c6b8:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
		(int32_t)plane_offset_kcps +
 800c6bc:	687b      	ldr	r3, [r7, #4]
	plane_offset_kcps_temp =
 800c6be:	4413      	add	r3, r2
 800c6c0:	60fb      	str	r3, [r7, #12]

	if (plane_offset_kcps_temp < 0) {
 800c6c2:	68fb      	ldr	r3, [r7, #12]
 800c6c4:	2b00      	cmp	r3, #0
 800c6c6:	da02      	bge.n	800c6ce <VL53L1_calc_crosstalk_plane_offset_with_margin+0x2a>
		plane_offset_kcps_temp = 0;
 800c6c8:	2300      	movs	r3, #0
 800c6ca:	60fb      	str	r3, [r7, #12]
 800c6cc:	e005      	b.n	800c6da <VL53L1_calc_crosstalk_plane_offset_with_margin+0x36>
	} else {
		if (plane_offset_kcps_temp > 0x3FFFF) {
 800c6ce:	68fb      	ldr	r3, [r7, #12]
 800c6d0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c6d4:	db01      	blt.n	800c6da <VL53L1_calc_crosstalk_plane_offset_with_margin+0x36>
			plane_offset_kcps_temp = 0x3FFFF;
 800c6d6:	4b05      	ldr	r3, [pc, #20]	; (800c6ec <VL53L1_calc_crosstalk_plane_offset_with_margin+0x48>)
 800c6d8:	60fb      	str	r3, [r7, #12]
		}
	}

	plane_offset_with_margin = (uint32_t) plane_offset_kcps_temp;
 800c6da:	68fb      	ldr	r3, [r7, #12]
 800c6dc:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END(0);

	return plane_offset_with_margin;
 800c6de:	68bb      	ldr	r3, [r7, #8]

}
 800c6e0:	4618      	mov	r0, r3
 800c6e2:	3714      	adds	r7, #20
 800c6e4:	46bd      	mov	sp, r7
 800c6e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6ea:	4770      	bx	lr
 800c6ec:	0003ffff 	.word	0x0003ffff

0800c6f0 <VL53L1_calc_decoded_timeout_us>:

uint32_t VL53L1_calc_decoded_timeout_us(
	uint16_t timeout_encoded,
	uint32_t macro_period_us)
{
 800c6f0:	b580      	push	{r7, lr}
 800c6f2:	b084      	sub	sp, #16
 800c6f4:	af00      	add	r7, sp, #0
 800c6f6:	4603      	mov	r3, r0
 800c6f8:	6039      	str	r1, [r7, #0]
 800c6fa:	80fb      	strh	r3, [r7, #6]
	 *  Max timeout in 20.12 format = 32-bits
	 *
	 *  Macro period [us] = 12.12 format
	 */

	uint32_t timeout_mclks  = 0;
 800c6fc:	2300      	movs	r3, #0
 800c6fe:	60fb      	str	r3, [r7, #12]
	uint32_t timeout_us     = 0;
 800c700:	2300      	movs	r3, #0
 800c702:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	timeout_mclks =
		VL53L1_decode_timeout(timeout_encoded);
 800c704:	88fb      	ldrh	r3, [r7, #6]
 800c706:	4618      	mov	r0, r3
 800c708:	f000 f837 	bl	800c77a <VL53L1_decode_timeout>
 800c70c:	60f8      	str	r0, [r7, #12]

	timeout_us    =
		VL53L1_calc_timeout_us(timeout_mclks, macro_period_us);
 800c70e:	6839      	ldr	r1, [r7, #0]
 800c710:	68f8      	ldr	r0, [r7, #12]
 800c712:	f7ff ff86 	bl	800c622 <VL53L1_calc_timeout_us>
 800c716:	60b8      	str	r0, [r7, #8]

	LOG_FUNCTION_END(0);

	return timeout_us;
 800c718:	68bb      	ldr	r3, [r7, #8]
}
 800c71a:	4618      	mov	r0, r3
 800c71c:	3710      	adds	r7, #16
 800c71e:	46bd      	mov	sp, r7
 800c720:	bd80      	pop	{r7, pc}

0800c722 <VL53L1_encode_timeout>:


uint16_t VL53L1_encode_timeout(uint32_t timeout_mclks)
{
 800c722:	b480      	push	{r7}
 800c724:	b087      	sub	sp, #28
 800c726:	af00      	add	r7, sp, #0
 800c728:	6078      	str	r0, [r7, #4]
	/*
	 * Encode timeout in macro periods in (LSByte * 2^MSByte) + 1 format
	 */

	uint16_t encoded_timeout = 0;
 800c72a:	2300      	movs	r3, #0
 800c72c:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 800c72e:	2300      	movs	r3, #0
 800c730:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 800c732:	2300      	movs	r3, #0
 800c734:	81fb      	strh	r3, [r7, #14]

	if (timeout_mclks > 0) {
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	2b00      	cmp	r3, #0
 800c73a:	d017      	beq.n	800c76c <VL53L1_encode_timeout+0x4a>
		ls_byte = timeout_mclks - 1;
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	3b01      	subs	r3, #1
 800c740:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 800c742:	e005      	b.n	800c750 <VL53L1_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 800c744:	693b      	ldr	r3, [r7, #16]
 800c746:	085b      	lsrs	r3, r3, #1
 800c748:	613b      	str	r3, [r7, #16]
			ms_byte++;
 800c74a:	89fb      	ldrh	r3, [r7, #14]
 800c74c:	3301      	adds	r3, #1
 800c74e:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 800c750:	693b      	ldr	r3, [r7, #16]
 800c752:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c756:	2b00      	cmp	r3, #0
 800c758:	d1f4      	bne.n	800c744 <VL53L1_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 800c75a:	89fb      	ldrh	r3, [r7, #14]
 800c75c:	021b      	lsls	r3, r3, #8
 800c75e:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 800c760:	693b      	ldr	r3, [r7, #16]
 800c762:	b29b      	uxth	r3, r3
 800c764:	b2db      	uxtb	r3, r3
 800c766:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 800c768:	4413      	add	r3, r2
 800c76a:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 800c76c:	8afb      	ldrh	r3, [r7, #22]
}
 800c76e:	4618      	mov	r0, r3
 800c770:	371c      	adds	r7, #28
 800c772:	46bd      	mov	sp, r7
 800c774:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c778:	4770      	bx	lr

0800c77a <VL53L1_decode_timeout>:


uint32_t VL53L1_decode_timeout(uint16_t encoded_timeout)
{
 800c77a:	b480      	push	{r7}
 800c77c:	b085      	sub	sp, #20
 800c77e:	af00      	add	r7, sp, #0
 800c780:	4603      	mov	r3, r0
 800c782:	80fb      	strh	r3, [r7, #6]
	/*
	 * Decode 16-bit timeout register value
	 * format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;
 800c784:	2300      	movs	r3, #0
 800c786:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800c788:	88fb      	ldrh	r3, [r7, #6]
 800c78a:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 800c78c:	88fa      	ldrh	r2, [r7, #6]
 800c78e:	0a12      	lsrs	r2, r2, #8
 800c790:	b292      	uxth	r2, r2
 800c792:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800c794:	3301      	adds	r3, #1
 800c796:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 800c798:	68fb      	ldr	r3, [r7, #12]
}
 800c79a:	4618      	mov	r0, r3
 800c79c:	3714      	adds	r7, #20
 800c79e:	46bd      	mov	sp, r7
 800c7a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7a4:	4770      	bx	lr

0800c7a6 <VL53L1_calc_timeout_register_values>:
	uint32_t                 mm_config_timeout_us,
	uint32_t                 range_config_timeout_us,
	uint16_t                 fast_osc_frequency,
	VL53L1_general_config_t *pgeneral,
	VL53L1_timing_config_t  *ptiming)
{
 800c7a6:	b580      	push	{r7, lr}
 800c7a8:	b088      	sub	sp, #32
 800c7aa:	af00      	add	r7, sp, #0
 800c7ac:	60f8      	str	r0, [r7, #12]
 800c7ae:	60b9      	str	r1, [r7, #8]
 800c7b0:	607a      	str	r2, [r7, #4]
 800c7b2:	807b      	strh	r3, [r7, #2]
	 * into the appropriate register values
	 *
	 * Must also be run after the VCSEL period settings are changed
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800c7b4:	2300      	movs	r3, #0
 800c7b6:	77fb      	strb	r3, [r7, #31]

	uint32_t macro_period_us    = 0;
 800c7b8:	2300      	movs	r3, #0
 800c7ba:	617b      	str	r3, [r7, #20]
	uint32_t timeout_mclks      = 0;
 800c7bc:	2300      	movs	r3, #0
 800c7be:	61bb      	str	r3, [r7, #24]
	uint16_t timeout_encoded    = 0;
 800c7c0:	2300      	movs	r3, #0
 800c7c2:	827b      	strh	r3, [r7, #18]

	LOG_FUNCTION_START("");

	if (fast_osc_frequency == 0) {
 800c7c4:	887b      	ldrh	r3, [r7, #2]
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	d102      	bne.n	800c7d0 <VL53L1_calc_timeout_register_values+0x2a>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 800c7ca:	23f1      	movs	r3, #241	; 0xf1
 800c7cc:	77fb      	strb	r3, [r7, #31]
 800c7ce:	e05d      	b.n	800c88c <VL53L1_calc_timeout_register_values+0xe6>
	} else {
		/* Update Macro Period for Range A VCSEL Period */
		macro_period_us =
				VL53L1_calc_macro_period_us(
 800c7d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7d2:	799a      	ldrb	r2, [r3, #6]
 800c7d4:	887b      	ldrh	r3, [r7, #2]
 800c7d6:	4611      	mov	r1, r2
 800c7d8:	4618      	mov	r0, r3
 800c7da:	f7ff fe62 	bl	800c4a2 <VL53L1_calc_macro_period_us>
 800c7de:	6178      	str	r0, [r7, #20]
					fast_osc_frequency,
					ptiming->range_config__vcsel_period_a);

		/*  Update Phase timeout - uses Timing A */
		timeout_mclks =
			VL53L1_calc_timeout_mclks(
 800c7e0:	6979      	ldr	r1, [r7, #20]
 800c7e2:	68f8      	ldr	r0, [r7, #12]
 800c7e4:	f7ff feee 	bl	800c5c4 <VL53L1_calc_timeout_mclks>
 800c7e8:	61b8      	str	r0, [r7, #24]
				phasecal_config_timeout_us,
				macro_period_us);

		/* clip as the phase cal timeout register is only 8-bits */
		if (timeout_mclks > 0xFF)
 800c7ea:	69bb      	ldr	r3, [r7, #24]
 800c7ec:	2bff      	cmp	r3, #255	; 0xff
 800c7ee:	d901      	bls.n	800c7f4 <VL53L1_calc_timeout_register_values+0x4e>
			timeout_mclks = 0xFF;
 800c7f0:	23ff      	movs	r3, #255	; 0xff
 800c7f2:	61bb      	str	r3, [r7, #24]

		pgeneral->phasecal_config__timeout_macrop =
				(uint8_t)timeout_mclks;
 800c7f4:	69bb      	ldr	r3, [r7, #24]
 800c7f6:	b2da      	uxtb	r2, r3
		pgeneral->phasecal_config__timeout_macrop =
 800c7f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7fa:	71da      	strb	r2, [r3, #7]

		/*  Update MM Timing A timeout */
		timeout_encoded =
			VL53L1_calc_encoded_timeout(
 800c7fc:	6979      	ldr	r1, [r7, #20]
 800c7fe:	68b8      	ldr	r0, [r7, #8]
 800c800:	f7ff fef7 	bl	800c5f2 <VL53L1_calc_encoded_timeout>
 800c804:	4603      	mov	r3, r0
 800c806:	827b      	strh	r3, [r7, #18]
				mm_config_timeout_us,
				macro_period_us);

		ptiming->mm_config__timeout_macrop_a_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 800c808:	8a7b      	ldrh	r3, [r7, #18]
 800c80a:	0a1b      	lsrs	r3, r3, #8
 800c80c:	b29b      	uxth	r3, r3
 800c80e:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_a_hi =
 800c810:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c812:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 800c814:	8a7b      	ldrh	r3, [r7, #18]
 800c816:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_a_lo =
 800c818:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c81a:	705a      	strb	r2, [r3, #1]

		/* Update Range Timing A timeout */
		timeout_encoded =
			VL53L1_calc_encoded_timeout(
 800c81c:	6979      	ldr	r1, [r7, #20]
 800c81e:	6878      	ldr	r0, [r7, #4]
 800c820:	f7ff fee7 	bl	800c5f2 <VL53L1_calc_encoded_timeout>
 800c824:	4603      	mov	r3, r0
 800c826:	827b      	strh	r3, [r7, #18]
				range_config_timeout_us,
				macro_period_us);

		ptiming->range_config__timeout_macrop_a_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 800c828:	8a7b      	ldrh	r3, [r7, #18]
 800c82a:	0a1b      	lsrs	r3, r3, #8
 800c82c:	b29b      	uxth	r3, r3
 800c82e:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_a_hi =
 800c830:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c832:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 800c834:	8a7b      	ldrh	r3, [r7, #18]
 800c836:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_a_lo =
 800c838:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c83a:	715a      	strb	r2, [r3, #5]

		/* Update Macro Period for Range B VCSEL Period */
		macro_period_us =
				VL53L1_calc_macro_period_us(
 800c83c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c83e:	7a5a      	ldrb	r2, [r3, #9]
 800c840:	887b      	ldrh	r3, [r7, #2]
 800c842:	4611      	mov	r1, r2
 800c844:	4618      	mov	r0, r3
 800c846:	f7ff fe2c 	bl	800c4a2 <VL53L1_calc_macro_period_us>
 800c84a:	6178      	str	r0, [r7, #20]
					fast_osc_frequency,
					ptiming->range_config__vcsel_period_b);

		/* Update MM Timing B timeout */
		timeout_encoded =
				VL53L1_calc_encoded_timeout(
 800c84c:	6979      	ldr	r1, [r7, #20]
 800c84e:	68b8      	ldr	r0, [r7, #8]
 800c850:	f7ff fecf 	bl	800c5f2 <VL53L1_calc_encoded_timeout>
 800c854:	4603      	mov	r3, r0
 800c856:	827b      	strh	r3, [r7, #18]
					mm_config_timeout_us,
					macro_period_us);

		ptiming->mm_config__timeout_macrop_b_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 800c858:	8a7b      	ldrh	r3, [r7, #18]
 800c85a:	0a1b      	lsrs	r3, r3, #8
 800c85c:	b29b      	uxth	r3, r3
 800c85e:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_b_hi =
 800c860:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c862:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 800c864:	8a7b      	ldrh	r3, [r7, #18]
 800c866:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_b_lo =
 800c868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c86a:	70da      	strb	r2, [r3, #3]

		/* Update Range Timing B timeout */
		timeout_encoded = VL53L1_calc_encoded_timeout(
 800c86c:	6979      	ldr	r1, [r7, #20]
 800c86e:	6878      	ldr	r0, [r7, #4]
 800c870:	f7ff febf 	bl	800c5f2 <VL53L1_calc_encoded_timeout>
 800c874:	4603      	mov	r3, r0
 800c876:	827b      	strh	r3, [r7, #18]
							range_config_timeout_us,
							macro_period_us);

		ptiming->range_config__timeout_macrop_b_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 800c878:	8a7b      	ldrh	r3, [r7, #18]
 800c87a:	0a1b      	lsrs	r3, r3, #8
 800c87c:	b29b      	uxth	r3, r3
 800c87e:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_b_hi =
 800c880:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c882:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 800c884:	8a7b      	ldrh	r3, [r7, #18]
 800c886:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_b_lo =
 800c888:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c88a:	721a      	strb	r2, [r3, #8]
	}

	LOG_FUNCTION_END(0);

	return status;
 800c88c:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 800c890:	4618      	mov	r0, r3
 800c892:	3720      	adds	r7, #32
 800c894:	46bd      	mov	sp, r7
 800c896:	bd80      	pop	{r7, pc}

0800c898 <VL53L1_encode_row_col>:

void VL53L1_encode_row_col(
	uint8_t  row,
	uint8_t  col,
	uint8_t *pspad_number)
{
 800c898:	b480      	push	{r7}
 800c89a:	b083      	sub	sp, #12
 800c89c:	af00      	add	r7, sp, #0
 800c89e:	4603      	mov	r3, r0
 800c8a0:	603a      	str	r2, [r7, #0]
 800c8a2:	71fb      	strb	r3, [r7, #7]
 800c8a4:	460b      	mov	r3, r1
 800c8a6:	71bb      	strb	r3, [r7, #6]
	/**
	 *  Encodes the input array(row,col) location as SPAD number.
	 */

	if (row > 7) {
 800c8a8:	79fb      	ldrb	r3, [r7, #7]
 800c8aa:	2b07      	cmp	r3, #7
 800c8ac:	d90a      	bls.n	800c8c4 <VL53L1_encode_row_col+0x2c>
		*pspad_number = 128 + (col << 3) + (15-row);
 800c8ae:	79bb      	ldrb	r3, [r7, #6]
 800c8b0:	00db      	lsls	r3, r3, #3
 800c8b2:	b2da      	uxtb	r2, r3
 800c8b4:	79fb      	ldrb	r3, [r7, #7]
 800c8b6:	1ad3      	subs	r3, r2, r3
 800c8b8:	b2db      	uxtb	r3, r3
 800c8ba:	3b71      	subs	r3, #113	; 0x71
 800c8bc:	b2da      	uxtb	r2, r3
 800c8be:	683b      	ldr	r3, [r7, #0]
 800c8c0:	701a      	strb	r2, [r3, #0]
	} else {
		*pspad_number = ((15-col) << 3) + row;
	}
}
 800c8c2:	e00a      	b.n	800c8da <VL53L1_encode_row_col+0x42>
		*pspad_number = ((15-col) << 3) + row;
 800c8c4:	79bb      	ldrb	r3, [r7, #6]
 800c8c6:	f1c3 030f 	rsb	r3, r3, #15
 800c8ca:	b2db      	uxtb	r3, r3
 800c8cc:	00db      	lsls	r3, r3, #3
 800c8ce:	b2da      	uxtb	r2, r3
 800c8d0:	79fb      	ldrb	r3, [r7, #7]
 800c8d2:	4413      	add	r3, r2
 800c8d4:	b2da      	uxtb	r2, r3
 800c8d6:	683b      	ldr	r3, [r7, #0]
 800c8d8:	701a      	strb	r2, [r3, #0]
}
 800c8da:	bf00      	nop
 800c8dc:	370c      	adds	r7, #12
 800c8de:	46bd      	mov	sp, r7
 800c8e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8e4:	4770      	bx	lr

0800c8e6 <VL53L1_decode_zone_size>:

void VL53L1_decode_zone_size(
	uint8_t  encoded_xy_size,
	uint8_t  *pwidth,
	uint8_t  *pheight)
{
 800c8e6:	b480      	push	{r7}
 800c8e8:	b085      	sub	sp, #20
 800c8ea:	af00      	add	r7, sp, #0
 800c8ec:	4603      	mov	r3, r0
 800c8ee:	60b9      	str	r1, [r7, #8]
 800c8f0:	607a      	str	r2, [r7, #4]
 800c8f2:	73fb      	strb	r3, [r7, #15]
	 *
	 * MS Nibble = height
	 * LS Nibble = width
	 */

	*pheight = encoded_xy_size >> 4;
 800c8f4:	7bfb      	ldrb	r3, [r7, #15]
 800c8f6:	091b      	lsrs	r3, r3, #4
 800c8f8:	b2da      	uxtb	r2, r3
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	701a      	strb	r2, [r3, #0]
	*pwidth  = encoded_xy_size & 0x0F;
 800c8fe:	7bfb      	ldrb	r3, [r7, #15]
 800c900:	f003 030f 	and.w	r3, r3, #15
 800c904:	b2da      	uxtb	r2, r3
 800c906:	68bb      	ldr	r3, [r7, #8]
 800c908:	701a      	strb	r2, [r3, #0]

}
 800c90a:	bf00      	nop
 800c90c:	3714      	adds	r7, #20
 800c90e:	46bd      	mov	sp, r7
 800c910:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c914:	4770      	bx	lr

0800c916 <VL53L1_encode_zone_size>:

void VL53L1_encode_zone_size(
	uint8_t  width,
	uint8_t  height,
	uint8_t *pencoded_xy_size)
{
 800c916:	b480      	push	{r7}
 800c918:	b083      	sub	sp, #12
 800c91a:	af00      	add	r7, sp, #0
 800c91c:	4603      	mov	r3, r0
 800c91e:	603a      	str	r2, [r7, #0]
 800c920:	71fb      	strb	r3, [r7, #7]
 800c922:	460b      	mov	r3, r1
 800c924:	71bb      	strb	r3, [r7, #6]
	 *
	 * MS Nibble = height
	 * LS Nibble = width
	 */

	*pencoded_xy_size = (height << 4) + width;
 800c926:	79bb      	ldrb	r3, [r7, #6]
 800c928:	011b      	lsls	r3, r3, #4
 800c92a:	b2da      	uxtb	r2, r3
 800c92c:	79fb      	ldrb	r3, [r7, #7]
 800c92e:	4413      	add	r3, r2
 800c930:	b2da      	uxtb	r2, r3
 800c932:	683b      	ldr	r3, [r7, #0]
 800c934:	701a      	strb	r2, [r3, #0]

}
 800c936:	bf00      	nop
 800c938:	370c      	adds	r7, #12
 800c93a:	46bd      	mov	sp, r7
 800c93c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c940:	4770      	bx	lr

0800c942 <VL53L1_set_ref_spad_char_config>:
	uint32_t      phasecal_timeout_us,
	uint16_t      total_rate_target_mcps,
	uint16_t      max_count_rate_rtn_limit_mcps,
	uint16_t      min_count_rate_rtn_limit_mcps,
	uint16_t      fast_osc_frequency)
{
 800c942:	b580      	push	{r7, lr}
 800c944:	b08a      	sub	sp, #40	; 0x28
 800c946:	af00      	add	r7, sp, #0
 800c948:	60f8      	str	r0, [r7, #12]
 800c94a:	607a      	str	r2, [r7, #4]
 800c94c:	461a      	mov	r2, r3
 800c94e:	460b      	mov	r3, r1
 800c950:	72fb      	strb	r3, [r7, #11]
 800c952:	4613      	mov	r3, r2
 800c954:	813b      	strh	r3, [r7, #8]
	/*
	 * Initialises the VCSEL period A and phasecal timeout registers
	 * for the Reference SPAD Characterisation test
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800c956:	2300      	movs	r3, #0
 800c958:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800c95c:	68fb      	ldr	r3, [r7, #12]
 800c95e:	623b      	str	r3, [r7, #32]

	uint8_t buffer[2];

	uint32_t macro_period_us = 0;
 800c960:	2300      	movs	r3, #0
 800c962:	61fb      	str	r3, [r7, #28]
	uint32_t timeout_mclks   = 0;
 800c964:	2300      	movs	r3, #0
 800c966:	61bb      	str	r3, [r7, #24]

	/*
	 * Update Macro Period for Range A VCSEL Period
	 */
	macro_period_us =
		VL53L1_calc_macro_period_us(
 800c968:	7afa      	ldrb	r2, [r7, #11]
 800c96a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800c96c:	4611      	mov	r1, r2
 800c96e:	4618      	mov	r0, r3
 800c970:	f7ff fd97 	bl	800c4a2 <VL53L1_calc_macro_period_us>
 800c974:	61f8      	str	r0, [r7, #28]

	/*
	 *  Calculate PhaseCal timeout and clip to max of 255 macro periods
	 */

	timeout_mclks = phasecal_timeout_us << 12;
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	031b      	lsls	r3, r3, #12
 800c97a:	61bb      	str	r3, [r7, #24]
	timeout_mclks = timeout_mclks + (macro_period_us>>1);
 800c97c:	69fb      	ldr	r3, [r7, #28]
 800c97e:	085b      	lsrs	r3, r3, #1
 800c980:	69ba      	ldr	r2, [r7, #24]
 800c982:	4413      	add	r3, r2
 800c984:	61bb      	str	r3, [r7, #24]
	timeout_mclks = timeout_mclks / macro_period_us;
 800c986:	69ba      	ldr	r2, [r7, #24]
 800c988:	69fb      	ldr	r3, [r7, #28]
 800c98a:	fbb2 f3f3 	udiv	r3, r2, r3
 800c98e:	61bb      	str	r3, [r7, #24]

	if (timeout_mclks > 0xFF)
 800c990:	69bb      	ldr	r3, [r7, #24]
 800c992:	2bff      	cmp	r3, #255	; 0xff
 800c994:	d904      	bls.n	800c9a0 <VL53L1_set_ref_spad_char_config+0x5e>
		pdev->gen_cfg.phasecal_config__timeout_macrop = 0xFF;
 800c996:	6a3b      	ldr	r3, [r7, #32]
 800c998:	22ff      	movs	r2, #255	; 0xff
 800c99a:	f883 218b 	strb.w	r2, [r3, #395]	; 0x18b
 800c99e:	e004      	b.n	800c9aa <VL53L1_set_ref_spad_char_config+0x68>
	else
		pdev->gen_cfg.phasecal_config__timeout_macrop =
				(uint8_t)timeout_mclks;
 800c9a0:	69bb      	ldr	r3, [r7, #24]
 800c9a2:	b2da      	uxtb	r2, r3
		pdev->gen_cfg.phasecal_config__timeout_macrop =
 800c9a4:	6a3b      	ldr	r3, [r7, #32]
 800c9a6:	f883 218b 	strb.w	r2, [r3, #395]	; 0x18b

	pdev->tim_cfg.range_config__vcsel_period_a = vcsel_period_a;
 800c9aa:	6a3b      	ldr	r3, [r7, #32]
 800c9ac:	7afa      	ldrb	r2, [r7, #11]
 800c9ae:	f883 21a2 	strb.w	r2, [r3, #418]	; 0x1a2

	/*
	 * Update device settings
	 */

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 800c9b2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c9b6:	2b00      	cmp	r3, #0
 800c9b8:	d10a      	bne.n	800c9d0 <VL53L1_set_ref_spad_char_config+0x8e>
		status =
			VL53L1_WrByte(
 800c9ba:	6a3b      	ldr	r3, [r7, #32]
 800c9bc:	f893 318b 	ldrb.w	r3, [r3, #395]	; 0x18b
 800c9c0:	461a      	mov	r2, r3
 800c9c2:	214b      	movs	r1, #75	; 0x4b
 800c9c4:	68f8      	ldr	r0, [r7, #12]
 800c9c6:	f001 fc07 	bl	800e1d8 <VL53L1_WrByte>
 800c9ca:	4603      	mov	r3, r0
 800c9cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				Dev,
				VL53L1_PHASECAL_CONFIG__TIMEOUT_MACROP,
				pdev->gen_cfg.phasecal_config__timeout_macrop);

	if (status == VL53L1_ERROR_NONE)
 800c9d0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c9d4:	2b00      	cmp	r3, #0
 800c9d6:	d10a      	bne.n	800c9ee <VL53L1_set_ref_spad_char_config+0xac>
		status =
			VL53L1_WrByte(
 800c9d8:	6a3b      	ldr	r3, [r7, #32]
 800c9da:	f893 31a2 	ldrb.w	r3, [r3, #418]	; 0x1a2
 800c9de:	461a      	mov	r2, r3
 800c9e0:	2160      	movs	r1, #96	; 0x60
 800c9e2:	68f8      	ldr	r0, [r7, #12]
 800c9e4:	f001 fbf8 	bl	800e1d8 <VL53L1_WrByte>
 800c9e8:	4603      	mov	r3, r0
 800c9ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	/*
	 * Copy vcsel register value to the WOI registers to ensure that
	 * it is correctly set for the specified VCSEL period
	 */

	buffer[0] = pdev->tim_cfg.range_config__vcsel_period_a;
 800c9ee:	6a3b      	ldr	r3, [r7, #32]
 800c9f0:	f893 31a2 	ldrb.w	r3, [r3, #418]	; 0x1a2
 800c9f4:	753b      	strb	r3, [r7, #20]
	buffer[1] = pdev->tim_cfg.range_config__vcsel_period_a;
 800c9f6:	6a3b      	ldr	r3, [r7, #32]
 800c9f8:	f893 31a2 	ldrb.w	r3, [r3, #418]	; 0x1a2
 800c9fc:	757b      	strb	r3, [r7, #21]

	if (status == VL53L1_ERROR_NONE)
 800c9fe:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ca02:	2b00      	cmp	r3, #0
 800ca04:	d109      	bne.n	800ca1a <VL53L1_set_ref_spad_char_config+0xd8>
		status =
			VL53L1_WriteMulti(
 800ca06:	f107 0214 	add.w	r2, r7, #20
 800ca0a:	2302      	movs	r3, #2
 800ca0c:	2178      	movs	r1, #120	; 0x78
 800ca0e:	68f8      	ldr	r0, [r7, #12]
 800ca10:	f001 fb76 	bl	800e100 <VL53L1_WriteMulti>
 800ca14:	4603      	mov	r3, r0
 800ca16:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	/*
	 * Set min, target and max rate limits
	 */

	pdev->customer.ref_spad_char__total_rate_target_mcps =
 800ca1a:	6a3b      	ldr	r3, [r7, #32]
 800ca1c:	893a      	ldrh	r2, [r7, #8]
 800ca1e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
			total_rate_target_mcps;

	if (status == VL53L1_ERROR_NONE)
 800ca22:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ca26:	2b00      	cmp	r3, #0
 800ca28:	d108      	bne.n	800ca3c <VL53L1_set_ref_spad_char_config+0xfa>
		status =
			VL53L1_WrWord(
 800ca2a:	893b      	ldrh	r3, [r7, #8]
 800ca2c:	461a      	mov	r2, r3
 800ca2e:	211c      	movs	r1, #28
 800ca30:	68f8      	ldr	r0, [r7, #12]
 800ca32:	f001 fbfb 	bl	800e22c <VL53L1_WrWord>
 800ca36:	4603      	mov	r3, r0
 800ca38:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				Dev,
				VL53L1_REF_SPAD_CHAR__TOTAL_RATE_TARGET_MCPS,
				total_rate_target_mcps);  /* 9.7 format */

	if (status == VL53L1_ERROR_NONE)
 800ca3c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ca40:	2b00      	cmp	r3, #0
 800ca42:	d108      	bne.n	800ca56 <VL53L1_set_ref_spad_char_config+0x114>
		status =
			VL53L1_WrWord(
 800ca44:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800ca46:	461a      	mov	r2, r3
 800ca48:	2164      	movs	r1, #100	; 0x64
 800ca4a:	68f8      	ldr	r0, [r7, #12]
 800ca4c:	f001 fbee 	bl	800e22c <VL53L1_WrWord>
 800ca50:	4603      	mov	r3, r0
 800ca52:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				Dev,
				VL53L1_RANGE_CONFIG__SIGMA_THRESH,
				max_count_rate_rtn_limit_mcps);

	if (status == VL53L1_ERROR_NONE)
 800ca56:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ca5a:	2b00      	cmp	r3, #0
 800ca5c:	d108      	bne.n	800ca70 <VL53L1_set_ref_spad_char_config+0x12e>
		status =
			VL53L1_WrWord(
 800ca5e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800ca60:	461a      	mov	r2, r3
 800ca62:	2166      	movs	r1, #102	; 0x66
 800ca64:	68f8      	ldr	r0, [r7, #12]
 800ca66:	f001 fbe1 	bl	800e22c <VL53L1_WrWord>
 800ca6a:	4603      	mov	r3, r0
 800ca6c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L1_RANGE_CONFIG__MIN_COUNT_RATE_RTN_LIMIT_MCPS,
				min_count_rate_rtn_limit_mcps);

	LOG_FUNCTION_END(status);

	return status;
 800ca70:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800ca74:	4618      	mov	r0, r3
 800ca76:	3728      	adds	r7, #40	; 0x28
 800ca78:	46bd      	mov	sp, r7
 800ca7a:	bd80      	pop	{r7, pc}

0800ca7c <VL53L1_low_power_auto_data_init>:
/* Start Patch_LowPowerAutoMode */

VL53L1_Error VL53L1_low_power_auto_data_init(
	VL53L1_DEV                          Dev
	)
{
 800ca7c:	b480      	push	{r7}
 800ca7e:	b085      	sub	sp, #20
 800ca80:	af00      	add	r7, sp, #0
 800ca82:	6078      	str	r0, [r7, #4]
	/*
	 * Initializes internal data structures for low power auto mode
	 */

	/* don't really use this here */
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800ca84:	2300      	movs	r3, #0
 800ca86:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->low_power_auto_data.vhv_loop_bound =
 800ca8c:	68bb      	ldr	r3, [r7, #8]
 800ca8e:	2203      	movs	r2, #3
 800ca90:	f883 22e4 	strb.w	r2, [r3, #740]	; 0x2e4
		VL53L1_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND_DEFAULT;
	pdev->low_power_auto_data.is_low_power_auto_mode = 0;
 800ca94:	68bb      	ldr	r3, [r7, #8]
 800ca96:	2200      	movs	r2, #0
 800ca98:	f883 22e5 	strb.w	r2, [r3, #741]	; 0x2e5
	pdev->low_power_auto_data.low_power_auto_range_count = 0;
 800ca9c:	68bb      	ldr	r3, [r7, #8]
 800ca9e:	2200      	movs	r2, #0
 800caa0:	f883 22e6 	strb.w	r2, [r3, #742]	; 0x2e6
	pdev->low_power_auto_data.saved_interrupt_config = 0;
 800caa4:	68bb      	ldr	r3, [r7, #8]
 800caa6:	2200      	movs	r2, #0
 800caa8:	f883 22e7 	strb.w	r2, [r3, #743]	; 0x2e7
	pdev->low_power_auto_data.saved_vhv_init = 0;
 800caac:	68bb      	ldr	r3, [r7, #8]
 800caae:	2200      	movs	r2, #0
 800cab0:	f883 22e8 	strb.w	r2, [r3, #744]	; 0x2e8
	pdev->low_power_auto_data.saved_vhv_timeout = 0;
 800cab4:	68bb      	ldr	r3, [r7, #8]
 800cab6:	2200      	movs	r2, #0
 800cab8:	f883 22e9 	strb.w	r2, [r3, #745]	; 0x2e9
	pdev->low_power_auto_data.first_run_phasecal_result = 0;
 800cabc:	68bb      	ldr	r3, [r7, #8]
 800cabe:	2200      	movs	r2, #0
 800cac0:	f883 22ea 	strb.w	r2, [r3, #746]	; 0x2ea
	pdev->low_power_auto_data.dss__total_rate_per_spad_mcps = 0;
 800cac4:	68bb      	ldr	r3, [r7, #8]
 800cac6:	2200      	movs	r2, #0
 800cac8:	f8c3 22ec 	str.w	r2, [r3, #748]	; 0x2ec
	pdev->low_power_auto_data.dss__required_spads = 0;
 800cacc:	68bb      	ldr	r3, [r7, #8]
 800cace:	2200      	movs	r2, #0
 800cad0:	f8a3 22f0 	strh.w	r2, [r3, #752]	; 0x2f0

	LOG_FUNCTION_END(status);

	return status;
 800cad4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800cad8:	4618      	mov	r0, r3
 800cada:	3714      	adds	r7, #20
 800cadc:	46bd      	mov	sp, r7
 800cade:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cae2:	4770      	bx	lr

0800cae4 <VL53L1_low_power_auto_data_stop_range>:

VL53L1_Error VL53L1_low_power_auto_data_stop_range(
	VL53L1_DEV                          Dev
	)
{
 800cae4:	b480      	push	{r7}
 800cae6:	b085      	sub	sp, #20
 800cae8:	af00      	add	r7, sp, #0
 800caea:	6078      	str	r0, [r7, #4]
	/*
	 * Range has been paused but may continue later
	 */

	/* don't really use this here */
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800caec:	2300      	movs	r3, #0
 800caee:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	60bb      	str	r3, [r7, #8]
	LOG_FUNCTION_START("");

	/* doing this ensures stop_range followed by a get_device_results does
	 * not mess up the counters */

	pdev->low_power_auto_data.low_power_auto_range_count = 0xFF;
 800caf4:	68bb      	ldr	r3, [r7, #8]
 800caf6:	22ff      	movs	r2, #255	; 0xff
 800caf8:	f883 22e6 	strb.w	r2, [r3, #742]	; 0x2e6

	pdev->low_power_auto_data.first_run_phasecal_result = 0;
 800cafc:	68bb      	ldr	r3, [r7, #8]
 800cafe:	2200      	movs	r2, #0
 800cb00:	f883 22ea 	strb.w	r2, [r3, #746]	; 0x2ea
	pdev->low_power_auto_data.dss__total_rate_per_spad_mcps = 0;
 800cb04:	68bb      	ldr	r3, [r7, #8]
 800cb06:	2200      	movs	r2, #0
 800cb08:	f8c3 22ec 	str.w	r2, [r3, #748]	; 0x2ec
	pdev->low_power_auto_data.dss__required_spads = 0;
 800cb0c:	68bb      	ldr	r3, [r7, #8]
 800cb0e:	2200      	movs	r2, #0
 800cb10:	f8a3 22f0 	strh.w	r2, [r3, #752]	; 0x2f0

	/* restore vhv configs */
	if (pdev->low_power_auto_data.saved_vhv_init != 0)
 800cb14:	68bb      	ldr	r3, [r7, #8]
 800cb16:	f893 32e8 	ldrb.w	r3, [r3, #744]	; 0x2e8
 800cb1a:	2b00      	cmp	r3, #0
 800cb1c:	d005      	beq.n	800cb2a <VL53L1_low_power_auto_data_stop_range+0x46>
		pdev->stat_nvm.vhv_config__init =
			pdev->low_power_auto_data.saved_vhv_init;
 800cb1e:	68bb      	ldr	r3, [r7, #8]
 800cb20:	f893 22e8 	ldrb.w	r2, [r3, #744]	; 0x2e8
		pdev->stat_nvm.vhv_config__init =
 800cb24:	68bb      	ldr	r3, [r7, #8]
 800cb26:	f883 2163 	strb.w	r2, [r3, #355]	; 0x163
	if (pdev->low_power_auto_data.saved_vhv_timeout != 0)
 800cb2a:	68bb      	ldr	r3, [r7, #8]
 800cb2c:	f893 32e9 	ldrb.w	r3, [r3, #745]	; 0x2e9
 800cb30:	2b00      	cmp	r3, #0
 800cb32:	d005      	beq.n	800cb40 <VL53L1_low_power_auto_data_stop_range+0x5c>
		pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
			pdev->low_power_auto_data.saved_vhv_timeout;
 800cb34:	68bb      	ldr	r3, [r7, #8]
 800cb36:	f893 22e9 	ldrb.w	r2, [r3, #745]	; 0x2e9
		pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
 800cb3a:	68bb      	ldr	r3, [r7, #8]
 800cb3c:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160

	/* remove phasecal override */
	pdev->gen_cfg.phasecal_config__override = 0x00;
 800cb40:	68bb      	ldr	r3, [r7, #8]
 800cb42:	2200      	movs	r2, #0
 800cb44:	f883 218d 	strb.w	r2, [r3, #397]	; 0x18d

	LOG_FUNCTION_END(status);

	return status;
 800cb48:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800cb4c:	4618      	mov	r0, r3
 800cb4e:	3714      	adds	r7, #20
 800cb50:	46bd      	mov	sp, r7
 800cb52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb56:	4770      	bx	lr

0800cb58 <VL53L1_config_low_power_auto_mode>:
VL53L1_Error VL53L1_config_low_power_auto_mode(
	VL53L1_general_config_t   *pgeneral,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_low_power_auto_data_t *plpadata
	)
{
 800cb58:	b480      	push	{r7}
 800cb5a:	b087      	sub	sp, #28
 800cb5c:	af00      	add	r7, sp, #0
 800cb5e:	60f8      	str	r0, [r7, #12]
 800cb60:	60b9      	str	r1, [r7, #8]
 800cb62:	607a      	str	r2, [r7, #4]
	/*
	 * Initializes configs for when low power auto presets are selected
	 */

	/* don't really use this here */
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800cb64:	2300      	movs	r3, #0
 800cb66:	75fb      	strb	r3, [r7, #23]
	SUPPRESS_UNUSED_WARNING(pgeneral);

	LOG_FUNCTION_START("");

	/* set low power auto mode */
	plpadata->is_low_power_auto_mode = 1;
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	2201      	movs	r2, #1
 800cb6c:	705a      	strb	r2, [r3, #1]

	/* set low power range count to 0 */
	plpadata->low_power_auto_range_count = 0;
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	2200      	movs	r2, #0
 800cb72:	709a      	strb	r2, [r3, #2]

	/* Turn off MM1/MM2 and DSS2 */
	pdynamic->system__sequence_config = \
 800cb74:	68bb      	ldr	r3, [r7, #8]
 800cb76:	229b      	movs	r2, #155	; 0x9b
 800cb78:	745a      	strb	r2, [r3, #17]
			/* VL53L1_SEQUENCE_MM2_EN | \*/
			VL53L1_SEQUENCE_RANGE_EN;

	LOG_FUNCTION_END(status);

	return status;
 800cb7a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800cb7e:	4618      	mov	r0, r3
 800cb80:	371c      	adds	r7, #28
 800cb82:	46bd      	mov	sp, r7
 800cb84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb88:	4770      	bx	lr

0800cb8a <VL53L1_low_power_auto_setup_manual_calibration>:

VL53L1_Error VL53L1_low_power_auto_setup_manual_calibration(
	VL53L1_DEV        Dev)
{
 800cb8a:	b480      	push	{r7}
 800cb8c:	b085      	sub	sp, #20
 800cb8e:	af00      	add	r7, sp, #0
 800cb90:	6078      	str	r0, [r7, #4]
	/*
	 * Setup ranges after the first one in low power auto mode by turning
	 * off FW calibration steps and programming static values
	 */

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	60fb      	str	r3, [r7, #12]

	/* don't really use this here */
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800cb96:	2300      	movs	r3, #0
 800cb98:	72fb      	strb	r3, [r7, #11]

	LOG_FUNCTION_START("");

	/* save original vhv configs */
	pdev->low_power_auto_data.saved_vhv_init =
		pdev->stat_nvm.vhv_config__init;
 800cb9a:	68fb      	ldr	r3, [r7, #12]
 800cb9c:	f893 2163 	ldrb.w	r2, [r3, #355]	; 0x163
	pdev->low_power_auto_data.saved_vhv_init =
 800cba0:	68fb      	ldr	r3, [r7, #12]
 800cba2:	f883 22e8 	strb.w	r2, [r3, #744]	; 0x2e8
	pdev->low_power_auto_data.saved_vhv_timeout =
		pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound;
 800cba6:	68fb      	ldr	r3, [r7, #12]
 800cba8:	f893 2160 	ldrb.w	r2, [r3, #352]	; 0x160
	pdev->low_power_auto_data.saved_vhv_timeout =
 800cbac:	68fb      	ldr	r3, [r7, #12]
 800cbae:	f883 22e9 	strb.w	r2, [r3, #745]	; 0x2e9

	/* disable VHV init */
	pdev->stat_nvm.vhv_config__init &= 0x7F;
 800cbb2:	68fb      	ldr	r3, [r7, #12]
 800cbb4:	f893 3163 	ldrb.w	r3, [r3, #355]	; 0x163
 800cbb8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cbbc:	b2da      	uxtb	r2, r3
 800cbbe:	68fb      	ldr	r3, [r7, #12]
 800cbc0:	f883 2163 	strb.w	r2, [r3, #355]	; 0x163
	/* set loop bound to tuning param */
	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
		(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
 800cbc4:	68fb      	ldr	r3, [r7, #12]
 800cbc6:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 800cbca:	f003 0303 	and.w	r3, r3, #3
 800cbce:	b2da      	uxtb	r2, r3
		(pdev->low_power_auto_data.vhv_loop_bound << 2);
 800cbd0:	68fb      	ldr	r3, [r7, #12]
 800cbd2:	f893 32e4 	ldrb.w	r3, [r3, #740]	; 0x2e4
 800cbd6:	009b      	lsls	r3, r3, #2
 800cbd8:	b2db      	uxtb	r3, r3
		(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
 800cbda:	4413      	add	r3, r2
 800cbdc:	b2da      	uxtb	r2, r3
	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
 800cbde:	68fb      	ldr	r3, [r7, #12]
 800cbe0:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
	/* override phasecal */
	pdev->gen_cfg.phasecal_config__override = 0x01;
 800cbe4:	68fb      	ldr	r3, [r7, #12]
 800cbe6:	2201      	movs	r2, #1
 800cbe8:	f883 218d 	strb.w	r2, [r3, #397]	; 0x18d
	pdev->low_power_auto_data.first_run_phasecal_result =
		pdev->dbg_results.phasecal_result__vcsel_start;
 800cbec:	68fb      	ldr	r3, [r7, #12]
 800cbee:	f893 22ae 	ldrb.w	r2, [r3, #686]	; 0x2ae
	pdev->low_power_auto_data.first_run_phasecal_result =
 800cbf2:	68fb      	ldr	r3, [r7, #12]
 800cbf4:	f883 22ea 	strb.w	r2, [r3, #746]	; 0x2ea
	pdev->gen_cfg.cal_config__vcsel_start =
		pdev->low_power_auto_data.first_run_phasecal_result;
 800cbf8:	68fb      	ldr	r3, [r7, #12]
 800cbfa:	f893 22ea 	ldrb.w	r2, [r3, #746]	; 0x2ea
	pdev->gen_cfg.cal_config__vcsel_start =
 800cbfe:	68fb      	ldr	r3, [r7, #12]
 800cc00:	f883 2187 	strb.w	r2, [r3, #391]	; 0x187

	LOG_FUNCTION_END(status);

	return status;
 800cc04:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800cc08:	4618      	mov	r0, r3
 800cc0a:	3714      	adds	r7, #20
 800cc0c:	46bd      	mov	sp, r7
 800cc0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc12:	4770      	bx	lr

0800cc14 <VL53L1_calc_pll_period_us>:
	level, VL53L1_TRACE_FUNCTION_NONE, ##__VA_ARGS__)


uint32_t VL53L1_calc_pll_period_us(
	uint16_t  fast_osc_frequency)
{
 800cc14:	b480      	push	{r7}
 800cc16:	b085      	sub	sp, #20
 800cc18:	af00      	add	r7, sp, #0
 800cc1a:	4603      	mov	r3, r0
 800cc1c:	80fb      	strh	r3, [r7, #6]
	 *  ->  only the 18 LS bits are used
	 *
	 *  2^30 = (2^24) (1.0us) * 4096 (2^12) / 64 (PLL Multiplier)
	 */

	uint32_t  pll_period_us        = 0;
 800cc1e:	2300      	movs	r3, #0
 800cc20:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	pll_period_us = (0x01 << 30) / fast_osc_frequency;
 800cc22:	88fb      	ldrh	r3, [r7, #6]
 800cc24:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800cc28:	fb92 f3f3 	sdiv	r3, r2, r3
 800cc2c:	60fb      	str	r3, [r7, #12]
			pll_period_us);
#endif

	LOG_FUNCTION_END(0);

	return pll_period_us;
 800cc2e:	68fb      	ldr	r3, [r7, #12]
}
 800cc30:	4618      	mov	r0, r3
 800cc32:	3714      	adds	r7, #20
 800cc34:	46bd      	mov	sp, r7
 800cc36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc3a:	4770      	bx	lr

0800cc3c <VL53L1_decode_vcsel_period>:
	return range_mm;
}
#endif

uint8_t VL53L1_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 800cc3c:	b480      	push	{r7}
 800cc3e:	b085      	sub	sp, #20
 800cc40:	af00      	add	r7, sp, #0
 800cc42:	4603      	mov	r3, r0
 800cc44:	71fb      	strb	r3, [r7, #7]
	/*
	 * Converts the encoded VCSEL period register value into
	 * the real period in PLL clocks
	 */

	uint8_t vcsel_period_pclks = 0;
 800cc46:	2300      	movs	r3, #0
 800cc48:	73fb      	strb	r3, [r7, #15]

	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 800cc4a:	79fb      	ldrb	r3, [r7, #7]
 800cc4c:	3301      	adds	r3, #1
 800cc4e:	b2db      	uxtb	r3, r3
 800cc50:	005b      	lsls	r3, r3, #1
 800cc52:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_pclks;
 800cc54:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc56:	4618      	mov	r0, r3
 800cc58:	3714      	adds	r7, #20
 800cc5a:	46bd      	mov	sp, r7
 800cc5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc60:	4770      	bx	lr

0800cc62 <VL53L1_decode_row_col>:

void VL53L1_decode_row_col(
	uint8_t  spad_number,
	uint8_t  *prow,
	uint8_t  *pcol)
{
 800cc62:	b480      	push	{r7}
 800cc64:	b085      	sub	sp, #20
 800cc66:	af00      	add	r7, sp, #0
 800cc68:	4603      	mov	r3, r0
 800cc6a:	60b9      	str	r1, [r7, #8]
 800cc6c:	607a      	str	r2, [r7, #4]
 800cc6e:	73fb      	strb	r3, [r7, #15]
	/**
	 *  Decodes the array (row,col) location from
	 *  the input SPAD number
	 */

	if (spad_number > 127) {
 800cc70:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cc74:	2b00      	cmp	r3, #0
 800cc76:	da10      	bge.n	800cc9a <VL53L1_decode_row_col+0x38>
		*prow = 8 + ((255-spad_number) & 0x07);
 800cc78:	7bfb      	ldrb	r3, [r7, #15]
 800cc7a:	43db      	mvns	r3, r3
 800cc7c:	b2db      	uxtb	r3, r3
 800cc7e:	f003 0307 	and.w	r3, r3, #7
 800cc82:	b2db      	uxtb	r3, r3
 800cc84:	3308      	adds	r3, #8
 800cc86:	b2da      	uxtb	r2, r3
 800cc88:	68bb      	ldr	r3, [r7, #8]
 800cc8a:	701a      	strb	r2, [r3, #0]
		*pcol = (spad_number-128) >> 3;
 800cc8c:	7bfb      	ldrb	r3, [r7, #15]
 800cc8e:	3b80      	subs	r3, #128	; 0x80
 800cc90:	10db      	asrs	r3, r3, #3
 800cc92:	b2da      	uxtb	r2, r3
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	701a      	strb	r2, [r3, #0]
	} else {
		*prow = spad_number & 0x07;
		*pcol = (127-spad_number) >> 3;
	}
}
 800cc98:	e00c      	b.n	800ccb4 <VL53L1_decode_row_col+0x52>
		*prow = spad_number & 0x07;
 800cc9a:	7bfb      	ldrb	r3, [r7, #15]
 800cc9c:	f003 0307 	and.w	r3, r3, #7
 800cca0:	b2da      	uxtb	r2, r3
 800cca2:	68bb      	ldr	r3, [r7, #8]
 800cca4:	701a      	strb	r2, [r3, #0]
		*pcol = (127-spad_number) >> 3;
 800cca6:	7bfb      	ldrb	r3, [r7, #15]
 800cca8:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 800ccac:	10db      	asrs	r3, r3, #3
 800ccae:	b2da      	uxtb	r2, r3
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	701a      	strb	r2, [r3, #0]
}
 800ccb4:	bf00      	nop
 800ccb6:	3714      	adds	r7, #20
 800ccb8:	46bd      	mov	sp, r7
 800ccba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccbe:	4770      	bx	lr

0800ccc0 <VL53L1_get_pal_error_string>:
#endif

VL53L1_Error VL53L1_get_pal_error_string(
	VL53L1_Error   PalErrorCode,
	char          *pPalErrorString)
{
 800ccc0:	b580      	push	{r7, lr}
 800ccc2:	b084      	sub	sp, #16
 800ccc4:	af00      	add	r7, sp, #0
 800ccc6:	4603      	mov	r3, r0
 800ccc8:	6039      	str	r1, [r7, #0]
 800ccca:	71fb      	strb	r3, [r7, #7]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800cccc:	2300      	movs	r3, #0
 800ccce:	73fb      	strb	r3, [r7, #15]
#endif

	LOG_FUNCTION_START("");

#ifdef VL53L1_USE_EMPTY_STRING
	VL53L1_COPYSTRING(pPalErrorString, "");
 800ccd0:	f240 12ff 	movw	r2, #511	; 0x1ff
 800ccd4:	4904      	ldr	r1, [pc, #16]	; (800cce8 <VL53L1_get_pal_error_string+0x28>)
 800ccd6:	6838      	ldr	r0, [r7, #0]
 800ccd8:	f002 f99d 	bl	800f016 <strncpy>

#endif

	LOG_FUNCTION_END(Status);

	return Status;
 800ccdc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800cce0:	4618      	mov	r0, r3
 800cce2:	3710      	adds	r7, #16
 800cce4:	46bd      	mov	sp, r7
 800cce6:	bd80      	pop	{r7, pc}
 800cce8:	0801337c 	.word	0x0801337c

0800ccec <VL53L1_i2c_encode_static_nvm_managed>:

VL53L1_Error VL53L1_i2c_encode_static_nvm_managed(
	VL53L1_static_nvm_managed_t *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 800ccec:	b580      	push	{r7, lr}
 800ccee:	b086      	sub	sp, #24
 800ccf0:	af00      	add	r7, sp, #0
 800ccf2:	60f8      	str	r0, [r7, #12]
 800ccf4:	460b      	mov	r3, r1
 800ccf6:	607a      	str	r2, [r7, #4]
 800ccf8:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_static_nvm_managed_t into a I2C write buffer
	 * Buffer must be at least 11 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800ccfa:	2300      	movs	r3, #0
 800ccfc:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES > buf_size)
 800ccfe:	897b      	ldrh	r3, [r7, #10]
 800cd00:	2b0a      	cmp	r3, #10
 800cd02:	d802      	bhi.n	800cd0a <VL53L1_i2c_encode_static_nvm_managed+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800cd04:	f06f 0309 	mvn.w	r3, #9
 800cd08:	e047      	b.n	800cd9a <VL53L1_i2c_encode_static_nvm_managed+0xae>

	*(pbuffer +   0) =
		pdata->i2c_slave__device_address & 0x7F;
 800cd0a:	68fb      	ldr	r3, [r7, #12]
 800cd0c:	781b      	ldrb	r3, [r3, #0]
 800cd0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cd12:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
		pdata->ana_config__vhv_ref_sel_vddpix & 0xF;
 800cd18:	68fb      	ldr	r3, [r7, #12]
 800cd1a:	785a      	ldrb	r2, [r3, #1]
	*(pbuffer +   1) =
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	3301      	adds	r3, #1
		pdata->ana_config__vhv_ref_sel_vddpix & 0xF;
 800cd20:	f002 020f 	and.w	r2, r2, #15
 800cd24:	b2d2      	uxtb	r2, r2
	*(pbuffer +   1) =
 800cd26:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
		pdata->ana_config__vhv_ref_sel_vquench & 0x7F;
 800cd28:	68fb      	ldr	r3, [r7, #12]
 800cd2a:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	3302      	adds	r3, #2
		pdata->ana_config__vhv_ref_sel_vquench & 0x7F;
 800cd30:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800cd34:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 800cd36:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->ana_config__reg_avdd1v2_sel & 0x3;
 800cd38:	68fb      	ldr	r3, [r7, #12]
 800cd3a:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	3303      	adds	r3, #3
		pdata->ana_config__reg_avdd1v2_sel & 0x3;
 800cd40:	f002 0203 	and.w	r2, r2, #3
 800cd44:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 800cd46:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
		pdata->ana_config__fast_osc__trim & 0x7F;
 800cd48:	68fb      	ldr	r3, [r7, #12]
 800cd4a:	791a      	ldrb	r2, [r3, #4]
	*(pbuffer +   4) =
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	3304      	adds	r3, #4
		pdata->ana_config__fast_osc__trim & 0x7F;
 800cd50:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800cd54:	b2d2      	uxtb	r2, r2
	*(pbuffer +   4) =
 800cd56:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 800cd58:	68fb      	ldr	r3, [r7, #12]
 800cd5a:	88d8      	ldrh	r0, [r3, #6]
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	3305      	adds	r3, #5
 800cd60:	461a      	mov	r2, r3
 800cd62:	2102      	movs	r1, #2
 800cd64:	f7ff f9d7 	bl	800c116 <VL53L1_i2c_encode_uint16_t>
		pdata->osc_measured__fast_osc__frequency,
		2,
		pbuffer +   5);
	*(pbuffer +   7) =
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	3307      	adds	r3, #7
		pdata->vhv_config__timeout_macrop_loop_bound;
 800cd6c:	68fa      	ldr	r2, [r7, #12]
 800cd6e:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   7) =
 800cd70:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	3308      	adds	r3, #8
		pdata->vhv_config__count_thresh;
 800cd76:	68fa      	ldr	r2, [r7, #12]
 800cd78:	7a52      	ldrb	r2, [r2, #9]
	*(pbuffer +   8) =
 800cd7a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->vhv_config__offset & 0x3F;
 800cd7c:	68fb      	ldr	r3, [r7, #12]
 800cd7e:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +   9) =
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	3309      	adds	r3, #9
		pdata->vhv_config__offset & 0x3F;
 800cd84:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800cd88:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 800cd8a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  10) =
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	330a      	adds	r3, #10
		pdata->vhv_config__init;
 800cd90:	68fa      	ldr	r2, [r7, #12]
 800cd92:	7ad2      	ldrb	r2, [r2, #11]
	*(pbuffer +  10) =
 800cd94:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 800cd96:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800cd9a:	4618      	mov	r0, r3
 800cd9c:	3718      	adds	r7, #24
 800cd9e:	46bd      	mov	sp, r7
 800cda0:	bd80      	pop	{r7, pc}

0800cda2 <VL53L1_i2c_decode_static_nvm_managed>:

VL53L1_Error VL53L1_i2c_decode_static_nvm_managed(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_static_nvm_managed_t  *pdata)
{
 800cda2:	b580      	push	{r7, lr}
 800cda4:	b086      	sub	sp, #24
 800cda6:	af00      	add	r7, sp, #0
 800cda8:	4603      	mov	r3, r0
 800cdaa:	60b9      	str	r1, [r7, #8]
 800cdac:	607a      	str	r2, [r7, #4]
 800cdae:	81fb      	strh	r3, [r7, #14]
	/**
	 * Decodes data structure VL53L1_static_nvm_managed_t from the input I2C read buffer
	 * Buffer must be at least 11 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800cdb0:	2300      	movs	r3, #0
 800cdb2:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES > buf_size)
 800cdb4:	89fb      	ldrh	r3, [r7, #14]
 800cdb6:	2b0a      	cmp	r3, #10
 800cdb8:	d802      	bhi.n	800cdc0 <VL53L1_i2c_decode_static_nvm_managed+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800cdba:	f06f 0309 	mvn.w	r3, #9
 800cdbe:	e046      	b.n	800ce4e <VL53L1_i2c_decode_static_nvm_managed+0xac>

	pdata->i2c_slave__device_address =
		(*(pbuffer +   0)) & 0x7F;
 800cdc0:	68bb      	ldr	r3, [r7, #8]
 800cdc2:	781b      	ldrb	r3, [r3, #0]
 800cdc4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cdc8:	b2da      	uxtb	r2, r3
	pdata->i2c_slave__device_address =
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	701a      	strb	r2, [r3, #0]
	pdata->ana_config__vhv_ref_sel_vddpix =
		(*(pbuffer +   1)) & 0xF;
 800cdce:	68bb      	ldr	r3, [r7, #8]
 800cdd0:	3301      	adds	r3, #1
 800cdd2:	781b      	ldrb	r3, [r3, #0]
 800cdd4:	f003 030f 	and.w	r3, r3, #15
 800cdd8:	b2da      	uxtb	r2, r3
	pdata->ana_config__vhv_ref_sel_vddpix =
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	705a      	strb	r2, [r3, #1]
	pdata->ana_config__vhv_ref_sel_vquench =
		(*(pbuffer +   2)) & 0x7F;
 800cdde:	68bb      	ldr	r3, [r7, #8]
 800cde0:	3302      	adds	r3, #2
 800cde2:	781b      	ldrb	r3, [r3, #0]
 800cde4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cde8:	b2da      	uxtb	r2, r3
	pdata->ana_config__vhv_ref_sel_vquench =
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	709a      	strb	r2, [r3, #2]
	pdata->ana_config__reg_avdd1v2_sel =
		(*(pbuffer +   3)) & 0x3;
 800cdee:	68bb      	ldr	r3, [r7, #8]
 800cdf0:	3303      	adds	r3, #3
 800cdf2:	781b      	ldrb	r3, [r3, #0]
 800cdf4:	f003 0303 	and.w	r3, r3, #3
 800cdf8:	b2da      	uxtb	r2, r3
	pdata->ana_config__reg_avdd1v2_sel =
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	70da      	strb	r2, [r3, #3]
	pdata->ana_config__fast_osc__trim =
		(*(pbuffer +   4)) & 0x7F;
 800cdfe:	68bb      	ldr	r3, [r7, #8]
 800ce00:	3304      	adds	r3, #4
 800ce02:	781b      	ldrb	r3, [r3, #0]
 800ce04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ce08:	b2da      	uxtb	r2, r3
	pdata->ana_config__fast_osc__trim =
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	711a      	strb	r2, [r3, #4]
	pdata->osc_measured__fast_osc__frequency =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   5));
 800ce0e:	68bb      	ldr	r3, [r7, #8]
 800ce10:	3305      	adds	r3, #5
 800ce12:	4619      	mov	r1, r3
 800ce14:	2002      	movs	r0, #2
 800ce16:	f7ff f9a9 	bl	800c16c <VL53L1_i2c_decode_uint16_t>
 800ce1a:	4603      	mov	r3, r0
 800ce1c:	461a      	mov	r2, r3
	pdata->osc_measured__fast_osc__frequency =
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	80da      	strh	r2, [r3, #6]
	pdata->vhv_config__timeout_macrop_loop_bound =
 800ce22:	68bb      	ldr	r3, [r7, #8]
 800ce24:	79da      	ldrb	r2, [r3, #7]
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	721a      	strb	r2, [r3, #8]
		(*(pbuffer +   7));
	pdata->vhv_config__count_thresh =
 800ce2a:	68bb      	ldr	r3, [r7, #8]
 800ce2c:	7a1a      	ldrb	r2, [r3, #8]
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	725a      	strb	r2, [r3, #9]
		(*(pbuffer +   8));
	pdata->vhv_config__offset =
		(*(pbuffer +   9)) & 0x3F;
 800ce32:	68bb      	ldr	r3, [r7, #8]
 800ce34:	3309      	adds	r3, #9
 800ce36:	781b      	ldrb	r3, [r3, #0]
 800ce38:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ce3c:	b2da      	uxtb	r2, r3
	pdata->vhv_config__offset =
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	729a      	strb	r2, [r3, #10]
	pdata->vhv_config__init =
 800ce42:	68bb      	ldr	r3, [r7, #8]
 800ce44:	7a9a      	ldrb	r2, [r3, #10]
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	72da      	strb	r2, [r3, #11]
		(*(pbuffer +  10));

	LOG_FUNCTION_END(status);

	return status;
 800ce4a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ce4e:	4618      	mov	r0, r3
 800ce50:	3718      	adds	r7, #24
 800ce52:	46bd      	mov	sp, r7
 800ce54:	bd80      	pop	{r7, pc}

0800ce56 <VL53L1_get_static_nvm_managed>:


VL53L1_Error VL53L1_get_static_nvm_managed(
	VL53L1_DEV                 Dev,
	VL53L1_static_nvm_managed_t  *pdata)
{
 800ce56:	b580      	push	{r7, lr}
 800ce58:	b086      	sub	sp, #24
 800ce5a:	af00      	add	r7, sp, #0
 800ce5c:	6078      	str	r0, [r7, #4]
 800ce5e:	6039      	str	r1, [r7, #0]
	/**
	 * Reads and de-serialises the contents of VL53L1_static_nvm_managed_t
	 * data structure from the device
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800ce60:	2300      	movs	r3, #0
 800ce62:	75fb      	strb	r3, [r7, #23]
	uint8_t comms_buffer[VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 800ce64:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ce68:	2b00      	cmp	r3, #0
 800ce6a:	d108      	bne.n	800ce7e <VL53L1_get_static_nvm_managed+0x28>
		status = VL53L1_ReadMulti(
 800ce6c:	f107 020c 	add.w	r2, r7, #12
 800ce70:	230b      	movs	r3, #11
 800ce72:	2101      	movs	r1, #1
 800ce74:	6878      	ldr	r0, [r7, #4]
 800ce76:	f001 f979 	bl	800e16c <VL53L1_ReadMulti>
 800ce7a:	4603      	mov	r3, r0
 800ce7c:	75fb      	strb	r3, [r7, #23]
			Dev,
			VL53L1_I2C_SLAVE__DEVICE_ADDRESS,
			comms_buffer,
			VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES);

	if (status == VL53L1_ERROR_NONE)
 800ce7e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ce82:	2b00      	cmp	r3, #0
 800ce84:	d108      	bne.n	800ce98 <VL53L1_get_static_nvm_managed+0x42>
		status = VL53L1_i2c_decode_static_nvm_managed(
 800ce86:	f107 030c 	add.w	r3, r7, #12
 800ce8a:	683a      	ldr	r2, [r7, #0]
 800ce8c:	4619      	mov	r1, r3
 800ce8e:	200b      	movs	r0, #11
 800ce90:	f7ff ff87 	bl	800cda2 <VL53L1_i2c_decode_static_nvm_managed>
 800ce94:	4603      	mov	r3, r0
 800ce96:	75fb      	strb	r3, [r7, #23]
			comms_buffer,
			pdata);

	LOG_FUNCTION_END(status);

	return status;
 800ce98:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ce9c:	4618      	mov	r0, r3
 800ce9e:	3718      	adds	r7, #24
 800cea0:	46bd      	mov	sp, r7
 800cea2:	bd80      	pop	{r7, pc}

0800cea4 <VL53L1_i2c_encode_customer_nvm_managed>:

VL53L1_Error VL53L1_i2c_encode_customer_nvm_managed(
	VL53L1_customer_nvm_managed_t *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 800cea4:	b580      	push	{r7, lr}
 800cea6:	b086      	sub	sp, #24
 800cea8:	af00      	add	r7, sp, #0
 800ceaa:	60f8      	str	r0, [r7, #12]
 800ceac:	460b      	mov	r3, r1
 800ceae:	607a      	str	r2, [r7, #4]
 800ceb0:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_customer_nvm_managed_t into a I2C write buffer
	 * Buffer must be at least 23 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800ceb2:	2300      	movs	r3, #0
 800ceb4:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES > buf_size)
 800ceb6:	897b      	ldrh	r3, [r7, #10]
 800ceb8:	2b16      	cmp	r3, #22
 800ceba:	d802      	bhi.n	800cec2 <VL53L1_i2c_encode_customer_nvm_managed+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800cebc:	f06f 0309 	mvn.w	r3, #9
 800cec0:	e076      	b.n	800cfb0 <VL53L1_i2c_encode_customer_nvm_managed+0x10c>

	*(pbuffer +   0) =
		pdata->global_config__spad_enables_ref_0;
 800cec2:	68fb      	ldr	r3, [r7, #12]
 800cec4:	781a      	ldrb	r2, [r3, #0]
	*(pbuffer +   0) =
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	3301      	adds	r3, #1
		pdata->global_config__spad_enables_ref_1;
 800cece:	68fa      	ldr	r2, [r7, #12]
 800ced0:	7852      	ldrb	r2, [r2, #1]
	*(pbuffer +   1) =
 800ced2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	3302      	adds	r3, #2
		pdata->global_config__spad_enables_ref_2;
 800ced8:	68fa      	ldr	r2, [r7, #12]
 800ceda:	7892      	ldrb	r2, [r2, #2]
	*(pbuffer +   2) =
 800cedc:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	3303      	adds	r3, #3
		pdata->global_config__spad_enables_ref_3;
 800cee2:	68fa      	ldr	r2, [r7, #12]
 800cee4:	78d2      	ldrb	r2, [r2, #3]
	*(pbuffer +   3) =
 800cee6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	3304      	adds	r3, #4
		pdata->global_config__spad_enables_ref_4;
 800ceec:	68fa      	ldr	r2, [r7, #12]
 800ceee:	7912      	ldrb	r2, [r2, #4]
	*(pbuffer +   4) =
 800cef0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   5) =
		pdata->global_config__spad_enables_ref_5 & 0xF;
 800cef2:	68fb      	ldr	r3, [r7, #12]
 800cef4:	795a      	ldrb	r2, [r3, #5]
	*(pbuffer +   5) =
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	3305      	adds	r3, #5
		pdata->global_config__spad_enables_ref_5 & 0xF;
 800cefa:	f002 020f 	and.w	r2, r2, #15
 800cefe:	b2d2      	uxtb	r2, r2
	*(pbuffer +   5) =
 800cf00:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	3306      	adds	r3, #6
		pdata->global_config__ref_en_start_select;
 800cf06:	68fa      	ldr	r2, [r7, #12]
 800cf08:	7992      	ldrb	r2, [r2, #6]
	*(pbuffer +   6) =
 800cf0a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
		pdata->ref_spad_man__num_requested_ref_spads & 0x3F;
 800cf0c:	68fb      	ldr	r3, [r7, #12]
 800cf0e:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   7) =
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	3307      	adds	r3, #7
		pdata->ref_spad_man__num_requested_ref_spads & 0x3F;
 800cf14:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800cf18:	b2d2      	uxtb	r2, r2
	*(pbuffer +   7) =
 800cf1a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
		pdata->ref_spad_man__ref_location & 0x3;
 800cf1c:	68fb      	ldr	r3, [r7, #12]
 800cf1e:	7a1a      	ldrb	r2, [r3, #8]
	*(pbuffer +   8) =
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	3308      	adds	r3, #8
		pdata->ref_spad_man__ref_location & 0x3;
 800cf24:	f002 0203 	and.w	r2, r2, #3
 800cf28:	b2d2      	uxtb	r2, r2
	*(pbuffer +   8) =
 800cf2a:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 800cf2c:	68fb      	ldr	r3, [r7, #12]
 800cf2e:	8958      	ldrh	r0, [r3, #10]
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	3309      	adds	r3, #9
 800cf34:	461a      	mov	r2, r3
 800cf36:	2102      	movs	r1, #2
 800cf38:	f7ff f8ed 	bl	800c116 <VL53L1_i2c_encode_uint16_t>
		pdata->algo__crosstalk_compensation_plane_offset_kcps,
		2,
		pbuffer +   9);
	VL53L1_i2c_encode_int16_t(
 800cf3c:	68fb      	ldr	r3, [r7, #12]
 800cf3e:	f9b3 000c 	ldrsh.w	r0, [r3, #12]
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	330b      	adds	r3, #11
 800cf46:	461a      	mov	r2, r3
 800cf48:	2102      	movs	r1, #2
 800cf4a:	f7ff f92f 	bl	800c1ac <VL53L1_i2c_encode_int16_t>
		pdata->algo__crosstalk_compensation_x_plane_gradient_kcps,
		2,
		pbuffer +  11);
	VL53L1_i2c_encode_int16_t(
 800cf4e:	68fb      	ldr	r3, [r7, #12]
 800cf50:	f9b3 000e 	ldrsh.w	r0, [r3, #14]
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	330d      	adds	r3, #13
 800cf58:	461a      	mov	r2, r3
 800cf5a:	2102      	movs	r1, #2
 800cf5c:	f7ff f926 	bl	800c1ac <VL53L1_i2c_encode_int16_t>
		pdata->algo__crosstalk_compensation_y_plane_gradient_kcps,
		2,
		pbuffer +  13);
	VL53L1_i2c_encode_uint16_t(
 800cf60:	68fb      	ldr	r3, [r7, #12]
 800cf62:	8a18      	ldrh	r0, [r3, #16]
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	330f      	adds	r3, #15
 800cf68:	461a      	mov	r2, r3
 800cf6a:	2102      	movs	r1, #2
 800cf6c:	f7ff f8d3 	bl	800c116 <VL53L1_i2c_encode_uint16_t>
		pdata->ref_spad_char__total_rate_target_mcps,
		2,
		pbuffer +  15);
	VL53L1_i2c_encode_int16_t(
		pdata->algo__part_to_part_range_offset_mm & 0x1FFF,
 800cf70:	68fb      	ldr	r3, [r7, #12]
 800cf72:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
	VL53L1_i2c_encode_int16_t(
 800cf76:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800cf7a:	b218      	sxth	r0, r3
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	3311      	adds	r3, #17
 800cf80:	461a      	mov	r2, r3
 800cf82:	2102      	movs	r1, #2
 800cf84:	f7ff f912 	bl	800c1ac <VL53L1_i2c_encode_int16_t>
		2,
		pbuffer +  17);
	VL53L1_i2c_encode_int16_t(
 800cf88:	68fb      	ldr	r3, [r7, #12]
 800cf8a:	f9b3 0014 	ldrsh.w	r0, [r3, #20]
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	3313      	adds	r3, #19
 800cf92:	461a      	mov	r2, r3
 800cf94:	2102      	movs	r1, #2
 800cf96:	f7ff f909 	bl	800c1ac <VL53L1_i2c_encode_int16_t>
		pdata->mm_config__inner_offset_mm,
		2,
		pbuffer +  19);
	VL53L1_i2c_encode_int16_t(
 800cf9a:	68fb      	ldr	r3, [r7, #12]
 800cf9c:	f9b3 0016 	ldrsh.w	r0, [r3, #22]
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	3315      	adds	r3, #21
 800cfa4:	461a      	mov	r2, r3
 800cfa6:	2102      	movs	r1, #2
 800cfa8:	f7ff f900 	bl	800c1ac <VL53L1_i2c_encode_int16_t>
		2,
		pbuffer +  21);
	LOG_FUNCTION_END(status);


	return status;
 800cfac:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800cfb0:	4618      	mov	r0, r3
 800cfb2:	3718      	adds	r7, #24
 800cfb4:	46bd      	mov	sp, r7
 800cfb6:	bd80      	pop	{r7, pc}

0800cfb8 <VL53L1_i2c_decode_customer_nvm_managed>:

VL53L1_Error VL53L1_i2c_decode_customer_nvm_managed(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_customer_nvm_managed_t  *pdata)
{
 800cfb8:	b580      	push	{r7, lr}
 800cfba:	b086      	sub	sp, #24
 800cfbc:	af00      	add	r7, sp, #0
 800cfbe:	4603      	mov	r3, r0
 800cfc0:	60b9      	str	r1, [r7, #8]
 800cfc2:	607a      	str	r2, [r7, #4]
 800cfc4:	81fb      	strh	r3, [r7, #14]
	/**
	 * Decodes data structure VL53L1_customer_nvm_managed_t from the input I2C read buffer
	 * Buffer must be at least 23 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800cfc6:	2300      	movs	r3, #0
 800cfc8:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES > buf_size)
 800cfca:	89fb      	ldrh	r3, [r7, #14]
 800cfcc:	2b16      	cmp	r3, #22
 800cfce:	d802      	bhi.n	800cfd6 <VL53L1_i2c_decode_customer_nvm_managed+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800cfd0:	f06f 0309 	mvn.w	r3, #9
 800cfd4:	e079      	b.n	800d0ca <VL53L1_i2c_decode_customer_nvm_managed+0x112>

	pdata->global_config__spad_enables_ref_0 =
		(*(pbuffer +   0));
 800cfd6:	68bb      	ldr	r3, [r7, #8]
 800cfd8:	781a      	ldrb	r2, [r3, #0]
	pdata->global_config__spad_enables_ref_0 =
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	701a      	strb	r2, [r3, #0]
	pdata->global_config__spad_enables_ref_1 =
 800cfde:	68bb      	ldr	r3, [r7, #8]
 800cfe0:	785a      	ldrb	r2, [r3, #1]
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	705a      	strb	r2, [r3, #1]
		(*(pbuffer +   1));
	pdata->global_config__spad_enables_ref_2 =
 800cfe6:	68bb      	ldr	r3, [r7, #8]
 800cfe8:	789a      	ldrb	r2, [r3, #2]
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	709a      	strb	r2, [r3, #2]
		(*(pbuffer +   2));
	pdata->global_config__spad_enables_ref_3 =
 800cfee:	68bb      	ldr	r3, [r7, #8]
 800cff0:	78da      	ldrb	r2, [r3, #3]
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	70da      	strb	r2, [r3, #3]
		(*(pbuffer +   3));
	pdata->global_config__spad_enables_ref_4 =
 800cff6:	68bb      	ldr	r3, [r7, #8]
 800cff8:	791a      	ldrb	r2, [r3, #4]
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	711a      	strb	r2, [r3, #4]
		(*(pbuffer +   4));
	pdata->global_config__spad_enables_ref_5 =
		(*(pbuffer +   5)) & 0xF;
 800cffe:	68bb      	ldr	r3, [r7, #8]
 800d000:	3305      	adds	r3, #5
 800d002:	781b      	ldrb	r3, [r3, #0]
 800d004:	f003 030f 	and.w	r3, r3, #15
 800d008:	b2da      	uxtb	r2, r3
	pdata->global_config__spad_enables_ref_5 =
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	715a      	strb	r2, [r3, #5]
	pdata->global_config__ref_en_start_select =
 800d00e:	68bb      	ldr	r3, [r7, #8]
 800d010:	799a      	ldrb	r2, [r3, #6]
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	719a      	strb	r2, [r3, #6]
		(*(pbuffer +   6));
	pdata->ref_spad_man__num_requested_ref_spads =
		(*(pbuffer +   7)) & 0x3F;
 800d016:	68bb      	ldr	r3, [r7, #8]
 800d018:	3307      	adds	r3, #7
 800d01a:	781b      	ldrb	r3, [r3, #0]
 800d01c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d020:	b2da      	uxtb	r2, r3
	pdata->ref_spad_man__num_requested_ref_spads =
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	71da      	strb	r2, [r3, #7]
	pdata->ref_spad_man__ref_location =
		(*(pbuffer +   8)) & 0x3;
 800d026:	68bb      	ldr	r3, [r7, #8]
 800d028:	3308      	adds	r3, #8
 800d02a:	781b      	ldrb	r3, [r3, #0]
 800d02c:	f003 0303 	and.w	r3, r3, #3
 800d030:	b2da      	uxtb	r2, r3
	pdata->ref_spad_man__ref_location =
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	721a      	strb	r2, [r3, #8]
	pdata->algo__crosstalk_compensation_plane_offset_kcps =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   9));
 800d036:	68bb      	ldr	r3, [r7, #8]
 800d038:	3309      	adds	r3, #9
 800d03a:	4619      	mov	r1, r3
 800d03c:	2002      	movs	r0, #2
 800d03e:	f7ff f895 	bl	800c16c <VL53L1_i2c_decode_uint16_t>
 800d042:	4603      	mov	r3, r0
 800d044:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_plane_offset_kcps =
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	815a      	strh	r2, [r3, #10]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  11));
 800d04a:	68bb      	ldr	r3, [r7, #8]
 800d04c:	330b      	adds	r3, #11
 800d04e:	4619      	mov	r1, r3
 800d050:	2002      	movs	r0, #2
 800d052:	f7ff f8d7 	bl	800c204 <VL53L1_i2c_decode_int16_t>
 800d056:	4603      	mov	r3, r0
 800d058:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps =
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	819a      	strh	r2, [r3, #12]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  13));
 800d05e:	68bb      	ldr	r3, [r7, #8]
 800d060:	330d      	adds	r3, #13
 800d062:	4619      	mov	r1, r3
 800d064:	2002      	movs	r0, #2
 800d066:	f7ff f8cd 	bl	800c204 <VL53L1_i2c_decode_int16_t>
 800d06a:	4603      	mov	r3, r0
 800d06c:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps =
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	81da      	strh	r2, [r3, #14]
	pdata->ref_spad_char__total_rate_target_mcps =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  15));
 800d072:	68bb      	ldr	r3, [r7, #8]
 800d074:	330f      	adds	r3, #15
 800d076:	4619      	mov	r1, r3
 800d078:	2002      	movs	r0, #2
 800d07a:	f7ff f877 	bl	800c16c <VL53L1_i2c_decode_uint16_t>
 800d07e:	4603      	mov	r3, r0
 800d080:	461a      	mov	r2, r3
	pdata->ref_spad_char__total_rate_target_mcps =
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	821a      	strh	r2, [r3, #16]
	pdata->algo__part_to_part_range_offset_mm =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  17)) & 0x1FFF;
 800d086:	68bb      	ldr	r3, [r7, #8]
 800d088:	3311      	adds	r3, #17
 800d08a:	4619      	mov	r1, r3
 800d08c:	2002      	movs	r0, #2
 800d08e:	f7ff f8b9 	bl	800c204 <VL53L1_i2c_decode_int16_t>
 800d092:	4603      	mov	r3, r0
 800d094:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d098:	b21a      	sxth	r2, r3
	pdata->algo__part_to_part_range_offset_mm =
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	825a      	strh	r2, [r3, #18]
	pdata->mm_config__inner_offset_mm =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  19));
 800d09e:	68bb      	ldr	r3, [r7, #8]
 800d0a0:	3313      	adds	r3, #19
 800d0a2:	4619      	mov	r1, r3
 800d0a4:	2002      	movs	r0, #2
 800d0a6:	f7ff f8ad 	bl	800c204 <VL53L1_i2c_decode_int16_t>
 800d0aa:	4603      	mov	r3, r0
 800d0ac:	461a      	mov	r2, r3
	pdata->mm_config__inner_offset_mm =
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	829a      	strh	r2, [r3, #20]
	pdata->mm_config__outer_offset_mm =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  21));
 800d0b2:	68bb      	ldr	r3, [r7, #8]
 800d0b4:	3315      	adds	r3, #21
 800d0b6:	4619      	mov	r1, r3
 800d0b8:	2002      	movs	r0, #2
 800d0ba:	f7ff f8a3 	bl	800c204 <VL53L1_i2c_decode_int16_t>
 800d0be:	4603      	mov	r3, r0
 800d0c0:	461a      	mov	r2, r3
	pdata->mm_config__outer_offset_mm =
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	82da      	strh	r2, [r3, #22]

	LOG_FUNCTION_END(status);

	return status;
 800d0c6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d0ca:	4618      	mov	r0, r3
 800d0cc:	3718      	adds	r7, #24
 800d0ce:	46bd      	mov	sp, r7
 800d0d0:	bd80      	pop	{r7, pc}

0800d0d2 <VL53L1_set_customer_nvm_managed>:


VL53L1_Error VL53L1_set_customer_nvm_managed(
	VL53L1_DEV                 Dev,
	VL53L1_customer_nvm_managed_t  *pdata)
{
 800d0d2:	b580      	push	{r7, lr}
 800d0d4:	b088      	sub	sp, #32
 800d0d6:	af00      	add	r7, sp, #0
 800d0d8:	6078      	str	r0, [r7, #4]
 800d0da:	6039      	str	r1, [r7, #0]
	/**
	 * Serialises and sends the contents of VL53L1_customer_nvm_managed_t
	 * data structure to the device
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800d0dc:	2300      	movs	r3, #0
 800d0de:	77fb      	strb	r3, [r7, #31]
	uint8_t comms_buffer[VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 800d0e0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d0e4:	2b00      	cmp	r3, #0
 800d0e6:	d108      	bne.n	800d0fa <VL53L1_set_customer_nvm_managed+0x28>
		status = VL53L1_i2c_encode_customer_nvm_managed(
 800d0e8:	f107 0308 	add.w	r3, r7, #8
 800d0ec:	461a      	mov	r2, r3
 800d0ee:	2117      	movs	r1, #23
 800d0f0:	6838      	ldr	r0, [r7, #0]
 800d0f2:	f7ff fed7 	bl	800cea4 <VL53L1_i2c_encode_customer_nvm_managed>
 800d0f6:	4603      	mov	r3, r0
 800d0f8:	77fb      	strb	r3, [r7, #31]
			pdata,
			VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES,
			comms_buffer);

	if (status == VL53L1_ERROR_NONE)
 800d0fa:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d0fe:	2b00      	cmp	r3, #0
 800d100:	d108      	bne.n	800d114 <VL53L1_set_customer_nvm_managed+0x42>
		status = VL53L1_WriteMulti(
 800d102:	f107 0208 	add.w	r2, r7, #8
 800d106:	2317      	movs	r3, #23
 800d108:	210d      	movs	r1, #13
 800d10a:	6878      	ldr	r0, [r7, #4]
 800d10c:	f000 fff8 	bl	800e100 <VL53L1_WriteMulti>
 800d110:	4603      	mov	r3, r0
 800d112:	77fb      	strb	r3, [r7, #31]
			comms_buffer,
			VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES);

	LOG_FUNCTION_END(status);

	return status;
 800d114:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800d118:	4618      	mov	r0, r3
 800d11a:	3720      	adds	r7, #32
 800d11c:	46bd      	mov	sp, r7
 800d11e:	bd80      	pop	{r7, pc}

0800d120 <VL53L1_get_customer_nvm_managed>:


VL53L1_Error VL53L1_get_customer_nvm_managed(
	VL53L1_DEV                 Dev,
	VL53L1_customer_nvm_managed_t  *pdata)
{
 800d120:	b580      	push	{r7, lr}
 800d122:	b088      	sub	sp, #32
 800d124:	af00      	add	r7, sp, #0
 800d126:	6078      	str	r0, [r7, #4]
 800d128:	6039      	str	r1, [r7, #0]
	/**
	 * Reads and de-serialises the contents of VL53L1_customer_nvm_managed_t
	 * data structure from the device
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800d12a:	2300      	movs	r3, #0
 800d12c:	77fb      	strb	r3, [r7, #31]
	uint8_t comms_buffer[VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 800d12e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d132:	2b00      	cmp	r3, #0
 800d134:	d108      	bne.n	800d148 <VL53L1_get_customer_nvm_managed+0x28>
		status = VL53L1_ReadMulti(
 800d136:	f107 0208 	add.w	r2, r7, #8
 800d13a:	2317      	movs	r3, #23
 800d13c:	210d      	movs	r1, #13
 800d13e:	6878      	ldr	r0, [r7, #4]
 800d140:	f001 f814 	bl	800e16c <VL53L1_ReadMulti>
 800d144:	4603      	mov	r3, r0
 800d146:	77fb      	strb	r3, [r7, #31]
			Dev,
			VL53L1_GLOBAL_CONFIG__SPAD_ENABLES_REF_0,
			comms_buffer,
			VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES);

	if (status == VL53L1_ERROR_NONE)
 800d148:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d14c:	2b00      	cmp	r3, #0
 800d14e:	d108      	bne.n	800d162 <VL53L1_get_customer_nvm_managed+0x42>
		status = VL53L1_i2c_decode_customer_nvm_managed(
 800d150:	f107 0308 	add.w	r3, r7, #8
 800d154:	683a      	ldr	r2, [r7, #0]
 800d156:	4619      	mov	r1, r3
 800d158:	2017      	movs	r0, #23
 800d15a:	f7ff ff2d 	bl	800cfb8 <VL53L1_i2c_decode_customer_nvm_managed>
 800d15e:	4603      	mov	r3, r0
 800d160:	77fb      	strb	r3, [r7, #31]
			comms_buffer,
			pdata);

	LOG_FUNCTION_END(status);

	return status;
 800d162:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800d166:	4618      	mov	r0, r3
 800d168:	3720      	adds	r7, #32
 800d16a:	46bd      	mov	sp, r7
 800d16c:	bd80      	pop	{r7, pc}

0800d16e <VL53L1_i2c_encode_static_config>:

VL53L1_Error VL53L1_i2c_encode_static_config(
	VL53L1_static_config_t   *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 800d16e:	b580      	push	{r7, lr}
 800d170:	b086      	sub	sp, #24
 800d172:	af00      	add	r7, sp, #0
 800d174:	60f8      	str	r0, [r7, #12]
 800d176:	460b      	mov	r3, r1
 800d178:	607a      	str	r2, [r7, #4]
 800d17a:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_static_config_t into a I2C write buffer
	 * Buffer must be at least 32 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800d17c:	2300      	movs	r3, #0
 800d17e:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_STATIC_CONFIG_I2C_SIZE_BYTES > buf_size)
 800d180:	897b      	ldrh	r3, [r7, #10]
 800d182:	2b1f      	cmp	r3, #31
 800d184:	d802      	bhi.n	800d18c <VL53L1_i2c_encode_static_config+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800d186:	f06f 0309 	mvn.w	r3, #9
 800d18a:	e0cf      	b.n	800d32c <VL53L1_i2c_encode_static_config+0x1be>

	VL53L1_i2c_encode_uint16_t(
 800d18c:	68fb      	ldr	r3, [r7, #12]
 800d18e:	881b      	ldrh	r3, [r3, #0]
 800d190:	687a      	ldr	r2, [r7, #4]
 800d192:	2102      	movs	r1, #2
 800d194:	4618      	mov	r0, r3
 800d196:	f7fe ffbe 	bl	800c116 <VL53L1_i2c_encode_uint16_t>
		pdata->dss_config__target_total_rate_mcps,
		2,
		pbuffer +   0);
	*(pbuffer +   2) =
		pdata->debug__ctrl & 0x1;
 800d19a:	68fb      	ldr	r3, [r7, #12]
 800d19c:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	3302      	adds	r3, #2
		pdata->debug__ctrl & 0x1;
 800d1a2:	f002 0201 	and.w	r2, r2, #1
 800d1a6:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 800d1a8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->test_mode__ctrl & 0xF;
 800d1aa:	68fb      	ldr	r3, [r7, #12]
 800d1ac:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	3303      	adds	r3, #3
		pdata->test_mode__ctrl & 0xF;
 800d1b2:	f002 020f 	and.w	r2, r2, #15
 800d1b6:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 800d1b8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
		pdata->clk_gating__ctrl & 0xF;
 800d1ba:	68fb      	ldr	r3, [r7, #12]
 800d1bc:	791a      	ldrb	r2, [r3, #4]
	*(pbuffer +   4) =
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	3304      	adds	r3, #4
		pdata->clk_gating__ctrl & 0xF;
 800d1c2:	f002 020f 	and.w	r2, r2, #15
 800d1c6:	b2d2      	uxtb	r2, r2
	*(pbuffer +   4) =
 800d1c8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   5) =
		pdata->nvm_bist__ctrl & 0x1F;
 800d1ca:	68fb      	ldr	r3, [r7, #12]
 800d1cc:	795a      	ldrb	r2, [r3, #5]
	*(pbuffer +   5) =
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	3305      	adds	r3, #5
		pdata->nvm_bist__ctrl & 0x1F;
 800d1d2:	f002 021f 	and.w	r2, r2, #31
 800d1d6:	b2d2      	uxtb	r2, r2
	*(pbuffer +   5) =
 800d1d8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
		pdata->nvm_bist__num_nvm_words & 0x7F;
 800d1da:	68fb      	ldr	r3, [r7, #12]
 800d1dc:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   6) =
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	3306      	adds	r3, #6
		pdata->nvm_bist__num_nvm_words & 0x7F;
 800d1e2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800d1e6:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 800d1e8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
		pdata->nvm_bist__start_address & 0x7F;
 800d1ea:	68fb      	ldr	r3, [r7, #12]
 800d1ec:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   7) =
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	3307      	adds	r3, #7
		pdata->nvm_bist__start_address & 0x7F;
 800d1f2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800d1f6:	b2d2      	uxtb	r2, r2
	*(pbuffer +   7) =
 800d1f8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
		pdata->host_if__status & 0x1;
 800d1fa:	68fb      	ldr	r3, [r7, #12]
 800d1fc:	7a1a      	ldrb	r2, [r3, #8]
	*(pbuffer +   8) =
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	3308      	adds	r3, #8
		pdata->host_if__status & 0x1;
 800d202:	f002 0201 	and.w	r2, r2, #1
 800d206:	b2d2      	uxtb	r2, r2
	*(pbuffer +   8) =
 800d208:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	3309      	adds	r3, #9
		pdata->pad_i2c_hv__config;
 800d20e:	68fa      	ldr	r2, [r7, #12]
 800d210:	7a52      	ldrb	r2, [r2, #9]
	*(pbuffer +   9) =
 800d212:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  10) =
		pdata->pad_i2c_hv__extsup_config & 0x1;
 800d214:	68fb      	ldr	r3, [r7, #12]
 800d216:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +  10) =
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	330a      	adds	r3, #10
		pdata->pad_i2c_hv__extsup_config & 0x1;
 800d21c:	f002 0201 	and.w	r2, r2, #1
 800d220:	b2d2      	uxtb	r2, r2
	*(pbuffer +  10) =
 800d222:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  11) =
		pdata->gpio_hv_pad__ctrl & 0x3;
 800d224:	68fb      	ldr	r3, [r7, #12]
 800d226:	7ada      	ldrb	r2, [r3, #11]
	*(pbuffer +  11) =
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	330b      	adds	r3, #11
		pdata->gpio_hv_pad__ctrl & 0x3;
 800d22c:	f002 0203 	and.w	r2, r2, #3
 800d230:	b2d2      	uxtb	r2, r2
	*(pbuffer +  11) =
 800d232:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  12) =
		pdata->gpio_hv_mux__ctrl & 0x1F;
 800d234:	68fb      	ldr	r3, [r7, #12]
 800d236:	7b1a      	ldrb	r2, [r3, #12]
	*(pbuffer +  12) =
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	330c      	adds	r3, #12
		pdata->gpio_hv_mux__ctrl & 0x1F;
 800d23c:	f002 021f 	and.w	r2, r2, #31
 800d240:	b2d2      	uxtb	r2, r2
	*(pbuffer +  12) =
 800d242:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  13) =
		pdata->gpio__tio_hv_status & 0x3;
 800d244:	68fb      	ldr	r3, [r7, #12]
 800d246:	7b5a      	ldrb	r2, [r3, #13]
	*(pbuffer +  13) =
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	330d      	adds	r3, #13
		pdata->gpio__tio_hv_status & 0x3;
 800d24c:	f002 0203 	and.w	r2, r2, #3
 800d250:	b2d2      	uxtb	r2, r2
	*(pbuffer +  13) =
 800d252:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  14) =
		pdata->gpio__fio_hv_status & 0x3;
 800d254:	68fb      	ldr	r3, [r7, #12]
 800d256:	7b9a      	ldrb	r2, [r3, #14]
	*(pbuffer +  14) =
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	330e      	adds	r3, #14
		pdata->gpio__fio_hv_status & 0x3;
 800d25c:	f002 0203 	and.w	r2, r2, #3
 800d260:	b2d2      	uxtb	r2, r2
	*(pbuffer +  14) =
 800d262:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  15) =
		pdata->ana_config__spad_sel_pswidth & 0x7;
 800d264:	68fb      	ldr	r3, [r7, #12]
 800d266:	7bda      	ldrb	r2, [r3, #15]
	*(pbuffer +  15) =
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	330f      	adds	r3, #15
		pdata->ana_config__spad_sel_pswidth & 0x7;
 800d26c:	f002 0207 	and.w	r2, r2, #7
 800d270:	b2d2      	uxtb	r2, r2
	*(pbuffer +  15) =
 800d272:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  16) =
		pdata->ana_config__vcsel_pulse_width_offset & 0x1F;
 800d274:	68fb      	ldr	r3, [r7, #12]
 800d276:	7c1a      	ldrb	r2, [r3, #16]
	*(pbuffer +  16) =
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	3310      	adds	r3, #16
		pdata->ana_config__vcsel_pulse_width_offset & 0x1F;
 800d27c:	f002 021f 	and.w	r2, r2, #31
 800d280:	b2d2      	uxtb	r2, r2
	*(pbuffer +  16) =
 800d282:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  17) =
		pdata->ana_config__fast_osc__config_ctrl & 0x1;
 800d284:	68fb      	ldr	r3, [r7, #12]
 800d286:	7c5a      	ldrb	r2, [r3, #17]
	*(pbuffer +  17) =
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	3311      	adds	r3, #17
		pdata->ana_config__fast_osc__config_ctrl & 0x1;
 800d28c:	f002 0201 	and.w	r2, r2, #1
 800d290:	b2d2      	uxtb	r2, r2
	*(pbuffer +  17) =
 800d292:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  18) =
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	3312      	adds	r3, #18
		pdata->sigma_estimator__effective_pulse_width_ns;
 800d298:	68fa      	ldr	r2, [r7, #12]
 800d29a:	7c92      	ldrb	r2, [r2, #18]
	*(pbuffer +  18) =
 800d29c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  19) =
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	3313      	adds	r3, #19
		pdata->sigma_estimator__effective_ambient_width_ns;
 800d2a2:	68fa      	ldr	r2, [r7, #12]
 800d2a4:	7cd2      	ldrb	r2, [r2, #19]
	*(pbuffer +  19) =
 800d2a6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  20) =
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	3314      	adds	r3, #20
		pdata->sigma_estimator__sigma_ref_mm;
 800d2ac:	68fa      	ldr	r2, [r7, #12]
 800d2ae:	7d12      	ldrb	r2, [r2, #20]
	*(pbuffer +  20) =
 800d2b0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  21) =
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	3315      	adds	r3, #21
		pdata->algo__crosstalk_compensation_valid_height_mm;
 800d2b6:	68fa      	ldr	r2, [r7, #12]
 800d2b8:	7d52      	ldrb	r2, [r2, #21]
	*(pbuffer +  21) =
 800d2ba:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  22) =
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	3316      	adds	r3, #22
		pdata->spare_host_config__static_config_spare_0;
 800d2c0:	68fa      	ldr	r2, [r7, #12]
 800d2c2:	7d92      	ldrb	r2, [r2, #22]
	*(pbuffer +  22) =
 800d2c4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  23) =
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	3317      	adds	r3, #23
		pdata->spare_host_config__static_config_spare_1;
 800d2ca:	68fa      	ldr	r2, [r7, #12]
 800d2cc:	7dd2      	ldrb	r2, [r2, #23]
	*(pbuffer +  23) =
 800d2ce:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 800d2d0:	68fb      	ldr	r3, [r7, #12]
 800d2d2:	8b18      	ldrh	r0, [r3, #24]
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	3318      	adds	r3, #24
 800d2d8:	461a      	mov	r2, r3
 800d2da:	2102      	movs	r1, #2
 800d2dc:	f7fe ff1b 	bl	800c116 <VL53L1_i2c_encode_uint16_t>
		pdata->algo__range_ignore_threshold_mcps,
		2,
		pbuffer +  24);
	*(pbuffer +  26) =
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	331a      	adds	r3, #26
		pdata->algo__range_ignore_valid_height_mm;
 800d2e4:	68fa      	ldr	r2, [r7, #12]
 800d2e6:	7e92      	ldrb	r2, [r2, #26]
	*(pbuffer +  26) =
 800d2e8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  27) =
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	331b      	adds	r3, #27
		pdata->algo__range_min_clip;
 800d2ee:	68fa      	ldr	r2, [r7, #12]
 800d2f0:	7ed2      	ldrb	r2, [r2, #27]
	*(pbuffer +  27) =
 800d2f2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  28) =
		pdata->algo__consistency_check__tolerance & 0xF;
 800d2f4:	68fb      	ldr	r3, [r7, #12]
 800d2f6:	7f1a      	ldrb	r2, [r3, #28]
	*(pbuffer +  28) =
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	331c      	adds	r3, #28
		pdata->algo__consistency_check__tolerance & 0xF;
 800d2fc:	f002 020f 	and.w	r2, r2, #15
 800d300:	b2d2      	uxtb	r2, r2
	*(pbuffer +  28) =
 800d302:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  29) =
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	331d      	adds	r3, #29
		pdata->spare_host_config__static_config_spare_2;
 800d308:	68fa      	ldr	r2, [r7, #12]
 800d30a:	7f52      	ldrb	r2, [r2, #29]
	*(pbuffer +  29) =
 800d30c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  30) =
		pdata->sd_config__reset_stages_msb & 0xF;
 800d30e:	68fb      	ldr	r3, [r7, #12]
 800d310:	7f9a      	ldrb	r2, [r3, #30]
	*(pbuffer +  30) =
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	331e      	adds	r3, #30
		pdata->sd_config__reset_stages_msb & 0xF;
 800d316:	f002 020f 	and.w	r2, r2, #15
 800d31a:	b2d2      	uxtb	r2, r2
	*(pbuffer +  30) =
 800d31c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  31) =
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	331f      	adds	r3, #31
		pdata->sd_config__reset_stages_lsb;
 800d322:	68fa      	ldr	r2, [r7, #12]
 800d324:	7fd2      	ldrb	r2, [r2, #31]
	*(pbuffer +  31) =
 800d326:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 800d328:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d32c:	4618      	mov	r0, r3
 800d32e:	3718      	adds	r7, #24
 800d330:	46bd      	mov	sp, r7
 800d332:	bd80      	pop	{r7, pc}

0800d334 <VL53L1_i2c_encode_general_config>:

VL53L1_Error VL53L1_i2c_encode_general_config(
	VL53L1_general_config_t  *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 800d334:	b580      	push	{r7, lr}
 800d336:	b086      	sub	sp, #24
 800d338:	af00      	add	r7, sp, #0
 800d33a:	60f8      	str	r0, [r7, #12]
 800d33c:	460b      	mov	r3, r1
 800d33e:	607a      	str	r2, [r7, #4]
 800d340:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_general_config_t into a I2C write buffer
	 * Buffer must be at least 22 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800d342:	2300      	movs	r3, #0
 800d344:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_GENERAL_CONFIG_I2C_SIZE_BYTES > buf_size)
 800d346:	897b      	ldrh	r3, [r7, #10]
 800d348:	2b15      	cmp	r3, #21
 800d34a:	d802      	bhi.n	800d352 <VL53L1_i2c_encode_general_config+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800d34c:	f06f 0309 	mvn.w	r3, #9
 800d350:	e070      	b.n	800d434 <VL53L1_i2c_encode_general_config+0x100>

	*(pbuffer +   0) =
		pdata->gph_config__stream_count_update_value;
 800d352:	68fb      	ldr	r3, [r7, #12]
 800d354:	781a      	ldrb	r2, [r3, #0]
	*(pbuffer +   0) =
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	3301      	adds	r3, #1
		pdata->global_config__stream_divider;
 800d35e:	68fa      	ldr	r2, [r7, #12]
 800d360:	7852      	ldrb	r2, [r2, #1]
	*(pbuffer +   1) =
 800d362:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	3302      	adds	r3, #2
		pdata->system__interrupt_config_gpio;
 800d368:	68fa      	ldr	r2, [r7, #12]
 800d36a:	7892      	ldrb	r2, [r2, #2]
	*(pbuffer +   2) =
 800d36c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->cal_config__vcsel_start & 0x7F;
 800d36e:	68fb      	ldr	r3, [r7, #12]
 800d370:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	3303      	adds	r3, #3
		pdata->cal_config__vcsel_start & 0x7F;
 800d376:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800d37a:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 800d37c:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
		pdata->cal_config__repeat_rate & 0xFFF,
 800d37e:	68fb      	ldr	r3, [r7, #12]
 800d380:	889b      	ldrh	r3, [r3, #4]
	VL53L1_i2c_encode_uint16_t(
 800d382:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d386:	b298      	uxth	r0, r3
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	3304      	adds	r3, #4
 800d38c:	461a      	mov	r2, r3
 800d38e:	2102      	movs	r1, #2
 800d390:	f7fe fec1 	bl	800c116 <VL53L1_i2c_encode_uint16_t>
		2,
		pbuffer +   4);
	*(pbuffer +   6) =
		pdata->global_config__vcsel_width & 0x7F;
 800d394:	68fb      	ldr	r3, [r7, #12]
 800d396:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   6) =
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	3306      	adds	r3, #6
		pdata->global_config__vcsel_width & 0x7F;
 800d39c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800d3a0:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 800d3a2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	3307      	adds	r3, #7
		pdata->phasecal_config__timeout_macrop;
 800d3a8:	68fa      	ldr	r2, [r7, #12]
 800d3aa:	79d2      	ldrb	r2, [r2, #7]
	*(pbuffer +   7) =
 800d3ac:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	3308      	adds	r3, #8
		pdata->phasecal_config__target;
 800d3b2:	68fa      	ldr	r2, [r7, #12]
 800d3b4:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   8) =
 800d3b6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->phasecal_config__override & 0x1;
 800d3b8:	68fb      	ldr	r3, [r7, #12]
 800d3ba:	7a5a      	ldrb	r2, [r3, #9]
	*(pbuffer +   9) =
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	3309      	adds	r3, #9
		pdata->phasecal_config__override & 0x1;
 800d3c0:	f002 0201 	and.w	r2, r2, #1
 800d3c4:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 800d3c6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  11) =
		pdata->dss_config__roi_mode_control & 0x7;
 800d3c8:	68fb      	ldr	r3, [r7, #12]
 800d3ca:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +  11) =
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	330b      	adds	r3, #11
		pdata->dss_config__roi_mode_control & 0x7;
 800d3d0:	f002 0207 	and.w	r2, r2, #7
 800d3d4:	b2d2      	uxtb	r2, r2
	*(pbuffer +  11) =
 800d3d6:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 800d3d8:	68fb      	ldr	r3, [r7, #12]
 800d3da:	8998      	ldrh	r0, [r3, #12]
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	330c      	adds	r3, #12
 800d3e0:	461a      	mov	r2, r3
 800d3e2:	2102      	movs	r1, #2
 800d3e4:	f7fe fe97 	bl	800c116 <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_rate_high,
		2,
		pbuffer +  12);
	VL53L1_i2c_encode_uint16_t(
 800d3e8:	68fb      	ldr	r3, [r7, #12]
 800d3ea:	89d8      	ldrh	r0, [r3, #14]
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	330e      	adds	r3, #14
 800d3f0:	461a      	mov	r2, r3
 800d3f2:	2102      	movs	r1, #2
 800d3f4:	f7fe fe8f 	bl	800c116 <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_rate_low,
		2,
		pbuffer +  14);
	VL53L1_i2c_encode_uint16_t(
 800d3f8:	68fb      	ldr	r3, [r7, #12]
 800d3fa:	8a18      	ldrh	r0, [r3, #16]
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	3310      	adds	r3, #16
 800d400:	461a      	mov	r2, r3
 800d402:	2102      	movs	r1, #2
 800d404:	f7fe fe87 	bl	800c116 <VL53L1_i2c_encode_uint16_t>
		pdata->dss_config__manual_effective_spads_select,
		2,
		pbuffer +  16);
	*(pbuffer +  18) =
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	3312      	adds	r3, #18
		pdata->dss_config__manual_block_select;
 800d40c:	68fa      	ldr	r2, [r7, #12]
 800d40e:	7c92      	ldrb	r2, [r2, #18]
	*(pbuffer +  18) =
 800d410:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  19) =
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	3313      	adds	r3, #19
		pdata->dss_config__aperture_attenuation;
 800d416:	68fa      	ldr	r2, [r7, #12]
 800d418:	7cd2      	ldrb	r2, [r2, #19]
	*(pbuffer +  19) =
 800d41a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  20) =
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	3314      	adds	r3, #20
		pdata->dss_config__max_spads_limit;
 800d420:	68fa      	ldr	r2, [r7, #12]
 800d422:	7d12      	ldrb	r2, [r2, #20]
	*(pbuffer +  20) =
 800d424:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  21) =
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	3315      	adds	r3, #21
		pdata->dss_config__min_spads_limit;
 800d42a:	68fa      	ldr	r2, [r7, #12]
 800d42c:	7d52      	ldrb	r2, [r2, #21]
	*(pbuffer +  21) =
 800d42e:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 800d430:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d434:	4618      	mov	r0, r3
 800d436:	3718      	adds	r7, #24
 800d438:	46bd      	mov	sp, r7
 800d43a:	bd80      	pop	{r7, pc}

0800d43c <VL53L1_i2c_encode_timing_config>:

VL53L1_Error VL53L1_i2c_encode_timing_config(
	VL53L1_timing_config_t   *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 800d43c:	b580      	push	{r7, lr}
 800d43e:	b086      	sub	sp, #24
 800d440:	af00      	add	r7, sp, #0
 800d442:	60f8      	str	r0, [r7, #12]
 800d444:	460b      	mov	r3, r1
 800d446:	607a      	str	r2, [r7, #4]
 800d448:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_timing_config_t into a I2C write buffer
	 * Buffer must be at least 23 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800d44a:	2300      	movs	r3, #0
 800d44c:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_TIMING_CONFIG_I2C_SIZE_BYTES > buf_size)
 800d44e:	897b      	ldrh	r3, [r7, #10]
 800d450:	2b16      	cmp	r3, #22
 800d452:	d802      	bhi.n	800d45a <VL53L1_i2c_encode_timing_config+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800d454:	f06f 0309 	mvn.w	r3, #9
 800d458:	e06e      	b.n	800d538 <VL53L1_i2c_encode_timing_config+0xfc>

	*(pbuffer +   0) =
		pdata->mm_config__timeout_macrop_a_hi & 0xF;
 800d45a:	68fb      	ldr	r3, [r7, #12]
 800d45c:	781b      	ldrb	r3, [r3, #0]
 800d45e:	f003 030f 	and.w	r3, r3, #15
 800d462:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	3301      	adds	r3, #1
		pdata->mm_config__timeout_macrop_a_lo;
 800d46c:	68fa      	ldr	r2, [r7, #12]
 800d46e:	7852      	ldrb	r2, [r2, #1]
	*(pbuffer +   1) =
 800d470:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
		pdata->mm_config__timeout_macrop_b_hi & 0xF;
 800d472:	68fb      	ldr	r3, [r7, #12]
 800d474:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	3302      	adds	r3, #2
		pdata->mm_config__timeout_macrop_b_hi & 0xF;
 800d47a:	f002 020f 	and.w	r2, r2, #15
 800d47e:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 800d480:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	3303      	adds	r3, #3
		pdata->mm_config__timeout_macrop_b_lo;
 800d486:	68fa      	ldr	r2, [r7, #12]
 800d488:	78d2      	ldrb	r2, [r2, #3]
	*(pbuffer +   3) =
 800d48a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
		pdata->range_config__timeout_macrop_a_hi & 0xF;
 800d48c:	68fb      	ldr	r3, [r7, #12]
 800d48e:	791a      	ldrb	r2, [r3, #4]
	*(pbuffer +   4) =
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	3304      	adds	r3, #4
		pdata->range_config__timeout_macrop_a_hi & 0xF;
 800d494:	f002 020f 	and.w	r2, r2, #15
 800d498:	b2d2      	uxtb	r2, r2
	*(pbuffer +   4) =
 800d49a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   5) =
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	3305      	adds	r3, #5
		pdata->range_config__timeout_macrop_a_lo;
 800d4a0:	68fa      	ldr	r2, [r7, #12]
 800d4a2:	7952      	ldrb	r2, [r2, #5]
	*(pbuffer +   5) =
 800d4a4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
		pdata->range_config__vcsel_period_a & 0x3F;
 800d4a6:	68fb      	ldr	r3, [r7, #12]
 800d4a8:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   6) =
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	3306      	adds	r3, #6
		pdata->range_config__vcsel_period_a & 0x3F;
 800d4ae:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800d4b2:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 800d4b4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
		pdata->range_config__timeout_macrop_b_hi & 0xF;
 800d4b6:	68fb      	ldr	r3, [r7, #12]
 800d4b8:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   7) =
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	3307      	adds	r3, #7
		pdata->range_config__timeout_macrop_b_hi & 0xF;
 800d4be:	f002 020f 	and.w	r2, r2, #15
 800d4c2:	b2d2      	uxtb	r2, r2
	*(pbuffer +   7) =
 800d4c4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	3308      	adds	r3, #8
		pdata->range_config__timeout_macrop_b_lo;
 800d4ca:	68fa      	ldr	r2, [r7, #12]
 800d4cc:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   8) =
 800d4ce:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->range_config__vcsel_period_b & 0x3F;
 800d4d0:	68fb      	ldr	r3, [r7, #12]
 800d4d2:	7a5a      	ldrb	r2, [r3, #9]
	*(pbuffer +   9) =
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	3309      	adds	r3, #9
		pdata->range_config__vcsel_period_b & 0x3F;
 800d4d8:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800d4dc:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 800d4de:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 800d4e0:	68fb      	ldr	r3, [r7, #12]
 800d4e2:	8958      	ldrh	r0, [r3, #10]
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	330a      	adds	r3, #10
 800d4e8:	461a      	mov	r2, r3
 800d4ea:	2102      	movs	r1, #2
 800d4ec:	f7fe fe13 	bl	800c116 <VL53L1_i2c_encode_uint16_t>
		pdata->range_config__sigma_thresh,
		2,
		pbuffer +  10);
	VL53L1_i2c_encode_uint16_t(
 800d4f0:	68fb      	ldr	r3, [r7, #12]
 800d4f2:	8998      	ldrh	r0, [r3, #12]
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	330c      	adds	r3, #12
 800d4f8:	461a      	mov	r2, r3
 800d4fa:	2102      	movs	r1, #2
 800d4fc:	f7fe fe0b 	bl	800c116 <VL53L1_i2c_encode_uint16_t>
		pdata->range_config__min_count_rate_rtn_limit_mcps,
		2,
		pbuffer +  12);
	*(pbuffer +  14) =
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	330e      	adds	r3, #14
		pdata->range_config__valid_phase_low;
 800d504:	68fa      	ldr	r2, [r7, #12]
 800d506:	7b92      	ldrb	r2, [r2, #14]
	*(pbuffer +  14) =
 800d508:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  15) =
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	330f      	adds	r3, #15
		pdata->range_config__valid_phase_high;
 800d50e:	68fa      	ldr	r2, [r7, #12]
 800d510:	7bd2      	ldrb	r2, [r2, #15]
	*(pbuffer +  15) =
 800d512:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint32_t(
 800d514:	68fb      	ldr	r3, [r7, #12]
 800d516:	6918      	ldr	r0, [r3, #16]
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	3312      	adds	r3, #18
 800d51c:	461a      	mov	r2, r3
 800d51e:	2104      	movs	r1, #4
 800d520:	f7fe fe99 	bl	800c256 <VL53L1_i2c_encode_uint32_t>
		pdata->system__intermeasurement_period,
		4,
		pbuffer +  18);
	*(pbuffer +  22) =
		pdata->system__fractional_enable & 0x1;
 800d524:	68fb      	ldr	r3, [r7, #12]
 800d526:	7d1a      	ldrb	r2, [r3, #20]
	*(pbuffer +  22) =
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	3316      	adds	r3, #22
		pdata->system__fractional_enable & 0x1;
 800d52c:	f002 0201 	and.w	r2, r2, #1
 800d530:	b2d2      	uxtb	r2, r2
	*(pbuffer +  22) =
 800d532:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 800d534:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d538:	4618      	mov	r0, r3
 800d53a:	3718      	adds	r7, #24
 800d53c:	46bd      	mov	sp, r7
 800d53e:	bd80      	pop	{r7, pc}

0800d540 <VL53L1_i2c_encode_dynamic_config>:

VL53L1_Error VL53L1_i2c_encode_dynamic_config(
	VL53L1_dynamic_config_t  *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 800d540:	b580      	push	{r7, lr}
 800d542:	b086      	sub	sp, #24
 800d544:	af00      	add	r7, sp, #0
 800d546:	60f8      	str	r0, [r7, #12]
 800d548:	460b      	mov	r3, r1
 800d54a:	607a      	str	r2, [r7, #4]
 800d54c:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_dynamic_config_t into a I2C write buffer
	 * Buffer must be at least 18 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800d54e:	2300      	movs	r3, #0
 800d550:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_DYNAMIC_CONFIG_I2C_SIZE_BYTES > buf_size)
 800d552:	897b      	ldrh	r3, [r7, #10]
 800d554:	2b11      	cmp	r3, #17
 800d556:	d802      	bhi.n	800d55e <VL53L1_i2c_encode_dynamic_config+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800d558:	f06f 0309 	mvn.w	r3, #9
 800d55c:	e071      	b.n	800d642 <VL53L1_i2c_encode_dynamic_config+0x102>

	*(pbuffer +   0) =
		pdata->system__grouped_parameter_hold_0 & 0x3;
 800d55e:	68fb      	ldr	r3, [r7, #12]
 800d560:	781b      	ldrb	r3, [r3, #0]
 800d562:	f003 0303 	and.w	r3, r3, #3
 800d566:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 800d56c:	68fb      	ldr	r3, [r7, #12]
 800d56e:	8858      	ldrh	r0, [r3, #2]
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	3301      	adds	r3, #1
 800d574:	461a      	mov	r2, r3
 800d576:	2102      	movs	r1, #2
 800d578:	f7fe fdcd 	bl	800c116 <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_high,
		2,
		pbuffer +   1);
	VL53L1_i2c_encode_uint16_t(
 800d57c:	68fb      	ldr	r3, [r7, #12]
 800d57e:	8898      	ldrh	r0, [r3, #4]
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	3303      	adds	r3, #3
 800d584:	461a      	mov	r2, r3
 800d586:	2102      	movs	r1, #2
 800d588:	f7fe fdc5 	bl	800c116 <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_low,
		2,
		pbuffer +   3);
	*(pbuffer +   5) =
		pdata->system__enable_xtalk_per_quadrant & 0x1;
 800d58c:	68fb      	ldr	r3, [r7, #12]
 800d58e:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   5) =
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	3305      	adds	r3, #5
		pdata->system__enable_xtalk_per_quadrant & 0x1;
 800d594:	f002 0201 	and.w	r2, r2, #1
 800d598:	b2d2      	uxtb	r2, r2
	*(pbuffer +   5) =
 800d59a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
		pdata->system__seed_config & 0x7;
 800d59c:	68fb      	ldr	r3, [r7, #12]
 800d59e:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   6) =
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	3306      	adds	r3, #6
		pdata->system__seed_config & 0x7;
 800d5a4:	f002 0207 	and.w	r2, r2, #7
 800d5a8:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 800d5aa:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	3307      	adds	r3, #7
		pdata->sd_config__woi_sd0;
 800d5b0:	68fa      	ldr	r2, [r7, #12]
 800d5b2:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   7) =
 800d5b4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	3308      	adds	r3, #8
		pdata->sd_config__woi_sd1;
 800d5ba:	68fa      	ldr	r2, [r7, #12]
 800d5bc:	7a52      	ldrb	r2, [r2, #9]
	*(pbuffer +   8) =
 800d5be:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->sd_config__initial_phase_sd0 & 0x7F;
 800d5c0:	68fb      	ldr	r3, [r7, #12]
 800d5c2:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +   9) =
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	3309      	adds	r3, #9
		pdata->sd_config__initial_phase_sd0 & 0x7F;
 800d5c8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800d5cc:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 800d5ce:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  10) =
		pdata->sd_config__initial_phase_sd1 & 0x7F;
 800d5d0:	68fb      	ldr	r3, [r7, #12]
 800d5d2:	7ada      	ldrb	r2, [r3, #11]
	*(pbuffer +  10) =
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	330a      	adds	r3, #10
		pdata->sd_config__initial_phase_sd1 & 0x7F;
 800d5d8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800d5dc:	b2d2      	uxtb	r2, r2
	*(pbuffer +  10) =
 800d5de:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  11) =
		pdata->system__grouped_parameter_hold_1 & 0x3;
 800d5e0:	68fb      	ldr	r3, [r7, #12]
 800d5e2:	7b1a      	ldrb	r2, [r3, #12]
	*(pbuffer +  11) =
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	330b      	adds	r3, #11
		pdata->system__grouped_parameter_hold_1 & 0x3;
 800d5e8:	f002 0203 	and.w	r2, r2, #3
 800d5ec:	b2d2      	uxtb	r2, r2
	*(pbuffer +  11) =
 800d5ee:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  12) =
		pdata->sd_config__first_order_select & 0x3;
 800d5f0:	68fb      	ldr	r3, [r7, #12]
 800d5f2:	7b5a      	ldrb	r2, [r3, #13]
	*(pbuffer +  12) =
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	330c      	adds	r3, #12
		pdata->sd_config__first_order_select & 0x3;
 800d5f8:	f002 0203 	and.w	r2, r2, #3
 800d5fc:	b2d2      	uxtb	r2, r2
	*(pbuffer +  12) =
 800d5fe:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  13) =
		pdata->sd_config__quantifier & 0xF;
 800d600:	68fb      	ldr	r3, [r7, #12]
 800d602:	7b9a      	ldrb	r2, [r3, #14]
	*(pbuffer +  13) =
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	330d      	adds	r3, #13
		pdata->sd_config__quantifier & 0xF;
 800d608:	f002 020f 	and.w	r2, r2, #15
 800d60c:	b2d2      	uxtb	r2, r2
	*(pbuffer +  13) =
 800d60e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  14) =
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	330e      	adds	r3, #14
		pdata->roi_config__user_roi_centre_spad;
 800d614:	68fa      	ldr	r2, [r7, #12]
 800d616:	7bd2      	ldrb	r2, [r2, #15]
	*(pbuffer +  14) =
 800d618:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  15) =
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	330f      	adds	r3, #15
		pdata->roi_config__user_roi_requested_global_xy_size;
 800d61e:	68fa      	ldr	r2, [r7, #12]
 800d620:	7c12      	ldrb	r2, [r2, #16]
	*(pbuffer +  15) =
 800d622:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  16) =
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	3310      	adds	r3, #16
		pdata->system__sequence_config;
 800d628:	68fa      	ldr	r2, [r7, #12]
 800d62a:	7c52      	ldrb	r2, [r2, #17]
	*(pbuffer +  16) =
 800d62c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  17) =
		pdata->system__grouped_parameter_hold & 0x3;
 800d62e:	68fb      	ldr	r3, [r7, #12]
 800d630:	7c9a      	ldrb	r2, [r3, #18]
	*(pbuffer +  17) =
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	3311      	adds	r3, #17
		pdata->system__grouped_parameter_hold & 0x3;
 800d636:	f002 0203 	and.w	r2, r2, #3
 800d63a:	b2d2      	uxtb	r2, r2
	*(pbuffer +  17) =
 800d63c:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 800d63e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d642:	4618      	mov	r0, r3
 800d644:	3718      	adds	r7, #24
 800d646:	46bd      	mov	sp, r7
 800d648:	bd80      	pop	{r7, pc}

0800d64a <VL53L1_i2c_encode_system_control>:

VL53L1_Error VL53L1_i2c_encode_system_control(
	VL53L1_system_control_t  *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 800d64a:	b480      	push	{r7}
 800d64c:	b087      	sub	sp, #28
 800d64e:	af00      	add	r7, sp, #0
 800d650:	60f8      	str	r0, [r7, #12]
 800d652:	460b      	mov	r3, r1
 800d654:	607a      	str	r2, [r7, #4]
 800d656:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_system_control_t into a I2C write buffer
	 * Buffer must be at least 5 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800d658:	2300      	movs	r3, #0
 800d65a:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES > buf_size)
 800d65c:	897b      	ldrh	r3, [r7, #10]
 800d65e:	2b04      	cmp	r3, #4
 800d660:	d802      	bhi.n	800d668 <VL53L1_i2c_encode_system_control+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800d662:	f06f 0309 	mvn.w	r3, #9
 800d666:	e025      	b.n	800d6b4 <VL53L1_i2c_encode_system_control+0x6a>

	*(pbuffer +   0) =
		pdata->power_management__go1_power_force & 0x1;
 800d668:	68fb      	ldr	r3, [r7, #12]
 800d66a:	781b      	ldrb	r3, [r3, #0]
 800d66c:	f003 0301 	and.w	r3, r3, #1
 800d670:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
		pdata->system__stream_count_ctrl & 0x1;
 800d676:	68fb      	ldr	r3, [r7, #12]
 800d678:	785a      	ldrb	r2, [r3, #1]
	*(pbuffer +   1) =
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	3301      	adds	r3, #1
		pdata->system__stream_count_ctrl & 0x1;
 800d67e:	f002 0201 	and.w	r2, r2, #1
 800d682:	b2d2      	uxtb	r2, r2
	*(pbuffer +   1) =
 800d684:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
		pdata->firmware__enable & 0x1;
 800d686:	68fb      	ldr	r3, [r7, #12]
 800d688:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	3302      	adds	r3, #2
		pdata->firmware__enable & 0x1;
 800d68e:	f002 0201 	and.w	r2, r2, #1
 800d692:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 800d694:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->system__interrupt_clear & 0x3;
 800d696:	68fb      	ldr	r3, [r7, #12]
 800d698:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	3303      	adds	r3, #3
		pdata->system__interrupt_clear & 0x3;
 800d69e:	f002 0203 	and.w	r2, r2, #3
 800d6a2:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 800d6a4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	3304      	adds	r3, #4
		pdata->system__mode_start;
 800d6aa:	68fa      	ldr	r2, [r7, #12]
 800d6ac:	7912      	ldrb	r2, [r2, #4]
	*(pbuffer +   4) =
 800d6ae:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 800d6b0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d6b4:	4618      	mov	r0, r3
 800d6b6:	371c      	adds	r7, #28
 800d6b8:	46bd      	mov	sp, r7
 800d6ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6be:	4770      	bx	lr

0800d6c0 <VL53L1_set_system_control>:


VL53L1_Error VL53L1_set_system_control(
	VL53L1_DEV                 Dev,
	VL53L1_system_control_t   *pdata)
{
 800d6c0:	b580      	push	{r7, lr}
 800d6c2:	b084      	sub	sp, #16
 800d6c4:	af00      	add	r7, sp, #0
 800d6c6:	6078      	str	r0, [r7, #4]
 800d6c8:	6039      	str	r1, [r7, #0]
	/**
	 * Serialises and sends the contents of VL53L1_system_control_t
	 * data structure to the device
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800d6ca:	2300      	movs	r3, #0
 800d6cc:	73fb      	strb	r3, [r7, #15]
	uint8_t comms_buffer[VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 800d6ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d6d2:	2b00      	cmp	r3, #0
 800d6d4:	d108      	bne.n	800d6e8 <VL53L1_set_system_control+0x28>
		status = VL53L1_i2c_encode_system_control(
 800d6d6:	f107 0308 	add.w	r3, r7, #8
 800d6da:	461a      	mov	r2, r3
 800d6dc:	2105      	movs	r1, #5
 800d6de:	6838      	ldr	r0, [r7, #0]
 800d6e0:	f7ff ffb3 	bl	800d64a <VL53L1_i2c_encode_system_control>
 800d6e4:	4603      	mov	r3, r0
 800d6e6:	73fb      	strb	r3, [r7, #15]
			pdata,
			VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES,
			comms_buffer);

	if (status == VL53L1_ERROR_NONE)
 800d6e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d6ec:	2b00      	cmp	r3, #0
 800d6ee:	d108      	bne.n	800d702 <VL53L1_set_system_control+0x42>
		status = VL53L1_WriteMulti(
 800d6f0:	f107 0208 	add.w	r2, r7, #8
 800d6f4:	2305      	movs	r3, #5
 800d6f6:	2183      	movs	r1, #131	; 0x83
 800d6f8:	6878      	ldr	r0, [r7, #4]
 800d6fa:	f000 fd01 	bl	800e100 <VL53L1_WriteMulti>
 800d6fe:	4603      	mov	r3, r0
 800d700:	73fb      	strb	r3, [r7, #15]
			comms_buffer,
			VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES);

	LOG_FUNCTION_END(status);

	return status;
 800d702:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d706:	4618      	mov	r0, r3
 800d708:	3710      	adds	r7, #16
 800d70a:	46bd      	mov	sp, r7
 800d70c:	bd80      	pop	{r7, pc}

0800d70e <VL53L1_i2c_decode_system_results>:

VL53L1_Error VL53L1_i2c_decode_system_results(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_system_results_t   *pdata)
{
 800d70e:	b580      	push	{r7, lr}
 800d710:	b086      	sub	sp, #24
 800d712:	af00      	add	r7, sp, #0
 800d714:	4603      	mov	r3, r0
 800d716:	60b9      	str	r1, [r7, #8]
 800d718:	607a      	str	r2, [r7, #4]
 800d71a:	81fb      	strh	r3, [r7, #14]
	/**
	 * Decodes data structure VL53L1_system_results_t from the input I2C read buffer
	 * Buffer must be at least 44 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800d71c:	2300      	movs	r3, #0
 800d71e:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_SYSTEM_RESULTS_I2C_SIZE_BYTES > buf_size)
 800d720:	89fb      	ldrh	r3, [r7, #14]
 800d722:	2b2b      	cmp	r3, #43	; 0x2b
 800d724:	d802      	bhi.n	800d72c <VL53L1_i2c_decode_system_results+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800d726:	f06f 0309 	mvn.w	r3, #9
 800d72a:	e0e2      	b.n	800d8f2 <VL53L1_i2c_decode_system_results+0x1e4>

	pdata->result__interrupt_status =
		(*(pbuffer +   0)) & 0x3F;
 800d72c:	68bb      	ldr	r3, [r7, #8]
 800d72e:	781b      	ldrb	r3, [r3, #0]
 800d730:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d734:	b2da      	uxtb	r2, r3
	pdata->result__interrupt_status =
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	701a      	strb	r2, [r3, #0]
	pdata->result__range_status =
 800d73a:	68bb      	ldr	r3, [r7, #8]
 800d73c:	785a      	ldrb	r2, [r3, #1]
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	705a      	strb	r2, [r3, #1]
		(*(pbuffer +   1));
	pdata->result__report_status =
		(*(pbuffer +   2)) & 0xF;
 800d742:	68bb      	ldr	r3, [r7, #8]
 800d744:	3302      	adds	r3, #2
 800d746:	781b      	ldrb	r3, [r3, #0]
 800d748:	f003 030f 	and.w	r3, r3, #15
 800d74c:	b2da      	uxtb	r2, r3
	pdata->result__report_status =
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	709a      	strb	r2, [r3, #2]
	pdata->result__stream_count =
 800d752:	68bb      	ldr	r3, [r7, #8]
 800d754:	78da      	ldrb	r2, [r3, #3]
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	70da      	strb	r2, [r3, #3]
		(*(pbuffer +   3));
	pdata->result__dss_actual_effective_spads_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   4));
 800d75a:	68bb      	ldr	r3, [r7, #8]
 800d75c:	3304      	adds	r3, #4
 800d75e:	4619      	mov	r1, r3
 800d760:	2002      	movs	r0, #2
 800d762:	f7fe fd03 	bl	800c16c <VL53L1_i2c_decode_uint16_t>
 800d766:	4603      	mov	r3, r0
 800d768:	461a      	mov	r2, r3
	pdata->result__dss_actual_effective_spads_sd0 =
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	809a      	strh	r2, [r3, #4]
	pdata->result__peak_signal_count_rate_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   6));
 800d76e:	68bb      	ldr	r3, [r7, #8]
 800d770:	3306      	adds	r3, #6
 800d772:	4619      	mov	r1, r3
 800d774:	2002      	movs	r0, #2
 800d776:	f7fe fcf9 	bl	800c16c <VL53L1_i2c_decode_uint16_t>
 800d77a:	4603      	mov	r3, r0
 800d77c:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_mcps_sd0 =
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	80da      	strh	r2, [r3, #6]
	pdata->result__ambient_count_rate_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   8));
 800d782:	68bb      	ldr	r3, [r7, #8]
 800d784:	3308      	adds	r3, #8
 800d786:	4619      	mov	r1, r3
 800d788:	2002      	movs	r0, #2
 800d78a:	f7fe fcef 	bl	800c16c <VL53L1_i2c_decode_uint16_t>
 800d78e:	4603      	mov	r3, r0
 800d790:	461a      	mov	r2, r3
	pdata->result__ambient_count_rate_mcps_sd0 =
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	811a      	strh	r2, [r3, #8]
	pdata->result__sigma_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  10));
 800d796:	68bb      	ldr	r3, [r7, #8]
 800d798:	330a      	adds	r3, #10
 800d79a:	4619      	mov	r1, r3
 800d79c:	2002      	movs	r0, #2
 800d79e:	f7fe fce5 	bl	800c16c <VL53L1_i2c_decode_uint16_t>
 800d7a2:	4603      	mov	r3, r0
 800d7a4:	461a      	mov	r2, r3
	pdata->result__sigma_sd0 =
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	815a      	strh	r2, [r3, #10]
	pdata->result__phase_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  12));
 800d7aa:	68bb      	ldr	r3, [r7, #8]
 800d7ac:	330c      	adds	r3, #12
 800d7ae:	4619      	mov	r1, r3
 800d7b0:	2002      	movs	r0, #2
 800d7b2:	f7fe fcdb 	bl	800c16c <VL53L1_i2c_decode_uint16_t>
 800d7b6:	4603      	mov	r3, r0
 800d7b8:	461a      	mov	r2, r3
	pdata->result__phase_sd0 =
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	819a      	strh	r2, [r3, #12]
	pdata->result__final_crosstalk_corrected_range_mm_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  14));
 800d7be:	68bb      	ldr	r3, [r7, #8]
 800d7c0:	330e      	adds	r3, #14
 800d7c2:	4619      	mov	r1, r3
 800d7c4:	2002      	movs	r0, #2
 800d7c6:	f7fe fcd1 	bl	800c16c <VL53L1_i2c_decode_uint16_t>
 800d7ca:	4603      	mov	r3, r0
 800d7cc:	461a      	mov	r2, r3
	pdata->result__final_crosstalk_corrected_range_mm_sd0 =
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	81da      	strh	r2, [r3, #14]
	pdata->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  16));
 800d7d2:	68bb      	ldr	r3, [r7, #8]
 800d7d4:	3310      	adds	r3, #16
 800d7d6:	4619      	mov	r1, r3
 800d7d8:	2002      	movs	r0, #2
 800d7da:	f7fe fcc7 	bl	800c16c <VL53L1_i2c_decode_uint16_t>
 800d7de:	4603      	mov	r3, r0
 800d7e0:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 =
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	821a      	strh	r2, [r3, #16]
	pdata->result__mm_inner_actual_effective_spads_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  18));
 800d7e6:	68bb      	ldr	r3, [r7, #8]
 800d7e8:	3312      	adds	r3, #18
 800d7ea:	4619      	mov	r1, r3
 800d7ec:	2002      	movs	r0, #2
 800d7ee:	f7fe fcbd 	bl	800c16c <VL53L1_i2c_decode_uint16_t>
 800d7f2:	4603      	mov	r3, r0
 800d7f4:	461a      	mov	r2, r3
	pdata->result__mm_inner_actual_effective_spads_sd0 =
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	825a      	strh	r2, [r3, #18]
	pdata->result__mm_outer_actual_effective_spads_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  20));
 800d7fa:	68bb      	ldr	r3, [r7, #8]
 800d7fc:	3314      	adds	r3, #20
 800d7fe:	4619      	mov	r1, r3
 800d800:	2002      	movs	r0, #2
 800d802:	f7fe fcb3 	bl	800c16c <VL53L1_i2c_decode_uint16_t>
 800d806:	4603      	mov	r3, r0
 800d808:	461a      	mov	r2, r3
	pdata->result__mm_outer_actual_effective_spads_sd0 =
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	829a      	strh	r2, [r3, #20]
	pdata->result__avg_signal_count_rate_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  22));
 800d80e:	68bb      	ldr	r3, [r7, #8]
 800d810:	3316      	adds	r3, #22
 800d812:	4619      	mov	r1, r3
 800d814:	2002      	movs	r0, #2
 800d816:	f7fe fca9 	bl	800c16c <VL53L1_i2c_decode_uint16_t>
 800d81a:	4603      	mov	r3, r0
 800d81c:	461a      	mov	r2, r3
	pdata->result__avg_signal_count_rate_mcps_sd0 =
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	82da      	strh	r2, [r3, #22]
	pdata->result__dss_actual_effective_spads_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  24));
 800d822:	68bb      	ldr	r3, [r7, #8]
 800d824:	3318      	adds	r3, #24
 800d826:	4619      	mov	r1, r3
 800d828:	2002      	movs	r0, #2
 800d82a:	f7fe fc9f 	bl	800c16c <VL53L1_i2c_decode_uint16_t>
 800d82e:	4603      	mov	r3, r0
 800d830:	461a      	mov	r2, r3
	pdata->result__dss_actual_effective_spads_sd1 =
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	831a      	strh	r2, [r3, #24]
	pdata->result__peak_signal_count_rate_mcps_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  26));
 800d836:	68bb      	ldr	r3, [r7, #8]
 800d838:	331a      	adds	r3, #26
 800d83a:	4619      	mov	r1, r3
 800d83c:	2002      	movs	r0, #2
 800d83e:	f7fe fc95 	bl	800c16c <VL53L1_i2c_decode_uint16_t>
 800d842:	4603      	mov	r3, r0
 800d844:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_mcps_sd1 =
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	835a      	strh	r2, [r3, #26]
	pdata->result__ambient_count_rate_mcps_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  28));
 800d84a:	68bb      	ldr	r3, [r7, #8]
 800d84c:	331c      	adds	r3, #28
 800d84e:	4619      	mov	r1, r3
 800d850:	2002      	movs	r0, #2
 800d852:	f7fe fc8b 	bl	800c16c <VL53L1_i2c_decode_uint16_t>
 800d856:	4603      	mov	r3, r0
 800d858:	461a      	mov	r2, r3
	pdata->result__ambient_count_rate_mcps_sd1 =
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	839a      	strh	r2, [r3, #28]
	pdata->result__sigma_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  30));
 800d85e:	68bb      	ldr	r3, [r7, #8]
 800d860:	331e      	adds	r3, #30
 800d862:	4619      	mov	r1, r3
 800d864:	2002      	movs	r0, #2
 800d866:	f7fe fc81 	bl	800c16c <VL53L1_i2c_decode_uint16_t>
 800d86a:	4603      	mov	r3, r0
 800d86c:	461a      	mov	r2, r3
	pdata->result__sigma_sd1 =
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	83da      	strh	r2, [r3, #30]
	pdata->result__phase_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  32));
 800d872:	68bb      	ldr	r3, [r7, #8]
 800d874:	3320      	adds	r3, #32
 800d876:	4619      	mov	r1, r3
 800d878:	2002      	movs	r0, #2
 800d87a:	f7fe fc77 	bl	800c16c <VL53L1_i2c_decode_uint16_t>
 800d87e:	4603      	mov	r3, r0
 800d880:	461a      	mov	r2, r3
	pdata->result__phase_sd1 =
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	841a      	strh	r2, [r3, #32]
	pdata->result__final_crosstalk_corrected_range_mm_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  34));
 800d886:	68bb      	ldr	r3, [r7, #8]
 800d888:	3322      	adds	r3, #34	; 0x22
 800d88a:	4619      	mov	r1, r3
 800d88c:	2002      	movs	r0, #2
 800d88e:	f7fe fc6d 	bl	800c16c <VL53L1_i2c_decode_uint16_t>
 800d892:	4603      	mov	r3, r0
 800d894:	461a      	mov	r2, r3
	pdata->result__final_crosstalk_corrected_range_mm_sd1 =
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	845a      	strh	r2, [r3, #34]	; 0x22
	pdata->result__spare_0_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  36));
 800d89a:	68bb      	ldr	r3, [r7, #8]
 800d89c:	3324      	adds	r3, #36	; 0x24
 800d89e:	4619      	mov	r1, r3
 800d8a0:	2002      	movs	r0, #2
 800d8a2:	f7fe fc63 	bl	800c16c <VL53L1_i2c_decode_uint16_t>
 800d8a6:	4603      	mov	r3, r0
 800d8a8:	461a      	mov	r2, r3
	pdata->result__spare_0_sd1 =
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	849a      	strh	r2, [r3, #36]	; 0x24
	pdata->result__spare_1_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  38));
 800d8ae:	68bb      	ldr	r3, [r7, #8]
 800d8b0:	3326      	adds	r3, #38	; 0x26
 800d8b2:	4619      	mov	r1, r3
 800d8b4:	2002      	movs	r0, #2
 800d8b6:	f7fe fc59 	bl	800c16c <VL53L1_i2c_decode_uint16_t>
 800d8ba:	4603      	mov	r3, r0
 800d8bc:	461a      	mov	r2, r3
	pdata->result__spare_1_sd1 =
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	84da      	strh	r2, [r3, #38]	; 0x26
	pdata->result__spare_2_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  40));
 800d8c2:	68bb      	ldr	r3, [r7, #8]
 800d8c4:	3328      	adds	r3, #40	; 0x28
 800d8c6:	4619      	mov	r1, r3
 800d8c8:	2002      	movs	r0, #2
 800d8ca:	f7fe fc4f 	bl	800c16c <VL53L1_i2c_decode_uint16_t>
 800d8ce:	4603      	mov	r3, r0
 800d8d0:	461a      	mov	r2, r3
	pdata->result__spare_2_sd1 =
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	851a      	strh	r2, [r3, #40]	; 0x28
	pdata->result__spare_3_sd1 =
 800d8d6:	68bb      	ldr	r3, [r7, #8]
 800d8d8:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
		(*(pbuffer +  42));
	pdata->result__thresh_info =
 800d8e2:	68bb      	ldr	r3, [r7, #8]
 800d8e4:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
		(*(pbuffer +  43));

	LOG_FUNCTION_END(status);

	return status;
 800d8ee:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d8f2:	4618      	mov	r0, r3
 800d8f4:	3718      	adds	r7, #24
 800d8f6:	46bd      	mov	sp, r7
 800d8f8:	bd80      	pop	{r7, pc}

0800d8fa <VL53L1_i2c_decode_core_results>:

VL53L1_Error VL53L1_i2c_decode_core_results(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_core_results_t     *pdata)
{
 800d8fa:	b580      	push	{r7, lr}
 800d8fc:	b086      	sub	sp, #24
 800d8fe:	af00      	add	r7, sp, #0
 800d900:	4603      	mov	r3, r0
 800d902:	60b9      	str	r1, [r7, #8]
 800d904:	607a      	str	r2, [r7, #4]
 800d906:	81fb      	strh	r3, [r7, #14]
	/**
	 * Decodes data structure VL53L1_core_results_t from the input I2C read buffer
	 * Buffer must be at least 33 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800d908:	2300      	movs	r3, #0
 800d90a:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_CORE_RESULTS_I2C_SIZE_BYTES > buf_size)
 800d90c:	89fb      	ldrh	r3, [r7, #14]
 800d90e:	2b20      	cmp	r3, #32
 800d910:	d802      	bhi.n	800d918 <VL53L1_i2c_decode_core_results+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800d912:	f06f 0309 	mvn.w	r3, #9
 800d916:	e04d      	b.n	800d9b4 <VL53L1_i2c_decode_core_results+0xba>

	pdata->result_core__ambient_window_events_sd0 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +   0));
 800d918:	68b9      	ldr	r1, [r7, #8]
 800d91a:	2004      	movs	r0, #4
 800d91c:	f7fe fcc5 	bl	800c2aa <VL53L1_i2c_decode_uint32_t>
 800d920:	4602      	mov	r2, r0
	pdata->result_core__ambient_window_events_sd0 =
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	601a      	str	r2, [r3, #0]
	pdata->result_core__ranging_total_events_sd0 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +   4));
 800d926:	68bb      	ldr	r3, [r7, #8]
 800d928:	3304      	adds	r3, #4
 800d92a:	4619      	mov	r1, r3
 800d92c:	2004      	movs	r0, #4
 800d92e:	f7fe fcbc 	bl	800c2aa <VL53L1_i2c_decode_uint32_t>
 800d932:	4602      	mov	r2, r0
	pdata->result_core__ranging_total_events_sd0 =
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	605a      	str	r2, [r3, #4]
	pdata->result_core__signal_total_events_sd0 =
		(VL53L1_i2c_decode_int32_t(4, pbuffer +   8));
 800d938:	68bb      	ldr	r3, [r7, #8]
 800d93a:	3308      	adds	r3, #8
 800d93c:	4619      	mov	r1, r3
 800d93e:	2004      	movs	r0, #4
 800d940:	f7fe fcd0 	bl	800c2e4 <VL53L1_i2c_decode_int32_t>
 800d944:	4602      	mov	r2, r0
	pdata->result_core__signal_total_events_sd0 =
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	609a      	str	r2, [r3, #8]
	pdata->result_core__total_periods_elapsed_sd0 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  12));
 800d94a:	68bb      	ldr	r3, [r7, #8]
 800d94c:	330c      	adds	r3, #12
 800d94e:	4619      	mov	r1, r3
 800d950:	2004      	movs	r0, #4
 800d952:	f7fe fcaa 	bl	800c2aa <VL53L1_i2c_decode_uint32_t>
 800d956:	4602      	mov	r2, r0
	pdata->result_core__total_periods_elapsed_sd0 =
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	60da      	str	r2, [r3, #12]
	pdata->result_core__ambient_window_events_sd1 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  16));
 800d95c:	68bb      	ldr	r3, [r7, #8]
 800d95e:	3310      	adds	r3, #16
 800d960:	4619      	mov	r1, r3
 800d962:	2004      	movs	r0, #4
 800d964:	f7fe fca1 	bl	800c2aa <VL53L1_i2c_decode_uint32_t>
 800d968:	4602      	mov	r2, r0
	pdata->result_core__ambient_window_events_sd1 =
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	611a      	str	r2, [r3, #16]
	pdata->result_core__ranging_total_events_sd1 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  20));
 800d96e:	68bb      	ldr	r3, [r7, #8]
 800d970:	3314      	adds	r3, #20
 800d972:	4619      	mov	r1, r3
 800d974:	2004      	movs	r0, #4
 800d976:	f7fe fc98 	bl	800c2aa <VL53L1_i2c_decode_uint32_t>
 800d97a:	4602      	mov	r2, r0
	pdata->result_core__ranging_total_events_sd1 =
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	615a      	str	r2, [r3, #20]
	pdata->result_core__signal_total_events_sd1 =
		(VL53L1_i2c_decode_int32_t(4, pbuffer +  24));
 800d980:	68bb      	ldr	r3, [r7, #8]
 800d982:	3318      	adds	r3, #24
 800d984:	4619      	mov	r1, r3
 800d986:	2004      	movs	r0, #4
 800d988:	f7fe fcac 	bl	800c2e4 <VL53L1_i2c_decode_int32_t>
 800d98c:	4602      	mov	r2, r0
	pdata->result_core__signal_total_events_sd1 =
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	619a      	str	r2, [r3, #24]
	pdata->result_core__total_periods_elapsed_sd1 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  28));
 800d992:	68bb      	ldr	r3, [r7, #8]
 800d994:	331c      	adds	r3, #28
 800d996:	4619      	mov	r1, r3
 800d998:	2004      	movs	r0, #4
 800d99a:	f7fe fc86 	bl	800c2aa <VL53L1_i2c_decode_uint32_t>
 800d99e:	4602      	mov	r2, r0
	pdata->result_core__total_periods_elapsed_sd1 =
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	61da      	str	r2, [r3, #28]
	pdata->result_core__spare_0 =
 800d9a4:	68bb      	ldr	r3, [r7, #8]
 800d9a6:	f893 2020 	ldrb.w	r2, [r3, #32]
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	f883 2020 	strb.w	r2, [r3, #32]
		(*(pbuffer +  32));

	LOG_FUNCTION_END(status);

	return status;
 800d9b0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d9b4:	4618      	mov	r0, r3
 800d9b6:	3718      	adds	r7, #24
 800d9b8:	46bd      	mov	sp, r7
 800d9ba:	bd80      	pop	{r7, pc}

0800d9bc <VL53L1_i2c_decode_debug_results>:

VL53L1_Error VL53L1_i2c_decode_debug_results(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_debug_results_t    *pdata)
{
 800d9bc:	b580      	push	{r7, lr}
 800d9be:	b086      	sub	sp, #24
 800d9c0:	af00      	add	r7, sp, #0
 800d9c2:	4603      	mov	r3, r0
 800d9c4:	60b9      	str	r1, [r7, #8]
 800d9c6:	607a      	str	r2, [r7, #4]
 800d9c8:	81fb      	strh	r3, [r7, #14]
	/**
	 * Decodes data structure VL53L1_debug_results_t from the input I2C read buffer
	 * Buffer must be at least 56 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800d9ca:	2300      	movs	r3, #0
 800d9cc:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_DEBUG_RESULTS_I2C_SIZE_BYTES > buf_size)
 800d9ce:	89fb      	ldrh	r3, [r7, #14]
 800d9d0:	2b37      	cmp	r3, #55	; 0x37
 800d9d2:	d802      	bhi.n	800d9da <VL53L1_i2c_decode_debug_results+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800d9d4:	f06f 0309 	mvn.w	r3, #9
 800d9d8:	e15e      	b.n	800dc98 <VL53L1_i2c_decode_debug_results+0x2dc>

	pdata->phasecal_result__reference_phase =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   0));
 800d9da:	68b9      	ldr	r1, [r7, #8]
 800d9dc:	2002      	movs	r0, #2
 800d9de:	f7fe fbc5 	bl	800c16c <VL53L1_i2c_decode_uint16_t>
 800d9e2:	4603      	mov	r3, r0
 800d9e4:	461a      	mov	r2, r3
	pdata->phasecal_result__reference_phase =
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	801a      	strh	r2, [r3, #0]
	pdata->phasecal_result__vcsel_start =
		(*(pbuffer +   2)) & 0x7F;
 800d9ea:	68bb      	ldr	r3, [r7, #8]
 800d9ec:	3302      	adds	r3, #2
 800d9ee:	781b      	ldrb	r3, [r3, #0]
 800d9f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d9f4:	b2da      	uxtb	r2, r3
	pdata->phasecal_result__vcsel_start =
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	709a      	strb	r2, [r3, #2]
	pdata->ref_spad_char_result__num_actual_ref_spads =
		(*(pbuffer +   3)) & 0x3F;
 800d9fa:	68bb      	ldr	r3, [r7, #8]
 800d9fc:	3303      	adds	r3, #3
 800d9fe:	781b      	ldrb	r3, [r3, #0]
 800da00:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800da04:	b2da      	uxtb	r2, r3
	pdata->ref_spad_char_result__num_actual_ref_spads =
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	70da      	strb	r2, [r3, #3]
	pdata->ref_spad_char_result__ref_location =
		(*(pbuffer +   4)) & 0x3;
 800da0a:	68bb      	ldr	r3, [r7, #8]
 800da0c:	3304      	adds	r3, #4
 800da0e:	781b      	ldrb	r3, [r3, #0]
 800da10:	f003 0303 	and.w	r3, r3, #3
 800da14:	b2da      	uxtb	r2, r3
	pdata->ref_spad_char_result__ref_location =
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	711a      	strb	r2, [r3, #4]
	pdata->vhv_result__coldboot_status =
		(*(pbuffer +   5)) & 0x1;
 800da1a:	68bb      	ldr	r3, [r7, #8]
 800da1c:	3305      	adds	r3, #5
 800da1e:	781b      	ldrb	r3, [r3, #0]
 800da20:	f003 0301 	and.w	r3, r3, #1
 800da24:	b2da      	uxtb	r2, r3
	pdata->vhv_result__coldboot_status =
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	715a      	strb	r2, [r3, #5]
	pdata->vhv_result__search_result =
		(*(pbuffer +   6)) & 0x3F;
 800da2a:	68bb      	ldr	r3, [r7, #8]
 800da2c:	3306      	adds	r3, #6
 800da2e:	781b      	ldrb	r3, [r3, #0]
 800da30:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800da34:	b2da      	uxtb	r2, r3
	pdata->vhv_result__search_result =
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	719a      	strb	r2, [r3, #6]
	pdata->vhv_result__latest_setting =
		(*(pbuffer +   7)) & 0x3F;
 800da3a:	68bb      	ldr	r3, [r7, #8]
 800da3c:	3307      	adds	r3, #7
 800da3e:	781b      	ldrb	r3, [r3, #0]
 800da40:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800da44:	b2da      	uxtb	r2, r3
	pdata->vhv_result__latest_setting =
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	71da      	strb	r2, [r3, #7]
	pdata->result__osc_calibrate_val =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   8)) & 0x3FF;
 800da4a:	68bb      	ldr	r3, [r7, #8]
 800da4c:	3308      	adds	r3, #8
 800da4e:	4619      	mov	r1, r3
 800da50:	2002      	movs	r0, #2
 800da52:	f7fe fb8b 	bl	800c16c <VL53L1_i2c_decode_uint16_t>
 800da56:	4603      	mov	r3, r0
 800da58:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800da5c:	b29a      	uxth	r2, r3
	pdata->result__osc_calibrate_val =
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	811a      	strh	r2, [r3, #8]
	pdata->ana_config__powerdown_go1 =
		(*(pbuffer +  10)) & 0x3;
 800da62:	68bb      	ldr	r3, [r7, #8]
 800da64:	330a      	adds	r3, #10
 800da66:	781b      	ldrb	r3, [r3, #0]
 800da68:	f003 0303 	and.w	r3, r3, #3
 800da6c:	b2da      	uxtb	r2, r3
	pdata->ana_config__powerdown_go1 =
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	729a      	strb	r2, [r3, #10]
	pdata->ana_config__ref_bg_ctrl =
		(*(pbuffer +  11)) & 0x3;
 800da72:	68bb      	ldr	r3, [r7, #8]
 800da74:	330b      	adds	r3, #11
 800da76:	781b      	ldrb	r3, [r3, #0]
 800da78:	f003 0303 	and.w	r3, r3, #3
 800da7c:	b2da      	uxtb	r2, r3
	pdata->ana_config__ref_bg_ctrl =
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	72da      	strb	r2, [r3, #11]
	pdata->ana_config__regdvdd1v2_ctrl =
		(*(pbuffer +  12)) & 0xF;
 800da82:	68bb      	ldr	r3, [r7, #8]
 800da84:	330c      	adds	r3, #12
 800da86:	781b      	ldrb	r3, [r3, #0]
 800da88:	f003 030f 	and.w	r3, r3, #15
 800da8c:	b2da      	uxtb	r2, r3
	pdata->ana_config__regdvdd1v2_ctrl =
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	731a      	strb	r2, [r3, #12]
	pdata->ana_config__osc_slow_ctrl =
		(*(pbuffer +  13)) & 0x7;
 800da92:	68bb      	ldr	r3, [r7, #8]
 800da94:	330d      	adds	r3, #13
 800da96:	781b      	ldrb	r3, [r3, #0]
 800da98:	f003 0307 	and.w	r3, r3, #7
 800da9c:	b2da      	uxtb	r2, r3
	pdata->ana_config__osc_slow_ctrl =
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	735a      	strb	r2, [r3, #13]
	pdata->test_mode__status =
		(*(pbuffer +  14)) & 0x1;
 800daa2:	68bb      	ldr	r3, [r7, #8]
 800daa4:	330e      	adds	r3, #14
 800daa6:	781b      	ldrb	r3, [r3, #0]
 800daa8:	f003 0301 	and.w	r3, r3, #1
 800daac:	b2da      	uxtb	r2, r3
	pdata->test_mode__status =
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	739a      	strb	r2, [r3, #14]
	pdata->firmware__system_status =
		(*(pbuffer +  15)) & 0x3;
 800dab2:	68bb      	ldr	r3, [r7, #8]
 800dab4:	330f      	adds	r3, #15
 800dab6:	781b      	ldrb	r3, [r3, #0]
 800dab8:	f003 0303 	and.w	r3, r3, #3
 800dabc:	b2da      	uxtb	r2, r3
	pdata->firmware__system_status =
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	73da      	strb	r2, [r3, #15]
	pdata->firmware__mode_status =
 800dac2:	68bb      	ldr	r3, [r7, #8]
 800dac4:	7c1a      	ldrb	r2, [r3, #16]
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	741a      	strb	r2, [r3, #16]
		(*(pbuffer +  16));
	pdata->firmware__secondary_mode_status =
 800daca:	68bb      	ldr	r3, [r7, #8]
 800dacc:	7c5a      	ldrb	r2, [r3, #17]
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	745a      	strb	r2, [r3, #17]
		(*(pbuffer +  17));
	pdata->firmware__cal_repeat_rate_counter =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  18)) & 0xFFF;
 800dad2:	68bb      	ldr	r3, [r7, #8]
 800dad4:	3312      	adds	r3, #18
 800dad6:	4619      	mov	r1, r3
 800dad8:	2002      	movs	r0, #2
 800dada:	f7fe fb47 	bl	800c16c <VL53L1_i2c_decode_uint16_t>
 800dade:	4603      	mov	r3, r0
 800dae0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800dae4:	b29a      	uxth	r2, r3
	pdata->firmware__cal_repeat_rate_counter =
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	825a      	strh	r2, [r3, #18]
	pdata->gph__system__thresh_high =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  22));
 800daea:	68bb      	ldr	r3, [r7, #8]
 800daec:	3316      	adds	r3, #22
 800daee:	4619      	mov	r1, r3
 800daf0:	2002      	movs	r0, #2
 800daf2:	f7fe fb3b 	bl	800c16c <VL53L1_i2c_decode_uint16_t>
 800daf6:	4603      	mov	r3, r0
 800daf8:	461a      	mov	r2, r3
	pdata->gph__system__thresh_high =
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	829a      	strh	r2, [r3, #20]
	pdata->gph__system__thresh_low =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  24));
 800dafe:	68bb      	ldr	r3, [r7, #8]
 800db00:	3318      	adds	r3, #24
 800db02:	4619      	mov	r1, r3
 800db04:	2002      	movs	r0, #2
 800db06:	f7fe fb31 	bl	800c16c <VL53L1_i2c_decode_uint16_t>
 800db0a:	4603      	mov	r3, r0
 800db0c:	461a      	mov	r2, r3
	pdata->gph__system__thresh_low =
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	82da      	strh	r2, [r3, #22]
	pdata->gph__system__enable_xtalk_per_quadrant =
		(*(pbuffer +  26)) & 0x1;
 800db12:	68bb      	ldr	r3, [r7, #8]
 800db14:	331a      	adds	r3, #26
 800db16:	781b      	ldrb	r3, [r3, #0]
 800db18:	f003 0301 	and.w	r3, r3, #1
 800db1c:	b2da      	uxtb	r2, r3
	pdata->gph__system__enable_xtalk_per_quadrant =
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	761a      	strb	r2, [r3, #24]
	pdata->gph__spare_0 =
		(*(pbuffer +  27)) & 0x7;
 800db22:	68bb      	ldr	r3, [r7, #8]
 800db24:	331b      	adds	r3, #27
 800db26:	781b      	ldrb	r3, [r3, #0]
 800db28:	f003 0307 	and.w	r3, r3, #7
 800db2c:	b2da      	uxtb	r2, r3
	pdata->gph__spare_0 =
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	765a      	strb	r2, [r3, #25]
	pdata->gph__sd_config__woi_sd0 =
 800db32:	68bb      	ldr	r3, [r7, #8]
 800db34:	7f1a      	ldrb	r2, [r3, #28]
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	769a      	strb	r2, [r3, #26]
		(*(pbuffer +  28));
	pdata->gph__sd_config__woi_sd1 =
 800db3a:	68bb      	ldr	r3, [r7, #8]
 800db3c:	7f5a      	ldrb	r2, [r3, #29]
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	76da      	strb	r2, [r3, #27]
		(*(pbuffer +  29));
	pdata->gph__sd_config__initial_phase_sd0 =
		(*(pbuffer +  30)) & 0x7F;
 800db42:	68bb      	ldr	r3, [r7, #8]
 800db44:	331e      	adds	r3, #30
 800db46:	781b      	ldrb	r3, [r3, #0]
 800db48:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800db4c:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__initial_phase_sd0 =
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	771a      	strb	r2, [r3, #28]
	pdata->gph__sd_config__initial_phase_sd1 =
		(*(pbuffer +  31)) & 0x7F;
 800db52:	68bb      	ldr	r3, [r7, #8]
 800db54:	331f      	adds	r3, #31
 800db56:	781b      	ldrb	r3, [r3, #0]
 800db58:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800db5c:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__initial_phase_sd1 =
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	775a      	strb	r2, [r3, #29]
	pdata->gph__sd_config__first_order_select =
		(*(pbuffer +  32)) & 0x3;
 800db62:	68bb      	ldr	r3, [r7, #8]
 800db64:	3320      	adds	r3, #32
 800db66:	781b      	ldrb	r3, [r3, #0]
 800db68:	f003 0303 	and.w	r3, r3, #3
 800db6c:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__first_order_select =
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	779a      	strb	r2, [r3, #30]
	pdata->gph__sd_config__quantifier =
		(*(pbuffer +  33)) & 0xF;
 800db72:	68bb      	ldr	r3, [r7, #8]
 800db74:	3321      	adds	r3, #33	; 0x21
 800db76:	781b      	ldrb	r3, [r3, #0]
 800db78:	f003 030f 	and.w	r3, r3, #15
 800db7c:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__quantifier =
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	77da      	strb	r2, [r3, #31]
	pdata->gph__roi_config__user_roi_centre_spad =
 800db82:	68bb      	ldr	r3, [r7, #8]
 800db84:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	f883 2020 	strb.w	r2, [r3, #32]
		(*(pbuffer +  34));
	pdata->gph__roi_config__user_roi_requested_global_xy_size =
 800db8e:	68bb      	ldr	r3, [r7, #8]
 800db90:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		(*(pbuffer +  35));
	pdata->gph__system__sequence_config =
 800db9a:	68bb      	ldr	r3, [r7, #8]
 800db9c:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		(*(pbuffer +  36));
	pdata->gph__gph_id =
		(*(pbuffer +  37)) & 0x1;
 800dba6:	68bb      	ldr	r3, [r7, #8]
 800dba8:	3325      	adds	r3, #37	; 0x25
 800dbaa:	781b      	ldrb	r3, [r3, #0]
 800dbac:	f003 0301 	and.w	r3, r3, #1
 800dbb0:	b2da      	uxtb	r2, r3
	pdata->gph__gph_id =
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	pdata->system__interrupt_set =
		(*(pbuffer +  38)) & 0x3;
 800dbb8:	68bb      	ldr	r3, [r7, #8]
 800dbba:	3326      	adds	r3, #38	; 0x26
 800dbbc:	781b      	ldrb	r3, [r3, #0]
 800dbbe:	f003 0303 	and.w	r3, r3, #3
 800dbc2:	b2da      	uxtb	r2, r3
	pdata->system__interrupt_set =
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	pdata->interrupt_manager__enables =
		(*(pbuffer +  39)) & 0x1F;
 800dbca:	68bb      	ldr	r3, [r7, #8]
 800dbcc:	3327      	adds	r3, #39	; 0x27
 800dbce:	781b      	ldrb	r3, [r3, #0]
 800dbd0:	f003 031f 	and.w	r3, r3, #31
 800dbd4:	b2da      	uxtb	r2, r3
	pdata->interrupt_manager__enables =
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	pdata->interrupt_manager__clear =
		(*(pbuffer +  40)) & 0x1F;
 800dbdc:	68bb      	ldr	r3, [r7, #8]
 800dbde:	3328      	adds	r3, #40	; 0x28
 800dbe0:	781b      	ldrb	r3, [r3, #0]
 800dbe2:	f003 031f 	and.w	r3, r3, #31
 800dbe6:	b2da      	uxtb	r2, r3
	pdata->interrupt_manager__clear =
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	pdata->interrupt_manager__status =
		(*(pbuffer +  41)) & 0x1F;
 800dbee:	68bb      	ldr	r3, [r7, #8]
 800dbf0:	3329      	adds	r3, #41	; 0x29
 800dbf2:	781b      	ldrb	r3, [r3, #0]
 800dbf4:	f003 031f 	and.w	r3, r3, #31
 800dbf8:	b2da      	uxtb	r2, r3
	pdata->interrupt_manager__status =
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	pdata->mcu_to_host_bank__wr_access_en =
		(*(pbuffer +  42)) & 0x1;
 800dc00:	68bb      	ldr	r3, [r7, #8]
 800dc02:	332a      	adds	r3, #42	; 0x2a
 800dc04:	781b      	ldrb	r3, [r3, #0]
 800dc06:	f003 0301 	and.w	r3, r3, #1
 800dc0a:	b2da      	uxtb	r2, r3
	pdata->mcu_to_host_bank__wr_access_en =
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	pdata->power_management__go1_reset_status =
		(*(pbuffer +  43)) & 0x1;
 800dc12:	68bb      	ldr	r3, [r7, #8]
 800dc14:	332b      	adds	r3, #43	; 0x2b
 800dc16:	781b      	ldrb	r3, [r3, #0]
 800dc18:	f003 0301 	and.w	r3, r3, #1
 800dc1c:	b2da      	uxtb	r2, r3
	pdata->power_management__go1_reset_status =
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	pdata->pad_startup_mode__value_ro =
		(*(pbuffer +  44)) & 0x3;
 800dc24:	68bb      	ldr	r3, [r7, #8]
 800dc26:	332c      	adds	r3, #44	; 0x2c
 800dc28:	781b      	ldrb	r3, [r3, #0]
 800dc2a:	f003 0303 	and.w	r3, r3, #3
 800dc2e:	b2da      	uxtb	r2, r3
	pdata->pad_startup_mode__value_ro =
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	pdata->pad_startup_mode__value_ctrl =
		(*(pbuffer +  45)) & 0x3F;
 800dc36:	68bb      	ldr	r3, [r7, #8]
 800dc38:	332d      	adds	r3, #45	; 0x2d
 800dc3a:	781b      	ldrb	r3, [r3, #0]
 800dc3c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800dc40:	b2da      	uxtb	r2, r3
	pdata->pad_startup_mode__value_ctrl =
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
	pdata->pll_period_us =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  46)) & 0x3FFFF;
 800dc48:	68bb      	ldr	r3, [r7, #8]
 800dc4a:	332e      	adds	r3, #46	; 0x2e
 800dc4c:	4619      	mov	r1, r3
 800dc4e:	2004      	movs	r0, #4
 800dc50:	f7fe fb2b 	bl	800c2aa <VL53L1_i2c_decode_uint32_t>
 800dc54:	4603      	mov	r3, r0
 800dc56:	f3c3 0211 	ubfx	r2, r3, #0, #18
	pdata->pll_period_us =
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	62da      	str	r2, [r3, #44]	; 0x2c
	pdata->interrupt_scheduler__data_out =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  50));
 800dc5e:	68bb      	ldr	r3, [r7, #8]
 800dc60:	3332      	adds	r3, #50	; 0x32
 800dc62:	4619      	mov	r1, r3
 800dc64:	2004      	movs	r0, #4
 800dc66:	f7fe fb20 	bl	800c2aa <VL53L1_i2c_decode_uint32_t>
 800dc6a:	4602      	mov	r2, r0
	pdata->interrupt_scheduler__data_out =
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	631a      	str	r2, [r3, #48]	; 0x30
	pdata->nvm_bist__complete =
		(*(pbuffer +  54)) & 0x1;
 800dc70:	68bb      	ldr	r3, [r7, #8]
 800dc72:	3336      	adds	r3, #54	; 0x36
 800dc74:	781b      	ldrb	r3, [r3, #0]
 800dc76:	f003 0301 	and.w	r3, r3, #1
 800dc7a:	b2da      	uxtb	r2, r3
	pdata->nvm_bist__complete =
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	pdata->nvm_bist__status =
		(*(pbuffer +  55)) & 0x1;
 800dc82:	68bb      	ldr	r3, [r7, #8]
 800dc84:	3337      	adds	r3, #55	; 0x37
 800dc86:	781b      	ldrb	r3, [r3, #0]
 800dc88:	f003 0301 	and.w	r3, r3, #1
 800dc8c:	b2da      	uxtb	r2, r3
	pdata->nvm_bist__status =
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

	LOG_FUNCTION_END(status);

	return status;
 800dc94:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800dc98:	4618      	mov	r0, r3
 800dc9a:	3718      	adds	r7, #24
 800dc9c:	46bd      	mov	sp, r7
 800dc9e:	bd80      	pop	{r7, pc}

0800dca0 <VL53L1_i2c_decode_nvm_copy_data>:

VL53L1_Error VL53L1_i2c_decode_nvm_copy_data(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_nvm_copy_data_t    *pdata)
{
 800dca0:	b580      	push	{r7, lr}
 800dca2:	b086      	sub	sp, #24
 800dca4:	af00      	add	r7, sp, #0
 800dca6:	4603      	mov	r3, r0
 800dca8:	60b9      	str	r1, [r7, #8]
 800dcaa:	607a      	str	r2, [r7, #4]
 800dcac:	81fb      	strh	r3, [r7, #14]
	/**
	 * Decodes data structure VL53L1_nvm_copy_data_t from the input I2C read buffer
	 * Buffer must be at least 49 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800dcae:	2300      	movs	r3, #0
 800dcb0:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_NVM_COPY_DATA_I2C_SIZE_BYTES > buf_size)
 800dcb2:	89fb      	ldrh	r3, [r7, #14]
 800dcb4:	2b30      	cmp	r3, #48	; 0x30
 800dcb6:	d802      	bhi.n	800dcbe <VL53L1_i2c_decode_nvm_copy_data+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800dcb8:	f06f 0309 	mvn.w	r3, #9
 800dcbc:	e112      	b.n	800dee4 <VL53L1_i2c_decode_nvm_copy_data+0x244>

	pdata->identification__model_id =
		(*(pbuffer +   0));
 800dcbe:	68bb      	ldr	r3, [r7, #8]
 800dcc0:	781a      	ldrb	r2, [r3, #0]
	pdata->identification__model_id =
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	701a      	strb	r2, [r3, #0]
	pdata->identification__module_type =
 800dcc6:	68bb      	ldr	r3, [r7, #8]
 800dcc8:	785a      	ldrb	r2, [r3, #1]
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	705a      	strb	r2, [r3, #1]
		(*(pbuffer +   1));
	pdata->identification__revision_id =
 800dcce:	68bb      	ldr	r3, [r7, #8]
 800dcd0:	789a      	ldrb	r2, [r3, #2]
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	709a      	strb	r2, [r3, #2]
		(*(pbuffer +   2));
	pdata->identification__module_id =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   3));
 800dcd6:	68bb      	ldr	r3, [r7, #8]
 800dcd8:	3303      	adds	r3, #3
 800dcda:	4619      	mov	r1, r3
 800dcdc:	2002      	movs	r0, #2
 800dcde:	f7fe fa45 	bl	800c16c <VL53L1_i2c_decode_uint16_t>
 800dce2:	4603      	mov	r3, r0
 800dce4:	461a      	mov	r2, r3
	pdata->identification__module_id =
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	809a      	strh	r2, [r3, #4]
	pdata->ana_config__fast_osc__trim_max =
		(*(pbuffer +   5)) & 0x7F;
 800dcea:	68bb      	ldr	r3, [r7, #8]
 800dcec:	3305      	adds	r3, #5
 800dcee:	781b      	ldrb	r3, [r3, #0]
 800dcf0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dcf4:	b2da      	uxtb	r2, r3
	pdata->ana_config__fast_osc__trim_max =
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	719a      	strb	r2, [r3, #6]
	pdata->ana_config__fast_osc__freq_set =
		(*(pbuffer +   6)) & 0x7;
 800dcfa:	68bb      	ldr	r3, [r7, #8]
 800dcfc:	3306      	adds	r3, #6
 800dcfe:	781b      	ldrb	r3, [r3, #0]
 800dd00:	f003 0307 	and.w	r3, r3, #7
 800dd04:	b2da      	uxtb	r2, r3
	pdata->ana_config__fast_osc__freq_set =
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	71da      	strb	r2, [r3, #7]
	pdata->ana_config__vcsel_trim =
		(*(pbuffer +   7)) & 0x7;
 800dd0a:	68bb      	ldr	r3, [r7, #8]
 800dd0c:	3307      	adds	r3, #7
 800dd0e:	781b      	ldrb	r3, [r3, #0]
 800dd10:	f003 0307 	and.w	r3, r3, #7
 800dd14:	b2da      	uxtb	r2, r3
	pdata->ana_config__vcsel_trim =
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	721a      	strb	r2, [r3, #8]
	pdata->ana_config__vcsel_selion =
		(*(pbuffer +   8)) & 0x3F;
 800dd1a:	68bb      	ldr	r3, [r7, #8]
 800dd1c:	3308      	adds	r3, #8
 800dd1e:	781b      	ldrb	r3, [r3, #0]
 800dd20:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800dd24:	b2da      	uxtb	r2, r3
	pdata->ana_config__vcsel_selion =
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	725a      	strb	r2, [r3, #9]
	pdata->ana_config__vcsel_selion_max =
		(*(pbuffer +   9)) & 0x3F;
 800dd2a:	68bb      	ldr	r3, [r7, #8]
 800dd2c:	3309      	adds	r3, #9
 800dd2e:	781b      	ldrb	r3, [r3, #0]
 800dd30:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800dd34:	b2da      	uxtb	r2, r3
	pdata->ana_config__vcsel_selion_max =
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	729a      	strb	r2, [r3, #10]
	pdata->protected_laser_safety__lock_bit =
		(*(pbuffer +  10)) & 0x1;
 800dd3a:	68bb      	ldr	r3, [r7, #8]
 800dd3c:	330a      	adds	r3, #10
 800dd3e:	781b      	ldrb	r3, [r3, #0]
 800dd40:	f003 0301 	and.w	r3, r3, #1
 800dd44:	b2da      	uxtb	r2, r3
	pdata->protected_laser_safety__lock_bit =
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	72da      	strb	r2, [r3, #11]
	pdata->laser_safety__key =
		(*(pbuffer +  11)) & 0x7F;
 800dd4a:	68bb      	ldr	r3, [r7, #8]
 800dd4c:	330b      	adds	r3, #11
 800dd4e:	781b      	ldrb	r3, [r3, #0]
 800dd50:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dd54:	b2da      	uxtb	r2, r3
	pdata->laser_safety__key =
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	731a      	strb	r2, [r3, #12]
	pdata->laser_safety__key_ro =
		(*(pbuffer +  12)) & 0x1;
 800dd5a:	68bb      	ldr	r3, [r7, #8]
 800dd5c:	330c      	adds	r3, #12
 800dd5e:	781b      	ldrb	r3, [r3, #0]
 800dd60:	f003 0301 	and.w	r3, r3, #1
 800dd64:	b2da      	uxtb	r2, r3
	pdata->laser_safety__key_ro =
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	735a      	strb	r2, [r3, #13]
	pdata->laser_safety__clip =
		(*(pbuffer +  13)) & 0x3F;
 800dd6a:	68bb      	ldr	r3, [r7, #8]
 800dd6c:	330d      	adds	r3, #13
 800dd6e:	781b      	ldrb	r3, [r3, #0]
 800dd70:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800dd74:	b2da      	uxtb	r2, r3
	pdata->laser_safety__clip =
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	739a      	strb	r2, [r3, #14]
	pdata->laser_safety__mult =
		(*(pbuffer +  14)) & 0x3F;
 800dd7a:	68bb      	ldr	r3, [r7, #8]
 800dd7c:	330e      	adds	r3, #14
 800dd7e:	781b      	ldrb	r3, [r3, #0]
 800dd80:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800dd84:	b2da      	uxtb	r2, r3
	pdata->laser_safety__mult =
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	73da      	strb	r2, [r3, #15]
	pdata->global_config__spad_enables_rtn_0 =
 800dd8a:	68bb      	ldr	r3, [r7, #8]
 800dd8c:	7bda      	ldrb	r2, [r3, #15]
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	741a      	strb	r2, [r3, #16]
		(*(pbuffer +  15));
	pdata->global_config__spad_enables_rtn_1 =
 800dd92:	68bb      	ldr	r3, [r7, #8]
 800dd94:	7c1a      	ldrb	r2, [r3, #16]
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	745a      	strb	r2, [r3, #17]
		(*(pbuffer +  16));
	pdata->global_config__spad_enables_rtn_2 =
 800dd9a:	68bb      	ldr	r3, [r7, #8]
 800dd9c:	7c5a      	ldrb	r2, [r3, #17]
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	749a      	strb	r2, [r3, #18]
		(*(pbuffer +  17));
	pdata->global_config__spad_enables_rtn_3 =
 800dda2:	68bb      	ldr	r3, [r7, #8]
 800dda4:	7c9a      	ldrb	r2, [r3, #18]
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	74da      	strb	r2, [r3, #19]
		(*(pbuffer +  18));
	pdata->global_config__spad_enables_rtn_4 =
 800ddaa:	68bb      	ldr	r3, [r7, #8]
 800ddac:	7cda      	ldrb	r2, [r3, #19]
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	751a      	strb	r2, [r3, #20]
		(*(pbuffer +  19));
	pdata->global_config__spad_enables_rtn_5 =
 800ddb2:	68bb      	ldr	r3, [r7, #8]
 800ddb4:	7d1a      	ldrb	r2, [r3, #20]
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	755a      	strb	r2, [r3, #21]
		(*(pbuffer +  20));
	pdata->global_config__spad_enables_rtn_6 =
 800ddba:	68bb      	ldr	r3, [r7, #8]
 800ddbc:	7d5a      	ldrb	r2, [r3, #21]
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	759a      	strb	r2, [r3, #22]
		(*(pbuffer +  21));
	pdata->global_config__spad_enables_rtn_7 =
 800ddc2:	68bb      	ldr	r3, [r7, #8]
 800ddc4:	7d9a      	ldrb	r2, [r3, #22]
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	75da      	strb	r2, [r3, #23]
		(*(pbuffer +  22));
	pdata->global_config__spad_enables_rtn_8 =
 800ddca:	68bb      	ldr	r3, [r7, #8]
 800ddcc:	7dda      	ldrb	r2, [r3, #23]
 800ddce:	687b      	ldr	r3, [r7, #4]
 800ddd0:	761a      	strb	r2, [r3, #24]
		(*(pbuffer +  23));
	pdata->global_config__spad_enables_rtn_9 =
 800ddd2:	68bb      	ldr	r3, [r7, #8]
 800ddd4:	7e1a      	ldrb	r2, [r3, #24]
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	765a      	strb	r2, [r3, #25]
		(*(pbuffer +  24));
	pdata->global_config__spad_enables_rtn_10 =
 800ddda:	68bb      	ldr	r3, [r7, #8]
 800dddc:	7e5a      	ldrb	r2, [r3, #25]
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	769a      	strb	r2, [r3, #26]
		(*(pbuffer +  25));
	pdata->global_config__spad_enables_rtn_11 =
 800dde2:	68bb      	ldr	r3, [r7, #8]
 800dde4:	7e9a      	ldrb	r2, [r3, #26]
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	76da      	strb	r2, [r3, #27]
		(*(pbuffer +  26));
	pdata->global_config__spad_enables_rtn_12 =
 800ddea:	68bb      	ldr	r3, [r7, #8]
 800ddec:	7eda      	ldrb	r2, [r3, #27]
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	771a      	strb	r2, [r3, #28]
		(*(pbuffer +  27));
	pdata->global_config__spad_enables_rtn_13 =
 800ddf2:	68bb      	ldr	r3, [r7, #8]
 800ddf4:	7f1a      	ldrb	r2, [r3, #28]
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	775a      	strb	r2, [r3, #29]
		(*(pbuffer +  28));
	pdata->global_config__spad_enables_rtn_14 =
 800ddfa:	68bb      	ldr	r3, [r7, #8]
 800ddfc:	7f5a      	ldrb	r2, [r3, #29]
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	779a      	strb	r2, [r3, #30]
		(*(pbuffer +  29));
	pdata->global_config__spad_enables_rtn_15 =
 800de02:	68bb      	ldr	r3, [r7, #8]
 800de04:	7f9a      	ldrb	r2, [r3, #30]
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	77da      	strb	r2, [r3, #31]
		(*(pbuffer +  30));
	pdata->global_config__spad_enables_rtn_16 =
 800de0a:	68bb      	ldr	r3, [r7, #8]
 800de0c:	7fda      	ldrb	r2, [r3, #31]
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	f883 2020 	strb.w	r2, [r3, #32]
		(*(pbuffer +  31));
	pdata->global_config__spad_enables_rtn_17 =
 800de14:	68bb      	ldr	r3, [r7, #8]
 800de16:	f893 2020 	ldrb.w	r2, [r3, #32]
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		(*(pbuffer +  32));
	pdata->global_config__spad_enables_rtn_18 =
 800de20:	68bb      	ldr	r3, [r7, #8]
 800de22:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		(*(pbuffer +  33));
	pdata->global_config__spad_enables_rtn_19 =
 800de2c:	68bb      	ldr	r3, [r7, #8]
 800de2e:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
		(*(pbuffer +  34));
	pdata->global_config__spad_enables_rtn_20 =
 800de38:	68bb      	ldr	r3, [r7, #8]
 800de3a:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		(*(pbuffer +  35));
	pdata->global_config__spad_enables_rtn_21 =
 800de44:	68bb      	ldr	r3, [r7, #8]
 800de46:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
		(*(pbuffer +  36));
	pdata->global_config__spad_enables_rtn_22 =
 800de50:	68bb      	ldr	r3, [r7, #8]
 800de52:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
		(*(pbuffer +  37));
	pdata->global_config__spad_enables_rtn_23 =
 800de5c:	68bb      	ldr	r3, [r7, #8]
 800de5e:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		(*(pbuffer +  38));
	pdata->global_config__spad_enables_rtn_24 =
 800de68:	68bb      	ldr	r3, [r7, #8]
 800de6a:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		(*(pbuffer +  39));
	pdata->global_config__spad_enables_rtn_25 =
 800de74:	68bb      	ldr	r3, [r7, #8]
 800de76:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
		(*(pbuffer +  40));
	pdata->global_config__spad_enables_rtn_26 =
 800de80:	68bb      	ldr	r3, [r7, #8]
 800de82:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
		(*(pbuffer +  41));
	pdata->global_config__spad_enables_rtn_27 =
 800de8c:	68bb      	ldr	r3, [r7, #8]
 800de8e:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
		(*(pbuffer +  42));
	pdata->global_config__spad_enables_rtn_28 =
 800de98:	68bb      	ldr	r3, [r7, #8]
 800de9a:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
		(*(pbuffer +  43));
	pdata->global_config__spad_enables_rtn_29 =
 800dea4:	68bb      	ldr	r3, [r7, #8]
 800dea6:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
		(*(pbuffer +  44));
	pdata->global_config__spad_enables_rtn_30 =
 800deb0:	68bb      	ldr	r3, [r7, #8]
 800deb2:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
		(*(pbuffer +  45));
	pdata->global_config__spad_enables_rtn_31 =
 800debc:	68bb      	ldr	r3, [r7, #8]
 800debe:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 800dec2:	687b      	ldr	r3, [r7, #4]
 800dec4:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		(*(pbuffer +  46));
	pdata->roi_config__mode_roi_centre_spad =
 800dec8:	68bb      	ldr	r3, [r7, #8]
 800deca:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		(*(pbuffer +  47));
	pdata->roi_config__mode_roi_xy_size =
 800ded4:	68bb      	ldr	r3, [r7, #8]
 800ded6:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
		(*(pbuffer +  48));

	LOG_FUNCTION_END(status);

	return status;
 800dee0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800dee4:	4618      	mov	r0, r3
 800dee6:	3718      	adds	r7, #24
 800dee8:	46bd      	mov	sp, r7
 800deea:	bd80      	pop	{r7, pc}

0800deec <VL53L1_get_nvm_copy_data>:


VL53L1_Error VL53L1_get_nvm_copy_data(
	VL53L1_DEV                 Dev,
	VL53L1_nvm_copy_data_t    *pdata)
{
 800deec:	b580      	push	{r7, lr}
 800deee:	b090      	sub	sp, #64	; 0x40
 800def0:	af00      	add	r7, sp, #0
 800def2:	6078      	str	r0, [r7, #4]
 800def4:	6039      	str	r1, [r7, #0]
	/**
	 * Reads and de-serialises the contents of VL53L1_nvm_copy_data_t
	 * data structure from the device
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800def6:	2300      	movs	r3, #0
 800def8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t comms_buffer[VL53L1_NVM_COPY_DATA_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 800defc:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800df00:	2b00      	cmp	r3, #0
 800df02:	d10a      	bne.n	800df1a <VL53L1_get_nvm_copy_data+0x2e>
		status = VL53L1_ReadMulti(
 800df04:	f107 020c 	add.w	r2, r7, #12
 800df08:	2331      	movs	r3, #49	; 0x31
 800df0a:	f240 110f 	movw	r1, #271	; 0x10f
 800df0e:	6878      	ldr	r0, [r7, #4]
 800df10:	f000 f92c 	bl	800e16c <VL53L1_ReadMulti>
 800df14:	4603      	mov	r3, r0
 800df16:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			Dev,
			VL53L1_IDENTIFICATION__MODEL_ID,
			comms_buffer,
			VL53L1_NVM_COPY_DATA_I2C_SIZE_BYTES);

	if (status == VL53L1_ERROR_NONE)
 800df1a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800df1e:	2b00      	cmp	r3, #0
 800df20:	d109      	bne.n	800df36 <VL53L1_get_nvm_copy_data+0x4a>
		status = VL53L1_i2c_decode_nvm_copy_data(
 800df22:	f107 030c 	add.w	r3, r7, #12
 800df26:	683a      	ldr	r2, [r7, #0]
 800df28:	4619      	mov	r1, r3
 800df2a:	2031      	movs	r0, #49	; 0x31
 800df2c:	f7ff feb8 	bl	800dca0 <VL53L1_i2c_decode_nvm_copy_data>
 800df30:	4603      	mov	r3, r0
 800df32:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			comms_buffer,
			pdata);

	LOG_FUNCTION_END(status);

	return status;
 800df36:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800df3a:	4618      	mov	r0, r3
 800df3c:	3740      	adds	r7, #64	; 0x40
 800df3e:	46bd      	mov	sp, r7
 800df40:	bd80      	pop	{r7, pc}

0800df42 <VL53L1_wait_for_test_completion>:
}


VL53L1_Error VL53L1_wait_for_test_completion(
	VL53L1_DEV     Dev)
{
 800df42:	b580      	push	{r7, lr}
 800df44:	b086      	sub	sp, #24
 800df46:	af00      	add	r7, sp, #0
 800df48:	6078      	str	r0, [r7, #4]

	/* Wrapper function for waiting for test mode completion
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800df4a:	2300      	movs	r3, #0
 800df4c:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	613b      	str	r3, [r7, #16]

	uint8_t      data_ready  = 0;
 800df52:	2300      	movs	r3, #0
 800df54:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	if (pdev->wait_method == VL53L1_WAIT_METHOD_BLOCKING) {
 800df56:	693b      	ldr	r3, [r7, #16]
 800df58:	781b      	ldrb	r3, [r3, #0]
 800df5a:	2b00      	cmp	r3, #0
 800df5c:	d107      	bne.n	800df6e <VL53L1_wait_for_test_completion+0x2c>

		/* blocking version */

		status =
			VL53L1_poll_for_range_completion(
 800df5e:	f64e 2160 	movw	r1, #60000	; 0xea60
 800df62:	6878      	ldr	r0, [r7, #4]
 800df64:	f000 f85e 	bl	800e024 <VL53L1_poll_for_range_completion>
 800df68:	4603      	mov	r3, r0
 800df6a:	75fb      	strb	r3, [r7, #23]
 800df6c:	e01b      	b.n	800dfa6 <VL53L1_wait_for_test_completion+0x64>

	} else {

		/* implement non blocking version below */

		data_ready = 0;
 800df6e:	2300      	movs	r3, #0
 800df70:	73fb      	strb	r3, [r7, #15]
		while (data_ready == 0x00 && status == VL53L1_ERROR_NONE) {
 800df72:	e011      	b.n	800df98 <VL53L1_wait_for_test_completion+0x56>
			status = VL53L1_is_new_data_ready(
 800df74:	f107 030f 	add.w	r3, r7, #15
 800df78:	4619      	mov	r1, r3
 800df7a:	6878      	ldr	r0, [r7, #4]
 800df7c:	f000 f819 	bl	800dfb2 <VL53L1_is_new_data_ready>
 800df80:	4603      	mov	r3, r0
 800df82:	75fb      	strb	r3, [r7, #23]
				Dev,
				&data_ready);

			if (status == VL53L1_ERROR_NONE) {
 800df84:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800df88:	2b00      	cmp	r3, #0
 800df8a:	d105      	bne.n	800df98 <VL53L1_wait_for_test_completion+0x56>
				status = VL53L1_WaitMs(
 800df8c:	2101      	movs	r1, #1
 800df8e:	6878      	ldr	r0, [r7, #4]
 800df90:	f000 fa03 	bl	800e39a <VL53L1_WaitMs>
 800df94:	4603      	mov	r3, r0
 800df96:	75fb      	strb	r3, [r7, #23]
		while (data_ready == 0x00 && status == VL53L1_ERROR_NONE) {
 800df98:	7bfb      	ldrb	r3, [r7, #15]
 800df9a:	2b00      	cmp	r3, #0
 800df9c:	d103      	bne.n	800dfa6 <VL53L1_wait_for_test_completion+0x64>
 800df9e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800dfa2:	2b00      	cmp	r3, #0
 800dfa4:	d0e6      	beq.n	800df74 <VL53L1_wait_for_test_completion+0x32>
		}
	}

	LOG_FUNCTION_END(status);

	return status;
 800dfa6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800dfaa:	4618      	mov	r0, r3
 800dfac:	3718      	adds	r7, #24
 800dfae:	46bd      	mov	sp, r7
 800dfb0:	bd80      	pop	{r7, pc}

0800dfb2 <VL53L1_is_new_data_ready>:


VL53L1_Error VL53L1_is_new_data_ready(
	VL53L1_DEV     Dev,
	uint8_t       *pready)
{
 800dfb2:	b580      	push	{r7, lr}
 800dfb4:	b086      	sub	sp, #24
 800dfb6:	af00      	add	r7, sp, #0
 800dfb8:	6078      	str	r0, [r7, #4]
 800dfba:	6039      	str	r1, [r7, #0]
	 * Determines if new range data is ready by reading bit 0 of
	 * VL53L1_GPIO__TIO_HV_STATUS to determine the current state
	 * of output interrupt pin
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800dfbc:	2300      	movs	r3, #0
 800dfbe:	75bb      	strb	r3, [r7, #22]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	613b      	str	r3, [r7, #16]

	uint8_t  gpio__mux_active_high_hv = 0;
 800dfc4:	2300      	movs	r3, #0
 800dfc6:	73fb      	strb	r3, [r7, #15]
	uint8_t  gpio__tio_hv_status      = 0;
 800dfc8:	2300      	movs	r3, #0
 800dfca:	73bb      	strb	r3, [r7, #14]
	uint8_t  interrupt_ready          = 0;
 800dfcc:	2300      	movs	r3, #0
 800dfce:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	gpio__mux_active_high_hv =
			pdev->stat_cfg.gpio_hv_mux__ctrl &
 800dfd0:	693b      	ldr	r3, [r7, #16]
 800dfd2:	f893 3170 	ldrb.w	r3, [r3, #368]	; 0x170
	gpio__mux_active_high_hv =
 800dfd6:	f003 0310 	and.w	r3, r3, #16
 800dfda:	73fb      	strb	r3, [r7, #15]
			VL53L1_DEVICEINTERRUPTLEVEL_ACTIVE_MASK;

	if (gpio__mux_active_high_hv == VL53L1_DEVICEINTERRUPTLEVEL_ACTIVE_HIGH)
 800dfdc:	7bfb      	ldrb	r3, [r7, #15]
 800dfde:	2b00      	cmp	r3, #0
 800dfe0:	d102      	bne.n	800dfe8 <VL53L1_is_new_data_ready+0x36>
		interrupt_ready = 0x01;
 800dfe2:	2301      	movs	r3, #1
 800dfe4:	75fb      	strb	r3, [r7, #23]
 800dfe6:	e001      	b.n	800dfec <VL53L1_is_new_data_ready+0x3a>
	else
		interrupt_ready = 0x00;
 800dfe8:	2300      	movs	r3, #0
 800dfea:	75fb      	strb	r3, [r7, #23]

	/* read current range interrupt state */

	status = VL53L1_RdByte(
 800dfec:	f107 030e 	add.w	r3, r7, #14
 800dff0:	461a      	mov	r2, r3
 800dff2:	2131      	movs	r1, #49	; 0x31
 800dff4:	6878      	ldr	r0, [r7, #4]
 800dff6:	f000 f94b 	bl	800e290 <VL53L1_RdByte>
 800dffa:	4603      	mov	r3, r0
 800dffc:	75bb      	strb	r3, [r7, #22]
					VL53L1_GPIO__TIO_HV_STATUS,
					&gpio__tio_hv_status);

	/* set *pready = 1 if new range data ready complete zero otherwise */

	if ((gpio__tio_hv_status & 0x01) == interrupt_ready)
 800dffe:	7bbb      	ldrb	r3, [r7, #14]
 800e000:	f003 0201 	and.w	r2, r3, #1
 800e004:	7dfb      	ldrb	r3, [r7, #23]
 800e006:	429a      	cmp	r2, r3
 800e008:	d103      	bne.n	800e012 <VL53L1_is_new_data_ready+0x60>
		*pready = 0x01;
 800e00a:	683b      	ldr	r3, [r7, #0]
 800e00c:	2201      	movs	r2, #1
 800e00e:	701a      	strb	r2, [r3, #0]
 800e010:	e002      	b.n	800e018 <VL53L1_is_new_data_ready+0x66>
	else
		*pready = 0x00;
 800e012:	683b      	ldr	r3, [r7, #0]
 800e014:	2200      	movs	r2, #0
 800e016:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 800e018:	f997 3016 	ldrsb.w	r3, [r7, #22]
}
 800e01c:	4618      	mov	r0, r3
 800e01e:	3718      	adds	r7, #24
 800e020:	46bd      	mov	sp, r7
 800e022:	bd80      	pop	{r7, pc}

0800e024 <VL53L1_poll_for_range_completion>:


VL53L1_Error VL53L1_poll_for_range_completion(
	VL53L1_DEV     Dev,
	uint32_t       timeout_ms)
{
 800e024:	b580      	push	{r7, lr}
 800e026:	b088      	sub	sp, #32
 800e028:	af02      	add	r7, sp, #8
 800e02a:	6078      	str	r0, [r7, #4]
 800e02c:	6039      	str	r1, [r7, #0]
	 *
	 * Interrupt may be either active high or active low. Use active_high to
	 * select the required level check
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800e02e:	2300      	movs	r3, #0
 800e030:	75bb      	strb	r3, [r7, #22]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	613b      	str	r3, [r7, #16]

	uint8_t  gpio__mux_active_high_hv = 0;
 800e036:	2300      	movs	r3, #0
 800e038:	73fb      	strb	r3, [r7, #15]
	uint8_t  interrupt_ready          = 0;
 800e03a:	2300      	movs	r3, #0
 800e03c:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	gpio__mux_active_high_hv =
			pdev->stat_cfg.gpio_hv_mux__ctrl &
 800e03e:	693b      	ldr	r3, [r7, #16]
 800e040:	f893 3170 	ldrb.w	r3, [r3, #368]	; 0x170
	gpio__mux_active_high_hv =
 800e044:	f003 0310 	and.w	r3, r3, #16
 800e048:	73fb      	strb	r3, [r7, #15]
			VL53L1_DEVICEINTERRUPTLEVEL_ACTIVE_MASK;

	if (gpio__mux_active_high_hv == VL53L1_DEVICEINTERRUPTLEVEL_ACTIVE_HIGH)
 800e04a:	7bfb      	ldrb	r3, [r7, #15]
 800e04c:	2b00      	cmp	r3, #0
 800e04e:	d102      	bne.n	800e056 <VL53L1_poll_for_range_completion+0x32>
		interrupt_ready = 0x01;
 800e050:	2301      	movs	r3, #1
 800e052:	75fb      	strb	r3, [r7, #23]
 800e054:	e001      	b.n	800e05a <VL53L1_poll_for_range_completion+0x36>
	else
		interrupt_ready = 0x00;
 800e056:	2300      	movs	r3, #0
 800e058:	75fb      	strb	r3, [r7, #23]

	status =
		VL53L1_WaitValueMaskEx(
 800e05a:	7dfb      	ldrb	r3, [r7, #23]
 800e05c:	2201      	movs	r2, #1
 800e05e:	9201      	str	r2, [sp, #4]
 800e060:	2201      	movs	r2, #1
 800e062:	9200      	str	r2, [sp, #0]
 800e064:	2231      	movs	r2, #49	; 0x31
 800e066:	6839      	ldr	r1, [r7, #0]
 800e068:	6878      	ldr	r0, [r7, #4]
 800e06a:	f000 f9bb 	bl	800e3e4 <VL53L1_WaitValueMaskEx>
 800e06e:	4603      	mov	r3, r0
 800e070:	75bb      	strb	r3, [r7, #22]
			0x01,
			VL53L1_POLLING_DELAY_MS);

	LOG_FUNCTION_END(status);

	return status;
 800e072:	f997 3016 	ldrsb.w	r3, [r7, #22]
}
 800e076:	4618      	mov	r0, r3
 800e078:	3718      	adds	r7, #24
 800e07a:	46bd      	mov	sp, r7
 800e07c:	bd80      	pop	{r7, pc}

0800e07e <_I2CWrite>:
#   define VL53L1_PutI2cBus(...) (void)0
#endif

uint8_t _I2CBuffer[256];

int _I2CWrite(VL53L1_DEV Dev, uint8_t *pdata, uint32_t count) {
 800e07e:	b580      	push	{r7, lr}
 800e080:	b088      	sub	sp, #32
 800e082:	af02      	add	r7, sp, #8
 800e084:	60f8      	str	r0, [r7, #12]
 800e086:	60b9      	str	r1, [r7, #8]
 800e088:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800e08a:	687b      	ldr	r3, [r7, #4]
 800e08c:	330a      	adds	r3, #10
 800e08e:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 800e090:	68fb      	ldr	r3, [r7, #12]
 800e092:	f8d3 03a0 	ldr.w	r0, [r3, #928]	; 0x3a0
 800e096:	68fb      	ldr	r3, [r7, #12]
 800e098:	f893 3398 	ldrb.w	r3, [r3, #920]	; 0x398
 800e09c:	b299      	uxth	r1, r3
 800e09e:	687b      	ldr	r3, [r7, #4]
 800e0a0:	b29a      	uxth	r2, r3
 800e0a2:	697b      	ldr	r3, [r7, #20]
 800e0a4:	9300      	str	r3, [sp, #0]
 800e0a6:	4613      	mov	r3, r2
 800e0a8:	68ba      	ldr	r2, [r7, #8]
 800e0aa:	f7f5 fbc9 	bl	8003840 <HAL_I2C_Master_Transmit>
 800e0ae:	4603      	mov	r3, r0
 800e0b0:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 800e0b2:	693b      	ldr	r3, [r7, #16]
}
 800e0b4:	4618      	mov	r0, r3
 800e0b6:	3718      	adds	r7, #24
 800e0b8:	46bd      	mov	sp, r7
 800e0ba:	bd80      	pop	{r7, pc}

0800e0bc <_I2CRead>:

int _I2CRead(VL53L1_DEV Dev, uint8_t *pdata, uint32_t count) {
 800e0bc:	b580      	push	{r7, lr}
 800e0be:	b088      	sub	sp, #32
 800e0c0:	af02      	add	r7, sp, #8
 800e0c2:	60f8      	str	r0, [r7, #12]
 800e0c4:	60b9      	str	r1, [r7, #8]
 800e0c6:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	330a      	adds	r3, #10
 800e0cc:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 800e0ce:	68fb      	ldr	r3, [r7, #12]
 800e0d0:	f8d3 03a0 	ldr.w	r0, [r3, #928]	; 0x3a0
 800e0d4:	68fb      	ldr	r3, [r7, #12]
 800e0d6:	f893 3398 	ldrb.w	r3, [r3, #920]	; 0x398
 800e0da:	f043 0301 	orr.w	r3, r3, #1
 800e0de:	b2db      	uxtb	r3, r3
 800e0e0:	b299      	uxth	r1, r3
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	b29a      	uxth	r2, r3
 800e0e6:	697b      	ldr	r3, [r7, #20]
 800e0e8:	9300      	str	r3, [sp, #0]
 800e0ea:	4613      	mov	r3, r2
 800e0ec:	68ba      	ldr	r2, [r7, #8]
 800e0ee:	f7f5 fc9b 	bl	8003a28 <HAL_I2C_Master_Receive>
 800e0f2:	4603      	mov	r3, r0
 800e0f4:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 800e0f6:	693b      	ldr	r3, [r7, #16]
}
 800e0f8:	4618      	mov	r0, r3
 800e0fa:	3718      	adds	r7, #24
 800e0fc:	46bd      	mov	sp, r7
 800e0fe:	bd80      	pop	{r7, pc}

0800e100 <VL53L1_WriteMulti>:

VL53L1_Error VL53L1_WriteMulti(VL53L1_DEV Dev, uint16_t index, uint8_t *pdata, uint32_t count) {
 800e100:	b580      	push	{r7, lr}
 800e102:	b086      	sub	sp, #24
 800e104:	af00      	add	r7, sp, #0
 800e106:	60f8      	str	r0, [r7, #12]
 800e108:	607a      	str	r2, [r7, #4]
 800e10a:	603b      	str	r3, [r7, #0]
 800e10c:	460b      	mov	r3, r1
 800e10e:	817b      	strh	r3, [r7, #10]
    int status_int;
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 800e110:	2300      	movs	r3, #0
 800e112:	75fb      	strb	r3, [r7, #23]
    if (count > sizeof(_I2CBuffer) - 1) {
 800e114:	683b      	ldr	r3, [r7, #0]
 800e116:	2bff      	cmp	r3, #255	; 0xff
 800e118:	d902      	bls.n	800e120 <VL53L1_WriteMulti+0x20>
        return VL53L1_ERROR_INVALID_PARAMS;
 800e11a:	f06f 0303 	mvn.w	r3, #3
 800e11e:	e01d      	b.n	800e15c <VL53L1_WriteMulti+0x5c>
    }
    _I2CBuffer[0] = index>>8;
 800e120:	897b      	ldrh	r3, [r7, #10]
 800e122:	0a1b      	lsrs	r3, r3, #8
 800e124:	b29b      	uxth	r3, r3
 800e126:	b2da      	uxtb	r2, r3
 800e128:	4b0e      	ldr	r3, [pc, #56]	; (800e164 <VL53L1_WriteMulti+0x64>)
 800e12a:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 800e12c:	897b      	ldrh	r3, [r7, #10]
 800e12e:	b2da      	uxtb	r2, r3
 800e130:	4b0c      	ldr	r3, [pc, #48]	; (800e164 <VL53L1_WriteMulti+0x64>)
 800e132:	705a      	strb	r2, [r3, #1]
    memcpy(&_I2CBuffer[2], pdata, count);
 800e134:	683a      	ldr	r2, [r7, #0]
 800e136:	6879      	ldr	r1, [r7, #4]
 800e138:	480b      	ldr	r0, [pc, #44]	; (800e168 <VL53L1_WriteMulti+0x68>)
 800e13a:	f000 fa27 	bl	800e58c <memcpy>
    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 2);
 800e13e:	683b      	ldr	r3, [r7, #0]
 800e140:	3302      	adds	r3, #2
 800e142:	461a      	mov	r2, r3
 800e144:	4907      	ldr	r1, [pc, #28]	; (800e164 <VL53L1_WriteMulti+0x64>)
 800e146:	68f8      	ldr	r0, [r7, #12]
 800e148:	f7ff ff99 	bl	800e07e <_I2CWrite>
 800e14c:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800e14e:	693b      	ldr	r3, [r7, #16]
 800e150:	2b00      	cmp	r3, #0
 800e152:	d001      	beq.n	800e158 <VL53L1_WriteMulti+0x58>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 800e154:	23f3      	movs	r3, #243	; 0xf3
 800e156:	75fb      	strb	r3, [r7, #23]
    }
    VL53L1_PutI2cBus();
    return Status;
 800e158:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e15c:	4618      	mov	r0, r3
 800e15e:	3718      	adds	r7, #24
 800e160:	46bd      	mov	sp, r7
 800e162:	bd80      	pop	{r7, pc}
 800e164:	20000e40 	.word	0x20000e40
 800e168:	20000e42 	.word	0x20000e42

0800e16c <VL53L1_ReadMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L1_Error VL53L1_ReadMulti(VL53L1_DEV Dev, uint16_t index, uint8_t *pdata, uint32_t count) {
 800e16c:	b580      	push	{r7, lr}
 800e16e:	b086      	sub	sp, #24
 800e170:	af00      	add	r7, sp, #0
 800e172:	60f8      	str	r0, [r7, #12]
 800e174:	607a      	str	r2, [r7, #4]
 800e176:	603b      	str	r3, [r7, #0]
 800e178:	460b      	mov	r3, r1
 800e17a:	817b      	strh	r3, [r7, #10]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 800e17c:	2300      	movs	r3, #0
 800e17e:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 800e180:	897b      	ldrh	r3, [r7, #10]
 800e182:	0a1b      	lsrs	r3, r3, #8
 800e184:	b29b      	uxth	r3, r3
 800e186:	b2da      	uxtb	r2, r3
 800e188:	4b12      	ldr	r3, [pc, #72]	; (800e1d4 <VL53L1_ReadMulti+0x68>)
 800e18a:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 800e18c:	897b      	ldrh	r3, [r7, #10]
 800e18e:	b2da      	uxtb	r2, r3
 800e190:	4b10      	ldr	r3, [pc, #64]	; (800e1d4 <VL53L1_ReadMulti+0x68>)
 800e192:	705a      	strb	r2, [r3, #1]
    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 800e194:	2202      	movs	r2, #2
 800e196:	490f      	ldr	r1, [pc, #60]	; (800e1d4 <VL53L1_ReadMulti+0x68>)
 800e198:	68f8      	ldr	r0, [r7, #12]
 800e19a:	f7ff ff70 	bl	800e07e <_I2CWrite>
 800e19e:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800e1a0:	693b      	ldr	r3, [r7, #16]
 800e1a2:	2b00      	cmp	r3, #0
 800e1a4:	d002      	beq.n	800e1ac <VL53L1_ReadMulti+0x40>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 800e1a6:	23f3      	movs	r3, #243	; 0xf3
 800e1a8:	75fb      	strb	r3, [r7, #23]
        goto done;
 800e1aa:	e00c      	b.n	800e1c6 <VL53L1_ReadMulti+0x5a>
    }
    status_int = _I2CRead(Dev, pdata, count);
 800e1ac:	683a      	ldr	r2, [r7, #0]
 800e1ae:	6879      	ldr	r1, [r7, #4]
 800e1b0:	68f8      	ldr	r0, [r7, #12]
 800e1b2:	f7ff ff83 	bl	800e0bc <_I2CRead>
 800e1b6:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800e1b8:	693b      	ldr	r3, [r7, #16]
 800e1ba:	2b00      	cmp	r3, #0
 800e1bc:	d002      	beq.n	800e1c4 <VL53L1_ReadMulti+0x58>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 800e1be:	23f3      	movs	r3, #243	; 0xf3
 800e1c0:	75fb      	strb	r3, [r7, #23]
 800e1c2:	e000      	b.n	800e1c6 <VL53L1_ReadMulti+0x5a>
    }
done:
 800e1c4:	bf00      	nop
    VL53L1_PutI2cBus();
    return Status;
 800e1c6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e1ca:	4618      	mov	r0, r3
 800e1cc:	3718      	adds	r7, #24
 800e1ce:	46bd      	mov	sp, r7
 800e1d0:	bd80      	pop	{r7, pc}
 800e1d2:	bf00      	nop
 800e1d4:	20000e40 	.word	0x20000e40

0800e1d8 <VL53L1_WrByte>:

VL53L1_Error VL53L1_WrByte(VL53L1_DEV Dev, uint16_t index, uint8_t data) {
 800e1d8:	b580      	push	{r7, lr}
 800e1da:	b084      	sub	sp, #16
 800e1dc:	af00      	add	r7, sp, #0
 800e1de:	6078      	str	r0, [r7, #4]
 800e1e0:	460b      	mov	r3, r1
 800e1e2:	807b      	strh	r3, [r7, #2]
 800e1e4:	4613      	mov	r3, r2
 800e1e6:	707b      	strb	r3, [r7, #1]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 800e1e8:	2300      	movs	r3, #0
 800e1ea:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 800e1ec:	887b      	ldrh	r3, [r7, #2]
 800e1ee:	0a1b      	lsrs	r3, r3, #8
 800e1f0:	b29b      	uxth	r3, r3
 800e1f2:	b2da      	uxtb	r2, r3
 800e1f4:	4b0c      	ldr	r3, [pc, #48]	; (800e228 <VL53L1_WrByte+0x50>)
 800e1f6:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 800e1f8:	887b      	ldrh	r3, [r7, #2]
 800e1fa:	b2da      	uxtb	r2, r3
 800e1fc:	4b0a      	ldr	r3, [pc, #40]	; (800e228 <VL53L1_WrByte+0x50>)
 800e1fe:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data;
 800e200:	4a09      	ldr	r2, [pc, #36]	; (800e228 <VL53L1_WrByte+0x50>)
 800e202:	787b      	ldrb	r3, [r7, #1]
 800e204:	7093      	strb	r3, [r2, #2]

    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 800e206:	2203      	movs	r2, #3
 800e208:	4907      	ldr	r1, [pc, #28]	; (800e228 <VL53L1_WrByte+0x50>)
 800e20a:	6878      	ldr	r0, [r7, #4]
 800e20c:	f7ff ff37 	bl	800e07e <_I2CWrite>
 800e210:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 800e212:	68bb      	ldr	r3, [r7, #8]
 800e214:	2b00      	cmp	r3, #0
 800e216:	d001      	beq.n	800e21c <VL53L1_WrByte+0x44>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 800e218:	23f3      	movs	r3, #243	; 0xf3
 800e21a:	73fb      	strb	r3, [r7, #15]
    }
    VL53L1_PutI2cBus();
    return Status;
 800e21c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e220:	4618      	mov	r0, r3
 800e222:	3710      	adds	r7, #16
 800e224:	46bd      	mov	sp, r7
 800e226:	bd80      	pop	{r7, pc}
 800e228:	20000e40 	.word	0x20000e40

0800e22c <VL53L1_WrWord>:

VL53L1_Error VL53L1_WrWord(VL53L1_DEV Dev, uint16_t index, uint16_t data) {
 800e22c:	b580      	push	{r7, lr}
 800e22e:	b084      	sub	sp, #16
 800e230:	af00      	add	r7, sp, #0
 800e232:	6078      	str	r0, [r7, #4]
 800e234:	460b      	mov	r3, r1
 800e236:	807b      	strh	r3, [r7, #2]
 800e238:	4613      	mov	r3, r2
 800e23a:	803b      	strh	r3, [r7, #0]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 800e23c:	2300      	movs	r3, #0
 800e23e:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 800e240:	887b      	ldrh	r3, [r7, #2]
 800e242:	0a1b      	lsrs	r3, r3, #8
 800e244:	b29b      	uxth	r3, r3
 800e246:	b2da      	uxtb	r2, r3
 800e248:	4b10      	ldr	r3, [pc, #64]	; (800e28c <VL53L1_WrWord+0x60>)
 800e24a:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 800e24c:	887b      	ldrh	r3, [r7, #2]
 800e24e:	b2da      	uxtb	r2, r3
 800e250:	4b0e      	ldr	r3, [pc, #56]	; (800e28c <VL53L1_WrWord+0x60>)
 800e252:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data >> 8;
 800e254:	883b      	ldrh	r3, [r7, #0]
 800e256:	0a1b      	lsrs	r3, r3, #8
 800e258:	b29b      	uxth	r3, r3
 800e25a:	b2da      	uxtb	r2, r3
 800e25c:	4b0b      	ldr	r3, [pc, #44]	; (800e28c <VL53L1_WrWord+0x60>)
 800e25e:	709a      	strb	r2, [r3, #2]
    _I2CBuffer[3] = data & 0x00FF;
 800e260:	883b      	ldrh	r3, [r7, #0]
 800e262:	b2da      	uxtb	r2, r3
 800e264:	4b09      	ldr	r3, [pc, #36]	; (800e28c <VL53L1_WrWord+0x60>)
 800e266:	70da      	strb	r2, [r3, #3]

    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 4);
 800e268:	2204      	movs	r2, #4
 800e26a:	4908      	ldr	r1, [pc, #32]	; (800e28c <VL53L1_WrWord+0x60>)
 800e26c:	6878      	ldr	r0, [r7, #4]
 800e26e:	f7ff ff06 	bl	800e07e <_I2CWrite>
 800e272:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 800e274:	68bb      	ldr	r3, [r7, #8]
 800e276:	2b00      	cmp	r3, #0
 800e278:	d001      	beq.n	800e27e <VL53L1_WrWord+0x52>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 800e27a:	23f3      	movs	r3, #243	; 0xf3
 800e27c:	73fb      	strb	r3, [r7, #15]
    }
    VL53L1_PutI2cBus();
    return Status;
 800e27e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e282:	4618      	mov	r0, r3
 800e284:	3710      	adds	r7, #16
 800e286:	46bd      	mov	sp, r7
 800e288:	bd80      	pop	{r7, pc}
 800e28a:	bf00      	nop
 800e28c:	20000e40 	.word	0x20000e40

0800e290 <VL53L1_RdByte>:
    Status = VL53L1_WrByte(Dev, index, data);
done:
    return Status;
}

VL53L1_Error VL53L1_RdByte(VL53L1_DEV Dev, uint16_t index, uint8_t *data) {
 800e290:	b580      	push	{r7, lr}
 800e292:	b086      	sub	sp, #24
 800e294:	af00      	add	r7, sp, #0
 800e296:	60f8      	str	r0, [r7, #12]
 800e298:	460b      	mov	r3, r1
 800e29a:	607a      	str	r2, [r7, #4]
 800e29c:	817b      	strh	r3, [r7, #10]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 800e29e:	2300      	movs	r3, #0
 800e2a0:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

	_I2CBuffer[0] = index>>8;
 800e2a2:	897b      	ldrh	r3, [r7, #10]
 800e2a4:	0a1b      	lsrs	r3, r3, #8
 800e2a6:	b29b      	uxth	r3, r3
 800e2a8:	b2da      	uxtb	r2, r3
 800e2aa:	4b12      	ldr	r3, [pc, #72]	; (800e2f4 <VL53L1_RdByte+0x64>)
 800e2ac:	701a      	strb	r2, [r3, #0]
	_I2CBuffer[1] = index&0xFF;
 800e2ae:	897b      	ldrh	r3, [r7, #10]
 800e2b0:	b2da      	uxtb	r2, r3
 800e2b2:	4b10      	ldr	r3, [pc, #64]	; (800e2f4 <VL53L1_RdByte+0x64>)
 800e2b4:	705a      	strb	r2, [r3, #1]
    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 800e2b6:	2202      	movs	r2, #2
 800e2b8:	490e      	ldr	r1, [pc, #56]	; (800e2f4 <VL53L1_RdByte+0x64>)
 800e2ba:	68f8      	ldr	r0, [r7, #12]
 800e2bc:	f7ff fedf 	bl	800e07e <_I2CWrite>
 800e2c0:	6138      	str	r0, [r7, #16]
    if( status_int ){
 800e2c2:	693b      	ldr	r3, [r7, #16]
 800e2c4:	2b00      	cmp	r3, #0
 800e2c6:	d002      	beq.n	800e2ce <VL53L1_RdByte+0x3e>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 800e2c8:	23f3      	movs	r3, #243	; 0xf3
 800e2ca:	75fb      	strb	r3, [r7, #23]
        goto done;
 800e2cc:	e00c      	b.n	800e2e8 <VL53L1_RdByte+0x58>
    }
    status_int = _I2CRead(Dev, data, 1);
 800e2ce:	2201      	movs	r2, #1
 800e2d0:	6879      	ldr	r1, [r7, #4]
 800e2d2:	68f8      	ldr	r0, [r7, #12]
 800e2d4:	f7ff fef2 	bl	800e0bc <_I2CRead>
 800e2d8:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800e2da:	693b      	ldr	r3, [r7, #16]
 800e2dc:	2b00      	cmp	r3, #0
 800e2de:	d002      	beq.n	800e2e6 <VL53L1_RdByte+0x56>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 800e2e0:	23f3      	movs	r3, #243	; 0xf3
 800e2e2:	75fb      	strb	r3, [r7, #23]
 800e2e4:	e000      	b.n	800e2e8 <VL53L1_RdByte+0x58>
    }
done:
 800e2e6:	bf00      	nop
    VL53L1_PutI2cBus();
    return Status;
 800e2e8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e2ec:	4618      	mov	r0, r3
 800e2ee:	3718      	adds	r7, #24
 800e2f0:	46bd      	mov	sp, r7
 800e2f2:	bd80      	pop	{r7, pc}
 800e2f4:	20000e40 	.word	0x20000e40

0800e2f8 <VL53L1_RdWord>:

VL53L1_Error VL53L1_RdWord(VL53L1_DEV Dev, uint16_t index, uint16_t *data) {
 800e2f8:	b580      	push	{r7, lr}
 800e2fa:	b086      	sub	sp, #24
 800e2fc:	af00      	add	r7, sp, #0
 800e2fe:	60f8      	str	r0, [r7, #12]
 800e300:	460b      	mov	r3, r1
 800e302:	607a      	str	r2, [r7, #4]
 800e304:	817b      	strh	r3, [r7, #10]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 800e306:	2300      	movs	r3, #0
 800e308:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 800e30a:	897b      	ldrh	r3, [r7, #10]
 800e30c:	0a1b      	lsrs	r3, r3, #8
 800e30e:	b29b      	uxth	r3, r3
 800e310:	b2da      	uxtb	r2, r3
 800e312:	4b18      	ldr	r3, [pc, #96]	; (800e374 <VL53L1_RdWord+0x7c>)
 800e314:	701a      	strb	r2, [r3, #0]
	_I2CBuffer[1] = index&0xFF;
 800e316:	897b      	ldrh	r3, [r7, #10]
 800e318:	b2da      	uxtb	r2, r3
 800e31a:	4b16      	ldr	r3, [pc, #88]	; (800e374 <VL53L1_RdWord+0x7c>)
 800e31c:	705a      	strb	r2, [r3, #1]
    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 800e31e:	2202      	movs	r2, #2
 800e320:	4914      	ldr	r1, [pc, #80]	; (800e374 <VL53L1_RdWord+0x7c>)
 800e322:	68f8      	ldr	r0, [r7, #12]
 800e324:	f7ff feab 	bl	800e07e <_I2CWrite>
 800e328:	6138      	str	r0, [r7, #16]

    if( status_int ){
 800e32a:	693b      	ldr	r3, [r7, #16]
 800e32c:	2b00      	cmp	r3, #0
 800e32e:	d002      	beq.n	800e336 <VL53L1_RdWord+0x3e>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 800e330:	23f3      	movs	r3, #243	; 0xf3
 800e332:	75fb      	strb	r3, [r7, #23]
        goto done;
 800e334:	e017      	b.n	800e366 <VL53L1_RdWord+0x6e>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 800e336:	2202      	movs	r2, #2
 800e338:	490e      	ldr	r1, [pc, #56]	; (800e374 <VL53L1_RdWord+0x7c>)
 800e33a:	68f8      	ldr	r0, [r7, #12]
 800e33c:	f7ff febe 	bl	800e0bc <_I2CRead>
 800e340:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800e342:	693b      	ldr	r3, [r7, #16]
 800e344:	2b00      	cmp	r3, #0
 800e346:	d002      	beq.n	800e34e <VL53L1_RdWord+0x56>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 800e348:	23f3      	movs	r3, #243	; 0xf3
 800e34a:	75fb      	strb	r3, [r7, #23]
        goto done;
 800e34c:	e00b      	b.n	800e366 <VL53L1_RdWord+0x6e>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 800e34e:	4b09      	ldr	r3, [pc, #36]	; (800e374 <VL53L1_RdWord+0x7c>)
 800e350:	781b      	ldrb	r3, [r3, #0]
 800e352:	b29b      	uxth	r3, r3
 800e354:	021b      	lsls	r3, r3, #8
 800e356:	b29a      	uxth	r2, r3
 800e358:	4b06      	ldr	r3, [pc, #24]	; (800e374 <VL53L1_RdWord+0x7c>)
 800e35a:	785b      	ldrb	r3, [r3, #1]
 800e35c:	b29b      	uxth	r3, r3
 800e35e:	4413      	add	r3, r2
 800e360:	b29a      	uxth	r2, r3
 800e362:	687b      	ldr	r3, [r7, #4]
 800e364:	801a      	strh	r2, [r3, #0]
done:
    VL53L1_PutI2cBus();
    return Status;
 800e366:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e36a:	4618      	mov	r0, r3
 800e36c:	3718      	adds	r7, #24
 800e36e:	46bd      	mov	sp, r7
 800e370:	bd80      	pop	{r7, pc}
 800e372:	bf00      	nop
 800e374:	20000e40 	.word	0x20000e40

0800e378 <VL53L1_GetTickCount>:
    return Status;
}

VL53L1_Error VL53L1_GetTickCount(
	uint32_t *ptick_count_ms)
{
 800e378:	b480      	push	{r7}
 800e37a:	b085      	sub	sp, #20
 800e37c:	af00      	add	r7, sp, #0
 800e37e:	6078      	str	r0, [r7, #4]

    /* Returns current tick count in [ms] */

	VL53L1_Error status  = VL53L1_ERROR_NONE;
 800e380:	2300      	movs	r3, #0
 800e382:	73fb      	strb	r3, [r7, #15]

	//*ptick_count_ms = timeGetTime();
	*ptick_count_ms = 0;
 800e384:	687b      	ldr	r3, [r7, #4]
 800e386:	2200      	movs	r2, #0
 800e388:	601a      	str	r2, [r3, #0]
		VL53L1_TRACE_LEVEL_DEBUG,
		"VL53L1_GetTickCount() = %5u ms;\n",
	*ptick_count_ms);
#endif

	return status;
 800e38a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e38e:	4618      	mov	r0, r3
 800e390:	3714      	adds	r7, #20
 800e392:	46bd      	mov	sp, r7
 800e394:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e398:	4770      	bx	lr

0800e39a <VL53L1_WaitMs>:
	trace_print(VL53L1_TRACE_LEVEL_INFO, "VL53L1_GetTimerFrequency: Freq : %dHz\n", *ptimer_freq_hz);
	return VL53L1_ERROR_NONE;
}


VL53L1_Error VL53L1_WaitMs(VL53L1_Dev_t *pdev, int32_t wait_ms){
 800e39a:	b580      	push	{r7, lr}
 800e39c:	b082      	sub	sp, #8
 800e39e:	af00      	add	r7, sp, #0
 800e3a0:	6078      	str	r0, [r7, #4]
 800e3a2:	6039      	str	r1, [r7, #0]
	(void)pdev;
	HAL_Delay(wait_ms);
 800e3a4:	683b      	ldr	r3, [r7, #0]
 800e3a6:	4618      	mov	r0, r3
 800e3a8:	f7f4 f900 	bl	80025ac <HAL_Delay>
    return VL53L1_ERROR_NONE;
 800e3ac:	2300      	movs	r3, #0
}
 800e3ae:	4618      	mov	r0, r3
 800e3b0:	3708      	adds	r7, #8
 800e3b2:	46bd      	mov	sp, r7
 800e3b4:	bd80      	pop	{r7, pc}
	...

0800e3b8 <VL53L1_WaitUs>:

VL53L1_Error VL53L1_WaitUs(VL53L1_Dev_t *pdev, int32_t wait_us){
 800e3b8:	b580      	push	{r7, lr}
 800e3ba:	b082      	sub	sp, #8
 800e3bc:	af00      	add	r7, sp, #0
 800e3be:	6078      	str	r0, [r7, #4]
 800e3c0:	6039      	str	r1, [r7, #0]
	(void)pdev;
	HAL_Delay(wait_us/1000);
 800e3c2:	683b      	ldr	r3, [r7, #0]
 800e3c4:	4a06      	ldr	r2, [pc, #24]	; (800e3e0 <VL53L1_WaitUs+0x28>)
 800e3c6:	fb82 1203 	smull	r1, r2, r2, r3
 800e3ca:	1192      	asrs	r2, r2, #6
 800e3cc:	17db      	asrs	r3, r3, #31
 800e3ce:	1ad3      	subs	r3, r2, r3
 800e3d0:	4618      	mov	r0, r3
 800e3d2:	f7f4 f8eb 	bl	80025ac <HAL_Delay>
    return VL53L1_ERROR_NONE;
 800e3d6:	2300      	movs	r3, #0
}
 800e3d8:	4618      	mov	r0, r3
 800e3da:	3708      	adds	r7, #8
 800e3dc:	46bd      	mov	sp, r7
 800e3de:	bd80      	pop	{r7, pc}
 800e3e0:	10624dd3 	.word	0x10624dd3

0800e3e4 <VL53L1_WaitValueMaskEx>:
	uint32_t      timeout_ms,
	uint16_t      index,
	uint8_t       value,
	uint8_t       mask,
	uint32_t      poll_delay_ms)
{
 800e3e4:	b590      	push	{r4, r7, lr}
 800e3e6:	f5ad 7d0b 	sub.w	sp, sp, #556	; 0x22c
 800e3ea:	af00      	add	r7, sp, #0
 800e3ec:	f507 740a 	add.w	r4, r7, #552	; 0x228
 800e3f0:	f5a4 7407 	sub.w	r4, r4, #540	; 0x21c
 800e3f4:	6020      	str	r0, [r4, #0]
 800e3f6:	f507 700a 	add.w	r0, r7, #552	; 0x228
 800e3fa:	f5a0 7008 	sub.w	r0, r0, #544	; 0x220
 800e3fe:	6001      	str	r1, [r0, #0]
 800e400:	4619      	mov	r1, r3
 800e402:	f507 730a 	add.w	r3, r7, #552	; 0x228
 800e406:	f2a3 2322 	subw	r3, r3, #546	; 0x222
 800e40a:	801a      	strh	r2, [r3, #0]
 800e40c:	f507 730a 	add.w	r3, r7, #552	; 0x228
 800e410:	f2a3 2323 	subw	r3, r3, #547	; 0x223
 800e414:	460a      	mov	r2, r1
 800e416:	701a      	strb	r2, [r3, #0]
	 *          value,
	 *          mask,
	 *          poll_delay_ms);
	 */

	VL53L1_Error status         = VL53L1_ERROR_NONE;
 800e418:	2300      	movs	r3, #0
 800e41a:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227
	uint32_t     start_time_ms = 0;
 800e41e:	2300      	movs	r3, #0
 800e420:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
	uint32_t     current_time_ms = 0;
 800e424:	2300      	movs	r3, #0
 800e426:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
	uint32_t     polling_time_ms = 0;
 800e42a:	2300      	movs	r3, #0
 800e42c:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
	uint8_t      byte_value      = 0;
 800e430:	2300      	movs	r3, #0
 800e432:	f887 3213 	strb.w	r3, [r7, #531]	; 0x213
	uint8_t      found           = 0;
 800e436:	2300      	movs	r3, #0
 800e438:	f887 321f 	strb.w	r3, [r7, #543]	; 0x21f
#ifdef PAL_EXTENDED
	VL53L1_get_register_name(
			index,
			register_name);
#else
	VL53L1_COPYSTRING(register_name, "");
 800e43c:	f107 0310 	add.w	r3, r7, #16
 800e440:	f240 12ff 	movw	r2, #511	; 0x1ff
 800e444:	493b      	ldr	r1, [pc, #236]	; (800e534 <VL53L1_WaitValueMaskEx+0x150>)
 800e446:	4618      	mov	r0, r3
 800e448:	f000 fde5 	bl	800f016 <strncpy>
    trace_i2c("WaitValueMaskEx(%5d, %s, 0x%02X, 0x%02X, %5d);\n",
    		     timeout_ms, register_name, value, mask, poll_delay_ms);

	/* calculate time limit in absolute time */

	 VL53L1_GetTickCount(&start_time_ms);
 800e44c:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800e450:	4618      	mov	r0, r3
 800e452:	f7ff ff91 	bl	800e378 <VL53L1_GetTickCount>
	VL53L1_set_trace_functions(VL53L1_TRACE_FUNCTION_NONE);
#endif

	/* wait until value is found, timeout reached on error occurred */

	while ((status == VL53L1_ERROR_NONE) &&
 800e456:	e049      	b.n	800e4ec <VL53L1_WaitValueMaskEx+0x108>
		   (polling_time_ms < timeout_ms) &&
		   (found == 0)) {

		if (status == VL53L1_ERROR_NONE)
 800e458:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
 800e45c:	2b00      	cmp	r3, #0
 800e45e:	d110      	bne.n	800e482 <VL53L1_WaitValueMaskEx+0x9e>
			status = VL53L1_RdByte(
 800e460:	f207 2213 	addw	r2, r7, #531	; 0x213
 800e464:	f507 730a 	add.w	r3, r7, #552	; 0x228
 800e468:	f2a3 2322 	subw	r3, r3, #546	; 0x222
 800e46c:	8819      	ldrh	r1, [r3, #0]
 800e46e:	f507 730a 	add.w	r3, r7, #552	; 0x228
 800e472:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 800e476:	6818      	ldr	r0, [r3, #0]
 800e478:	f7ff ff0a 	bl	800e290 <VL53L1_RdByte>
 800e47c:	4603      	mov	r3, r0
 800e47e:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227
							pdev,
							index,
							&byte_value);

		if ((byte_value & mask) == value)
 800e482:	f897 2213 	ldrb.w	r2, [r7, #531]	; 0x213
 800e486:	f897 3238 	ldrb.w	r3, [r7, #568]	; 0x238
 800e48a:	4013      	ands	r3, r2
 800e48c:	b2db      	uxtb	r3, r3
 800e48e:	f507 720a 	add.w	r2, r7, #552	; 0x228
 800e492:	f2a2 2223 	subw	r2, r2, #547	; 0x223
 800e496:	7812      	ldrb	r2, [r2, #0]
 800e498:	429a      	cmp	r2, r3
 800e49a:	d102      	bne.n	800e4a2 <VL53L1_WaitValueMaskEx+0xbe>
			found = 1;
 800e49c:	2301      	movs	r3, #1
 800e49e:	f887 321f 	strb.w	r3, [r7, #543]	; 0x21f

		if (status == VL53L1_ERROR_NONE  &&
 800e4a2:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
 800e4a6:	2b00      	cmp	r3, #0
 800e4a8:	d114      	bne.n	800e4d4 <VL53L1_WaitValueMaskEx+0xf0>
 800e4aa:	f897 321f 	ldrb.w	r3, [r7, #543]	; 0x21f
 800e4ae:	2b00      	cmp	r3, #0
 800e4b0:	d110      	bne.n	800e4d4 <VL53L1_WaitValueMaskEx+0xf0>
			found == 0 &&
 800e4b2:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 800e4b6:	2b00      	cmp	r3, #0
 800e4b8:	d00c      	beq.n	800e4d4 <VL53L1_WaitValueMaskEx+0xf0>
			poll_delay_ms > 0)
			status = VL53L1_WaitMs(
 800e4ba:	f8d7 223c 	ldr.w	r2, [r7, #572]	; 0x23c
 800e4be:	f507 730a 	add.w	r3, r7, #552	; 0x228
 800e4c2:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 800e4c6:	4611      	mov	r1, r2
 800e4c8:	6818      	ldr	r0, [r3, #0]
 800e4ca:	f7ff ff66 	bl	800e39a <VL53L1_WaitMs>
 800e4ce:	4603      	mov	r3, r0
 800e4d0:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227
					pdev,
					poll_delay_ms);

		/* Update polling time (Compare difference rather than absolute to
		negate 32bit wrap around issue) */
		VL53L1_GetTickCount(&current_time_ms);
 800e4d4:	f507 7305 	add.w	r3, r7, #532	; 0x214
 800e4d8:	4618      	mov	r0, r3
 800e4da:	f7ff ff4d 	bl	800e378 <VL53L1_GetTickCount>
		polling_time_ms = current_time_ms - start_time_ms;
 800e4de:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 800e4e2:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 800e4e6:	1ad3      	subs	r3, r2, r3
 800e4e8:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
	while ((status == VL53L1_ERROR_NONE) &&
 800e4ec:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
 800e4f0:	2b00      	cmp	r3, #0
 800e4f2:	d10c      	bne.n	800e50e <VL53L1_WaitValueMaskEx+0x12a>
 800e4f4:	f507 730a 	add.w	r3, r7, #552	; 0x228
 800e4f8:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 800e4fc:	f8d7 2220 	ldr.w	r2, [r7, #544]	; 0x220
 800e500:	681b      	ldr	r3, [r3, #0]
 800e502:	429a      	cmp	r2, r3
 800e504:	d203      	bcs.n	800e50e <VL53L1_WaitValueMaskEx+0x12a>
		   (polling_time_ms < timeout_ms) &&
 800e506:	f897 321f 	ldrb.w	r3, [r7, #543]	; 0x21f
 800e50a:	2b00      	cmp	r3, #0
 800e50c:	d0a4      	beq.n	800e458 <VL53L1_WaitValueMaskEx+0x74>
#ifdef VL53L1_LOG_ENABLE
	/* Restore function logging */
	VL53L1_set_trace_functions(trace_functions);
#endif

	if (found == 0 && status == VL53L1_ERROR_NONE)
 800e50e:	f897 321f 	ldrb.w	r3, [r7, #543]	; 0x21f
 800e512:	2b00      	cmp	r3, #0
 800e514:	d106      	bne.n	800e524 <VL53L1_WaitValueMaskEx+0x140>
 800e516:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
 800e51a:	2b00      	cmp	r3, #0
 800e51c:	d102      	bne.n	800e524 <VL53L1_WaitValueMaskEx+0x140>
		status = VL53L1_ERROR_TIME_OUT;
 800e51e:	23f9      	movs	r3, #249	; 0xf9
 800e520:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227

	return status;
 800e524:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
}
 800e528:	4618      	mov	r0, r3
 800e52a:	f507 770b 	add.w	r7, r7, #556	; 0x22c
 800e52e:	46bd      	mov	sp, r7
 800e530:	bd90      	pop	{r4, r7, pc}
 800e532:	bf00      	nop
 800e534:	08013380 	.word	0x08013380

0800e538 <__errno>:
 800e538:	4b01      	ldr	r3, [pc, #4]	; (800e540 <__errno+0x8>)
 800e53a:	6818      	ldr	r0, [r3, #0]
 800e53c:	4770      	bx	lr
 800e53e:	bf00      	nop
 800e540:	20000050 	.word	0x20000050

0800e544 <__libc_init_array>:
 800e544:	b570      	push	{r4, r5, r6, lr}
 800e546:	4d0d      	ldr	r5, [pc, #52]	; (800e57c <__libc_init_array+0x38>)
 800e548:	4c0d      	ldr	r4, [pc, #52]	; (800e580 <__libc_init_array+0x3c>)
 800e54a:	1b64      	subs	r4, r4, r5
 800e54c:	10a4      	asrs	r4, r4, #2
 800e54e:	2600      	movs	r6, #0
 800e550:	42a6      	cmp	r6, r4
 800e552:	d109      	bne.n	800e568 <__libc_init_array+0x24>
 800e554:	4d0b      	ldr	r5, [pc, #44]	; (800e584 <__libc_init_array+0x40>)
 800e556:	4c0c      	ldr	r4, [pc, #48]	; (800e588 <__libc_init_array+0x44>)
 800e558:	f004 fc4c 	bl	8012df4 <_init>
 800e55c:	1b64      	subs	r4, r4, r5
 800e55e:	10a4      	asrs	r4, r4, #2
 800e560:	2600      	movs	r6, #0
 800e562:	42a6      	cmp	r6, r4
 800e564:	d105      	bne.n	800e572 <__libc_init_array+0x2e>
 800e566:	bd70      	pop	{r4, r5, r6, pc}
 800e568:	f855 3b04 	ldr.w	r3, [r5], #4
 800e56c:	4798      	blx	r3
 800e56e:	3601      	adds	r6, #1
 800e570:	e7ee      	b.n	800e550 <__libc_init_array+0xc>
 800e572:	f855 3b04 	ldr.w	r3, [r5], #4
 800e576:	4798      	blx	r3
 800e578:	3601      	adds	r6, #1
 800e57a:	e7f2      	b.n	800e562 <__libc_init_array+0x1e>
 800e57c:	080139b8 	.word	0x080139b8
 800e580:	080139b8 	.word	0x080139b8
 800e584:	080139b8 	.word	0x080139b8
 800e588:	080139bc 	.word	0x080139bc

0800e58c <memcpy>:
 800e58c:	440a      	add	r2, r1
 800e58e:	4291      	cmp	r1, r2
 800e590:	f100 33ff 	add.w	r3, r0, #4294967295
 800e594:	d100      	bne.n	800e598 <memcpy+0xc>
 800e596:	4770      	bx	lr
 800e598:	b510      	push	{r4, lr}
 800e59a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e59e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e5a2:	4291      	cmp	r1, r2
 800e5a4:	d1f9      	bne.n	800e59a <memcpy+0xe>
 800e5a6:	bd10      	pop	{r4, pc}

0800e5a8 <memset>:
 800e5a8:	4402      	add	r2, r0
 800e5aa:	4603      	mov	r3, r0
 800e5ac:	4293      	cmp	r3, r2
 800e5ae:	d100      	bne.n	800e5b2 <memset+0xa>
 800e5b0:	4770      	bx	lr
 800e5b2:	f803 1b01 	strb.w	r1, [r3], #1
 800e5b6:	e7f9      	b.n	800e5ac <memset+0x4>

0800e5b8 <__cvt>:
 800e5b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e5bc:	ec55 4b10 	vmov	r4, r5, d0
 800e5c0:	2d00      	cmp	r5, #0
 800e5c2:	460e      	mov	r6, r1
 800e5c4:	4619      	mov	r1, r3
 800e5c6:	462b      	mov	r3, r5
 800e5c8:	bfbb      	ittet	lt
 800e5ca:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800e5ce:	461d      	movlt	r5, r3
 800e5d0:	2300      	movge	r3, #0
 800e5d2:	232d      	movlt	r3, #45	; 0x2d
 800e5d4:	700b      	strb	r3, [r1, #0]
 800e5d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e5d8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800e5dc:	4691      	mov	r9, r2
 800e5de:	f023 0820 	bic.w	r8, r3, #32
 800e5e2:	bfbc      	itt	lt
 800e5e4:	4622      	movlt	r2, r4
 800e5e6:	4614      	movlt	r4, r2
 800e5e8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800e5ec:	d005      	beq.n	800e5fa <__cvt+0x42>
 800e5ee:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800e5f2:	d100      	bne.n	800e5f6 <__cvt+0x3e>
 800e5f4:	3601      	adds	r6, #1
 800e5f6:	2102      	movs	r1, #2
 800e5f8:	e000      	b.n	800e5fc <__cvt+0x44>
 800e5fa:	2103      	movs	r1, #3
 800e5fc:	ab03      	add	r3, sp, #12
 800e5fe:	9301      	str	r3, [sp, #4]
 800e600:	ab02      	add	r3, sp, #8
 800e602:	9300      	str	r3, [sp, #0]
 800e604:	ec45 4b10 	vmov	d0, r4, r5
 800e608:	4653      	mov	r3, sl
 800e60a:	4632      	mov	r2, r6
 800e60c:	f000 fdc4 	bl	800f198 <_dtoa_r>
 800e610:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800e614:	4607      	mov	r7, r0
 800e616:	d102      	bne.n	800e61e <__cvt+0x66>
 800e618:	f019 0f01 	tst.w	r9, #1
 800e61c:	d022      	beq.n	800e664 <__cvt+0xac>
 800e61e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800e622:	eb07 0906 	add.w	r9, r7, r6
 800e626:	d110      	bne.n	800e64a <__cvt+0x92>
 800e628:	783b      	ldrb	r3, [r7, #0]
 800e62a:	2b30      	cmp	r3, #48	; 0x30
 800e62c:	d10a      	bne.n	800e644 <__cvt+0x8c>
 800e62e:	2200      	movs	r2, #0
 800e630:	2300      	movs	r3, #0
 800e632:	4620      	mov	r0, r4
 800e634:	4629      	mov	r1, r5
 800e636:	f7f2 fa47 	bl	8000ac8 <__aeabi_dcmpeq>
 800e63a:	b918      	cbnz	r0, 800e644 <__cvt+0x8c>
 800e63c:	f1c6 0601 	rsb	r6, r6, #1
 800e640:	f8ca 6000 	str.w	r6, [sl]
 800e644:	f8da 3000 	ldr.w	r3, [sl]
 800e648:	4499      	add	r9, r3
 800e64a:	2200      	movs	r2, #0
 800e64c:	2300      	movs	r3, #0
 800e64e:	4620      	mov	r0, r4
 800e650:	4629      	mov	r1, r5
 800e652:	f7f2 fa39 	bl	8000ac8 <__aeabi_dcmpeq>
 800e656:	b108      	cbz	r0, 800e65c <__cvt+0xa4>
 800e658:	f8cd 900c 	str.w	r9, [sp, #12]
 800e65c:	2230      	movs	r2, #48	; 0x30
 800e65e:	9b03      	ldr	r3, [sp, #12]
 800e660:	454b      	cmp	r3, r9
 800e662:	d307      	bcc.n	800e674 <__cvt+0xbc>
 800e664:	9b03      	ldr	r3, [sp, #12]
 800e666:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e668:	1bdb      	subs	r3, r3, r7
 800e66a:	4638      	mov	r0, r7
 800e66c:	6013      	str	r3, [r2, #0]
 800e66e:	b004      	add	sp, #16
 800e670:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e674:	1c59      	adds	r1, r3, #1
 800e676:	9103      	str	r1, [sp, #12]
 800e678:	701a      	strb	r2, [r3, #0]
 800e67a:	e7f0      	b.n	800e65e <__cvt+0xa6>

0800e67c <__exponent>:
 800e67c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e67e:	4603      	mov	r3, r0
 800e680:	2900      	cmp	r1, #0
 800e682:	bfb8      	it	lt
 800e684:	4249      	neglt	r1, r1
 800e686:	f803 2b02 	strb.w	r2, [r3], #2
 800e68a:	bfb4      	ite	lt
 800e68c:	222d      	movlt	r2, #45	; 0x2d
 800e68e:	222b      	movge	r2, #43	; 0x2b
 800e690:	2909      	cmp	r1, #9
 800e692:	7042      	strb	r2, [r0, #1]
 800e694:	dd2a      	ble.n	800e6ec <__exponent+0x70>
 800e696:	f10d 0407 	add.w	r4, sp, #7
 800e69a:	46a4      	mov	ip, r4
 800e69c:	270a      	movs	r7, #10
 800e69e:	46a6      	mov	lr, r4
 800e6a0:	460a      	mov	r2, r1
 800e6a2:	fb91 f6f7 	sdiv	r6, r1, r7
 800e6a6:	fb07 1516 	mls	r5, r7, r6, r1
 800e6aa:	3530      	adds	r5, #48	; 0x30
 800e6ac:	2a63      	cmp	r2, #99	; 0x63
 800e6ae:	f104 34ff 	add.w	r4, r4, #4294967295
 800e6b2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800e6b6:	4631      	mov	r1, r6
 800e6b8:	dcf1      	bgt.n	800e69e <__exponent+0x22>
 800e6ba:	3130      	adds	r1, #48	; 0x30
 800e6bc:	f1ae 0502 	sub.w	r5, lr, #2
 800e6c0:	f804 1c01 	strb.w	r1, [r4, #-1]
 800e6c4:	1c44      	adds	r4, r0, #1
 800e6c6:	4629      	mov	r1, r5
 800e6c8:	4561      	cmp	r1, ip
 800e6ca:	d30a      	bcc.n	800e6e2 <__exponent+0x66>
 800e6cc:	f10d 0209 	add.w	r2, sp, #9
 800e6d0:	eba2 020e 	sub.w	r2, r2, lr
 800e6d4:	4565      	cmp	r5, ip
 800e6d6:	bf88      	it	hi
 800e6d8:	2200      	movhi	r2, #0
 800e6da:	4413      	add	r3, r2
 800e6dc:	1a18      	subs	r0, r3, r0
 800e6de:	b003      	add	sp, #12
 800e6e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e6e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e6e6:	f804 2f01 	strb.w	r2, [r4, #1]!
 800e6ea:	e7ed      	b.n	800e6c8 <__exponent+0x4c>
 800e6ec:	2330      	movs	r3, #48	; 0x30
 800e6ee:	3130      	adds	r1, #48	; 0x30
 800e6f0:	7083      	strb	r3, [r0, #2]
 800e6f2:	70c1      	strb	r1, [r0, #3]
 800e6f4:	1d03      	adds	r3, r0, #4
 800e6f6:	e7f1      	b.n	800e6dc <__exponent+0x60>

0800e6f8 <_printf_float>:
 800e6f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e6fc:	ed2d 8b02 	vpush	{d8}
 800e700:	b08d      	sub	sp, #52	; 0x34
 800e702:	460c      	mov	r4, r1
 800e704:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800e708:	4616      	mov	r6, r2
 800e70a:	461f      	mov	r7, r3
 800e70c:	4605      	mov	r5, r0
 800e70e:	f001 fb31 	bl	800fd74 <_localeconv_r>
 800e712:	f8d0 a000 	ldr.w	sl, [r0]
 800e716:	4650      	mov	r0, sl
 800e718:	f7f1 fd5a 	bl	80001d0 <strlen>
 800e71c:	2300      	movs	r3, #0
 800e71e:	930a      	str	r3, [sp, #40]	; 0x28
 800e720:	6823      	ldr	r3, [r4, #0]
 800e722:	9305      	str	r3, [sp, #20]
 800e724:	f8d8 3000 	ldr.w	r3, [r8]
 800e728:	f894 b018 	ldrb.w	fp, [r4, #24]
 800e72c:	3307      	adds	r3, #7
 800e72e:	f023 0307 	bic.w	r3, r3, #7
 800e732:	f103 0208 	add.w	r2, r3, #8
 800e736:	f8c8 2000 	str.w	r2, [r8]
 800e73a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e73e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800e742:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800e746:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800e74a:	9307      	str	r3, [sp, #28]
 800e74c:	f8cd 8018 	str.w	r8, [sp, #24]
 800e750:	ee08 0a10 	vmov	s16, r0
 800e754:	4b9f      	ldr	r3, [pc, #636]	; (800e9d4 <_printf_float+0x2dc>)
 800e756:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e75a:	f04f 32ff 	mov.w	r2, #4294967295
 800e75e:	f7f2 f9e5 	bl	8000b2c <__aeabi_dcmpun>
 800e762:	bb88      	cbnz	r0, 800e7c8 <_printf_float+0xd0>
 800e764:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e768:	4b9a      	ldr	r3, [pc, #616]	; (800e9d4 <_printf_float+0x2dc>)
 800e76a:	f04f 32ff 	mov.w	r2, #4294967295
 800e76e:	f7f2 f9bf 	bl	8000af0 <__aeabi_dcmple>
 800e772:	bb48      	cbnz	r0, 800e7c8 <_printf_float+0xd0>
 800e774:	2200      	movs	r2, #0
 800e776:	2300      	movs	r3, #0
 800e778:	4640      	mov	r0, r8
 800e77a:	4649      	mov	r1, r9
 800e77c:	f7f2 f9ae 	bl	8000adc <__aeabi_dcmplt>
 800e780:	b110      	cbz	r0, 800e788 <_printf_float+0x90>
 800e782:	232d      	movs	r3, #45	; 0x2d
 800e784:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e788:	4b93      	ldr	r3, [pc, #588]	; (800e9d8 <_printf_float+0x2e0>)
 800e78a:	4894      	ldr	r0, [pc, #592]	; (800e9dc <_printf_float+0x2e4>)
 800e78c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800e790:	bf94      	ite	ls
 800e792:	4698      	movls	r8, r3
 800e794:	4680      	movhi	r8, r0
 800e796:	2303      	movs	r3, #3
 800e798:	6123      	str	r3, [r4, #16]
 800e79a:	9b05      	ldr	r3, [sp, #20]
 800e79c:	f023 0204 	bic.w	r2, r3, #4
 800e7a0:	6022      	str	r2, [r4, #0]
 800e7a2:	f04f 0900 	mov.w	r9, #0
 800e7a6:	9700      	str	r7, [sp, #0]
 800e7a8:	4633      	mov	r3, r6
 800e7aa:	aa0b      	add	r2, sp, #44	; 0x2c
 800e7ac:	4621      	mov	r1, r4
 800e7ae:	4628      	mov	r0, r5
 800e7b0:	f000 f9d8 	bl	800eb64 <_printf_common>
 800e7b4:	3001      	adds	r0, #1
 800e7b6:	f040 8090 	bne.w	800e8da <_printf_float+0x1e2>
 800e7ba:	f04f 30ff 	mov.w	r0, #4294967295
 800e7be:	b00d      	add	sp, #52	; 0x34
 800e7c0:	ecbd 8b02 	vpop	{d8}
 800e7c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e7c8:	4642      	mov	r2, r8
 800e7ca:	464b      	mov	r3, r9
 800e7cc:	4640      	mov	r0, r8
 800e7ce:	4649      	mov	r1, r9
 800e7d0:	f7f2 f9ac 	bl	8000b2c <__aeabi_dcmpun>
 800e7d4:	b140      	cbz	r0, 800e7e8 <_printf_float+0xf0>
 800e7d6:	464b      	mov	r3, r9
 800e7d8:	2b00      	cmp	r3, #0
 800e7da:	bfbc      	itt	lt
 800e7dc:	232d      	movlt	r3, #45	; 0x2d
 800e7de:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800e7e2:	487f      	ldr	r0, [pc, #508]	; (800e9e0 <_printf_float+0x2e8>)
 800e7e4:	4b7f      	ldr	r3, [pc, #508]	; (800e9e4 <_printf_float+0x2ec>)
 800e7e6:	e7d1      	b.n	800e78c <_printf_float+0x94>
 800e7e8:	6863      	ldr	r3, [r4, #4]
 800e7ea:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800e7ee:	9206      	str	r2, [sp, #24]
 800e7f0:	1c5a      	adds	r2, r3, #1
 800e7f2:	d13f      	bne.n	800e874 <_printf_float+0x17c>
 800e7f4:	2306      	movs	r3, #6
 800e7f6:	6063      	str	r3, [r4, #4]
 800e7f8:	9b05      	ldr	r3, [sp, #20]
 800e7fa:	6861      	ldr	r1, [r4, #4]
 800e7fc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800e800:	2300      	movs	r3, #0
 800e802:	9303      	str	r3, [sp, #12]
 800e804:	ab0a      	add	r3, sp, #40	; 0x28
 800e806:	e9cd b301 	strd	fp, r3, [sp, #4]
 800e80a:	ab09      	add	r3, sp, #36	; 0x24
 800e80c:	ec49 8b10 	vmov	d0, r8, r9
 800e810:	9300      	str	r3, [sp, #0]
 800e812:	6022      	str	r2, [r4, #0]
 800e814:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800e818:	4628      	mov	r0, r5
 800e81a:	f7ff fecd 	bl	800e5b8 <__cvt>
 800e81e:	9b06      	ldr	r3, [sp, #24]
 800e820:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e822:	2b47      	cmp	r3, #71	; 0x47
 800e824:	4680      	mov	r8, r0
 800e826:	d108      	bne.n	800e83a <_printf_float+0x142>
 800e828:	1cc8      	adds	r0, r1, #3
 800e82a:	db02      	blt.n	800e832 <_printf_float+0x13a>
 800e82c:	6863      	ldr	r3, [r4, #4]
 800e82e:	4299      	cmp	r1, r3
 800e830:	dd41      	ble.n	800e8b6 <_printf_float+0x1be>
 800e832:	f1ab 0b02 	sub.w	fp, fp, #2
 800e836:	fa5f fb8b 	uxtb.w	fp, fp
 800e83a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800e83e:	d820      	bhi.n	800e882 <_printf_float+0x18a>
 800e840:	3901      	subs	r1, #1
 800e842:	465a      	mov	r2, fp
 800e844:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800e848:	9109      	str	r1, [sp, #36]	; 0x24
 800e84a:	f7ff ff17 	bl	800e67c <__exponent>
 800e84e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e850:	1813      	adds	r3, r2, r0
 800e852:	2a01      	cmp	r2, #1
 800e854:	4681      	mov	r9, r0
 800e856:	6123      	str	r3, [r4, #16]
 800e858:	dc02      	bgt.n	800e860 <_printf_float+0x168>
 800e85a:	6822      	ldr	r2, [r4, #0]
 800e85c:	07d2      	lsls	r2, r2, #31
 800e85e:	d501      	bpl.n	800e864 <_printf_float+0x16c>
 800e860:	3301      	adds	r3, #1
 800e862:	6123      	str	r3, [r4, #16]
 800e864:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800e868:	2b00      	cmp	r3, #0
 800e86a:	d09c      	beq.n	800e7a6 <_printf_float+0xae>
 800e86c:	232d      	movs	r3, #45	; 0x2d
 800e86e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e872:	e798      	b.n	800e7a6 <_printf_float+0xae>
 800e874:	9a06      	ldr	r2, [sp, #24]
 800e876:	2a47      	cmp	r2, #71	; 0x47
 800e878:	d1be      	bne.n	800e7f8 <_printf_float+0x100>
 800e87a:	2b00      	cmp	r3, #0
 800e87c:	d1bc      	bne.n	800e7f8 <_printf_float+0x100>
 800e87e:	2301      	movs	r3, #1
 800e880:	e7b9      	b.n	800e7f6 <_printf_float+0xfe>
 800e882:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800e886:	d118      	bne.n	800e8ba <_printf_float+0x1c2>
 800e888:	2900      	cmp	r1, #0
 800e88a:	6863      	ldr	r3, [r4, #4]
 800e88c:	dd0b      	ble.n	800e8a6 <_printf_float+0x1ae>
 800e88e:	6121      	str	r1, [r4, #16]
 800e890:	b913      	cbnz	r3, 800e898 <_printf_float+0x1a0>
 800e892:	6822      	ldr	r2, [r4, #0]
 800e894:	07d0      	lsls	r0, r2, #31
 800e896:	d502      	bpl.n	800e89e <_printf_float+0x1a6>
 800e898:	3301      	adds	r3, #1
 800e89a:	440b      	add	r3, r1
 800e89c:	6123      	str	r3, [r4, #16]
 800e89e:	65a1      	str	r1, [r4, #88]	; 0x58
 800e8a0:	f04f 0900 	mov.w	r9, #0
 800e8a4:	e7de      	b.n	800e864 <_printf_float+0x16c>
 800e8a6:	b913      	cbnz	r3, 800e8ae <_printf_float+0x1b6>
 800e8a8:	6822      	ldr	r2, [r4, #0]
 800e8aa:	07d2      	lsls	r2, r2, #31
 800e8ac:	d501      	bpl.n	800e8b2 <_printf_float+0x1ba>
 800e8ae:	3302      	adds	r3, #2
 800e8b0:	e7f4      	b.n	800e89c <_printf_float+0x1a4>
 800e8b2:	2301      	movs	r3, #1
 800e8b4:	e7f2      	b.n	800e89c <_printf_float+0x1a4>
 800e8b6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800e8ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e8bc:	4299      	cmp	r1, r3
 800e8be:	db05      	blt.n	800e8cc <_printf_float+0x1d4>
 800e8c0:	6823      	ldr	r3, [r4, #0]
 800e8c2:	6121      	str	r1, [r4, #16]
 800e8c4:	07d8      	lsls	r0, r3, #31
 800e8c6:	d5ea      	bpl.n	800e89e <_printf_float+0x1a6>
 800e8c8:	1c4b      	adds	r3, r1, #1
 800e8ca:	e7e7      	b.n	800e89c <_printf_float+0x1a4>
 800e8cc:	2900      	cmp	r1, #0
 800e8ce:	bfd4      	ite	le
 800e8d0:	f1c1 0202 	rsble	r2, r1, #2
 800e8d4:	2201      	movgt	r2, #1
 800e8d6:	4413      	add	r3, r2
 800e8d8:	e7e0      	b.n	800e89c <_printf_float+0x1a4>
 800e8da:	6823      	ldr	r3, [r4, #0]
 800e8dc:	055a      	lsls	r2, r3, #21
 800e8de:	d407      	bmi.n	800e8f0 <_printf_float+0x1f8>
 800e8e0:	6923      	ldr	r3, [r4, #16]
 800e8e2:	4642      	mov	r2, r8
 800e8e4:	4631      	mov	r1, r6
 800e8e6:	4628      	mov	r0, r5
 800e8e8:	47b8      	blx	r7
 800e8ea:	3001      	adds	r0, #1
 800e8ec:	d12c      	bne.n	800e948 <_printf_float+0x250>
 800e8ee:	e764      	b.n	800e7ba <_printf_float+0xc2>
 800e8f0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800e8f4:	f240 80e0 	bls.w	800eab8 <_printf_float+0x3c0>
 800e8f8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800e8fc:	2200      	movs	r2, #0
 800e8fe:	2300      	movs	r3, #0
 800e900:	f7f2 f8e2 	bl	8000ac8 <__aeabi_dcmpeq>
 800e904:	2800      	cmp	r0, #0
 800e906:	d034      	beq.n	800e972 <_printf_float+0x27a>
 800e908:	4a37      	ldr	r2, [pc, #220]	; (800e9e8 <_printf_float+0x2f0>)
 800e90a:	2301      	movs	r3, #1
 800e90c:	4631      	mov	r1, r6
 800e90e:	4628      	mov	r0, r5
 800e910:	47b8      	blx	r7
 800e912:	3001      	adds	r0, #1
 800e914:	f43f af51 	beq.w	800e7ba <_printf_float+0xc2>
 800e918:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e91c:	429a      	cmp	r2, r3
 800e91e:	db02      	blt.n	800e926 <_printf_float+0x22e>
 800e920:	6823      	ldr	r3, [r4, #0]
 800e922:	07d8      	lsls	r0, r3, #31
 800e924:	d510      	bpl.n	800e948 <_printf_float+0x250>
 800e926:	ee18 3a10 	vmov	r3, s16
 800e92a:	4652      	mov	r2, sl
 800e92c:	4631      	mov	r1, r6
 800e92e:	4628      	mov	r0, r5
 800e930:	47b8      	blx	r7
 800e932:	3001      	adds	r0, #1
 800e934:	f43f af41 	beq.w	800e7ba <_printf_float+0xc2>
 800e938:	f04f 0800 	mov.w	r8, #0
 800e93c:	f104 091a 	add.w	r9, r4, #26
 800e940:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e942:	3b01      	subs	r3, #1
 800e944:	4543      	cmp	r3, r8
 800e946:	dc09      	bgt.n	800e95c <_printf_float+0x264>
 800e948:	6823      	ldr	r3, [r4, #0]
 800e94a:	079b      	lsls	r3, r3, #30
 800e94c:	f100 8105 	bmi.w	800eb5a <_printf_float+0x462>
 800e950:	68e0      	ldr	r0, [r4, #12]
 800e952:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e954:	4298      	cmp	r0, r3
 800e956:	bfb8      	it	lt
 800e958:	4618      	movlt	r0, r3
 800e95a:	e730      	b.n	800e7be <_printf_float+0xc6>
 800e95c:	2301      	movs	r3, #1
 800e95e:	464a      	mov	r2, r9
 800e960:	4631      	mov	r1, r6
 800e962:	4628      	mov	r0, r5
 800e964:	47b8      	blx	r7
 800e966:	3001      	adds	r0, #1
 800e968:	f43f af27 	beq.w	800e7ba <_printf_float+0xc2>
 800e96c:	f108 0801 	add.w	r8, r8, #1
 800e970:	e7e6      	b.n	800e940 <_printf_float+0x248>
 800e972:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e974:	2b00      	cmp	r3, #0
 800e976:	dc39      	bgt.n	800e9ec <_printf_float+0x2f4>
 800e978:	4a1b      	ldr	r2, [pc, #108]	; (800e9e8 <_printf_float+0x2f0>)
 800e97a:	2301      	movs	r3, #1
 800e97c:	4631      	mov	r1, r6
 800e97e:	4628      	mov	r0, r5
 800e980:	47b8      	blx	r7
 800e982:	3001      	adds	r0, #1
 800e984:	f43f af19 	beq.w	800e7ba <_printf_float+0xc2>
 800e988:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e98c:	4313      	orrs	r3, r2
 800e98e:	d102      	bne.n	800e996 <_printf_float+0x29e>
 800e990:	6823      	ldr	r3, [r4, #0]
 800e992:	07d9      	lsls	r1, r3, #31
 800e994:	d5d8      	bpl.n	800e948 <_printf_float+0x250>
 800e996:	ee18 3a10 	vmov	r3, s16
 800e99a:	4652      	mov	r2, sl
 800e99c:	4631      	mov	r1, r6
 800e99e:	4628      	mov	r0, r5
 800e9a0:	47b8      	blx	r7
 800e9a2:	3001      	adds	r0, #1
 800e9a4:	f43f af09 	beq.w	800e7ba <_printf_float+0xc2>
 800e9a8:	f04f 0900 	mov.w	r9, #0
 800e9ac:	f104 0a1a 	add.w	sl, r4, #26
 800e9b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e9b2:	425b      	negs	r3, r3
 800e9b4:	454b      	cmp	r3, r9
 800e9b6:	dc01      	bgt.n	800e9bc <_printf_float+0x2c4>
 800e9b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e9ba:	e792      	b.n	800e8e2 <_printf_float+0x1ea>
 800e9bc:	2301      	movs	r3, #1
 800e9be:	4652      	mov	r2, sl
 800e9c0:	4631      	mov	r1, r6
 800e9c2:	4628      	mov	r0, r5
 800e9c4:	47b8      	blx	r7
 800e9c6:	3001      	adds	r0, #1
 800e9c8:	f43f aef7 	beq.w	800e7ba <_printf_float+0xc2>
 800e9cc:	f109 0901 	add.w	r9, r9, #1
 800e9d0:	e7ee      	b.n	800e9b0 <_printf_float+0x2b8>
 800e9d2:	bf00      	nop
 800e9d4:	7fefffff 	.word	0x7fefffff
 800e9d8:	080133dc 	.word	0x080133dc
 800e9dc:	080133e0 	.word	0x080133e0
 800e9e0:	080133e8 	.word	0x080133e8
 800e9e4:	080133e4 	.word	0x080133e4
 800e9e8:	08013611 	.word	0x08013611
 800e9ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e9ee:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e9f0:	429a      	cmp	r2, r3
 800e9f2:	bfa8      	it	ge
 800e9f4:	461a      	movge	r2, r3
 800e9f6:	2a00      	cmp	r2, #0
 800e9f8:	4691      	mov	r9, r2
 800e9fa:	dc37      	bgt.n	800ea6c <_printf_float+0x374>
 800e9fc:	f04f 0b00 	mov.w	fp, #0
 800ea00:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ea04:	f104 021a 	add.w	r2, r4, #26
 800ea08:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ea0a:	9305      	str	r3, [sp, #20]
 800ea0c:	eba3 0309 	sub.w	r3, r3, r9
 800ea10:	455b      	cmp	r3, fp
 800ea12:	dc33      	bgt.n	800ea7c <_printf_float+0x384>
 800ea14:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ea18:	429a      	cmp	r2, r3
 800ea1a:	db3b      	blt.n	800ea94 <_printf_float+0x39c>
 800ea1c:	6823      	ldr	r3, [r4, #0]
 800ea1e:	07da      	lsls	r2, r3, #31
 800ea20:	d438      	bmi.n	800ea94 <_printf_float+0x39c>
 800ea22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ea24:	9a05      	ldr	r2, [sp, #20]
 800ea26:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ea28:	1a9a      	subs	r2, r3, r2
 800ea2a:	eba3 0901 	sub.w	r9, r3, r1
 800ea2e:	4591      	cmp	r9, r2
 800ea30:	bfa8      	it	ge
 800ea32:	4691      	movge	r9, r2
 800ea34:	f1b9 0f00 	cmp.w	r9, #0
 800ea38:	dc35      	bgt.n	800eaa6 <_printf_float+0x3ae>
 800ea3a:	f04f 0800 	mov.w	r8, #0
 800ea3e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ea42:	f104 0a1a 	add.w	sl, r4, #26
 800ea46:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ea4a:	1a9b      	subs	r3, r3, r2
 800ea4c:	eba3 0309 	sub.w	r3, r3, r9
 800ea50:	4543      	cmp	r3, r8
 800ea52:	f77f af79 	ble.w	800e948 <_printf_float+0x250>
 800ea56:	2301      	movs	r3, #1
 800ea58:	4652      	mov	r2, sl
 800ea5a:	4631      	mov	r1, r6
 800ea5c:	4628      	mov	r0, r5
 800ea5e:	47b8      	blx	r7
 800ea60:	3001      	adds	r0, #1
 800ea62:	f43f aeaa 	beq.w	800e7ba <_printf_float+0xc2>
 800ea66:	f108 0801 	add.w	r8, r8, #1
 800ea6a:	e7ec      	b.n	800ea46 <_printf_float+0x34e>
 800ea6c:	4613      	mov	r3, r2
 800ea6e:	4631      	mov	r1, r6
 800ea70:	4642      	mov	r2, r8
 800ea72:	4628      	mov	r0, r5
 800ea74:	47b8      	blx	r7
 800ea76:	3001      	adds	r0, #1
 800ea78:	d1c0      	bne.n	800e9fc <_printf_float+0x304>
 800ea7a:	e69e      	b.n	800e7ba <_printf_float+0xc2>
 800ea7c:	2301      	movs	r3, #1
 800ea7e:	4631      	mov	r1, r6
 800ea80:	4628      	mov	r0, r5
 800ea82:	9205      	str	r2, [sp, #20]
 800ea84:	47b8      	blx	r7
 800ea86:	3001      	adds	r0, #1
 800ea88:	f43f ae97 	beq.w	800e7ba <_printf_float+0xc2>
 800ea8c:	9a05      	ldr	r2, [sp, #20]
 800ea8e:	f10b 0b01 	add.w	fp, fp, #1
 800ea92:	e7b9      	b.n	800ea08 <_printf_float+0x310>
 800ea94:	ee18 3a10 	vmov	r3, s16
 800ea98:	4652      	mov	r2, sl
 800ea9a:	4631      	mov	r1, r6
 800ea9c:	4628      	mov	r0, r5
 800ea9e:	47b8      	blx	r7
 800eaa0:	3001      	adds	r0, #1
 800eaa2:	d1be      	bne.n	800ea22 <_printf_float+0x32a>
 800eaa4:	e689      	b.n	800e7ba <_printf_float+0xc2>
 800eaa6:	9a05      	ldr	r2, [sp, #20]
 800eaa8:	464b      	mov	r3, r9
 800eaaa:	4442      	add	r2, r8
 800eaac:	4631      	mov	r1, r6
 800eaae:	4628      	mov	r0, r5
 800eab0:	47b8      	blx	r7
 800eab2:	3001      	adds	r0, #1
 800eab4:	d1c1      	bne.n	800ea3a <_printf_float+0x342>
 800eab6:	e680      	b.n	800e7ba <_printf_float+0xc2>
 800eab8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800eaba:	2a01      	cmp	r2, #1
 800eabc:	dc01      	bgt.n	800eac2 <_printf_float+0x3ca>
 800eabe:	07db      	lsls	r3, r3, #31
 800eac0:	d538      	bpl.n	800eb34 <_printf_float+0x43c>
 800eac2:	2301      	movs	r3, #1
 800eac4:	4642      	mov	r2, r8
 800eac6:	4631      	mov	r1, r6
 800eac8:	4628      	mov	r0, r5
 800eaca:	47b8      	blx	r7
 800eacc:	3001      	adds	r0, #1
 800eace:	f43f ae74 	beq.w	800e7ba <_printf_float+0xc2>
 800ead2:	ee18 3a10 	vmov	r3, s16
 800ead6:	4652      	mov	r2, sl
 800ead8:	4631      	mov	r1, r6
 800eada:	4628      	mov	r0, r5
 800eadc:	47b8      	blx	r7
 800eade:	3001      	adds	r0, #1
 800eae0:	f43f ae6b 	beq.w	800e7ba <_printf_float+0xc2>
 800eae4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800eae8:	2200      	movs	r2, #0
 800eaea:	2300      	movs	r3, #0
 800eaec:	f7f1 ffec 	bl	8000ac8 <__aeabi_dcmpeq>
 800eaf0:	b9d8      	cbnz	r0, 800eb2a <_printf_float+0x432>
 800eaf2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800eaf4:	f108 0201 	add.w	r2, r8, #1
 800eaf8:	3b01      	subs	r3, #1
 800eafa:	4631      	mov	r1, r6
 800eafc:	4628      	mov	r0, r5
 800eafe:	47b8      	blx	r7
 800eb00:	3001      	adds	r0, #1
 800eb02:	d10e      	bne.n	800eb22 <_printf_float+0x42a>
 800eb04:	e659      	b.n	800e7ba <_printf_float+0xc2>
 800eb06:	2301      	movs	r3, #1
 800eb08:	4652      	mov	r2, sl
 800eb0a:	4631      	mov	r1, r6
 800eb0c:	4628      	mov	r0, r5
 800eb0e:	47b8      	blx	r7
 800eb10:	3001      	adds	r0, #1
 800eb12:	f43f ae52 	beq.w	800e7ba <_printf_float+0xc2>
 800eb16:	f108 0801 	add.w	r8, r8, #1
 800eb1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800eb1c:	3b01      	subs	r3, #1
 800eb1e:	4543      	cmp	r3, r8
 800eb20:	dcf1      	bgt.n	800eb06 <_printf_float+0x40e>
 800eb22:	464b      	mov	r3, r9
 800eb24:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800eb28:	e6dc      	b.n	800e8e4 <_printf_float+0x1ec>
 800eb2a:	f04f 0800 	mov.w	r8, #0
 800eb2e:	f104 0a1a 	add.w	sl, r4, #26
 800eb32:	e7f2      	b.n	800eb1a <_printf_float+0x422>
 800eb34:	2301      	movs	r3, #1
 800eb36:	4642      	mov	r2, r8
 800eb38:	e7df      	b.n	800eafa <_printf_float+0x402>
 800eb3a:	2301      	movs	r3, #1
 800eb3c:	464a      	mov	r2, r9
 800eb3e:	4631      	mov	r1, r6
 800eb40:	4628      	mov	r0, r5
 800eb42:	47b8      	blx	r7
 800eb44:	3001      	adds	r0, #1
 800eb46:	f43f ae38 	beq.w	800e7ba <_printf_float+0xc2>
 800eb4a:	f108 0801 	add.w	r8, r8, #1
 800eb4e:	68e3      	ldr	r3, [r4, #12]
 800eb50:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800eb52:	1a5b      	subs	r3, r3, r1
 800eb54:	4543      	cmp	r3, r8
 800eb56:	dcf0      	bgt.n	800eb3a <_printf_float+0x442>
 800eb58:	e6fa      	b.n	800e950 <_printf_float+0x258>
 800eb5a:	f04f 0800 	mov.w	r8, #0
 800eb5e:	f104 0919 	add.w	r9, r4, #25
 800eb62:	e7f4      	b.n	800eb4e <_printf_float+0x456>

0800eb64 <_printf_common>:
 800eb64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eb68:	4616      	mov	r6, r2
 800eb6a:	4699      	mov	r9, r3
 800eb6c:	688a      	ldr	r2, [r1, #8]
 800eb6e:	690b      	ldr	r3, [r1, #16]
 800eb70:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800eb74:	4293      	cmp	r3, r2
 800eb76:	bfb8      	it	lt
 800eb78:	4613      	movlt	r3, r2
 800eb7a:	6033      	str	r3, [r6, #0]
 800eb7c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800eb80:	4607      	mov	r7, r0
 800eb82:	460c      	mov	r4, r1
 800eb84:	b10a      	cbz	r2, 800eb8a <_printf_common+0x26>
 800eb86:	3301      	adds	r3, #1
 800eb88:	6033      	str	r3, [r6, #0]
 800eb8a:	6823      	ldr	r3, [r4, #0]
 800eb8c:	0699      	lsls	r1, r3, #26
 800eb8e:	bf42      	ittt	mi
 800eb90:	6833      	ldrmi	r3, [r6, #0]
 800eb92:	3302      	addmi	r3, #2
 800eb94:	6033      	strmi	r3, [r6, #0]
 800eb96:	6825      	ldr	r5, [r4, #0]
 800eb98:	f015 0506 	ands.w	r5, r5, #6
 800eb9c:	d106      	bne.n	800ebac <_printf_common+0x48>
 800eb9e:	f104 0a19 	add.w	sl, r4, #25
 800eba2:	68e3      	ldr	r3, [r4, #12]
 800eba4:	6832      	ldr	r2, [r6, #0]
 800eba6:	1a9b      	subs	r3, r3, r2
 800eba8:	42ab      	cmp	r3, r5
 800ebaa:	dc26      	bgt.n	800ebfa <_printf_common+0x96>
 800ebac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ebb0:	1e13      	subs	r3, r2, #0
 800ebb2:	6822      	ldr	r2, [r4, #0]
 800ebb4:	bf18      	it	ne
 800ebb6:	2301      	movne	r3, #1
 800ebb8:	0692      	lsls	r2, r2, #26
 800ebba:	d42b      	bmi.n	800ec14 <_printf_common+0xb0>
 800ebbc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ebc0:	4649      	mov	r1, r9
 800ebc2:	4638      	mov	r0, r7
 800ebc4:	47c0      	blx	r8
 800ebc6:	3001      	adds	r0, #1
 800ebc8:	d01e      	beq.n	800ec08 <_printf_common+0xa4>
 800ebca:	6823      	ldr	r3, [r4, #0]
 800ebcc:	68e5      	ldr	r5, [r4, #12]
 800ebce:	6832      	ldr	r2, [r6, #0]
 800ebd0:	f003 0306 	and.w	r3, r3, #6
 800ebd4:	2b04      	cmp	r3, #4
 800ebd6:	bf08      	it	eq
 800ebd8:	1aad      	subeq	r5, r5, r2
 800ebda:	68a3      	ldr	r3, [r4, #8]
 800ebdc:	6922      	ldr	r2, [r4, #16]
 800ebde:	bf0c      	ite	eq
 800ebe0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ebe4:	2500      	movne	r5, #0
 800ebe6:	4293      	cmp	r3, r2
 800ebe8:	bfc4      	itt	gt
 800ebea:	1a9b      	subgt	r3, r3, r2
 800ebec:	18ed      	addgt	r5, r5, r3
 800ebee:	2600      	movs	r6, #0
 800ebf0:	341a      	adds	r4, #26
 800ebf2:	42b5      	cmp	r5, r6
 800ebf4:	d11a      	bne.n	800ec2c <_printf_common+0xc8>
 800ebf6:	2000      	movs	r0, #0
 800ebf8:	e008      	b.n	800ec0c <_printf_common+0xa8>
 800ebfa:	2301      	movs	r3, #1
 800ebfc:	4652      	mov	r2, sl
 800ebfe:	4649      	mov	r1, r9
 800ec00:	4638      	mov	r0, r7
 800ec02:	47c0      	blx	r8
 800ec04:	3001      	adds	r0, #1
 800ec06:	d103      	bne.n	800ec10 <_printf_common+0xac>
 800ec08:	f04f 30ff 	mov.w	r0, #4294967295
 800ec0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ec10:	3501      	adds	r5, #1
 800ec12:	e7c6      	b.n	800eba2 <_printf_common+0x3e>
 800ec14:	18e1      	adds	r1, r4, r3
 800ec16:	1c5a      	adds	r2, r3, #1
 800ec18:	2030      	movs	r0, #48	; 0x30
 800ec1a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ec1e:	4422      	add	r2, r4
 800ec20:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ec24:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ec28:	3302      	adds	r3, #2
 800ec2a:	e7c7      	b.n	800ebbc <_printf_common+0x58>
 800ec2c:	2301      	movs	r3, #1
 800ec2e:	4622      	mov	r2, r4
 800ec30:	4649      	mov	r1, r9
 800ec32:	4638      	mov	r0, r7
 800ec34:	47c0      	blx	r8
 800ec36:	3001      	adds	r0, #1
 800ec38:	d0e6      	beq.n	800ec08 <_printf_common+0xa4>
 800ec3a:	3601      	adds	r6, #1
 800ec3c:	e7d9      	b.n	800ebf2 <_printf_common+0x8e>
	...

0800ec40 <_printf_i>:
 800ec40:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ec44:	7e0f      	ldrb	r7, [r1, #24]
 800ec46:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ec48:	2f78      	cmp	r7, #120	; 0x78
 800ec4a:	4691      	mov	r9, r2
 800ec4c:	4680      	mov	r8, r0
 800ec4e:	460c      	mov	r4, r1
 800ec50:	469a      	mov	sl, r3
 800ec52:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ec56:	d807      	bhi.n	800ec68 <_printf_i+0x28>
 800ec58:	2f62      	cmp	r7, #98	; 0x62
 800ec5a:	d80a      	bhi.n	800ec72 <_printf_i+0x32>
 800ec5c:	2f00      	cmp	r7, #0
 800ec5e:	f000 80d8 	beq.w	800ee12 <_printf_i+0x1d2>
 800ec62:	2f58      	cmp	r7, #88	; 0x58
 800ec64:	f000 80a3 	beq.w	800edae <_printf_i+0x16e>
 800ec68:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ec6c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ec70:	e03a      	b.n	800ece8 <_printf_i+0xa8>
 800ec72:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ec76:	2b15      	cmp	r3, #21
 800ec78:	d8f6      	bhi.n	800ec68 <_printf_i+0x28>
 800ec7a:	a101      	add	r1, pc, #4	; (adr r1, 800ec80 <_printf_i+0x40>)
 800ec7c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ec80:	0800ecd9 	.word	0x0800ecd9
 800ec84:	0800eced 	.word	0x0800eced
 800ec88:	0800ec69 	.word	0x0800ec69
 800ec8c:	0800ec69 	.word	0x0800ec69
 800ec90:	0800ec69 	.word	0x0800ec69
 800ec94:	0800ec69 	.word	0x0800ec69
 800ec98:	0800eced 	.word	0x0800eced
 800ec9c:	0800ec69 	.word	0x0800ec69
 800eca0:	0800ec69 	.word	0x0800ec69
 800eca4:	0800ec69 	.word	0x0800ec69
 800eca8:	0800ec69 	.word	0x0800ec69
 800ecac:	0800edf9 	.word	0x0800edf9
 800ecb0:	0800ed1d 	.word	0x0800ed1d
 800ecb4:	0800eddb 	.word	0x0800eddb
 800ecb8:	0800ec69 	.word	0x0800ec69
 800ecbc:	0800ec69 	.word	0x0800ec69
 800ecc0:	0800ee1b 	.word	0x0800ee1b
 800ecc4:	0800ec69 	.word	0x0800ec69
 800ecc8:	0800ed1d 	.word	0x0800ed1d
 800eccc:	0800ec69 	.word	0x0800ec69
 800ecd0:	0800ec69 	.word	0x0800ec69
 800ecd4:	0800ede3 	.word	0x0800ede3
 800ecd8:	682b      	ldr	r3, [r5, #0]
 800ecda:	1d1a      	adds	r2, r3, #4
 800ecdc:	681b      	ldr	r3, [r3, #0]
 800ecde:	602a      	str	r2, [r5, #0]
 800ece0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ece4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ece8:	2301      	movs	r3, #1
 800ecea:	e0a3      	b.n	800ee34 <_printf_i+0x1f4>
 800ecec:	6820      	ldr	r0, [r4, #0]
 800ecee:	6829      	ldr	r1, [r5, #0]
 800ecf0:	0606      	lsls	r6, r0, #24
 800ecf2:	f101 0304 	add.w	r3, r1, #4
 800ecf6:	d50a      	bpl.n	800ed0e <_printf_i+0xce>
 800ecf8:	680e      	ldr	r6, [r1, #0]
 800ecfa:	602b      	str	r3, [r5, #0]
 800ecfc:	2e00      	cmp	r6, #0
 800ecfe:	da03      	bge.n	800ed08 <_printf_i+0xc8>
 800ed00:	232d      	movs	r3, #45	; 0x2d
 800ed02:	4276      	negs	r6, r6
 800ed04:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ed08:	485e      	ldr	r0, [pc, #376]	; (800ee84 <_printf_i+0x244>)
 800ed0a:	230a      	movs	r3, #10
 800ed0c:	e019      	b.n	800ed42 <_printf_i+0x102>
 800ed0e:	680e      	ldr	r6, [r1, #0]
 800ed10:	602b      	str	r3, [r5, #0]
 800ed12:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ed16:	bf18      	it	ne
 800ed18:	b236      	sxthne	r6, r6
 800ed1a:	e7ef      	b.n	800ecfc <_printf_i+0xbc>
 800ed1c:	682b      	ldr	r3, [r5, #0]
 800ed1e:	6820      	ldr	r0, [r4, #0]
 800ed20:	1d19      	adds	r1, r3, #4
 800ed22:	6029      	str	r1, [r5, #0]
 800ed24:	0601      	lsls	r1, r0, #24
 800ed26:	d501      	bpl.n	800ed2c <_printf_i+0xec>
 800ed28:	681e      	ldr	r6, [r3, #0]
 800ed2a:	e002      	b.n	800ed32 <_printf_i+0xf2>
 800ed2c:	0646      	lsls	r6, r0, #25
 800ed2e:	d5fb      	bpl.n	800ed28 <_printf_i+0xe8>
 800ed30:	881e      	ldrh	r6, [r3, #0]
 800ed32:	4854      	ldr	r0, [pc, #336]	; (800ee84 <_printf_i+0x244>)
 800ed34:	2f6f      	cmp	r7, #111	; 0x6f
 800ed36:	bf0c      	ite	eq
 800ed38:	2308      	moveq	r3, #8
 800ed3a:	230a      	movne	r3, #10
 800ed3c:	2100      	movs	r1, #0
 800ed3e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ed42:	6865      	ldr	r5, [r4, #4]
 800ed44:	60a5      	str	r5, [r4, #8]
 800ed46:	2d00      	cmp	r5, #0
 800ed48:	bfa2      	ittt	ge
 800ed4a:	6821      	ldrge	r1, [r4, #0]
 800ed4c:	f021 0104 	bicge.w	r1, r1, #4
 800ed50:	6021      	strge	r1, [r4, #0]
 800ed52:	b90e      	cbnz	r6, 800ed58 <_printf_i+0x118>
 800ed54:	2d00      	cmp	r5, #0
 800ed56:	d04d      	beq.n	800edf4 <_printf_i+0x1b4>
 800ed58:	4615      	mov	r5, r2
 800ed5a:	fbb6 f1f3 	udiv	r1, r6, r3
 800ed5e:	fb03 6711 	mls	r7, r3, r1, r6
 800ed62:	5dc7      	ldrb	r7, [r0, r7]
 800ed64:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ed68:	4637      	mov	r7, r6
 800ed6a:	42bb      	cmp	r3, r7
 800ed6c:	460e      	mov	r6, r1
 800ed6e:	d9f4      	bls.n	800ed5a <_printf_i+0x11a>
 800ed70:	2b08      	cmp	r3, #8
 800ed72:	d10b      	bne.n	800ed8c <_printf_i+0x14c>
 800ed74:	6823      	ldr	r3, [r4, #0]
 800ed76:	07de      	lsls	r6, r3, #31
 800ed78:	d508      	bpl.n	800ed8c <_printf_i+0x14c>
 800ed7a:	6923      	ldr	r3, [r4, #16]
 800ed7c:	6861      	ldr	r1, [r4, #4]
 800ed7e:	4299      	cmp	r1, r3
 800ed80:	bfde      	ittt	le
 800ed82:	2330      	movle	r3, #48	; 0x30
 800ed84:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ed88:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ed8c:	1b52      	subs	r2, r2, r5
 800ed8e:	6122      	str	r2, [r4, #16]
 800ed90:	f8cd a000 	str.w	sl, [sp]
 800ed94:	464b      	mov	r3, r9
 800ed96:	aa03      	add	r2, sp, #12
 800ed98:	4621      	mov	r1, r4
 800ed9a:	4640      	mov	r0, r8
 800ed9c:	f7ff fee2 	bl	800eb64 <_printf_common>
 800eda0:	3001      	adds	r0, #1
 800eda2:	d14c      	bne.n	800ee3e <_printf_i+0x1fe>
 800eda4:	f04f 30ff 	mov.w	r0, #4294967295
 800eda8:	b004      	add	sp, #16
 800edaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800edae:	4835      	ldr	r0, [pc, #212]	; (800ee84 <_printf_i+0x244>)
 800edb0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800edb4:	6829      	ldr	r1, [r5, #0]
 800edb6:	6823      	ldr	r3, [r4, #0]
 800edb8:	f851 6b04 	ldr.w	r6, [r1], #4
 800edbc:	6029      	str	r1, [r5, #0]
 800edbe:	061d      	lsls	r5, r3, #24
 800edc0:	d514      	bpl.n	800edec <_printf_i+0x1ac>
 800edc2:	07df      	lsls	r7, r3, #31
 800edc4:	bf44      	itt	mi
 800edc6:	f043 0320 	orrmi.w	r3, r3, #32
 800edca:	6023      	strmi	r3, [r4, #0]
 800edcc:	b91e      	cbnz	r6, 800edd6 <_printf_i+0x196>
 800edce:	6823      	ldr	r3, [r4, #0]
 800edd0:	f023 0320 	bic.w	r3, r3, #32
 800edd4:	6023      	str	r3, [r4, #0]
 800edd6:	2310      	movs	r3, #16
 800edd8:	e7b0      	b.n	800ed3c <_printf_i+0xfc>
 800edda:	6823      	ldr	r3, [r4, #0]
 800eddc:	f043 0320 	orr.w	r3, r3, #32
 800ede0:	6023      	str	r3, [r4, #0]
 800ede2:	2378      	movs	r3, #120	; 0x78
 800ede4:	4828      	ldr	r0, [pc, #160]	; (800ee88 <_printf_i+0x248>)
 800ede6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800edea:	e7e3      	b.n	800edb4 <_printf_i+0x174>
 800edec:	0659      	lsls	r1, r3, #25
 800edee:	bf48      	it	mi
 800edf0:	b2b6      	uxthmi	r6, r6
 800edf2:	e7e6      	b.n	800edc2 <_printf_i+0x182>
 800edf4:	4615      	mov	r5, r2
 800edf6:	e7bb      	b.n	800ed70 <_printf_i+0x130>
 800edf8:	682b      	ldr	r3, [r5, #0]
 800edfa:	6826      	ldr	r6, [r4, #0]
 800edfc:	6961      	ldr	r1, [r4, #20]
 800edfe:	1d18      	adds	r0, r3, #4
 800ee00:	6028      	str	r0, [r5, #0]
 800ee02:	0635      	lsls	r5, r6, #24
 800ee04:	681b      	ldr	r3, [r3, #0]
 800ee06:	d501      	bpl.n	800ee0c <_printf_i+0x1cc>
 800ee08:	6019      	str	r1, [r3, #0]
 800ee0a:	e002      	b.n	800ee12 <_printf_i+0x1d2>
 800ee0c:	0670      	lsls	r0, r6, #25
 800ee0e:	d5fb      	bpl.n	800ee08 <_printf_i+0x1c8>
 800ee10:	8019      	strh	r1, [r3, #0]
 800ee12:	2300      	movs	r3, #0
 800ee14:	6123      	str	r3, [r4, #16]
 800ee16:	4615      	mov	r5, r2
 800ee18:	e7ba      	b.n	800ed90 <_printf_i+0x150>
 800ee1a:	682b      	ldr	r3, [r5, #0]
 800ee1c:	1d1a      	adds	r2, r3, #4
 800ee1e:	602a      	str	r2, [r5, #0]
 800ee20:	681d      	ldr	r5, [r3, #0]
 800ee22:	6862      	ldr	r2, [r4, #4]
 800ee24:	2100      	movs	r1, #0
 800ee26:	4628      	mov	r0, r5
 800ee28:	f7f1 f9da 	bl	80001e0 <memchr>
 800ee2c:	b108      	cbz	r0, 800ee32 <_printf_i+0x1f2>
 800ee2e:	1b40      	subs	r0, r0, r5
 800ee30:	6060      	str	r0, [r4, #4]
 800ee32:	6863      	ldr	r3, [r4, #4]
 800ee34:	6123      	str	r3, [r4, #16]
 800ee36:	2300      	movs	r3, #0
 800ee38:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ee3c:	e7a8      	b.n	800ed90 <_printf_i+0x150>
 800ee3e:	6923      	ldr	r3, [r4, #16]
 800ee40:	462a      	mov	r2, r5
 800ee42:	4649      	mov	r1, r9
 800ee44:	4640      	mov	r0, r8
 800ee46:	47d0      	blx	sl
 800ee48:	3001      	adds	r0, #1
 800ee4a:	d0ab      	beq.n	800eda4 <_printf_i+0x164>
 800ee4c:	6823      	ldr	r3, [r4, #0]
 800ee4e:	079b      	lsls	r3, r3, #30
 800ee50:	d413      	bmi.n	800ee7a <_printf_i+0x23a>
 800ee52:	68e0      	ldr	r0, [r4, #12]
 800ee54:	9b03      	ldr	r3, [sp, #12]
 800ee56:	4298      	cmp	r0, r3
 800ee58:	bfb8      	it	lt
 800ee5a:	4618      	movlt	r0, r3
 800ee5c:	e7a4      	b.n	800eda8 <_printf_i+0x168>
 800ee5e:	2301      	movs	r3, #1
 800ee60:	4632      	mov	r2, r6
 800ee62:	4649      	mov	r1, r9
 800ee64:	4640      	mov	r0, r8
 800ee66:	47d0      	blx	sl
 800ee68:	3001      	adds	r0, #1
 800ee6a:	d09b      	beq.n	800eda4 <_printf_i+0x164>
 800ee6c:	3501      	adds	r5, #1
 800ee6e:	68e3      	ldr	r3, [r4, #12]
 800ee70:	9903      	ldr	r1, [sp, #12]
 800ee72:	1a5b      	subs	r3, r3, r1
 800ee74:	42ab      	cmp	r3, r5
 800ee76:	dcf2      	bgt.n	800ee5e <_printf_i+0x21e>
 800ee78:	e7eb      	b.n	800ee52 <_printf_i+0x212>
 800ee7a:	2500      	movs	r5, #0
 800ee7c:	f104 0619 	add.w	r6, r4, #25
 800ee80:	e7f5      	b.n	800ee6e <_printf_i+0x22e>
 800ee82:	bf00      	nop
 800ee84:	080133ec 	.word	0x080133ec
 800ee88:	080133fd 	.word	0x080133fd

0800ee8c <sniprintf>:
 800ee8c:	b40c      	push	{r2, r3}
 800ee8e:	b530      	push	{r4, r5, lr}
 800ee90:	4b17      	ldr	r3, [pc, #92]	; (800eef0 <sniprintf+0x64>)
 800ee92:	1e0c      	subs	r4, r1, #0
 800ee94:	681d      	ldr	r5, [r3, #0]
 800ee96:	b09d      	sub	sp, #116	; 0x74
 800ee98:	da08      	bge.n	800eeac <sniprintf+0x20>
 800ee9a:	238b      	movs	r3, #139	; 0x8b
 800ee9c:	602b      	str	r3, [r5, #0]
 800ee9e:	f04f 30ff 	mov.w	r0, #4294967295
 800eea2:	b01d      	add	sp, #116	; 0x74
 800eea4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800eea8:	b002      	add	sp, #8
 800eeaa:	4770      	bx	lr
 800eeac:	f44f 7302 	mov.w	r3, #520	; 0x208
 800eeb0:	f8ad 3014 	strh.w	r3, [sp, #20]
 800eeb4:	bf14      	ite	ne
 800eeb6:	f104 33ff 	addne.w	r3, r4, #4294967295
 800eeba:	4623      	moveq	r3, r4
 800eebc:	9304      	str	r3, [sp, #16]
 800eebe:	9307      	str	r3, [sp, #28]
 800eec0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800eec4:	9002      	str	r0, [sp, #8]
 800eec6:	9006      	str	r0, [sp, #24]
 800eec8:	f8ad 3016 	strh.w	r3, [sp, #22]
 800eecc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800eece:	ab21      	add	r3, sp, #132	; 0x84
 800eed0:	a902      	add	r1, sp, #8
 800eed2:	4628      	mov	r0, r5
 800eed4:	9301      	str	r3, [sp, #4]
 800eed6:	f001 fc41 	bl	801075c <_svfiprintf_r>
 800eeda:	1c43      	adds	r3, r0, #1
 800eedc:	bfbc      	itt	lt
 800eede:	238b      	movlt	r3, #139	; 0x8b
 800eee0:	602b      	strlt	r3, [r5, #0]
 800eee2:	2c00      	cmp	r4, #0
 800eee4:	d0dd      	beq.n	800eea2 <sniprintf+0x16>
 800eee6:	9b02      	ldr	r3, [sp, #8]
 800eee8:	2200      	movs	r2, #0
 800eeea:	701a      	strb	r2, [r3, #0]
 800eeec:	e7d9      	b.n	800eea2 <sniprintf+0x16>
 800eeee:	bf00      	nop
 800eef0:	20000050 	.word	0x20000050

0800eef4 <siprintf>:
 800eef4:	b40e      	push	{r1, r2, r3}
 800eef6:	b500      	push	{lr}
 800eef8:	b09c      	sub	sp, #112	; 0x70
 800eefa:	ab1d      	add	r3, sp, #116	; 0x74
 800eefc:	9002      	str	r0, [sp, #8]
 800eefe:	9006      	str	r0, [sp, #24]
 800ef00:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ef04:	4809      	ldr	r0, [pc, #36]	; (800ef2c <siprintf+0x38>)
 800ef06:	9107      	str	r1, [sp, #28]
 800ef08:	9104      	str	r1, [sp, #16]
 800ef0a:	4909      	ldr	r1, [pc, #36]	; (800ef30 <siprintf+0x3c>)
 800ef0c:	f853 2b04 	ldr.w	r2, [r3], #4
 800ef10:	9105      	str	r1, [sp, #20]
 800ef12:	6800      	ldr	r0, [r0, #0]
 800ef14:	9301      	str	r3, [sp, #4]
 800ef16:	a902      	add	r1, sp, #8
 800ef18:	f001 fc20 	bl	801075c <_svfiprintf_r>
 800ef1c:	9b02      	ldr	r3, [sp, #8]
 800ef1e:	2200      	movs	r2, #0
 800ef20:	701a      	strb	r2, [r3, #0]
 800ef22:	b01c      	add	sp, #112	; 0x70
 800ef24:	f85d eb04 	ldr.w	lr, [sp], #4
 800ef28:	b003      	add	sp, #12
 800ef2a:	4770      	bx	lr
 800ef2c:	20000050 	.word	0x20000050
 800ef30:	ffff0208 	.word	0xffff0208

0800ef34 <siscanf>:
 800ef34:	b40e      	push	{r1, r2, r3}
 800ef36:	b510      	push	{r4, lr}
 800ef38:	b09f      	sub	sp, #124	; 0x7c
 800ef3a:	ac21      	add	r4, sp, #132	; 0x84
 800ef3c:	f44f 7101 	mov.w	r1, #516	; 0x204
 800ef40:	f854 2b04 	ldr.w	r2, [r4], #4
 800ef44:	9201      	str	r2, [sp, #4]
 800ef46:	f8ad 101c 	strh.w	r1, [sp, #28]
 800ef4a:	9004      	str	r0, [sp, #16]
 800ef4c:	9008      	str	r0, [sp, #32]
 800ef4e:	f7f1 f93f 	bl	80001d0 <strlen>
 800ef52:	4b0c      	ldr	r3, [pc, #48]	; (800ef84 <siscanf+0x50>)
 800ef54:	9005      	str	r0, [sp, #20]
 800ef56:	9009      	str	r0, [sp, #36]	; 0x24
 800ef58:	930d      	str	r3, [sp, #52]	; 0x34
 800ef5a:	480b      	ldr	r0, [pc, #44]	; (800ef88 <siscanf+0x54>)
 800ef5c:	9a01      	ldr	r2, [sp, #4]
 800ef5e:	6800      	ldr	r0, [r0, #0]
 800ef60:	9403      	str	r4, [sp, #12]
 800ef62:	2300      	movs	r3, #0
 800ef64:	9311      	str	r3, [sp, #68]	; 0x44
 800ef66:	9316      	str	r3, [sp, #88]	; 0x58
 800ef68:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ef6c:	f8ad 301e 	strh.w	r3, [sp, #30]
 800ef70:	a904      	add	r1, sp, #16
 800ef72:	4623      	mov	r3, r4
 800ef74:	f001 fd4c 	bl	8010a10 <__ssvfiscanf_r>
 800ef78:	b01f      	add	sp, #124	; 0x7c
 800ef7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ef7e:	b003      	add	sp, #12
 800ef80:	4770      	bx	lr
 800ef82:	bf00      	nop
 800ef84:	0800efaf 	.word	0x0800efaf
 800ef88:	20000050 	.word	0x20000050

0800ef8c <__sread>:
 800ef8c:	b510      	push	{r4, lr}
 800ef8e:	460c      	mov	r4, r1
 800ef90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ef94:	f002 f806 	bl	8010fa4 <_read_r>
 800ef98:	2800      	cmp	r0, #0
 800ef9a:	bfab      	itete	ge
 800ef9c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ef9e:	89a3      	ldrhlt	r3, [r4, #12]
 800efa0:	181b      	addge	r3, r3, r0
 800efa2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800efa6:	bfac      	ite	ge
 800efa8:	6563      	strge	r3, [r4, #84]	; 0x54
 800efaa:	81a3      	strhlt	r3, [r4, #12]
 800efac:	bd10      	pop	{r4, pc}

0800efae <__seofread>:
 800efae:	2000      	movs	r0, #0
 800efb0:	4770      	bx	lr

0800efb2 <__swrite>:
 800efb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800efb6:	461f      	mov	r7, r3
 800efb8:	898b      	ldrh	r3, [r1, #12]
 800efba:	05db      	lsls	r3, r3, #23
 800efbc:	4605      	mov	r5, r0
 800efbe:	460c      	mov	r4, r1
 800efc0:	4616      	mov	r6, r2
 800efc2:	d505      	bpl.n	800efd0 <__swrite+0x1e>
 800efc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800efc8:	2302      	movs	r3, #2
 800efca:	2200      	movs	r2, #0
 800efcc:	f000 fed6 	bl	800fd7c <_lseek_r>
 800efd0:	89a3      	ldrh	r3, [r4, #12]
 800efd2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800efd6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800efda:	81a3      	strh	r3, [r4, #12]
 800efdc:	4632      	mov	r2, r6
 800efde:	463b      	mov	r3, r7
 800efe0:	4628      	mov	r0, r5
 800efe2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800efe6:	f000 b829 	b.w	800f03c <_write_r>

0800efea <__sseek>:
 800efea:	b510      	push	{r4, lr}
 800efec:	460c      	mov	r4, r1
 800efee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eff2:	f000 fec3 	bl	800fd7c <_lseek_r>
 800eff6:	1c43      	adds	r3, r0, #1
 800eff8:	89a3      	ldrh	r3, [r4, #12]
 800effa:	bf15      	itete	ne
 800effc:	6560      	strne	r0, [r4, #84]	; 0x54
 800effe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f002:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f006:	81a3      	strheq	r3, [r4, #12]
 800f008:	bf18      	it	ne
 800f00a:	81a3      	strhne	r3, [r4, #12]
 800f00c:	bd10      	pop	{r4, pc}

0800f00e <__sclose>:
 800f00e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f012:	f000 b825 	b.w	800f060 <_close_r>

0800f016 <strncpy>:
 800f016:	b510      	push	{r4, lr}
 800f018:	3901      	subs	r1, #1
 800f01a:	4603      	mov	r3, r0
 800f01c:	b132      	cbz	r2, 800f02c <strncpy+0x16>
 800f01e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800f022:	f803 4b01 	strb.w	r4, [r3], #1
 800f026:	3a01      	subs	r2, #1
 800f028:	2c00      	cmp	r4, #0
 800f02a:	d1f7      	bne.n	800f01c <strncpy+0x6>
 800f02c:	441a      	add	r2, r3
 800f02e:	2100      	movs	r1, #0
 800f030:	4293      	cmp	r3, r2
 800f032:	d100      	bne.n	800f036 <strncpy+0x20>
 800f034:	bd10      	pop	{r4, pc}
 800f036:	f803 1b01 	strb.w	r1, [r3], #1
 800f03a:	e7f9      	b.n	800f030 <strncpy+0x1a>

0800f03c <_write_r>:
 800f03c:	b538      	push	{r3, r4, r5, lr}
 800f03e:	4d07      	ldr	r5, [pc, #28]	; (800f05c <_write_r+0x20>)
 800f040:	4604      	mov	r4, r0
 800f042:	4608      	mov	r0, r1
 800f044:	4611      	mov	r1, r2
 800f046:	2200      	movs	r2, #0
 800f048:	602a      	str	r2, [r5, #0]
 800f04a:	461a      	mov	r2, r3
 800f04c:	f7f3 f96f 	bl	800232e <_write>
 800f050:	1c43      	adds	r3, r0, #1
 800f052:	d102      	bne.n	800f05a <_write_r+0x1e>
 800f054:	682b      	ldr	r3, [r5, #0]
 800f056:	b103      	cbz	r3, 800f05a <_write_r+0x1e>
 800f058:	6023      	str	r3, [r4, #0]
 800f05a:	bd38      	pop	{r3, r4, r5, pc}
 800f05c:	20000f48 	.word	0x20000f48

0800f060 <_close_r>:
 800f060:	b538      	push	{r3, r4, r5, lr}
 800f062:	4d06      	ldr	r5, [pc, #24]	; (800f07c <_close_r+0x1c>)
 800f064:	2300      	movs	r3, #0
 800f066:	4604      	mov	r4, r0
 800f068:	4608      	mov	r0, r1
 800f06a:	602b      	str	r3, [r5, #0]
 800f06c:	f7f3 f97b 	bl	8002366 <_close>
 800f070:	1c43      	adds	r3, r0, #1
 800f072:	d102      	bne.n	800f07a <_close_r+0x1a>
 800f074:	682b      	ldr	r3, [r5, #0]
 800f076:	b103      	cbz	r3, 800f07a <_close_r+0x1a>
 800f078:	6023      	str	r3, [r4, #0]
 800f07a:	bd38      	pop	{r3, r4, r5, pc}
 800f07c:	20000f48 	.word	0x20000f48

0800f080 <quorem>:
 800f080:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f084:	6903      	ldr	r3, [r0, #16]
 800f086:	690c      	ldr	r4, [r1, #16]
 800f088:	42a3      	cmp	r3, r4
 800f08a:	4607      	mov	r7, r0
 800f08c:	f2c0 8081 	blt.w	800f192 <quorem+0x112>
 800f090:	3c01      	subs	r4, #1
 800f092:	f101 0814 	add.w	r8, r1, #20
 800f096:	f100 0514 	add.w	r5, r0, #20
 800f09a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f09e:	9301      	str	r3, [sp, #4]
 800f0a0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800f0a4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f0a8:	3301      	adds	r3, #1
 800f0aa:	429a      	cmp	r2, r3
 800f0ac:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800f0b0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800f0b4:	fbb2 f6f3 	udiv	r6, r2, r3
 800f0b8:	d331      	bcc.n	800f11e <quorem+0x9e>
 800f0ba:	f04f 0e00 	mov.w	lr, #0
 800f0be:	4640      	mov	r0, r8
 800f0c0:	46ac      	mov	ip, r5
 800f0c2:	46f2      	mov	sl, lr
 800f0c4:	f850 2b04 	ldr.w	r2, [r0], #4
 800f0c8:	b293      	uxth	r3, r2
 800f0ca:	fb06 e303 	mla	r3, r6, r3, lr
 800f0ce:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800f0d2:	b29b      	uxth	r3, r3
 800f0d4:	ebaa 0303 	sub.w	r3, sl, r3
 800f0d8:	f8dc a000 	ldr.w	sl, [ip]
 800f0dc:	0c12      	lsrs	r2, r2, #16
 800f0de:	fa13 f38a 	uxtah	r3, r3, sl
 800f0e2:	fb06 e202 	mla	r2, r6, r2, lr
 800f0e6:	9300      	str	r3, [sp, #0]
 800f0e8:	9b00      	ldr	r3, [sp, #0]
 800f0ea:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800f0ee:	b292      	uxth	r2, r2
 800f0f0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800f0f4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f0f8:	f8bd 3000 	ldrh.w	r3, [sp]
 800f0fc:	4581      	cmp	r9, r0
 800f0fe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f102:	f84c 3b04 	str.w	r3, [ip], #4
 800f106:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800f10a:	d2db      	bcs.n	800f0c4 <quorem+0x44>
 800f10c:	f855 300b 	ldr.w	r3, [r5, fp]
 800f110:	b92b      	cbnz	r3, 800f11e <quorem+0x9e>
 800f112:	9b01      	ldr	r3, [sp, #4]
 800f114:	3b04      	subs	r3, #4
 800f116:	429d      	cmp	r5, r3
 800f118:	461a      	mov	r2, r3
 800f11a:	d32e      	bcc.n	800f17a <quorem+0xfa>
 800f11c:	613c      	str	r4, [r7, #16]
 800f11e:	4638      	mov	r0, r7
 800f120:	f001 f8c8 	bl	80102b4 <__mcmp>
 800f124:	2800      	cmp	r0, #0
 800f126:	db24      	blt.n	800f172 <quorem+0xf2>
 800f128:	3601      	adds	r6, #1
 800f12a:	4628      	mov	r0, r5
 800f12c:	f04f 0c00 	mov.w	ip, #0
 800f130:	f858 2b04 	ldr.w	r2, [r8], #4
 800f134:	f8d0 e000 	ldr.w	lr, [r0]
 800f138:	b293      	uxth	r3, r2
 800f13a:	ebac 0303 	sub.w	r3, ip, r3
 800f13e:	0c12      	lsrs	r2, r2, #16
 800f140:	fa13 f38e 	uxtah	r3, r3, lr
 800f144:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800f148:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f14c:	b29b      	uxth	r3, r3
 800f14e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f152:	45c1      	cmp	r9, r8
 800f154:	f840 3b04 	str.w	r3, [r0], #4
 800f158:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800f15c:	d2e8      	bcs.n	800f130 <quorem+0xb0>
 800f15e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f162:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f166:	b922      	cbnz	r2, 800f172 <quorem+0xf2>
 800f168:	3b04      	subs	r3, #4
 800f16a:	429d      	cmp	r5, r3
 800f16c:	461a      	mov	r2, r3
 800f16e:	d30a      	bcc.n	800f186 <quorem+0x106>
 800f170:	613c      	str	r4, [r7, #16]
 800f172:	4630      	mov	r0, r6
 800f174:	b003      	add	sp, #12
 800f176:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f17a:	6812      	ldr	r2, [r2, #0]
 800f17c:	3b04      	subs	r3, #4
 800f17e:	2a00      	cmp	r2, #0
 800f180:	d1cc      	bne.n	800f11c <quorem+0x9c>
 800f182:	3c01      	subs	r4, #1
 800f184:	e7c7      	b.n	800f116 <quorem+0x96>
 800f186:	6812      	ldr	r2, [r2, #0]
 800f188:	3b04      	subs	r3, #4
 800f18a:	2a00      	cmp	r2, #0
 800f18c:	d1f0      	bne.n	800f170 <quorem+0xf0>
 800f18e:	3c01      	subs	r4, #1
 800f190:	e7eb      	b.n	800f16a <quorem+0xea>
 800f192:	2000      	movs	r0, #0
 800f194:	e7ee      	b.n	800f174 <quorem+0xf4>
	...

0800f198 <_dtoa_r>:
 800f198:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f19c:	ed2d 8b04 	vpush	{d8-d9}
 800f1a0:	ec57 6b10 	vmov	r6, r7, d0
 800f1a4:	b093      	sub	sp, #76	; 0x4c
 800f1a6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800f1a8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800f1ac:	9106      	str	r1, [sp, #24]
 800f1ae:	ee10 aa10 	vmov	sl, s0
 800f1b2:	4604      	mov	r4, r0
 800f1b4:	9209      	str	r2, [sp, #36]	; 0x24
 800f1b6:	930c      	str	r3, [sp, #48]	; 0x30
 800f1b8:	46bb      	mov	fp, r7
 800f1ba:	b975      	cbnz	r5, 800f1da <_dtoa_r+0x42>
 800f1bc:	2010      	movs	r0, #16
 800f1be:	f000 fdef 	bl	800fda0 <malloc>
 800f1c2:	4602      	mov	r2, r0
 800f1c4:	6260      	str	r0, [r4, #36]	; 0x24
 800f1c6:	b920      	cbnz	r0, 800f1d2 <_dtoa_r+0x3a>
 800f1c8:	4ba7      	ldr	r3, [pc, #668]	; (800f468 <_dtoa_r+0x2d0>)
 800f1ca:	21ea      	movs	r1, #234	; 0xea
 800f1cc:	48a7      	ldr	r0, [pc, #668]	; (800f46c <_dtoa_r+0x2d4>)
 800f1ce:	f002 f875 	bl	80112bc <__assert_func>
 800f1d2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800f1d6:	6005      	str	r5, [r0, #0]
 800f1d8:	60c5      	str	r5, [r0, #12]
 800f1da:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f1dc:	6819      	ldr	r1, [r3, #0]
 800f1de:	b151      	cbz	r1, 800f1f6 <_dtoa_r+0x5e>
 800f1e0:	685a      	ldr	r2, [r3, #4]
 800f1e2:	604a      	str	r2, [r1, #4]
 800f1e4:	2301      	movs	r3, #1
 800f1e6:	4093      	lsls	r3, r2
 800f1e8:	608b      	str	r3, [r1, #8]
 800f1ea:	4620      	mov	r0, r4
 800f1ec:	f000 fe20 	bl	800fe30 <_Bfree>
 800f1f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f1f2:	2200      	movs	r2, #0
 800f1f4:	601a      	str	r2, [r3, #0]
 800f1f6:	1e3b      	subs	r3, r7, #0
 800f1f8:	bfaa      	itet	ge
 800f1fa:	2300      	movge	r3, #0
 800f1fc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800f200:	f8c8 3000 	strge.w	r3, [r8]
 800f204:	4b9a      	ldr	r3, [pc, #616]	; (800f470 <_dtoa_r+0x2d8>)
 800f206:	bfbc      	itt	lt
 800f208:	2201      	movlt	r2, #1
 800f20a:	f8c8 2000 	strlt.w	r2, [r8]
 800f20e:	ea33 030b 	bics.w	r3, r3, fp
 800f212:	d11b      	bne.n	800f24c <_dtoa_r+0xb4>
 800f214:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f216:	f242 730f 	movw	r3, #9999	; 0x270f
 800f21a:	6013      	str	r3, [r2, #0]
 800f21c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f220:	4333      	orrs	r3, r6
 800f222:	f000 8592 	beq.w	800fd4a <_dtoa_r+0xbb2>
 800f226:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f228:	b963      	cbnz	r3, 800f244 <_dtoa_r+0xac>
 800f22a:	4b92      	ldr	r3, [pc, #584]	; (800f474 <_dtoa_r+0x2dc>)
 800f22c:	e022      	b.n	800f274 <_dtoa_r+0xdc>
 800f22e:	4b92      	ldr	r3, [pc, #584]	; (800f478 <_dtoa_r+0x2e0>)
 800f230:	9301      	str	r3, [sp, #4]
 800f232:	3308      	adds	r3, #8
 800f234:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800f236:	6013      	str	r3, [r2, #0]
 800f238:	9801      	ldr	r0, [sp, #4]
 800f23a:	b013      	add	sp, #76	; 0x4c
 800f23c:	ecbd 8b04 	vpop	{d8-d9}
 800f240:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f244:	4b8b      	ldr	r3, [pc, #556]	; (800f474 <_dtoa_r+0x2dc>)
 800f246:	9301      	str	r3, [sp, #4]
 800f248:	3303      	adds	r3, #3
 800f24a:	e7f3      	b.n	800f234 <_dtoa_r+0x9c>
 800f24c:	2200      	movs	r2, #0
 800f24e:	2300      	movs	r3, #0
 800f250:	4650      	mov	r0, sl
 800f252:	4659      	mov	r1, fp
 800f254:	f7f1 fc38 	bl	8000ac8 <__aeabi_dcmpeq>
 800f258:	ec4b ab19 	vmov	d9, sl, fp
 800f25c:	4680      	mov	r8, r0
 800f25e:	b158      	cbz	r0, 800f278 <_dtoa_r+0xe0>
 800f260:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f262:	2301      	movs	r3, #1
 800f264:	6013      	str	r3, [r2, #0]
 800f266:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f268:	2b00      	cmp	r3, #0
 800f26a:	f000 856b 	beq.w	800fd44 <_dtoa_r+0xbac>
 800f26e:	4883      	ldr	r0, [pc, #524]	; (800f47c <_dtoa_r+0x2e4>)
 800f270:	6018      	str	r0, [r3, #0]
 800f272:	1e43      	subs	r3, r0, #1
 800f274:	9301      	str	r3, [sp, #4]
 800f276:	e7df      	b.n	800f238 <_dtoa_r+0xa0>
 800f278:	ec4b ab10 	vmov	d0, sl, fp
 800f27c:	aa10      	add	r2, sp, #64	; 0x40
 800f27e:	a911      	add	r1, sp, #68	; 0x44
 800f280:	4620      	mov	r0, r4
 800f282:	f001 f8bd 	bl	8010400 <__d2b>
 800f286:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800f28a:	ee08 0a10 	vmov	s16, r0
 800f28e:	2d00      	cmp	r5, #0
 800f290:	f000 8084 	beq.w	800f39c <_dtoa_r+0x204>
 800f294:	ee19 3a90 	vmov	r3, s19
 800f298:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f29c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800f2a0:	4656      	mov	r6, sl
 800f2a2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800f2a6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800f2aa:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800f2ae:	4b74      	ldr	r3, [pc, #464]	; (800f480 <_dtoa_r+0x2e8>)
 800f2b0:	2200      	movs	r2, #0
 800f2b2:	4630      	mov	r0, r6
 800f2b4:	4639      	mov	r1, r7
 800f2b6:	f7f0 ffe7 	bl	8000288 <__aeabi_dsub>
 800f2ba:	a365      	add	r3, pc, #404	; (adr r3, 800f450 <_dtoa_r+0x2b8>)
 800f2bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2c0:	f7f1 f99a 	bl	80005f8 <__aeabi_dmul>
 800f2c4:	a364      	add	r3, pc, #400	; (adr r3, 800f458 <_dtoa_r+0x2c0>)
 800f2c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2ca:	f7f0 ffdf 	bl	800028c <__adddf3>
 800f2ce:	4606      	mov	r6, r0
 800f2d0:	4628      	mov	r0, r5
 800f2d2:	460f      	mov	r7, r1
 800f2d4:	f7f1 f926 	bl	8000524 <__aeabi_i2d>
 800f2d8:	a361      	add	r3, pc, #388	; (adr r3, 800f460 <_dtoa_r+0x2c8>)
 800f2da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2de:	f7f1 f98b 	bl	80005f8 <__aeabi_dmul>
 800f2e2:	4602      	mov	r2, r0
 800f2e4:	460b      	mov	r3, r1
 800f2e6:	4630      	mov	r0, r6
 800f2e8:	4639      	mov	r1, r7
 800f2ea:	f7f0 ffcf 	bl	800028c <__adddf3>
 800f2ee:	4606      	mov	r6, r0
 800f2f0:	460f      	mov	r7, r1
 800f2f2:	f7f1 fc31 	bl	8000b58 <__aeabi_d2iz>
 800f2f6:	2200      	movs	r2, #0
 800f2f8:	9000      	str	r0, [sp, #0]
 800f2fa:	2300      	movs	r3, #0
 800f2fc:	4630      	mov	r0, r6
 800f2fe:	4639      	mov	r1, r7
 800f300:	f7f1 fbec 	bl	8000adc <__aeabi_dcmplt>
 800f304:	b150      	cbz	r0, 800f31c <_dtoa_r+0x184>
 800f306:	9800      	ldr	r0, [sp, #0]
 800f308:	f7f1 f90c 	bl	8000524 <__aeabi_i2d>
 800f30c:	4632      	mov	r2, r6
 800f30e:	463b      	mov	r3, r7
 800f310:	f7f1 fbda 	bl	8000ac8 <__aeabi_dcmpeq>
 800f314:	b910      	cbnz	r0, 800f31c <_dtoa_r+0x184>
 800f316:	9b00      	ldr	r3, [sp, #0]
 800f318:	3b01      	subs	r3, #1
 800f31a:	9300      	str	r3, [sp, #0]
 800f31c:	9b00      	ldr	r3, [sp, #0]
 800f31e:	2b16      	cmp	r3, #22
 800f320:	d85a      	bhi.n	800f3d8 <_dtoa_r+0x240>
 800f322:	9a00      	ldr	r2, [sp, #0]
 800f324:	4b57      	ldr	r3, [pc, #348]	; (800f484 <_dtoa_r+0x2ec>)
 800f326:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f32a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f32e:	ec51 0b19 	vmov	r0, r1, d9
 800f332:	f7f1 fbd3 	bl	8000adc <__aeabi_dcmplt>
 800f336:	2800      	cmp	r0, #0
 800f338:	d050      	beq.n	800f3dc <_dtoa_r+0x244>
 800f33a:	9b00      	ldr	r3, [sp, #0]
 800f33c:	3b01      	subs	r3, #1
 800f33e:	9300      	str	r3, [sp, #0]
 800f340:	2300      	movs	r3, #0
 800f342:	930b      	str	r3, [sp, #44]	; 0x2c
 800f344:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f346:	1b5d      	subs	r5, r3, r5
 800f348:	1e6b      	subs	r3, r5, #1
 800f34a:	9305      	str	r3, [sp, #20]
 800f34c:	bf45      	ittet	mi
 800f34e:	f1c5 0301 	rsbmi	r3, r5, #1
 800f352:	9304      	strmi	r3, [sp, #16]
 800f354:	2300      	movpl	r3, #0
 800f356:	2300      	movmi	r3, #0
 800f358:	bf4c      	ite	mi
 800f35a:	9305      	strmi	r3, [sp, #20]
 800f35c:	9304      	strpl	r3, [sp, #16]
 800f35e:	9b00      	ldr	r3, [sp, #0]
 800f360:	2b00      	cmp	r3, #0
 800f362:	db3d      	blt.n	800f3e0 <_dtoa_r+0x248>
 800f364:	9b05      	ldr	r3, [sp, #20]
 800f366:	9a00      	ldr	r2, [sp, #0]
 800f368:	920a      	str	r2, [sp, #40]	; 0x28
 800f36a:	4413      	add	r3, r2
 800f36c:	9305      	str	r3, [sp, #20]
 800f36e:	2300      	movs	r3, #0
 800f370:	9307      	str	r3, [sp, #28]
 800f372:	9b06      	ldr	r3, [sp, #24]
 800f374:	2b09      	cmp	r3, #9
 800f376:	f200 8089 	bhi.w	800f48c <_dtoa_r+0x2f4>
 800f37a:	2b05      	cmp	r3, #5
 800f37c:	bfc4      	itt	gt
 800f37e:	3b04      	subgt	r3, #4
 800f380:	9306      	strgt	r3, [sp, #24]
 800f382:	9b06      	ldr	r3, [sp, #24]
 800f384:	f1a3 0302 	sub.w	r3, r3, #2
 800f388:	bfcc      	ite	gt
 800f38a:	2500      	movgt	r5, #0
 800f38c:	2501      	movle	r5, #1
 800f38e:	2b03      	cmp	r3, #3
 800f390:	f200 8087 	bhi.w	800f4a2 <_dtoa_r+0x30a>
 800f394:	e8df f003 	tbb	[pc, r3]
 800f398:	59383a2d 	.word	0x59383a2d
 800f39c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800f3a0:	441d      	add	r5, r3
 800f3a2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800f3a6:	2b20      	cmp	r3, #32
 800f3a8:	bfc1      	itttt	gt
 800f3aa:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800f3ae:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800f3b2:	fa0b f303 	lslgt.w	r3, fp, r3
 800f3b6:	fa26 f000 	lsrgt.w	r0, r6, r0
 800f3ba:	bfda      	itte	le
 800f3bc:	f1c3 0320 	rsble	r3, r3, #32
 800f3c0:	fa06 f003 	lslle.w	r0, r6, r3
 800f3c4:	4318      	orrgt	r0, r3
 800f3c6:	f7f1 f89d 	bl	8000504 <__aeabi_ui2d>
 800f3ca:	2301      	movs	r3, #1
 800f3cc:	4606      	mov	r6, r0
 800f3ce:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800f3d2:	3d01      	subs	r5, #1
 800f3d4:	930e      	str	r3, [sp, #56]	; 0x38
 800f3d6:	e76a      	b.n	800f2ae <_dtoa_r+0x116>
 800f3d8:	2301      	movs	r3, #1
 800f3da:	e7b2      	b.n	800f342 <_dtoa_r+0x1aa>
 800f3dc:	900b      	str	r0, [sp, #44]	; 0x2c
 800f3de:	e7b1      	b.n	800f344 <_dtoa_r+0x1ac>
 800f3e0:	9b04      	ldr	r3, [sp, #16]
 800f3e2:	9a00      	ldr	r2, [sp, #0]
 800f3e4:	1a9b      	subs	r3, r3, r2
 800f3e6:	9304      	str	r3, [sp, #16]
 800f3e8:	4253      	negs	r3, r2
 800f3ea:	9307      	str	r3, [sp, #28]
 800f3ec:	2300      	movs	r3, #0
 800f3ee:	930a      	str	r3, [sp, #40]	; 0x28
 800f3f0:	e7bf      	b.n	800f372 <_dtoa_r+0x1da>
 800f3f2:	2300      	movs	r3, #0
 800f3f4:	9308      	str	r3, [sp, #32]
 800f3f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f3f8:	2b00      	cmp	r3, #0
 800f3fa:	dc55      	bgt.n	800f4a8 <_dtoa_r+0x310>
 800f3fc:	2301      	movs	r3, #1
 800f3fe:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800f402:	461a      	mov	r2, r3
 800f404:	9209      	str	r2, [sp, #36]	; 0x24
 800f406:	e00c      	b.n	800f422 <_dtoa_r+0x28a>
 800f408:	2301      	movs	r3, #1
 800f40a:	e7f3      	b.n	800f3f4 <_dtoa_r+0x25c>
 800f40c:	2300      	movs	r3, #0
 800f40e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f410:	9308      	str	r3, [sp, #32]
 800f412:	9b00      	ldr	r3, [sp, #0]
 800f414:	4413      	add	r3, r2
 800f416:	9302      	str	r3, [sp, #8]
 800f418:	3301      	adds	r3, #1
 800f41a:	2b01      	cmp	r3, #1
 800f41c:	9303      	str	r3, [sp, #12]
 800f41e:	bfb8      	it	lt
 800f420:	2301      	movlt	r3, #1
 800f422:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800f424:	2200      	movs	r2, #0
 800f426:	6042      	str	r2, [r0, #4]
 800f428:	2204      	movs	r2, #4
 800f42a:	f102 0614 	add.w	r6, r2, #20
 800f42e:	429e      	cmp	r6, r3
 800f430:	6841      	ldr	r1, [r0, #4]
 800f432:	d93d      	bls.n	800f4b0 <_dtoa_r+0x318>
 800f434:	4620      	mov	r0, r4
 800f436:	f000 fcbb 	bl	800fdb0 <_Balloc>
 800f43a:	9001      	str	r0, [sp, #4]
 800f43c:	2800      	cmp	r0, #0
 800f43e:	d13b      	bne.n	800f4b8 <_dtoa_r+0x320>
 800f440:	4b11      	ldr	r3, [pc, #68]	; (800f488 <_dtoa_r+0x2f0>)
 800f442:	4602      	mov	r2, r0
 800f444:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800f448:	e6c0      	b.n	800f1cc <_dtoa_r+0x34>
 800f44a:	2301      	movs	r3, #1
 800f44c:	e7df      	b.n	800f40e <_dtoa_r+0x276>
 800f44e:	bf00      	nop
 800f450:	636f4361 	.word	0x636f4361
 800f454:	3fd287a7 	.word	0x3fd287a7
 800f458:	8b60c8b3 	.word	0x8b60c8b3
 800f45c:	3fc68a28 	.word	0x3fc68a28
 800f460:	509f79fb 	.word	0x509f79fb
 800f464:	3fd34413 	.word	0x3fd34413
 800f468:	0801341b 	.word	0x0801341b
 800f46c:	08013432 	.word	0x08013432
 800f470:	7ff00000 	.word	0x7ff00000
 800f474:	08013417 	.word	0x08013417
 800f478:	0801340e 	.word	0x0801340e
 800f47c:	08013612 	.word	0x08013612
 800f480:	3ff80000 	.word	0x3ff80000
 800f484:	08013528 	.word	0x08013528
 800f488:	0801348d 	.word	0x0801348d
 800f48c:	2501      	movs	r5, #1
 800f48e:	2300      	movs	r3, #0
 800f490:	9306      	str	r3, [sp, #24]
 800f492:	9508      	str	r5, [sp, #32]
 800f494:	f04f 33ff 	mov.w	r3, #4294967295
 800f498:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800f49c:	2200      	movs	r2, #0
 800f49e:	2312      	movs	r3, #18
 800f4a0:	e7b0      	b.n	800f404 <_dtoa_r+0x26c>
 800f4a2:	2301      	movs	r3, #1
 800f4a4:	9308      	str	r3, [sp, #32]
 800f4a6:	e7f5      	b.n	800f494 <_dtoa_r+0x2fc>
 800f4a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f4aa:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800f4ae:	e7b8      	b.n	800f422 <_dtoa_r+0x28a>
 800f4b0:	3101      	adds	r1, #1
 800f4b2:	6041      	str	r1, [r0, #4]
 800f4b4:	0052      	lsls	r2, r2, #1
 800f4b6:	e7b8      	b.n	800f42a <_dtoa_r+0x292>
 800f4b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f4ba:	9a01      	ldr	r2, [sp, #4]
 800f4bc:	601a      	str	r2, [r3, #0]
 800f4be:	9b03      	ldr	r3, [sp, #12]
 800f4c0:	2b0e      	cmp	r3, #14
 800f4c2:	f200 809d 	bhi.w	800f600 <_dtoa_r+0x468>
 800f4c6:	2d00      	cmp	r5, #0
 800f4c8:	f000 809a 	beq.w	800f600 <_dtoa_r+0x468>
 800f4cc:	9b00      	ldr	r3, [sp, #0]
 800f4ce:	2b00      	cmp	r3, #0
 800f4d0:	dd32      	ble.n	800f538 <_dtoa_r+0x3a0>
 800f4d2:	4ab7      	ldr	r2, [pc, #732]	; (800f7b0 <_dtoa_r+0x618>)
 800f4d4:	f003 030f 	and.w	r3, r3, #15
 800f4d8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800f4dc:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f4e0:	9b00      	ldr	r3, [sp, #0]
 800f4e2:	05d8      	lsls	r0, r3, #23
 800f4e4:	ea4f 1723 	mov.w	r7, r3, asr #4
 800f4e8:	d516      	bpl.n	800f518 <_dtoa_r+0x380>
 800f4ea:	4bb2      	ldr	r3, [pc, #712]	; (800f7b4 <_dtoa_r+0x61c>)
 800f4ec:	ec51 0b19 	vmov	r0, r1, d9
 800f4f0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800f4f4:	f7f1 f9aa 	bl	800084c <__aeabi_ddiv>
 800f4f8:	f007 070f 	and.w	r7, r7, #15
 800f4fc:	4682      	mov	sl, r0
 800f4fe:	468b      	mov	fp, r1
 800f500:	2503      	movs	r5, #3
 800f502:	4eac      	ldr	r6, [pc, #688]	; (800f7b4 <_dtoa_r+0x61c>)
 800f504:	b957      	cbnz	r7, 800f51c <_dtoa_r+0x384>
 800f506:	4642      	mov	r2, r8
 800f508:	464b      	mov	r3, r9
 800f50a:	4650      	mov	r0, sl
 800f50c:	4659      	mov	r1, fp
 800f50e:	f7f1 f99d 	bl	800084c <__aeabi_ddiv>
 800f512:	4682      	mov	sl, r0
 800f514:	468b      	mov	fp, r1
 800f516:	e028      	b.n	800f56a <_dtoa_r+0x3d2>
 800f518:	2502      	movs	r5, #2
 800f51a:	e7f2      	b.n	800f502 <_dtoa_r+0x36a>
 800f51c:	07f9      	lsls	r1, r7, #31
 800f51e:	d508      	bpl.n	800f532 <_dtoa_r+0x39a>
 800f520:	4640      	mov	r0, r8
 800f522:	4649      	mov	r1, r9
 800f524:	e9d6 2300 	ldrd	r2, r3, [r6]
 800f528:	f7f1 f866 	bl	80005f8 <__aeabi_dmul>
 800f52c:	3501      	adds	r5, #1
 800f52e:	4680      	mov	r8, r0
 800f530:	4689      	mov	r9, r1
 800f532:	107f      	asrs	r7, r7, #1
 800f534:	3608      	adds	r6, #8
 800f536:	e7e5      	b.n	800f504 <_dtoa_r+0x36c>
 800f538:	f000 809b 	beq.w	800f672 <_dtoa_r+0x4da>
 800f53c:	9b00      	ldr	r3, [sp, #0]
 800f53e:	4f9d      	ldr	r7, [pc, #628]	; (800f7b4 <_dtoa_r+0x61c>)
 800f540:	425e      	negs	r6, r3
 800f542:	4b9b      	ldr	r3, [pc, #620]	; (800f7b0 <_dtoa_r+0x618>)
 800f544:	f006 020f 	and.w	r2, r6, #15
 800f548:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f54c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f550:	ec51 0b19 	vmov	r0, r1, d9
 800f554:	f7f1 f850 	bl	80005f8 <__aeabi_dmul>
 800f558:	1136      	asrs	r6, r6, #4
 800f55a:	4682      	mov	sl, r0
 800f55c:	468b      	mov	fp, r1
 800f55e:	2300      	movs	r3, #0
 800f560:	2502      	movs	r5, #2
 800f562:	2e00      	cmp	r6, #0
 800f564:	d17a      	bne.n	800f65c <_dtoa_r+0x4c4>
 800f566:	2b00      	cmp	r3, #0
 800f568:	d1d3      	bne.n	800f512 <_dtoa_r+0x37a>
 800f56a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f56c:	2b00      	cmp	r3, #0
 800f56e:	f000 8082 	beq.w	800f676 <_dtoa_r+0x4de>
 800f572:	4b91      	ldr	r3, [pc, #580]	; (800f7b8 <_dtoa_r+0x620>)
 800f574:	2200      	movs	r2, #0
 800f576:	4650      	mov	r0, sl
 800f578:	4659      	mov	r1, fp
 800f57a:	f7f1 faaf 	bl	8000adc <__aeabi_dcmplt>
 800f57e:	2800      	cmp	r0, #0
 800f580:	d079      	beq.n	800f676 <_dtoa_r+0x4de>
 800f582:	9b03      	ldr	r3, [sp, #12]
 800f584:	2b00      	cmp	r3, #0
 800f586:	d076      	beq.n	800f676 <_dtoa_r+0x4de>
 800f588:	9b02      	ldr	r3, [sp, #8]
 800f58a:	2b00      	cmp	r3, #0
 800f58c:	dd36      	ble.n	800f5fc <_dtoa_r+0x464>
 800f58e:	9b00      	ldr	r3, [sp, #0]
 800f590:	4650      	mov	r0, sl
 800f592:	4659      	mov	r1, fp
 800f594:	1e5f      	subs	r7, r3, #1
 800f596:	2200      	movs	r2, #0
 800f598:	4b88      	ldr	r3, [pc, #544]	; (800f7bc <_dtoa_r+0x624>)
 800f59a:	f7f1 f82d 	bl	80005f8 <__aeabi_dmul>
 800f59e:	9e02      	ldr	r6, [sp, #8]
 800f5a0:	4682      	mov	sl, r0
 800f5a2:	468b      	mov	fp, r1
 800f5a4:	3501      	adds	r5, #1
 800f5a6:	4628      	mov	r0, r5
 800f5a8:	f7f0 ffbc 	bl	8000524 <__aeabi_i2d>
 800f5ac:	4652      	mov	r2, sl
 800f5ae:	465b      	mov	r3, fp
 800f5b0:	f7f1 f822 	bl	80005f8 <__aeabi_dmul>
 800f5b4:	4b82      	ldr	r3, [pc, #520]	; (800f7c0 <_dtoa_r+0x628>)
 800f5b6:	2200      	movs	r2, #0
 800f5b8:	f7f0 fe68 	bl	800028c <__adddf3>
 800f5bc:	46d0      	mov	r8, sl
 800f5be:	46d9      	mov	r9, fp
 800f5c0:	4682      	mov	sl, r0
 800f5c2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800f5c6:	2e00      	cmp	r6, #0
 800f5c8:	d158      	bne.n	800f67c <_dtoa_r+0x4e4>
 800f5ca:	4b7e      	ldr	r3, [pc, #504]	; (800f7c4 <_dtoa_r+0x62c>)
 800f5cc:	2200      	movs	r2, #0
 800f5ce:	4640      	mov	r0, r8
 800f5d0:	4649      	mov	r1, r9
 800f5d2:	f7f0 fe59 	bl	8000288 <__aeabi_dsub>
 800f5d6:	4652      	mov	r2, sl
 800f5d8:	465b      	mov	r3, fp
 800f5da:	4680      	mov	r8, r0
 800f5dc:	4689      	mov	r9, r1
 800f5de:	f7f1 fa9b 	bl	8000b18 <__aeabi_dcmpgt>
 800f5e2:	2800      	cmp	r0, #0
 800f5e4:	f040 8295 	bne.w	800fb12 <_dtoa_r+0x97a>
 800f5e8:	4652      	mov	r2, sl
 800f5ea:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800f5ee:	4640      	mov	r0, r8
 800f5f0:	4649      	mov	r1, r9
 800f5f2:	f7f1 fa73 	bl	8000adc <__aeabi_dcmplt>
 800f5f6:	2800      	cmp	r0, #0
 800f5f8:	f040 8289 	bne.w	800fb0e <_dtoa_r+0x976>
 800f5fc:	ec5b ab19 	vmov	sl, fp, d9
 800f600:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f602:	2b00      	cmp	r3, #0
 800f604:	f2c0 8148 	blt.w	800f898 <_dtoa_r+0x700>
 800f608:	9a00      	ldr	r2, [sp, #0]
 800f60a:	2a0e      	cmp	r2, #14
 800f60c:	f300 8144 	bgt.w	800f898 <_dtoa_r+0x700>
 800f610:	4b67      	ldr	r3, [pc, #412]	; (800f7b0 <_dtoa_r+0x618>)
 800f612:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f616:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f61a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f61c:	2b00      	cmp	r3, #0
 800f61e:	f280 80d5 	bge.w	800f7cc <_dtoa_r+0x634>
 800f622:	9b03      	ldr	r3, [sp, #12]
 800f624:	2b00      	cmp	r3, #0
 800f626:	f300 80d1 	bgt.w	800f7cc <_dtoa_r+0x634>
 800f62a:	f040 826f 	bne.w	800fb0c <_dtoa_r+0x974>
 800f62e:	4b65      	ldr	r3, [pc, #404]	; (800f7c4 <_dtoa_r+0x62c>)
 800f630:	2200      	movs	r2, #0
 800f632:	4640      	mov	r0, r8
 800f634:	4649      	mov	r1, r9
 800f636:	f7f0 ffdf 	bl	80005f8 <__aeabi_dmul>
 800f63a:	4652      	mov	r2, sl
 800f63c:	465b      	mov	r3, fp
 800f63e:	f7f1 fa61 	bl	8000b04 <__aeabi_dcmpge>
 800f642:	9e03      	ldr	r6, [sp, #12]
 800f644:	4637      	mov	r7, r6
 800f646:	2800      	cmp	r0, #0
 800f648:	f040 8245 	bne.w	800fad6 <_dtoa_r+0x93e>
 800f64c:	9d01      	ldr	r5, [sp, #4]
 800f64e:	2331      	movs	r3, #49	; 0x31
 800f650:	f805 3b01 	strb.w	r3, [r5], #1
 800f654:	9b00      	ldr	r3, [sp, #0]
 800f656:	3301      	adds	r3, #1
 800f658:	9300      	str	r3, [sp, #0]
 800f65a:	e240      	b.n	800fade <_dtoa_r+0x946>
 800f65c:	07f2      	lsls	r2, r6, #31
 800f65e:	d505      	bpl.n	800f66c <_dtoa_r+0x4d4>
 800f660:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f664:	f7f0 ffc8 	bl	80005f8 <__aeabi_dmul>
 800f668:	3501      	adds	r5, #1
 800f66a:	2301      	movs	r3, #1
 800f66c:	1076      	asrs	r6, r6, #1
 800f66e:	3708      	adds	r7, #8
 800f670:	e777      	b.n	800f562 <_dtoa_r+0x3ca>
 800f672:	2502      	movs	r5, #2
 800f674:	e779      	b.n	800f56a <_dtoa_r+0x3d2>
 800f676:	9f00      	ldr	r7, [sp, #0]
 800f678:	9e03      	ldr	r6, [sp, #12]
 800f67a:	e794      	b.n	800f5a6 <_dtoa_r+0x40e>
 800f67c:	9901      	ldr	r1, [sp, #4]
 800f67e:	4b4c      	ldr	r3, [pc, #304]	; (800f7b0 <_dtoa_r+0x618>)
 800f680:	4431      	add	r1, r6
 800f682:	910d      	str	r1, [sp, #52]	; 0x34
 800f684:	9908      	ldr	r1, [sp, #32]
 800f686:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800f68a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800f68e:	2900      	cmp	r1, #0
 800f690:	d043      	beq.n	800f71a <_dtoa_r+0x582>
 800f692:	494d      	ldr	r1, [pc, #308]	; (800f7c8 <_dtoa_r+0x630>)
 800f694:	2000      	movs	r0, #0
 800f696:	f7f1 f8d9 	bl	800084c <__aeabi_ddiv>
 800f69a:	4652      	mov	r2, sl
 800f69c:	465b      	mov	r3, fp
 800f69e:	f7f0 fdf3 	bl	8000288 <__aeabi_dsub>
 800f6a2:	9d01      	ldr	r5, [sp, #4]
 800f6a4:	4682      	mov	sl, r0
 800f6a6:	468b      	mov	fp, r1
 800f6a8:	4649      	mov	r1, r9
 800f6aa:	4640      	mov	r0, r8
 800f6ac:	f7f1 fa54 	bl	8000b58 <__aeabi_d2iz>
 800f6b0:	4606      	mov	r6, r0
 800f6b2:	f7f0 ff37 	bl	8000524 <__aeabi_i2d>
 800f6b6:	4602      	mov	r2, r0
 800f6b8:	460b      	mov	r3, r1
 800f6ba:	4640      	mov	r0, r8
 800f6bc:	4649      	mov	r1, r9
 800f6be:	f7f0 fde3 	bl	8000288 <__aeabi_dsub>
 800f6c2:	3630      	adds	r6, #48	; 0x30
 800f6c4:	f805 6b01 	strb.w	r6, [r5], #1
 800f6c8:	4652      	mov	r2, sl
 800f6ca:	465b      	mov	r3, fp
 800f6cc:	4680      	mov	r8, r0
 800f6ce:	4689      	mov	r9, r1
 800f6d0:	f7f1 fa04 	bl	8000adc <__aeabi_dcmplt>
 800f6d4:	2800      	cmp	r0, #0
 800f6d6:	d163      	bne.n	800f7a0 <_dtoa_r+0x608>
 800f6d8:	4642      	mov	r2, r8
 800f6da:	464b      	mov	r3, r9
 800f6dc:	4936      	ldr	r1, [pc, #216]	; (800f7b8 <_dtoa_r+0x620>)
 800f6de:	2000      	movs	r0, #0
 800f6e0:	f7f0 fdd2 	bl	8000288 <__aeabi_dsub>
 800f6e4:	4652      	mov	r2, sl
 800f6e6:	465b      	mov	r3, fp
 800f6e8:	f7f1 f9f8 	bl	8000adc <__aeabi_dcmplt>
 800f6ec:	2800      	cmp	r0, #0
 800f6ee:	f040 80b5 	bne.w	800f85c <_dtoa_r+0x6c4>
 800f6f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f6f4:	429d      	cmp	r5, r3
 800f6f6:	d081      	beq.n	800f5fc <_dtoa_r+0x464>
 800f6f8:	4b30      	ldr	r3, [pc, #192]	; (800f7bc <_dtoa_r+0x624>)
 800f6fa:	2200      	movs	r2, #0
 800f6fc:	4650      	mov	r0, sl
 800f6fe:	4659      	mov	r1, fp
 800f700:	f7f0 ff7a 	bl	80005f8 <__aeabi_dmul>
 800f704:	4b2d      	ldr	r3, [pc, #180]	; (800f7bc <_dtoa_r+0x624>)
 800f706:	4682      	mov	sl, r0
 800f708:	468b      	mov	fp, r1
 800f70a:	4640      	mov	r0, r8
 800f70c:	4649      	mov	r1, r9
 800f70e:	2200      	movs	r2, #0
 800f710:	f7f0 ff72 	bl	80005f8 <__aeabi_dmul>
 800f714:	4680      	mov	r8, r0
 800f716:	4689      	mov	r9, r1
 800f718:	e7c6      	b.n	800f6a8 <_dtoa_r+0x510>
 800f71a:	4650      	mov	r0, sl
 800f71c:	4659      	mov	r1, fp
 800f71e:	f7f0 ff6b 	bl	80005f8 <__aeabi_dmul>
 800f722:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f724:	9d01      	ldr	r5, [sp, #4]
 800f726:	930f      	str	r3, [sp, #60]	; 0x3c
 800f728:	4682      	mov	sl, r0
 800f72a:	468b      	mov	fp, r1
 800f72c:	4649      	mov	r1, r9
 800f72e:	4640      	mov	r0, r8
 800f730:	f7f1 fa12 	bl	8000b58 <__aeabi_d2iz>
 800f734:	4606      	mov	r6, r0
 800f736:	f7f0 fef5 	bl	8000524 <__aeabi_i2d>
 800f73a:	3630      	adds	r6, #48	; 0x30
 800f73c:	4602      	mov	r2, r0
 800f73e:	460b      	mov	r3, r1
 800f740:	4640      	mov	r0, r8
 800f742:	4649      	mov	r1, r9
 800f744:	f7f0 fda0 	bl	8000288 <__aeabi_dsub>
 800f748:	f805 6b01 	strb.w	r6, [r5], #1
 800f74c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f74e:	429d      	cmp	r5, r3
 800f750:	4680      	mov	r8, r0
 800f752:	4689      	mov	r9, r1
 800f754:	f04f 0200 	mov.w	r2, #0
 800f758:	d124      	bne.n	800f7a4 <_dtoa_r+0x60c>
 800f75a:	4b1b      	ldr	r3, [pc, #108]	; (800f7c8 <_dtoa_r+0x630>)
 800f75c:	4650      	mov	r0, sl
 800f75e:	4659      	mov	r1, fp
 800f760:	f7f0 fd94 	bl	800028c <__adddf3>
 800f764:	4602      	mov	r2, r0
 800f766:	460b      	mov	r3, r1
 800f768:	4640      	mov	r0, r8
 800f76a:	4649      	mov	r1, r9
 800f76c:	f7f1 f9d4 	bl	8000b18 <__aeabi_dcmpgt>
 800f770:	2800      	cmp	r0, #0
 800f772:	d173      	bne.n	800f85c <_dtoa_r+0x6c4>
 800f774:	4652      	mov	r2, sl
 800f776:	465b      	mov	r3, fp
 800f778:	4913      	ldr	r1, [pc, #76]	; (800f7c8 <_dtoa_r+0x630>)
 800f77a:	2000      	movs	r0, #0
 800f77c:	f7f0 fd84 	bl	8000288 <__aeabi_dsub>
 800f780:	4602      	mov	r2, r0
 800f782:	460b      	mov	r3, r1
 800f784:	4640      	mov	r0, r8
 800f786:	4649      	mov	r1, r9
 800f788:	f7f1 f9a8 	bl	8000adc <__aeabi_dcmplt>
 800f78c:	2800      	cmp	r0, #0
 800f78e:	f43f af35 	beq.w	800f5fc <_dtoa_r+0x464>
 800f792:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800f794:	1e6b      	subs	r3, r5, #1
 800f796:	930f      	str	r3, [sp, #60]	; 0x3c
 800f798:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800f79c:	2b30      	cmp	r3, #48	; 0x30
 800f79e:	d0f8      	beq.n	800f792 <_dtoa_r+0x5fa>
 800f7a0:	9700      	str	r7, [sp, #0]
 800f7a2:	e049      	b.n	800f838 <_dtoa_r+0x6a0>
 800f7a4:	4b05      	ldr	r3, [pc, #20]	; (800f7bc <_dtoa_r+0x624>)
 800f7a6:	f7f0 ff27 	bl	80005f8 <__aeabi_dmul>
 800f7aa:	4680      	mov	r8, r0
 800f7ac:	4689      	mov	r9, r1
 800f7ae:	e7bd      	b.n	800f72c <_dtoa_r+0x594>
 800f7b0:	08013528 	.word	0x08013528
 800f7b4:	08013500 	.word	0x08013500
 800f7b8:	3ff00000 	.word	0x3ff00000
 800f7bc:	40240000 	.word	0x40240000
 800f7c0:	401c0000 	.word	0x401c0000
 800f7c4:	40140000 	.word	0x40140000
 800f7c8:	3fe00000 	.word	0x3fe00000
 800f7cc:	9d01      	ldr	r5, [sp, #4]
 800f7ce:	4656      	mov	r6, sl
 800f7d0:	465f      	mov	r7, fp
 800f7d2:	4642      	mov	r2, r8
 800f7d4:	464b      	mov	r3, r9
 800f7d6:	4630      	mov	r0, r6
 800f7d8:	4639      	mov	r1, r7
 800f7da:	f7f1 f837 	bl	800084c <__aeabi_ddiv>
 800f7de:	f7f1 f9bb 	bl	8000b58 <__aeabi_d2iz>
 800f7e2:	4682      	mov	sl, r0
 800f7e4:	f7f0 fe9e 	bl	8000524 <__aeabi_i2d>
 800f7e8:	4642      	mov	r2, r8
 800f7ea:	464b      	mov	r3, r9
 800f7ec:	f7f0 ff04 	bl	80005f8 <__aeabi_dmul>
 800f7f0:	4602      	mov	r2, r0
 800f7f2:	460b      	mov	r3, r1
 800f7f4:	4630      	mov	r0, r6
 800f7f6:	4639      	mov	r1, r7
 800f7f8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800f7fc:	f7f0 fd44 	bl	8000288 <__aeabi_dsub>
 800f800:	f805 6b01 	strb.w	r6, [r5], #1
 800f804:	9e01      	ldr	r6, [sp, #4]
 800f806:	9f03      	ldr	r7, [sp, #12]
 800f808:	1bae      	subs	r6, r5, r6
 800f80a:	42b7      	cmp	r7, r6
 800f80c:	4602      	mov	r2, r0
 800f80e:	460b      	mov	r3, r1
 800f810:	d135      	bne.n	800f87e <_dtoa_r+0x6e6>
 800f812:	f7f0 fd3b 	bl	800028c <__adddf3>
 800f816:	4642      	mov	r2, r8
 800f818:	464b      	mov	r3, r9
 800f81a:	4606      	mov	r6, r0
 800f81c:	460f      	mov	r7, r1
 800f81e:	f7f1 f97b 	bl	8000b18 <__aeabi_dcmpgt>
 800f822:	b9d0      	cbnz	r0, 800f85a <_dtoa_r+0x6c2>
 800f824:	4642      	mov	r2, r8
 800f826:	464b      	mov	r3, r9
 800f828:	4630      	mov	r0, r6
 800f82a:	4639      	mov	r1, r7
 800f82c:	f7f1 f94c 	bl	8000ac8 <__aeabi_dcmpeq>
 800f830:	b110      	cbz	r0, 800f838 <_dtoa_r+0x6a0>
 800f832:	f01a 0f01 	tst.w	sl, #1
 800f836:	d110      	bne.n	800f85a <_dtoa_r+0x6c2>
 800f838:	4620      	mov	r0, r4
 800f83a:	ee18 1a10 	vmov	r1, s16
 800f83e:	f000 faf7 	bl	800fe30 <_Bfree>
 800f842:	2300      	movs	r3, #0
 800f844:	9800      	ldr	r0, [sp, #0]
 800f846:	702b      	strb	r3, [r5, #0]
 800f848:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f84a:	3001      	adds	r0, #1
 800f84c:	6018      	str	r0, [r3, #0]
 800f84e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f850:	2b00      	cmp	r3, #0
 800f852:	f43f acf1 	beq.w	800f238 <_dtoa_r+0xa0>
 800f856:	601d      	str	r5, [r3, #0]
 800f858:	e4ee      	b.n	800f238 <_dtoa_r+0xa0>
 800f85a:	9f00      	ldr	r7, [sp, #0]
 800f85c:	462b      	mov	r3, r5
 800f85e:	461d      	mov	r5, r3
 800f860:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f864:	2a39      	cmp	r2, #57	; 0x39
 800f866:	d106      	bne.n	800f876 <_dtoa_r+0x6de>
 800f868:	9a01      	ldr	r2, [sp, #4]
 800f86a:	429a      	cmp	r2, r3
 800f86c:	d1f7      	bne.n	800f85e <_dtoa_r+0x6c6>
 800f86e:	9901      	ldr	r1, [sp, #4]
 800f870:	2230      	movs	r2, #48	; 0x30
 800f872:	3701      	adds	r7, #1
 800f874:	700a      	strb	r2, [r1, #0]
 800f876:	781a      	ldrb	r2, [r3, #0]
 800f878:	3201      	adds	r2, #1
 800f87a:	701a      	strb	r2, [r3, #0]
 800f87c:	e790      	b.n	800f7a0 <_dtoa_r+0x608>
 800f87e:	4ba6      	ldr	r3, [pc, #664]	; (800fb18 <_dtoa_r+0x980>)
 800f880:	2200      	movs	r2, #0
 800f882:	f7f0 feb9 	bl	80005f8 <__aeabi_dmul>
 800f886:	2200      	movs	r2, #0
 800f888:	2300      	movs	r3, #0
 800f88a:	4606      	mov	r6, r0
 800f88c:	460f      	mov	r7, r1
 800f88e:	f7f1 f91b 	bl	8000ac8 <__aeabi_dcmpeq>
 800f892:	2800      	cmp	r0, #0
 800f894:	d09d      	beq.n	800f7d2 <_dtoa_r+0x63a>
 800f896:	e7cf      	b.n	800f838 <_dtoa_r+0x6a0>
 800f898:	9a08      	ldr	r2, [sp, #32]
 800f89a:	2a00      	cmp	r2, #0
 800f89c:	f000 80d7 	beq.w	800fa4e <_dtoa_r+0x8b6>
 800f8a0:	9a06      	ldr	r2, [sp, #24]
 800f8a2:	2a01      	cmp	r2, #1
 800f8a4:	f300 80ba 	bgt.w	800fa1c <_dtoa_r+0x884>
 800f8a8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f8aa:	2a00      	cmp	r2, #0
 800f8ac:	f000 80b2 	beq.w	800fa14 <_dtoa_r+0x87c>
 800f8b0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800f8b4:	9e07      	ldr	r6, [sp, #28]
 800f8b6:	9d04      	ldr	r5, [sp, #16]
 800f8b8:	9a04      	ldr	r2, [sp, #16]
 800f8ba:	441a      	add	r2, r3
 800f8bc:	9204      	str	r2, [sp, #16]
 800f8be:	9a05      	ldr	r2, [sp, #20]
 800f8c0:	2101      	movs	r1, #1
 800f8c2:	441a      	add	r2, r3
 800f8c4:	4620      	mov	r0, r4
 800f8c6:	9205      	str	r2, [sp, #20]
 800f8c8:	f000 fb6a 	bl	800ffa0 <__i2b>
 800f8cc:	4607      	mov	r7, r0
 800f8ce:	2d00      	cmp	r5, #0
 800f8d0:	dd0c      	ble.n	800f8ec <_dtoa_r+0x754>
 800f8d2:	9b05      	ldr	r3, [sp, #20]
 800f8d4:	2b00      	cmp	r3, #0
 800f8d6:	dd09      	ble.n	800f8ec <_dtoa_r+0x754>
 800f8d8:	42ab      	cmp	r3, r5
 800f8da:	9a04      	ldr	r2, [sp, #16]
 800f8dc:	bfa8      	it	ge
 800f8de:	462b      	movge	r3, r5
 800f8e0:	1ad2      	subs	r2, r2, r3
 800f8e2:	9204      	str	r2, [sp, #16]
 800f8e4:	9a05      	ldr	r2, [sp, #20]
 800f8e6:	1aed      	subs	r5, r5, r3
 800f8e8:	1ad3      	subs	r3, r2, r3
 800f8ea:	9305      	str	r3, [sp, #20]
 800f8ec:	9b07      	ldr	r3, [sp, #28]
 800f8ee:	b31b      	cbz	r3, 800f938 <_dtoa_r+0x7a0>
 800f8f0:	9b08      	ldr	r3, [sp, #32]
 800f8f2:	2b00      	cmp	r3, #0
 800f8f4:	f000 80af 	beq.w	800fa56 <_dtoa_r+0x8be>
 800f8f8:	2e00      	cmp	r6, #0
 800f8fa:	dd13      	ble.n	800f924 <_dtoa_r+0x78c>
 800f8fc:	4639      	mov	r1, r7
 800f8fe:	4632      	mov	r2, r6
 800f900:	4620      	mov	r0, r4
 800f902:	f000 fc0d 	bl	8010120 <__pow5mult>
 800f906:	ee18 2a10 	vmov	r2, s16
 800f90a:	4601      	mov	r1, r0
 800f90c:	4607      	mov	r7, r0
 800f90e:	4620      	mov	r0, r4
 800f910:	f000 fb5c 	bl	800ffcc <__multiply>
 800f914:	ee18 1a10 	vmov	r1, s16
 800f918:	4680      	mov	r8, r0
 800f91a:	4620      	mov	r0, r4
 800f91c:	f000 fa88 	bl	800fe30 <_Bfree>
 800f920:	ee08 8a10 	vmov	s16, r8
 800f924:	9b07      	ldr	r3, [sp, #28]
 800f926:	1b9a      	subs	r2, r3, r6
 800f928:	d006      	beq.n	800f938 <_dtoa_r+0x7a0>
 800f92a:	ee18 1a10 	vmov	r1, s16
 800f92e:	4620      	mov	r0, r4
 800f930:	f000 fbf6 	bl	8010120 <__pow5mult>
 800f934:	ee08 0a10 	vmov	s16, r0
 800f938:	2101      	movs	r1, #1
 800f93a:	4620      	mov	r0, r4
 800f93c:	f000 fb30 	bl	800ffa0 <__i2b>
 800f940:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f942:	2b00      	cmp	r3, #0
 800f944:	4606      	mov	r6, r0
 800f946:	f340 8088 	ble.w	800fa5a <_dtoa_r+0x8c2>
 800f94a:	461a      	mov	r2, r3
 800f94c:	4601      	mov	r1, r0
 800f94e:	4620      	mov	r0, r4
 800f950:	f000 fbe6 	bl	8010120 <__pow5mult>
 800f954:	9b06      	ldr	r3, [sp, #24]
 800f956:	2b01      	cmp	r3, #1
 800f958:	4606      	mov	r6, r0
 800f95a:	f340 8081 	ble.w	800fa60 <_dtoa_r+0x8c8>
 800f95e:	f04f 0800 	mov.w	r8, #0
 800f962:	6933      	ldr	r3, [r6, #16]
 800f964:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800f968:	6918      	ldr	r0, [r3, #16]
 800f96a:	f000 fac9 	bl	800ff00 <__hi0bits>
 800f96e:	f1c0 0020 	rsb	r0, r0, #32
 800f972:	9b05      	ldr	r3, [sp, #20]
 800f974:	4418      	add	r0, r3
 800f976:	f010 001f 	ands.w	r0, r0, #31
 800f97a:	f000 8092 	beq.w	800faa2 <_dtoa_r+0x90a>
 800f97e:	f1c0 0320 	rsb	r3, r0, #32
 800f982:	2b04      	cmp	r3, #4
 800f984:	f340 808a 	ble.w	800fa9c <_dtoa_r+0x904>
 800f988:	f1c0 001c 	rsb	r0, r0, #28
 800f98c:	9b04      	ldr	r3, [sp, #16]
 800f98e:	4403      	add	r3, r0
 800f990:	9304      	str	r3, [sp, #16]
 800f992:	9b05      	ldr	r3, [sp, #20]
 800f994:	4403      	add	r3, r0
 800f996:	4405      	add	r5, r0
 800f998:	9305      	str	r3, [sp, #20]
 800f99a:	9b04      	ldr	r3, [sp, #16]
 800f99c:	2b00      	cmp	r3, #0
 800f99e:	dd07      	ble.n	800f9b0 <_dtoa_r+0x818>
 800f9a0:	ee18 1a10 	vmov	r1, s16
 800f9a4:	461a      	mov	r2, r3
 800f9a6:	4620      	mov	r0, r4
 800f9a8:	f000 fc14 	bl	80101d4 <__lshift>
 800f9ac:	ee08 0a10 	vmov	s16, r0
 800f9b0:	9b05      	ldr	r3, [sp, #20]
 800f9b2:	2b00      	cmp	r3, #0
 800f9b4:	dd05      	ble.n	800f9c2 <_dtoa_r+0x82a>
 800f9b6:	4631      	mov	r1, r6
 800f9b8:	461a      	mov	r2, r3
 800f9ba:	4620      	mov	r0, r4
 800f9bc:	f000 fc0a 	bl	80101d4 <__lshift>
 800f9c0:	4606      	mov	r6, r0
 800f9c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f9c4:	2b00      	cmp	r3, #0
 800f9c6:	d06e      	beq.n	800faa6 <_dtoa_r+0x90e>
 800f9c8:	ee18 0a10 	vmov	r0, s16
 800f9cc:	4631      	mov	r1, r6
 800f9ce:	f000 fc71 	bl	80102b4 <__mcmp>
 800f9d2:	2800      	cmp	r0, #0
 800f9d4:	da67      	bge.n	800faa6 <_dtoa_r+0x90e>
 800f9d6:	9b00      	ldr	r3, [sp, #0]
 800f9d8:	3b01      	subs	r3, #1
 800f9da:	ee18 1a10 	vmov	r1, s16
 800f9de:	9300      	str	r3, [sp, #0]
 800f9e0:	220a      	movs	r2, #10
 800f9e2:	2300      	movs	r3, #0
 800f9e4:	4620      	mov	r0, r4
 800f9e6:	f000 fa45 	bl	800fe74 <__multadd>
 800f9ea:	9b08      	ldr	r3, [sp, #32]
 800f9ec:	ee08 0a10 	vmov	s16, r0
 800f9f0:	2b00      	cmp	r3, #0
 800f9f2:	f000 81b1 	beq.w	800fd58 <_dtoa_r+0xbc0>
 800f9f6:	2300      	movs	r3, #0
 800f9f8:	4639      	mov	r1, r7
 800f9fa:	220a      	movs	r2, #10
 800f9fc:	4620      	mov	r0, r4
 800f9fe:	f000 fa39 	bl	800fe74 <__multadd>
 800fa02:	9b02      	ldr	r3, [sp, #8]
 800fa04:	2b00      	cmp	r3, #0
 800fa06:	4607      	mov	r7, r0
 800fa08:	f300 808e 	bgt.w	800fb28 <_dtoa_r+0x990>
 800fa0c:	9b06      	ldr	r3, [sp, #24]
 800fa0e:	2b02      	cmp	r3, #2
 800fa10:	dc51      	bgt.n	800fab6 <_dtoa_r+0x91e>
 800fa12:	e089      	b.n	800fb28 <_dtoa_r+0x990>
 800fa14:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800fa16:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800fa1a:	e74b      	b.n	800f8b4 <_dtoa_r+0x71c>
 800fa1c:	9b03      	ldr	r3, [sp, #12]
 800fa1e:	1e5e      	subs	r6, r3, #1
 800fa20:	9b07      	ldr	r3, [sp, #28]
 800fa22:	42b3      	cmp	r3, r6
 800fa24:	bfbf      	itttt	lt
 800fa26:	9b07      	ldrlt	r3, [sp, #28]
 800fa28:	9607      	strlt	r6, [sp, #28]
 800fa2a:	1af2      	sublt	r2, r6, r3
 800fa2c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800fa2e:	bfb6      	itet	lt
 800fa30:	189b      	addlt	r3, r3, r2
 800fa32:	1b9e      	subge	r6, r3, r6
 800fa34:	930a      	strlt	r3, [sp, #40]	; 0x28
 800fa36:	9b03      	ldr	r3, [sp, #12]
 800fa38:	bfb8      	it	lt
 800fa3a:	2600      	movlt	r6, #0
 800fa3c:	2b00      	cmp	r3, #0
 800fa3e:	bfb7      	itett	lt
 800fa40:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800fa44:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800fa48:	1a9d      	sublt	r5, r3, r2
 800fa4a:	2300      	movlt	r3, #0
 800fa4c:	e734      	b.n	800f8b8 <_dtoa_r+0x720>
 800fa4e:	9e07      	ldr	r6, [sp, #28]
 800fa50:	9d04      	ldr	r5, [sp, #16]
 800fa52:	9f08      	ldr	r7, [sp, #32]
 800fa54:	e73b      	b.n	800f8ce <_dtoa_r+0x736>
 800fa56:	9a07      	ldr	r2, [sp, #28]
 800fa58:	e767      	b.n	800f92a <_dtoa_r+0x792>
 800fa5a:	9b06      	ldr	r3, [sp, #24]
 800fa5c:	2b01      	cmp	r3, #1
 800fa5e:	dc18      	bgt.n	800fa92 <_dtoa_r+0x8fa>
 800fa60:	f1ba 0f00 	cmp.w	sl, #0
 800fa64:	d115      	bne.n	800fa92 <_dtoa_r+0x8fa>
 800fa66:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800fa6a:	b993      	cbnz	r3, 800fa92 <_dtoa_r+0x8fa>
 800fa6c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800fa70:	0d1b      	lsrs	r3, r3, #20
 800fa72:	051b      	lsls	r3, r3, #20
 800fa74:	b183      	cbz	r3, 800fa98 <_dtoa_r+0x900>
 800fa76:	9b04      	ldr	r3, [sp, #16]
 800fa78:	3301      	adds	r3, #1
 800fa7a:	9304      	str	r3, [sp, #16]
 800fa7c:	9b05      	ldr	r3, [sp, #20]
 800fa7e:	3301      	adds	r3, #1
 800fa80:	9305      	str	r3, [sp, #20]
 800fa82:	f04f 0801 	mov.w	r8, #1
 800fa86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fa88:	2b00      	cmp	r3, #0
 800fa8a:	f47f af6a 	bne.w	800f962 <_dtoa_r+0x7ca>
 800fa8e:	2001      	movs	r0, #1
 800fa90:	e76f      	b.n	800f972 <_dtoa_r+0x7da>
 800fa92:	f04f 0800 	mov.w	r8, #0
 800fa96:	e7f6      	b.n	800fa86 <_dtoa_r+0x8ee>
 800fa98:	4698      	mov	r8, r3
 800fa9a:	e7f4      	b.n	800fa86 <_dtoa_r+0x8ee>
 800fa9c:	f43f af7d 	beq.w	800f99a <_dtoa_r+0x802>
 800faa0:	4618      	mov	r0, r3
 800faa2:	301c      	adds	r0, #28
 800faa4:	e772      	b.n	800f98c <_dtoa_r+0x7f4>
 800faa6:	9b03      	ldr	r3, [sp, #12]
 800faa8:	2b00      	cmp	r3, #0
 800faaa:	dc37      	bgt.n	800fb1c <_dtoa_r+0x984>
 800faac:	9b06      	ldr	r3, [sp, #24]
 800faae:	2b02      	cmp	r3, #2
 800fab0:	dd34      	ble.n	800fb1c <_dtoa_r+0x984>
 800fab2:	9b03      	ldr	r3, [sp, #12]
 800fab4:	9302      	str	r3, [sp, #8]
 800fab6:	9b02      	ldr	r3, [sp, #8]
 800fab8:	b96b      	cbnz	r3, 800fad6 <_dtoa_r+0x93e>
 800faba:	4631      	mov	r1, r6
 800fabc:	2205      	movs	r2, #5
 800fabe:	4620      	mov	r0, r4
 800fac0:	f000 f9d8 	bl	800fe74 <__multadd>
 800fac4:	4601      	mov	r1, r0
 800fac6:	4606      	mov	r6, r0
 800fac8:	ee18 0a10 	vmov	r0, s16
 800facc:	f000 fbf2 	bl	80102b4 <__mcmp>
 800fad0:	2800      	cmp	r0, #0
 800fad2:	f73f adbb 	bgt.w	800f64c <_dtoa_r+0x4b4>
 800fad6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fad8:	9d01      	ldr	r5, [sp, #4]
 800fada:	43db      	mvns	r3, r3
 800fadc:	9300      	str	r3, [sp, #0]
 800fade:	f04f 0800 	mov.w	r8, #0
 800fae2:	4631      	mov	r1, r6
 800fae4:	4620      	mov	r0, r4
 800fae6:	f000 f9a3 	bl	800fe30 <_Bfree>
 800faea:	2f00      	cmp	r7, #0
 800faec:	f43f aea4 	beq.w	800f838 <_dtoa_r+0x6a0>
 800faf0:	f1b8 0f00 	cmp.w	r8, #0
 800faf4:	d005      	beq.n	800fb02 <_dtoa_r+0x96a>
 800faf6:	45b8      	cmp	r8, r7
 800faf8:	d003      	beq.n	800fb02 <_dtoa_r+0x96a>
 800fafa:	4641      	mov	r1, r8
 800fafc:	4620      	mov	r0, r4
 800fafe:	f000 f997 	bl	800fe30 <_Bfree>
 800fb02:	4639      	mov	r1, r7
 800fb04:	4620      	mov	r0, r4
 800fb06:	f000 f993 	bl	800fe30 <_Bfree>
 800fb0a:	e695      	b.n	800f838 <_dtoa_r+0x6a0>
 800fb0c:	2600      	movs	r6, #0
 800fb0e:	4637      	mov	r7, r6
 800fb10:	e7e1      	b.n	800fad6 <_dtoa_r+0x93e>
 800fb12:	9700      	str	r7, [sp, #0]
 800fb14:	4637      	mov	r7, r6
 800fb16:	e599      	b.n	800f64c <_dtoa_r+0x4b4>
 800fb18:	40240000 	.word	0x40240000
 800fb1c:	9b08      	ldr	r3, [sp, #32]
 800fb1e:	2b00      	cmp	r3, #0
 800fb20:	f000 80ca 	beq.w	800fcb8 <_dtoa_r+0xb20>
 800fb24:	9b03      	ldr	r3, [sp, #12]
 800fb26:	9302      	str	r3, [sp, #8]
 800fb28:	2d00      	cmp	r5, #0
 800fb2a:	dd05      	ble.n	800fb38 <_dtoa_r+0x9a0>
 800fb2c:	4639      	mov	r1, r7
 800fb2e:	462a      	mov	r2, r5
 800fb30:	4620      	mov	r0, r4
 800fb32:	f000 fb4f 	bl	80101d4 <__lshift>
 800fb36:	4607      	mov	r7, r0
 800fb38:	f1b8 0f00 	cmp.w	r8, #0
 800fb3c:	d05b      	beq.n	800fbf6 <_dtoa_r+0xa5e>
 800fb3e:	6879      	ldr	r1, [r7, #4]
 800fb40:	4620      	mov	r0, r4
 800fb42:	f000 f935 	bl	800fdb0 <_Balloc>
 800fb46:	4605      	mov	r5, r0
 800fb48:	b928      	cbnz	r0, 800fb56 <_dtoa_r+0x9be>
 800fb4a:	4b87      	ldr	r3, [pc, #540]	; (800fd68 <_dtoa_r+0xbd0>)
 800fb4c:	4602      	mov	r2, r0
 800fb4e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800fb52:	f7ff bb3b 	b.w	800f1cc <_dtoa_r+0x34>
 800fb56:	693a      	ldr	r2, [r7, #16]
 800fb58:	3202      	adds	r2, #2
 800fb5a:	0092      	lsls	r2, r2, #2
 800fb5c:	f107 010c 	add.w	r1, r7, #12
 800fb60:	300c      	adds	r0, #12
 800fb62:	f7fe fd13 	bl	800e58c <memcpy>
 800fb66:	2201      	movs	r2, #1
 800fb68:	4629      	mov	r1, r5
 800fb6a:	4620      	mov	r0, r4
 800fb6c:	f000 fb32 	bl	80101d4 <__lshift>
 800fb70:	9b01      	ldr	r3, [sp, #4]
 800fb72:	f103 0901 	add.w	r9, r3, #1
 800fb76:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800fb7a:	4413      	add	r3, r2
 800fb7c:	9305      	str	r3, [sp, #20]
 800fb7e:	f00a 0301 	and.w	r3, sl, #1
 800fb82:	46b8      	mov	r8, r7
 800fb84:	9304      	str	r3, [sp, #16]
 800fb86:	4607      	mov	r7, r0
 800fb88:	4631      	mov	r1, r6
 800fb8a:	ee18 0a10 	vmov	r0, s16
 800fb8e:	f7ff fa77 	bl	800f080 <quorem>
 800fb92:	4641      	mov	r1, r8
 800fb94:	9002      	str	r0, [sp, #8]
 800fb96:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800fb9a:	ee18 0a10 	vmov	r0, s16
 800fb9e:	f000 fb89 	bl	80102b4 <__mcmp>
 800fba2:	463a      	mov	r2, r7
 800fba4:	9003      	str	r0, [sp, #12]
 800fba6:	4631      	mov	r1, r6
 800fba8:	4620      	mov	r0, r4
 800fbaa:	f000 fb9f 	bl	80102ec <__mdiff>
 800fbae:	68c2      	ldr	r2, [r0, #12]
 800fbb0:	f109 3bff 	add.w	fp, r9, #4294967295
 800fbb4:	4605      	mov	r5, r0
 800fbb6:	bb02      	cbnz	r2, 800fbfa <_dtoa_r+0xa62>
 800fbb8:	4601      	mov	r1, r0
 800fbba:	ee18 0a10 	vmov	r0, s16
 800fbbe:	f000 fb79 	bl	80102b4 <__mcmp>
 800fbc2:	4602      	mov	r2, r0
 800fbc4:	4629      	mov	r1, r5
 800fbc6:	4620      	mov	r0, r4
 800fbc8:	9207      	str	r2, [sp, #28]
 800fbca:	f000 f931 	bl	800fe30 <_Bfree>
 800fbce:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800fbd2:	ea43 0102 	orr.w	r1, r3, r2
 800fbd6:	9b04      	ldr	r3, [sp, #16]
 800fbd8:	430b      	orrs	r3, r1
 800fbda:	464d      	mov	r5, r9
 800fbdc:	d10f      	bne.n	800fbfe <_dtoa_r+0xa66>
 800fbde:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800fbe2:	d02a      	beq.n	800fc3a <_dtoa_r+0xaa2>
 800fbe4:	9b03      	ldr	r3, [sp, #12]
 800fbe6:	2b00      	cmp	r3, #0
 800fbe8:	dd02      	ble.n	800fbf0 <_dtoa_r+0xa58>
 800fbea:	9b02      	ldr	r3, [sp, #8]
 800fbec:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800fbf0:	f88b a000 	strb.w	sl, [fp]
 800fbf4:	e775      	b.n	800fae2 <_dtoa_r+0x94a>
 800fbf6:	4638      	mov	r0, r7
 800fbf8:	e7ba      	b.n	800fb70 <_dtoa_r+0x9d8>
 800fbfa:	2201      	movs	r2, #1
 800fbfc:	e7e2      	b.n	800fbc4 <_dtoa_r+0xa2c>
 800fbfe:	9b03      	ldr	r3, [sp, #12]
 800fc00:	2b00      	cmp	r3, #0
 800fc02:	db04      	blt.n	800fc0e <_dtoa_r+0xa76>
 800fc04:	9906      	ldr	r1, [sp, #24]
 800fc06:	430b      	orrs	r3, r1
 800fc08:	9904      	ldr	r1, [sp, #16]
 800fc0a:	430b      	orrs	r3, r1
 800fc0c:	d122      	bne.n	800fc54 <_dtoa_r+0xabc>
 800fc0e:	2a00      	cmp	r2, #0
 800fc10:	ddee      	ble.n	800fbf0 <_dtoa_r+0xa58>
 800fc12:	ee18 1a10 	vmov	r1, s16
 800fc16:	2201      	movs	r2, #1
 800fc18:	4620      	mov	r0, r4
 800fc1a:	f000 fadb 	bl	80101d4 <__lshift>
 800fc1e:	4631      	mov	r1, r6
 800fc20:	ee08 0a10 	vmov	s16, r0
 800fc24:	f000 fb46 	bl	80102b4 <__mcmp>
 800fc28:	2800      	cmp	r0, #0
 800fc2a:	dc03      	bgt.n	800fc34 <_dtoa_r+0xa9c>
 800fc2c:	d1e0      	bne.n	800fbf0 <_dtoa_r+0xa58>
 800fc2e:	f01a 0f01 	tst.w	sl, #1
 800fc32:	d0dd      	beq.n	800fbf0 <_dtoa_r+0xa58>
 800fc34:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800fc38:	d1d7      	bne.n	800fbea <_dtoa_r+0xa52>
 800fc3a:	2339      	movs	r3, #57	; 0x39
 800fc3c:	f88b 3000 	strb.w	r3, [fp]
 800fc40:	462b      	mov	r3, r5
 800fc42:	461d      	mov	r5, r3
 800fc44:	3b01      	subs	r3, #1
 800fc46:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800fc4a:	2a39      	cmp	r2, #57	; 0x39
 800fc4c:	d071      	beq.n	800fd32 <_dtoa_r+0xb9a>
 800fc4e:	3201      	adds	r2, #1
 800fc50:	701a      	strb	r2, [r3, #0]
 800fc52:	e746      	b.n	800fae2 <_dtoa_r+0x94a>
 800fc54:	2a00      	cmp	r2, #0
 800fc56:	dd07      	ble.n	800fc68 <_dtoa_r+0xad0>
 800fc58:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800fc5c:	d0ed      	beq.n	800fc3a <_dtoa_r+0xaa2>
 800fc5e:	f10a 0301 	add.w	r3, sl, #1
 800fc62:	f88b 3000 	strb.w	r3, [fp]
 800fc66:	e73c      	b.n	800fae2 <_dtoa_r+0x94a>
 800fc68:	9b05      	ldr	r3, [sp, #20]
 800fc6a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800fc6e:	4599      	cmp	r9, r3
 800fc70:	d047      	beq.n	800fd02 <_dtoa_r+0xb6a>
 800fc72:	ee18 1a10 	vmov	r1, s16
 800fc76:	2300      	movs	r3, #0
 800fc78:	220a      	movs	r2, #10
 800fc7a:	4620      	mov	r0, r4
 800fc7c:	f000 f8fa 	bl	800fe74 <__multadd>
 800fc80:	45b8      	cmp	r8, r7
 800fc82:	ee08 0a10 	vmov	s16, r0
 800fc86:	f04f 0300 	mov.w	r3, #0
 800fc8a:	f04f 020a 	mov.w	r2, #10
 800fc8e:	4641      	mov	r1, r8
 800fc90:	4620      	mov	r0, r4
 800fc92:	d106      	bne.n	800fca2 <_dtoa_r+0xb0a>
 800fc94:	f000 f8ee 	bl	800fe74 <__multadd>
 800fc98:	4680      	mov	r8, r0
 800fc9a:	4607      	mov	r7, r0
 800fc9c:	f109 0901 	add.w	r9, r9, #1
 800fca0:	e772      	b.n	800fb88 <_dtoa_r+0x9f0>
 800fca2:	f000 f8e7 	bl	800fe74 <__multadd>
 800fca6:	4639      	mov	r1, r7
 800fca8:	4680      	mov	r8, r0
 800fcaa:	2300      	movs	r3, #0
 800fcac:	220a      	movs	r2, #10
 800fcae:	4620      	mov	r0, r4
 800fcb0:	f000 f8e0 	bl	800fe74 <__multadd>
 800fcb4:	4607      	mov	r7, r0
 800fcb6:	e7f1      	b.n	800fc9c <_dtoa_r+0xb04>
 800fcb8:	9b03      	ldr	r3, [sp, #12]
 800fcba:	9302      	str	r3, [sp, #8]
 800fcbc:	9d01      	ldr	r5, [sp, #4]
 800fcbe:	ee18 0a10 	vmov	r0, s16
 800fcc2:	4631      	mov	r1, r6
 800fcc4:	f7ff f9dc 	bl	800f080 <quorem>
 800fcc8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800fccc:	9b01      	ldr	r3, [sp, #4]
 800fcce:	f805 ab01 	strb.w	sl, [r5], #1
 800fcd2:	1aea      	subs	r2, r5, r3
 800fcd4:	9b02      	ldr	r3, [sp, #8]
 800fcd6:	4293      	cmp	r3, r2
 800fcd8:	dd09      	ble.n	800fcee <_dtoa_r+0xb56>
 800fcda:	ee18 1a10 	vmov	r1, s16
 800fcde:	2300      	movs	r3, #0
 800fce0:	220a      	movs	r2, #10
 800fce2:	4620      	mov	r0, r4
 800fce4:	f000 f8c6 	bl	800fe74 <__multadd>
 800fce8:	ee08 0a10 	vmov	s16, r0
 800fcec:	e7e7      	b.n	800fcbe <_dtoa_r+0xb26>
 800fcee:	9b02      	ldr	r3, [sp, #8]
 800fcf0:	2b00      	cmp	r3, #0
 800fcf2:	bfc8      	it	gt
 800fcf4:	461d      	movgt	r5, r3
 800fcf6:	9b01      	ldr	r3, [sp, #4]
 800fcf8:	bfd8      	it	le
 800fcfa:	2501      	movle	r5, #1
 800fcfc:	441d      	add	r5, r3
 800fcfe:	f04f 0800 	mov.w	r8, #0
 800fd02:	ee18 1a10 	vmov	r1, s16
 800fd06:	2201      	movs	r2, #1
 800fd08:	4620      	mov	r0, r4
 800fd0a:	f000 fa63 	bl	80101d4 <__lshift>
 800fd0e:	4631      	mov	r1, r6
 800fd10:	ee08 0a10 	vmov	s16, r0
 800fd14:	f000 face 	bl	80102b4 <__mcmp>
 800fd18:	2800      	cmp	r0, #0
 800fd1a:	dc91      	bgt.n	800fc40 <_dtoa_r+0xaa8>
 800fd1c:	d102      	bne.n	800fd24 <_dtoa_r+0xb8c>
 800fd1e:	f01a 0f01 	tst.w	sl, #1
 800fd22:	d18d      	bne.n	800fc40 <_dtoa_r+0xaa8>
 800fd24:	462b      	mov	r3, r5
 800fd26:	461d      	mov	r5, r3
 800fd28:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800fd2c:	2a30      	cmp	r2, #48	; 0x30
 800fd2e:	d0fa      	beq.n	800fd26 <_dtoa_r+0xb8e>
 800fd30:	e6d7      	b.n	800fae2 <_dtoa_r+0x94a>
 800fd32:	9a01      	ldr	r2, [sp, #4]
 800fd34:	429a      	cmp	r2, r3
 800fd36:	d184      	bne.n	800fc42 <_dtoa_r+0xaaa>
 800fd38:	9b00      	ldr	r3, [sp, #0]
 800fd3a:	3301      	adds	r3, #1
 800fd3c:	9300      	str	r3, [sp, #0]
 800fd3e:	2331      	movs	r3, #49	; 0x31
 800fd40:	7013      	strb	r3, [r2, #0]
 800fd42:	e6ce      	b.n	800fae2 <_dtoa_r+0x94a>
 800fd44:	4b09      	ldr	r3, [pc, #36]	; (800fd6c <_dtoa_r+0xbd4>)
 800fd46:	f7ff ba95 	b.w	800f274 <_dtoa_r+0xdc>
 800fd4a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fd4c:	2b00      	cmp	r3, #0
 800fd4e:	f47f aa6e 	bne.w	800f22e <_dtoa_r+0x96>
 800fd52:	4b07      	ldr	r3, [pc, #28]	; (800fd70 <_dtoa_r+0xbd8>)
 800fd54:	f7ff ba8e 	b.w	800f274 <_dtoa_r+0xdc>
 800fd58:	9b02      	ldr	r3, [sp, #8]
 800fd5a:	2b00      	cmp	r3, #0
 800fd5c:	dcae      	bgt.n	800fcbc <_dtoa_r+0xb24>
 800fd5e:	9b06      	ldr	r3, [sp, #24]
 800fd60:	2b02      	cmp	r3, #2
 800fd62:	f73f aea8 	bgt.w	800fab6 <_dtoa_r+0x91e>
 800fd66:	e7a9      	b.n	800fcbc <_dtoa_r+0xb24>
 800fd68:	0801348d 	.word	0x0801348d
 800fd6c:	08013611 	.word	0x08013611
 800fd70:	0801340e 	.word	0x0801340e

0800fd74 <_localeconv_r>:
 800fd74:	4800      	ldr	r0, [pc, #0]	; (800fd78 <_localeconv_r+0x4>)
 800fd76:	4770      	bx	lr
 800fd78:	200001a4 	.word	0x200001a4

0800fd7c <_lseek_r>:
 800fd7c:	b538      	push	{r3, r4, r5, lr}
 800fd7e:	4d07      	ldr	r5, [pc, #28]	; (800fd9c <_lseek_r+0x20>)
 800fd80:	4604      	mov	r4, r0
 800fd82:	4608      	mov	r0, r1
 800fd84:	4611      	mov	r1, r2
 800fd86:	2200      	movs	r2, #0
 800fd88:	602a      	str	r2, [r5, #0]
 800fd8a:	461a      	mov	r2, r3
 800fd8c:	f7f2 fb12 	bl	80023b4 <_lseek>
 800fd90:	1c43      	adds	r3, r0, #1
 800fd92:	d102      	bne.n	800fd9a <_lseek_r+0x1e>
 800fd94:	682b      	ldr	r3, [r5, #0]
 800fd96:	b103      	cbz	r3, 800fd9a <_lseek_r+0x1e>
 800fd98:	6023      	str	r3, [r4, #0]
 800fd9a:	bd38      	pop	{r3, r4, r5, pc}
 800fd9c:	20000f48 	.word	0x20000f48

0800fda0 <malloc>:
 800fda0:	4b02      	ldr	r3, [pc, #8]	; (800fdac <malloc+0xc>)
 800fda2:	4601      	mov	r1, r0
 800fda4:	6818      	ldr	r0, [r3, #0]
 800fda6:	f000 bc09 	b.w	80105bc <_malloc_r>
 800fdaa:	bf00      	nop
 800fdac:	20000050 	.word	0x20000050

0800fdb0 <_Balloc>:
 800fdb0:	b570      	push	{r4, r5, r6, lr}
 800fdb2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800fdb4:	4604      	mov	r4, r0
 800fdb6:	460d      	mov	r5, r1
 800fdb8:	b976      	cbnz	r6, 800fdd8 <_Balloc+0x28>
 800fdba:	2010      	movs	r0, #16
 800fdbc:	f7ff fff0 	bl	800fda0 <malloc>
 800fdc0:	4602      	mov	r2, r0
 800fdc2:	6260      	str	r0, [r4, #36]	; 0x24
 800fdc4:	b920      	cbnz	r0, 800fdd0 <_Balloc+0x20>
 800fdc6:	4b18      	ldr	r3, [pc, #96]	; (800fe28 <_Balloc+0x78>)
 800fdc8:	4818      	ldr	r0, [pc, #96]	; (800fe2c <_Balloc+0x7c>)
 800fdca:	2166      	movs	r1, #102	; 0x66
 800fdcc:	f001 fa76 	bl	80112bc <__assert_func>
 800fdd0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800fdd4:	6006      	str	r6, [r0, #0]
 800fdd6:	60c6      	str	r6, [r0, #12]
 800fdd8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800fdda:	68f3      	ldr	r3, [r6, #12]
 800fddc:	b183      	cbz	r3, 800fe00 <_Balloc+0x50>
 800fdde:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fde0:	68db      	ldr	r3, [r3, #12]
 800fde2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800fde6:	b9b8      	cbnz	r0, 800fe18 <_Balloc+0x68>
 800fde8:	2101      	movs	r1, #1
 800fdea:	fa01 f605 	lsl.w	r6, r1, r5
 800fdee:	1d72      	adds	r2, r6, #5
 800fdf0:	0092      	lsls	r2, r2, #2
 800fdf2:	4620      	mov	r0, r4
 800fdf4:	f000 fb60 	bl	80104b8 <_calloc_r>
 800fdf8:	b160      	cbz	r0, 800fe14 <_Balloc+0x64>
 800fdfa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800fdfe:	e00e      	b.n	800fe1e <_Balloc+0x6e>
 800fe00:	2221      	movs	r2, #33	; 0x21
 800fe02:	2104      	movs	r1, #4
 800fe04:	4620      	mov	r0, r4
 800fe06:	f000 fb57 	bl	80104b8 <_calloc_r>
 800fe0a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fe0c:	60f0      	str	r0, [r6, #12]
 800fe0e:	68db      	ldr	r3, [r3, #12]
 800fe10:	2b00      	cmp	r3, #0
 800fe12:	d1e4      	bne.n	800fdde <_Balloc+0x2e>
 800fe14:	2000      	movs	r0, #0
 800fe16:	bd70      	pop	{r4, r5, r6, pc}
 800fe18:	6802      	ldr	r2, [r0, #0]
 800fe1a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800fe1e:	2300      	movs	r3, #0
 800fe20:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800fe24:	e7f7      	b.n	800fe16 <_Balloc+0x66>
 800fe26:	bf00      	nop
 800fe28:	0801341b 	.word	0x0801341b
 800fe2c:	0801349e 	.word	0x0801349e

0800fe30 <_Bfree>:
 800fe30:	b570      	push	{r4, r5, r6, lr}
 800fe32:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800fe34:	4605      	mov	r5, r0
 800fe36:	460c      	mov	r4, r1
 800fe38:	b976      	cbnz	r6, 800fe58 <_Bfree+0x28>
 800fe3a:	2010      	movs	r0, #16
 800fe3c:	f7ff ffb0 	bl	800fda0 <malloc>
 800fe40:	4602      	mov	r2, r0
 800fe42:	6268      	str	r0, [r5, #36]	; 0x24
 800fe44:	b920      	cbnz	r0, 800fe50 <_Bfree+0x20>
 800fe46:	4b09      	ldr	r3, [pc, #36]	; (800fe6c <_Bfree+0x3c>)
 800fe48:	4809      	ldr	r0, [pc, #36]	; (800fe70 <_Bfree+0x40>)
 800fe4a:	218a      	movs	r1, #138	; 0x8a
 800fe4c:	f001 fa36 	bl	80112bc <__assert_func>
 800fe50:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800fe54:	6006      	str	r6, [r0, #0]
 800fe56:	60c6      	str	r6, [r0, #12]
 800fe58:	b13c      	cbz	r4, 800fe6a <_Bfree+0x3a>
 800fe5a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800fe5c:	6862      	ldr	r2, [r4, #4]
 800fe5e:	68db      	ldr	r3, [r3, #12]
 800fe60:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800fe64:	6021      	str	r1, [r4, #0]
 800fe66:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800fe6a:	bd70      	pop	{r4, r5, r6, pc}
 800fe6c:	0801341b 	.word	0x0801341b
 800fe70:	0801349e 	.word	0x0801349e

0800fe74 <__multadd>:
 800fe74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fe78:	690d      	ldr	r5, [r1, #16]
 800fe7a:	4607      	mov	r7, r0
 800fe7c:	460c      	mov	r4, r1
 800fe7e:	461e      	mov	r6, r3
 800fe80:	f101 0c14 	add.w	ip, r1, #20
 800fe84:	2000      	movs	r0, #0
 800fe86:	f8dc 3000 	ldr.w	r3, [ip]
 800fe8a:	b299      	uxth	r1, r3
 800fe8c:	fb02 6101 	mla	r1, r2, r1, r6
 800fe90:	0c1e      	lsrs	r6, r3, #16
 800fe92:	0c0b      	lsrs	r3, r1, #16
 800fe94:	fb02 3306 	mla	r3, r2, r6, r3
 800fe98:	b289      	uxth	r1, r1
 800fe9a:	3001      	adds	r0, #1
 800fe9c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800fea0:	4285      	cmp	r5, r0
 800fea2:	f84c 1b04 	str.w	r1, [ip], #4
 800fea6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800feaa:	dcec      	bgt.n	800fe86 <__multadd+0x12>
 800feac:	b30e      	cbz	r6, 800fef2 <__multadd+0x7e>
 800feae:	68a3      	ldr	r3, [r4, #8]
 800feb0:	42ab      	cmp	r3, r5
 800feb2:	dc19      	bgt.n	800fee8 <__multadd+0x74>
 800feb4:	6861      	ldr	r1, [r4, #4]
 800feb6:	4638      	mov	r0, r7
 800feb8:	3101      	adds	r1, #1
 800feba:	f7ff ff79 	bl	800fdb0 <_Balloc>
 800febe:	4680      	mov	r8, r0
 800fec0:	b928      	cbnz	r0, 800fece <__multadd+0x5a>
 800fec2:	4602      	mov	r2, r0
 800fec4:	4b0c      	ldr	r3, [pc, #48]	; (800fef8 <__multadd+0x84>)
 800fec6:	480d      	ldr	r0, [pc, #52]	; (800fefc <__multadd+0x88>)
 800fec8:	21b5      	movs	r1, #181	; 0xb5
 800feca:	f001 f9f7 	bl	80112bc <__assert_func>
 800fece:	6922      	ldr	r2, [r4, #16]
 800fed0:	3202      	adds	r2, #2
 800fed2:	f104 010c 	add.w	r1, r4, #12
 800fed6:	0092      	lsls	r2, r2, #2
 800fed8:	300c      	adds	r0, #12
 800feda:	f7fe fb57 	bl	800e58c <memcpy>
 800fede:	4621      	mov	r1, r4
 800fee0:	4638      	mov	r0, r7
 800fee2:	f7ff ffa5 	bl	800fe30 <_Bfree>
 800fee6:	4644      	mov	r4, r8
 800fee8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800feec:	3501      	adds	r5, #1
 800feee:	615e      	str	r6, [r3, #20]
 800fef0:	6125      	str	r5, [r4, #16]
 800fef2:	4620      	mov	r0, r4
 800fef4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fef8:	0801348d 	.word	0x0801348d
 800fefc:	0801349e 	.word	0x0801349e

0800ff00 <__hi0bits>:
 800ff00:	0c03      	lsrs	r3, r0, #16
 800ff02:	041b      	lsls	r3, r3, #16
 800ff04:	b9d3      	cbnz	r3, 800ff3c <__hi0bits+0x3c>
 800ff06:	0400      	lsls	r0, r0, #16
 800ff08:	2310      	movs	r3, #16
 800ff0a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800ff0e:	bf04      	itt	eq
 800ff10:	0200      	lsleq	r0, r0, #8
 800ff12:	3308      	addeq	r3, #8
 800ff14:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800ff18:	bf04      	itt	eq
 800ff1a:	0100      	lsleq	r0, r0, #4
 800ff1c:	3304      	addeq	r3, #4
 800ff1e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800ff22:	bf04      	itt	eq
 800ff24:	0080      	lsleq	r0, r0, #2
 800ff26:	3302      	addeq	r3, #2
 800ff28:	2800      	cmp	r0, #0
 800ff2a:	db05      	blt.n	800ff38 <__hi0bits+0x38>
 800ff2c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800ff30:	f103 0301 	add.w	r3, r3, #1
 800ff34:	bf08      	it	eq
 800ff36:	2320      	moveq	r3, #32
 800ff38:	4618      	mov	r0, r3
 800ff3a:	4770      	bx	lr
 800ff3c:	2300      	movs	r3, #0
 800ff3e:	e7e4      	b.n	800ff0a <__hi0bits+0xa>

0800ff40 <__lo0bits>:
 800ff40:	6803      	ldr	r3, [r0, #0]
 800ff42:	f013 0207 	ands.w	r2, r3, #7
 800ff46:	4601      	mov	r1, r0
 800ff48:	d00b      	beq.n	800ff62 <__lo0bits+0x22>
 800ff4a:	07da      	lsls	r2, r3, #31
 800ff4c:	d423      	bmi.n	800ff96 <__lo0bits+0x56>
 800ff4e:	0798      	lsls	r0, r3, #30
 800ff50:	bf49      	itett	mi
 800ff52:	085b      	lsrmi	r3, r3, #1
 800ff54:	089b      	lsrpl	r3, r3, #2
 800ff56:	2001      	movmi	r0, #1
 800ff58:	600b      	strmi	r3, [r1, #0]
 800ff5a:	bf5c      	itt	pl
 800ff5c:	600b      	strpl	r3, [r1, #0]
 800ff5e:	2002      	movpl	r0, #2
 800ff60:	4770      	bx	lr
 800ff62:	b298      	uxth	r0, r3
 800ff64:	b9a8      	cbnz	r0, 800ff92 <__lo0bits+0x52>
 800ff66:	0c1b      	lsrs	r3, r3, #16
 800ff68:	2010      	movs	r0, #16
 800ff6a:	b2da      	uxtb	r2, r3
 800ff6c:	b90a      	cbnz	r2, 800ff72 <__lo0bits+0x32>
 800ff6e:	3008      	adds	r0, #8
 800ff70:	0a1b      	lsrs	r3, r3, #8
 800ff72:	071a      	lsls	r2, r3, #28
 800ff74:	bf04      	itt	eq
 800ff76:	091b      	lsreq	r3, r3, #4
 800ff78:	3004      	addeq	r0, #4
 800ff7a:	079a      	lsls	r2, r3, #30
 800ff7c:	bf04      	itt	eq
 800ff7e:	089b      	lsreq	r3, r3, #2
 800ff80:	3002      	addeq	r0, #2
 800ff82:	07da      	lsls	r2, r3, #31
 800ff84:	d403      	bmi.n	800ff8e <__lo0bits+0x4e>
 800ff86:	085b      	lsrs	r3, r3, #1
 800ff88:	f100 0001 	add.w	r0, r0, #1
 800ff8c:	d005      	beq.n	800ff9a <__lo0bits+0x5a>
 800ff8e:	600b      	str	r3, [r1, #0]
 800ff90:	4770      	bx	lr
 800ff92:	4610      	mov	r0, r2
 800ff94:	e7e9      	b.n	800ff6a <__lo0bits+0x2a>
 800ff96:	2000      	movs	r0, #0
 800ff98:	4770      	bx	lr
 800ff9a:	2020      	movs	r0, #32
 800ff9c:	4770      	bx	lr
	...

0800ffa0 <__i2b>:
 800ffa0:	b510      	push	{r4, lr}
 800ffa2:	460c      	mov	r4, r1
 800ffa4:	2101      	movs	r1, #1
 800ffa6:	f7ff ff03 	bl	800fdb0 <_Balloc>
 800ffaa:	4602      	mov	r2, r0
 800ffac:	b928      	cbnz	r0, 800ffba <__i2b+0x1a>
 800ffae:	4b05      	ldr	r3, [pc, #20]	; (800ffc4 <__i2b+0x24>)
 800ffb0:	4805      	ldr	r0, [pc, #20]	; (800ffc8 <__i2b+0x28>)
 800ffb2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800ffb6:	f001 f981 	bl	80112bc <__assert_func>
 800ffba:	2301      	movs	r3, #1
 800ffbc:	6144      	str	r4, [r0, #20]
 800ffbe:	6103      	str	r3, [r0, #16]
 800ffc0:	bd10      	pop	{r4, pc}
 800ffc2:	bf00      	nop
 800ffc4:	0801348d 	.word	0x0801348d
 800ffc8:	0801349e 	.word	0x0801349e

0800ffcc <__multiply>:
 800ffcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ffd0:	4691      	mov	r9, r2
 800ffd2:	690a      	ldr	r2, [r1, #16]
 800ffd4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ffd8:	429a      	cmp	r2, r3
 800ffda:	bfb8      	it	lt
 800ffdc:	460b      	movlt	r3, r1
 800ffde:	460c      	mov	r4, r1
 800ffe0:	bfbc      	itt	lt
 800ffe2:	464c      	movlt	r4, r9
 800ffe4:	4699      	movlt	r9, r3
 800ffe6:	6927      	ldr	r7, [r4, #16]
 800ffe8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800ffec:	68a3      	ldr	r3, [r4, #8]
 800ffee:	6861      	ldr	r1, [r4, #4]
 800fff0:	eb07 060a 	add.w	r6, r7, sl
 800fff4:	42b3      	cmp	r3, r6
 800fff6:	b085      	sub	sp, #20
 800fff8:	bfb8      	it	lt
 800fffa:	3101      	addlt	r1, #1
 800fffc:	f7ff fed8 	bl	800fdb0 <_Balloc>
 8010000:	b930      	cbnz	r0, 8010010 <__multiply+0x44>
 8010002:	4602      	mov	r2, r0
 8010004:	4b44      	ldr	r3, [pc, #272]	; (8010118 <__multiply+0x14c>)
 8010006:	4845      	ldr	r0, [pc, #276]	; (801011c <__multiply+0x150>)
 8010008:	f240 115d 	movw	r1, #349	; 0x15d
 801000c:	f001 f956 	bl	80112bc <__assert_func>
 8010010:	f100 0514 	add.w	r5, r0, #20
 8010014:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8010018:	462b      	mov	r3, r5
 801001a:	2200      	movs	r2, #0
 801001c:	4543      	cmp	r3, r8
 801001e:	d321      	bcc.n	8010064 <__multiply+0x98>
 8010020:	f104 0314 	add.w	r3, r4, #20
 8010024:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8010028:	f109 0314 	add.w	r3, r9, #20
 801002c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8010030:	9202      	str	r2, [sp, #8]
 8010032:	1b3a      	subs	r2, r7, r4
 8010034:	3a15      	subs	r2, #21
 8010036:	f022 0203 	bic.w	r2, r2, #3
 801003a:	3204      	adds	r2, #4
 801003c:	f104 0115 	add.w	r1, r4, #21
 8010040:	428f      	cmp	r7, r1
 8010042:	bf38      	it	cc
 8010044:	2204      	movcc	r2, #4
 8010046:	9201      	str	r2, [sp, #4]
 8010048:	9a02      	ldr	r2, [sp, #8]
 801004a:	9303      	str	r3, [sp, #12]
 801004c:	429a      	cmp	r2, r3
 801004e:	d80c      	bhi.n	801006a <__multiply+0x9e>
 8010050:	2e00      	cmp	r6, #0
 8010052:	dd03      	ble.n	801005c <__multiply+0x90>
 8010054:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8010058:	2b00      	cmp	r3, #0
 801005a:	d05a      	beq.n	8010112 <__multiply+0x146>
 801005c:	6106      	str	r6, [r0, #16]
 801005e:	b005      	add	sp, #20
 8010060:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010064:	f843 2b04 	str.w	r2, [r3], #4
 8010068:	e7d8      	b.n	801001c <__multiply+0x50>
 801006a:	f8b3 a000 	ldrh.w	sl, [r3]
 801006e:	f1ba 0f00 	cmp.w	sl, #0
 8010072:	d024      	beq.n	80100be <__multiply+0xf2>
 8010074:	f104 0e14 	add.w	lr, r4, #20
 8010078:	46a9      	mov	r9, r5
 801007a:	f04f 0c00 	mov.w	ip, #0
 801007e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8010082:	f8d9 1000 	ldr.w	r1, [r9]
 8010086:	fa1f fb82 	uxth.w	fp, r2
 801008a:	b289      	uxth	r1, r1
 801008c:	fb0a 110b 	mla	r1, sl, fp, r1
 8010090:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8010094:	f8d9 2000 	ldr.w	r2, [r9]
 8010098:	4461      	add	r1, ip
 801009a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801009e:	fb0a c20b 	mla	r2, sl, fp, ip
 80100a2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80100a6:	b289      	uxth	r1, r1
 80100a8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80100ac:	4577      	cmp	r7, lr
 80100ae:	f849 1b04 	str.w	r1, [r9], #4
 80100b2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80100b6:	d8e2      	bhi.n	801007e <__multiply+0xb2>
 80100b8:	9a01      	ldr	r2, [sp, #4]
 80100ba:	f845 c002 	str.w	ip, [r5, r2]
 80100be:	9a03      	ldr	r2, [sp, #12]
 80100c0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80100c4:	3304      	adds	r3, #4
 80100c6:	f1b9 0f00 	cmp.w	r9, #0
 80100ca:	d020      	beq.n	801010e <__multiply+0x142>
 80100cc:	6829      	ldr	r1, [r5, #0]
 80100ce:	f104 0c14 	add.w	ip, r4, #20
 80100d2:	46ae      	mov	lr, r5
 80100d4:	f04f 0a00 	mov.w	sl, #0
 80100d8:	f8bc b000 	ldrh.w	fp, [ip]
 80100dc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80100e0:	fb09 220b 	mla	r2, r9, fp, r2
 80100e4:	4492      	add	sl, r2
 80100e6:	b289      	uxth	r1, r1
 80100e8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80100ec:	f84e 1b04 	str.w	r1, [lr], #4
 80100f0:	f85c 2b04 	ldr.w	r2, [ip], #4
 80100f4:	f8be 1000 	ldrh.w	r1, [lr]
 80100f8:	0c12      	lsrs	r2, r2, #16
 80100fa:	fb09 1102 	mla	r1, r9, r2, r1
 80100fe:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8010102:	4567      	cmp	r7, ip
 8010104:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8010108:	d8e6      	bhi.n	80100d8 <__multiply+0x10c>
 801010a:	9a01      	ldr	r2, [sp, #4]
 801010c:	50a9      	str	r1, [r5, r2]
 801010e:	3504      	adds	r5, #4
 8010110:	e79a      	b.n	8010048 <__multiply+0x7c>
 8010112:	3e01      	subs	r6, #1
 8010114:	e79c      	b.n	8010050 <__multiply+0x84>
 8010116:	bf00      	nop
 8010118:	0801348d 	.word	0x0801348d
 801011c:	0801349e 	.word	0x0801349e

08010120 <__pow5mult>:
 8010120:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010124:	4615      	mov	r5, r2
 8010126:	f012 0203 	ands.w	r2, r2, #3
 801012a:	4606      	mov	r6, r0
 801012c:	460f      	mov	r7, r1
 801012e:	d007      	beq.n	8010140 <__pow5mult+0x20>
 8010130:	4c25      	ldr	r4, [pc, #148]	; (80101c8 <__pow5mult+0xa8>)
 8010132:	3a01      	subs	r2, #1
 8010134:	2300      	movs	r3, #0
 8010136:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801013a:	f7ff fe9b 	bl	800fe74 <__multadd>
 801013e:	4607      	mov	r7, r0
 8010140:	10ad      	asrs	r5, r5, #2
 8010142:	d03d      	beq.n	80101c0 <__pow5mult+0xa0>
 8010144:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8010146:	b97c      	cbnz	r4, 8010168 <__pow5mult+0x48>
 8010148:	2010      	movs	r0, #16
 801014a:	f7ff fe29 	bl	800fda0 <malloc>
 801014e:	4602      	mov	r2, r0
 8010150:	6270      	str	r0, [r6, #36]	; 0x24
 8010152:	b928      	cbnz	r0, 8010160 <__pow5mult+0x40>
 8010154:	4b1d      	ldr	r3, [pc, #116]	; (80101cc <__pow5mult+0xac>)
 8010156:	481e      	ldr	r0, [pc, #120]	; (80101d0 <__pow5mult+0xb0>)
 8010158:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 801015c:	f001 f8ae 	bl	80112bc <__assert_func>
 8010160:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8010164:	6004      	str	r4, [r0, #0]
 8010166:	60c4      	str	r4, [r0, #12]
 8010168:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801016c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8010170:	b94c      	cbnz	r4, 8010186 <__pow5mult+0x66>
 8010172:	f240 2171 	movw	r1, #625	; 0x271
 8010176:	4630      	mov	r0, r6
 8010178:	f7ff ff12 	bl	800ffa0 <__i2b>
 801017c:	2300      	movs	r3, #0
 801017e:	f8c8 0008 	str.w	r0, [r8, #8]
 8010182:	4604      	mov	r4, r0
 8010184:	6003      	str	r3, [r0, #0]
 8010186:	f04f 0900 	mov.w	r9, #0
 801018a:	07eb      	lsls	r3, r5, #31
 801018c:	d50a      	bpl.n	80101a4 <__pow5mult+0x84>
 801018e:	4639      	mov	r1, r7
 8010190:	4622      	mov	r2, r4
 8010192:	4630      	mov	r0, r6
 8010194:	f7ff ff1a 	bl	800ffcc <__multiply>
 8010198:	4639      	mov	r1, r7
 801019a:	4680      	mov	r8, r0
 801019c:	4630      	mov	r0, r6
 801019e:	f7ff fe47 	bl	800fe30 <_Bfree>
 80101a2:	4647      	mov	r7, r8
 80101a4:	106d      	asrs	r5, r5, #1
 80101a6:	d00b      	beq.n	80101c0 <__pow5mult+0xa0>
 80101a8:	6820      	ldr	r0, [r4, #0]
 80101aa:	b938      	cbnz	r0, 80101bc <__pow5mult+0x9c>
 80101ac:	4622      	mov	r2, r4
 80101ae:	4621      	mov	r1, r4
 80101b0:	4630      	mov	r0, r6
 80101b2:	f7ff ff0b 	bl	800ffcc <__multiply>
 80101b6:	6020      	str	r0, [r4, #0]
 80101b8:	f8c0 9000 	str.w	r9, [r0]
 80101bc:	4604      	mov	r4, r0
 80101be:	e7e4      	b.n	801018a <__pow5mult+0x6a>
 80101c0:	4638      	mov	r0, r7
 80101c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80101c6:	bf00      	nop
 80101c8:	080135f0 	.word	0x080135f0
 80101cc:	0801341b 	.word	0x0801341b
 80101d0:	0801349e 	.word	0x0801349e

080101d4 <__lshift>:
 80101d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80101d8:	460c      	mov	r4, r1
 80101da:	6849      	ldr	r1, [r1, #4]
 80101dc:	6923      	ldr	r3, [r4, #16]
 80101de:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80101e2:	68a3      	ldr	r3, [r4, #8]
 80101e4:	4607      	mov	r7, r0
 80101e6:	4691      	mov	r9, r2
 80101e8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80101ec:	f108 0601 	add.w	r6, r8, #1
 80101f0:	42b3      	cmp	r3, r6
 80101f2:	db0b      	blt.n	801020c <__lshift+0x38>
 80101f4:	4638      	mov	r0, r7
 80101f6:	f7ff fddb 	bl	800fdb0 <_Balloc>
 80101fa:	4605      	mov	r5, r0
 80101fc:	b948      	cbnz	r0, 8010212 <__lshift+0x3e>
 80101fe:	4602      	mov	r2, r0
 8010200:	4b2a      	ldr	r3, [pc, #168]	; (80102ac <__lshift+0xd8>)
 8010202:	482b      	ldr	r0, [pc, #172]	; (80102b0 <__lshift+0xdc>)
 8010204:	f240 11d9 	movw	r1, #473	; 0x1d9
 8010208:	f001 f858 	bl	80112bc <__assert_func>
 801020c:	3101      	adds	r1, #1
 801020e:	005b      	lsls	r3, r3, #1
 8010210:	e7ee      	b.n	80101f0 <__lshift+0x1c>
 8010212:	2300      	movs	r3, #0
 8010214:	f100 0114 	add.w	r1, r0, #20
 8010218:	f100 0210 	add.w	r2, r0, #16
 801021c:	4618      	mov	r0, r3
 801021e:	4553      	cmp	r3, sl
 8010220:	db37      	blt.n	8010292 <__lshift+0xbe>
 8010222:	6920      	ldr	r0, [r4, #16]
 8010224:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010228:	f104 0314 	add.w	r3, r4, #20
 801022c:	f019 091f 	ands.w	r9, r9, #31
 8010230:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010234:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8010238:	d02f      	beq.n	801029a <__lshift+0xc6>
 801023a:	f1c9 0e20 	rsb	lr, r9, #32
 801023e:	468a      	mov	sl, r1
 8010240:	f04f 0c00 	mov.w	ip, #0
 8010244:	681a      	ldr	r2, [r3, #0]
 8010246:	fa02 f209 	lsl.w	r2, r2, r9
 801024a:	ea42 020c 	orr.w	r2, r2, ip
 801024e:	f84a 2b04 	str.w	r2, [sl], #4
 8010252:	f853 2b04 	ldr.w	r2, [r3], #4
 8010256:	4298      	cmp	r0, r3
 8010258:	fa22 fc0e 	lsr.w	ip, r2, lr
 801025c:	d8f2      	bhi.n	8010244 <__lshift+0x70>
 801025e:	1b03      	subs	r3, r0, r4
 8010260:	3b15      	subs	r3, #21
 8010262:	f023 0303 	bic.w	r3, r3, #3
 8010266:	3304      	adds	r3, #4
 8010268:	f104 0215 	add.w	r2, r4, #21
 801026c:	4290      	cmp	r0, r2
 801026e:	bf38      	it	cc
 8010270:	2304      	movcc	r3, #4
 8010272:	f841 c003 	str.w	ip, [r1, r3]
 8010276:	f1bc 0f00 	cmp.w	ip, #0
 801027a:	d001      	beq.n	8010280 <__lshift+0xac>
 801027c:	f108 0602 	add.w	r6, r8, #2
 8010280:	3e01      	subs	r6, #1
 8010282:	4638      	mov	r0, r7
 8010284:	612e      	str	r6, [r5, #16]
 8010286:	4621      	mov	r1, r4
 8010288:	f7ff fdd2 	bl	800fe30 <_Bfree>
 801028c:	4628      	mov	r0, r5
 801028e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010292:	f842 0f04 	str.w	r0, [r2, #4]!
 8010296:	3301      	adds	r3, #1
 8010298:	e7c1      	b.n	801021e <__lshift+0x4a>
 801029a:	3904      	subs	r1, #4
 801029c:	f853 2b04 	ldr.w	r2, [r3], #4
 80102a0:	f841 2f04 	str.w	r2, [r1, #4]!
 80102a4:	4298      	cmp	r0, r3
 80102a6:	d8f9      	bhi.n	801029c <__lshift+0xc8>
 80102a8:	e7ea      	b.n	8010280 <__lshift+0xac>
 80102aa:	bf00      	nop
 80102ac:	0801348d 	.word	0x0801348d
 80102b0:	0801349e 	.word	0x0801349e

080102b4 <__mcmp>:
 80102b4:	b530      	push	{r4, r5, lr}
 80102b6:	6902      	ldr	r2, [r0, #16]
 80102b8:	690c      	ldr	r4, [r1, #16]
 80102ba:	1b12      	subs	r2, r2, r4
 80102bc:	d10e      	bne.n	80102dc <__mcmp+0x28>
 80102be:	f100 0314 	add.w	r3, r0, #20
 80102c2:	3114      	adds	r1, #20
 80102c4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80102c8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80102cc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80102d0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80102d4:	42a5      	cmp	r5, r4
 80102d6:	d003      	beq.n	80102e0 <__mcmp+0x2c>
 80102d8:	d305      	bcc.n	80102e6 <__mcmp+0x32>
 80102da:	2201      	movs	r2, #1
 80102dc:	4610      	mov	r0, r2
 80102de:	bd30      	pop	{r4, r5, pc}
 80102e0:	4283      	cmp	r3, r0
 80102e2:	d3f3      	bcc.n	80102cc <__mcmp+0x18>
 80102e4:	e7fa      	b.n	80102dc <__mcmp+0x28>
 80102e6:	f04f 32ff 	mov.w	r2, #4294967295
 80102ea:	e7f7      	b.n	80102dc <__mcmp+0x28>

080102ec <__mdiff>:
 80102ec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80102f0:	460c      	mov	r4, r1
 80102f2:	4606      	mov	r6, r0
 80102f4:	4611      	mov	r1, r2
 80102f6:	4620      	mov	r0, r4
 80102f8:	4690      	mov	r8, r2
 80102fa:	f7ff ffdb 	bl	80102b4 <__mcmp>
 80102fe:	1e05      	subs	r5, r0, #0
 8010300:	d110      	bne.n	8010324 <__mdiff+0x38>
 8010302:	4629      	mov	r1, r5
 8010304:	4630      	mov	r0, r6
 8010306:	f7ff fd53 	bl	800fdb0 <_Balloc>
 801030a:	b930      	cbnz	r0, 801031a <__mdiff+0x2e>
 801030c:	4b3a      	ldr	r3, [pc, #232]	; (80103f8 <__mdiff+0x10c>)
 801030e:	4602      	mov	r2, r0
 8010310:	f240 2132 	movw	r1, #562	; 0x232
 8010314:	4839      	ldr	r0, [pc, #228]	; (80103fc <__mdiff+0x110>)
 8010316:	f000 ffd1 	bl	80112bc <__assert_func>
 801031a:	2301      	movs	r3, #1
 801031c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8010320:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010324:	bfa4      	itt	ge
 8010326:	4643      	movge	r3, r8
 8010328:	46a0      	movge	r8, r4
 801032a:	4630      	mov	r0, r6
 801032c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8010330:	bfa6      	itte	ge
 8010332:	461c      	movge	r4, r3
 8010334:	2500      	movge	r5, #0
 8010336:	2501      	movlt	r5, #1
 8010338:	f7ff fd3a 	bl	800fdb0 <_Balloc>
 801033c:	b920      	cbnz	r0, 8010348 <__mdiff+0x5c>
 801033e:	4b2e      	ldr	r3, [pc, #184]	; (80103f8 <__mdiff+0x10c>)
 8010340:	4602      	mov	r2, r0
 8010342:	f44f 7110 	mov.w	r1, #576	; 0x240
 8010346:	e7e5      	b.n	8010314 <__mdiff+0x28>
 8010348:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801034c:	6926      	ldr	r6, [r4, #16]
 801034e:	60c5      	str	r5, [r0, #12]
 8010350:	f104 0914 	add.w	r9, r4, #20
 8010354:	f108 0514 	add.w	r5, r8, #20
 8010358:	f100 0e14 	add.w	lr, r0, #20
 801035c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8010360:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8010364:	f108 0210 	add.w	r2, r8, #16
 8010368:	46f2      	mov	sl, lr
 801036a:	2100      	movs	r1, #0
 801036c:	f859 3b04 	ldr.w	r3, [r9], #4
 8010370:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8010374:	fa1f f883 	uxth.w	r8, r3
 8010378:	fa11 f18b 	uxtah	r1, r1, fp
 801037c:	0c1b      	lsrs	r3, r3, #16
 801037e:	eba1 0808 	sub.w	r8, r1, r8
 8010382:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8010386:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801038a:	fa1f f888 	uxth.w	r8, r8
 801038e:	1419      	asrs	r1, r3, #16
 8010390:	454e      	cmp	r6, r9
 8010392:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8010396:	f84a 3b04 	str.w	r3, [sl], #4
 801039a:	d8e7      	bhi.n	801036c <__mdiff+0x80>
 801039c:	1b33      	subs	r3, r6, r4
 801039e:	3b15      	subs	r3, #21
 80103a0:	f023 0303 	bic.w	r3, r3, #3
 80103a4:	3304      	adds	r3, #4
 80103a6:	3415      	adds	r4, #21
 80103a8:	42a6      	cmp	r6, r4
 80103aa:	bf38      	it	cc
 80103ac:	2304      	movcc	r3, #4
 80103ae:	441d      	add	r5, r3
 80103b0:	4473      	add	r3, lr
 80103b2:	469e      	mov	lr, r3
 80103b4:	462e      	mov	r6, r5
 80103b6:	4566      	cmp	r6, ip
 80103b8:	d30e      	bcc.n	80103d8 <__mdiff+0xec>
 80103ba:	f10c 0203 	add.w	r2, ip, #3
 80103be:	1b52      	subs	r2, r2, r5
 80103c0:	f022 0203 	bic.w	r2, r2, #3
 80103c4:	3d03      	subs	r5, #3
 80103c6:	45ac      	cmp	ip, r5
 80103c8:	bf38      	it	cc
 80103ca:	2200      	movcc	r2, #0
 80103cc:	441a      	add	r2, r3
 80103ce:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80103d2:	b17b      	cbz	r3, 80103f4 <__mdiff+0x108>
 80103d4:	6107      	str	r7, [r0, #16]
 80103d6:	e7a3      	b.n	8010320 <__mdiff+0x34>
 80103d8:	f856 8b04 	ldr.w	r8, [r6], #4
 80103dc:	fa11 f288 	uxtah	r2, r1, r8
 80103e0:	1414      	asrs	r4, r2, #16
 80103e2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80103e6:	b292      	uxth	r2, r2
 80103e8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80103ec:	f84e 2b04 	str.w	r2, [lr], #4
 80103f0:	1421      	asrs	r1, r4, #16
 80103f2:	e7e0      	b.n	80103b6 <__mdiff+0xca>
 80103f4:	3f01      	subs	r7, #1
 80103f6:	e7ea      	b.n	80103ce <__mdiff+0xe2>
 80103f8:	0801348d 	.word	0x0801348d
 80103fc:	0801349e 	.word	0x0801349e

08010400 <__d2b>:
 8010400:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010404:	4689      	mov	r9, r1
 8010406:	2101      	movs	r1, #1
 8010408:	ec57 6b10 	vmov	r6, r7, d0
 801040c:	4690      	mov	r8, r2
 801040e:	f7ff fccf 	bl	800fdb0 <_Balloc>
 8010412:	4604      	mov	r4, r0
 8010414:	b930      	cbnz	r0, 8010424 <__d2b+0x24>
 8010416:	4602      	mov	r2, r0
 8010418:	4b25      	ldr	r3, [pc, #148]	; (80104b0 <__d2b+0xb0>)
 801041a:	4826      	ldr	r0, [pc, #152]	; (80104b4 <__d2b+0xb4>)
 801041c:	f240 310a 	movw	r1, #778	; 0x30a
 8010420:	f000 ff4c 	bl	80112bc <__assert_func>
 8010424:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8010428:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801042c:	bb35      	cbnz	r5, 801047c <__d2b+0x7c>
 801042e:	2e00      	cmp	r6, #0
 8010430:	9301      	str	r3, [sp, #4]
 8010432:	d028      	beq.n	8010486 <__d2b+0x86>
 8010434:	4668      	mov	r0, sp
 8010436:	9600      	str	r6, [sp, #0]
 8010438:	f7ff fd82 	bl	800ff40 <__lo0bits>
 801043c:	9900      	ldr	r1, [sp, #0]
 801043e:	b300      	cbz	r0, 8010482 <__d2b+0x82>
 8010440:	9a01      	ldr	r2, [sp, #4]
 8010442:	f1c0 0320 	rsb	r3, r0, #32
 8010446:	fa02 f303 	lsl.w	r3, r2, r3
 801044a:	430b      	orrs	r3, r1
 801044c:	40c2      	lsrs	r2, r0
 801044e:	6163      	str	r3, [r4, #20]
 8010450:	9201      	str	r2, [sp, #4]
 8010452:	9b01      	ldr	r3, [sp, #4]
 8010454:	61a3      	str	r3, [r4, #24]
 8010456:	2b00      	cmp	r3, #0
 8010458:	bf14      	ite	ne
 801045a:	2202      	movne	r2, #2
 801045c:	2201      	moveq	r2, #1
 801045e:	6122      	str	r2, [r4, #16]
 8010460:	b1d5      	cbz	r5, 8010498 <__d2b+0x98>
 8010462:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8010466:	4405      	add	r5, r0
 8010468:	f8c9 5000 	str.w	r5, [r9]
 801046c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8010470:	f8c8 0000 	str.w	r0, [r8]
 8010474:	4620      	mov	r0, r4
 8010476:	b003      	add	sp, #12
 8010478:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801047c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010480:	e7d5      	b.n	801042e <__d2b+0x2e>
 8010482:	6161      	str	r1, [r4, #20]
 8010484:	e7e5      	b.n	8010452 <__d2b+0x52>
 8010486:	a801      	add	r0, sp, #4
 8010488:	f7ff fd5a 	bl	800ff40 <__lo0bits>
 801048c:	9b01      	ldr	r3, [sp, #4]
 801048e:	6163      	str	r3, [r4, #20]
 8010490:	2201      	movs	r2, #1
 8010492:	6122      	str	r2, [r4, #16]
 8010494:	3020      	adds	r0, #32
 8010496:	e7e3      	b.n	8010460 <__d2b+0x60>
 8010498:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801049c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80104a0:	f8c9 0000 	str.w	r0, [r9]
 80104a4:	6918      	ldr	r0, [r3, #16]
 80104a6:	f7ff fd2b 	bl	800ff00 <__hi0bits>
 80104aa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80104ae:	e7df      	b.n	8010470 <__d2b+0x70>
 80104b0:	0801348d 	.word	0x0801348d
 80104b4:	0801349e 	.word	0x0801349e

080104b8 <_calloc_r>:
 80104b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80104ba:	fba1 2402 	umull	r2, r4, r1, r2
 80104be:	b94c      	cbnz	r4, 80104d4 <_calloc_r+0x1c>
 80104c0:	4611      	mov	r1, r2
 80104c2:	9201      	str	r2, [sp, #4]
 80104c4:	f000 f87a 	bl	80105bc <_malloc_r>
 80104c8:	9a01      	ldr	r2, [sp, #4]
 80104ca:	4605      	mov	r5, r0
 80104cc:	b930      	cbnz	r0, 80104dc <_calloc_r+0x24>
 80104ce:	4628      	mov	r0, r5
 80104d0:	b003      	add	sp, #12
 80104d2:	bd30      	pop	{r4, r5, pc}
 80104d4:	220c      	movs	r2, #12
 80104d6:	6002      	str	r2, [r0, #0]
 80104d8:	2500      	movs	r5, #0
 80104da:	e7f8      	b.n	80104ce <_calloc_r+0x16>
 80104dc:	4621      	mov	r1, r4
 80104de:	f7fe f863 	bl	800e5a8 <memset>
 80104e2:	e7f4      	b.n	80104ce <_calloc_r+0x16>

080104e4 <_free_r>:
 80104e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80104e6:	2900      	cmp	r1, #0
 80104e8:	d044      	beq.n	8010574 <_free_r+0x90>
 80104ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80104ee:	9001      	str	r0, [sp, #4]
 80104f0:	2b00      	cmp	r3, #0
 80104f2:	f1a1 0404 	sub.w	r4, r1, #4
 80104f6:	bfb8      	it	lt
 80104f8:	18e4      	addlt	r4, r4, r3
 80104fa:	f001 f8f5 	bl	80116e8 <__malloc_lock>
 80104fe:	4a1e      	ldr	r2, [pc, #120]	; (8010578 <_free_r+0x94>)
 8010500:	9801      	ldr	r0, [sp, #4]
 8010502:	6813      	ldr	r3, [r2, #0]
 8010504:	b933      	cbnz	r3, 8010514 <_free_r+0x30>
 8010506:	6063      	str	r3, [r4, #4]
 8010508:	6014      	str	r4, [r2, #0]
 801050a:	b003      	add	sp, #12
 801050c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010510:	f001 b8f0 	b.w	80116f4 <__malloc_unlock>
 8010514:	42a3      	cmp	r3, r4
 8010516:	d908      	bls.n	801052a <_free_r+0x46>
 8010518:	6825      	ldr	r5, [r4, #0]
 801051a:	1961      	adds	r1, r4, r5
 801051c:	428b      	cmp	r3, r1
 801051e:	bf01      	itttt	eq
 8010520:	6819      	ldreq	r1, [r3, #0]
 8010522:	685b      	ldreq	r3, [r3, #4]
 8010524:	1949      	addeq	r1, r1, r5
 8010526:	6021      	streq	r1, [r4, #0]
 8010528:	e7ed      	b.n	8010506 <_free_r+0x22>
 801052a:	461a      	mov	r2, r3
 801052c:	685b      	ldr	r3, [r3, #4]
 801052e:	b10b      	cbz	r3, 8010534 <_free_r+0x50>
 8010530:	42a3      	cmp	r3, r4
 8010532:	d9fa      	bls.n	801052a <_free_r+0x46>
 8010534:	6811      	ldr	r1, [r2, #0]
 8010536:	1855      	adds	r5, r2, r1
 8010538:	42a5      	cmp	r5, r4
 801053a:	d10b      	bne.n	8010554 <_free_r+0x70>
 801053c:	6824      	ldr	r4, [r4, #0]
 801053e:	4421      	add	r1, r4
 8010540:	1854      	adds	r4, r2, r1
 8010542:	42a3      	cmp	r3, r4
 8010544:	6011      	str	r1, [r2, #0]
 8010546:	d1e0      	bne.n	801050a <_free_r+0x26>
 8010548:	681c      	ldr	r4, [r3, #0]
 801054a:	685b      	ldr	r3, [r3, #4]
 801054c:	6053      	str	r3, [r2, #4]
 801054e:	4421      	add	r1, r4
 8010550:	6011      	str	r1, [r2, #0]
 8010552:	e7da      	b.n	801050a <_free_r+0x26>
 8010554:	d902      	bls.n	801055c <_free_r+0x78>
 8010556:	230c      	movs	r3, #12
 8010558:	6003      	str	r3, [r0, #0]
 801055a:	e7d6      	b.n	801050a <_free_r+0x26>
 801055c:	6825      	ldr	r5, [r4, #0]
 801055e:	1961      	adds	r1, r4, r5
 8010560:	428b      	cmp	r3, r1
 8010562:	bf04      	itt	eq
 8010564:	6819      	ldreq	r1, [r3, #0]
 8010566:	685b      	ldreq	r3, [r3, #4]
 8010568:	6063      	str	r3, [r4, #4]
 801056a:	bf04      	itt	eq
 801056c:	1949      	addeq	r1, r1, r5
 801056e:	6021      	streq	r1, [r4, #0]
 8010570:	6054      	str	r4, [r2, #4]
 8010572:	e7ca      	b.n	801050a <_free_r+0x26>
 8010574:	b003      	add	sp, #12
 8010576:	bd30      	pop	{r4, r5, pc}
 8010578:	20000f40 	.word	0x20000f40

0801057c <sbrk_aligned>:
 801057c:	b570      	push	{r4, r5, r6, lr}
 801057e:	4e0e      	ldr	r6, [pc, #56]	; (80105b8 <sbrk_aligned+0x3c>)
 8010580:	460c      	mov	r4, r1
 8010582:	6831      	ldr	r1, [r6, #0]
 8010584:	4605      	mov	r5, r0
 8010586:	b911      	cbnz	r1, 801058e <sbrk_aligned+0x12>
 8010588:	f000 fd1e 	bl	8010fc8 <_sbrk_r>
 801058c:	6030      	str	r0, [r6, #0]
 801058e:	4621      	mov	r1, r4
 8010590:	4628      	mov	r0, r5
 8010592:	f000 fd19 	bl	8010fc8 <_sbrk_r>
 8010596:	1c43      	adds	r3, r0, #1
 8010598:	d00a      	beq.n	80105b0 <sbrk_aligned+0x34>
 801059a:	1cc4      	adds	r4, r0, #3
 801059c:	f024 0403 	bic.w	r4, r4, #3
 80105a0:	42a0      	cmp	r0, r4
 80105a2:	d007      	beq.n	80105b4 <sbrk_aligned+0x38>
 80105a4:	1a21      	subs	r1, r4, r0
 80105a6:	4628      	mov	r0, r5
 80105a8:	f000 fd0e 	bl	8010fc8 <_sbrk_r>
 80105ac:	3001      	adds	r0, #1
 80105ae:	d101      	bne.n	80105b4 <sbrk_aligned+0x38>
 80105b0:	f04f 34ff 	mov.w	r4, #4294967295
 80105b4:	4620      	mov	r0, r4
 80105b6:	bd70      	pop	{r4, r5, r6, pc}
 80105b8:	20000f44 	.word	0x20000f44

080105bc <_malloc_r>:
 80105bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80105c0:	1ccd      	adds	r5, r1, #3
 80105c2:	f025 0503 	bic.w	r5, r5, #3
 80105c6:	3508      	adds	r5, #8
 80105c8:	2d0c      	cmp	r5, #12
 80105ca:	bf38      	it	cc
 80105cc:	250c      	movcc	r5, #12
 80105ce:	2d00      	cmp	r5, #0
 80105d0:	4607      	mov	r7, r0
 80105d2:	db01      	blt.n	80105d8 <_malloc_r+0x1c>
 80105d4:	42a9      	cmp	r1, r5
 80105d6:	d905      	bls.n	80105e4 <_malloc_r+0x28>
 80105d8:	230c      	movs	r3, #12
 80105da:	603b      	str	r3, [r7, #0]
 80105dc:	2600      	movs	r6, #0
 80105de:	4630      	mov	r0, r6
 80105e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80105e4:	4e2e      	ldr	r6, [pc, #184]	; (80106a0 <_malloc_r+0xe4>)
 80105e6:	f001 f87f 	bl	80116e8 <__malloc_lock>
 80105ea:	6833      	ldr	r3, [r6, #0]
 80105ec:	461c      	mov	r4, r3
 80105ee:	bb34      	cbnz	r4, 801063e <_malloc_r+0x82>
 80105f0:	4629      	mov	r1, r5
 80105f2:	4638      	mov	r0, r7
 80105f4:	f7ff ffc2 	bl	801057c <sbrk_aligned>
 80105f8:	1c43      	adds	r3, r0, #1
 80105fa:	4604      	mov	r4, r0
 80105fc:	d14d      	bne.n	801069a <_malloc_r+0xde>
 80105fe:	6834      	ldr	r4, [r6, #0]
 8010600:	4626      	mov	r6, r4
 8010602:	2e00      	cmp	r6, #0
 8010604:	d140      	bne.n	8010688 <_malloc_r+0xcc>
 8010606:	6823      	ldr	r3, [r4, #0]
 8010608:	4631      	mov	r1, r6
 801060a:	4638      	mov	r0, r7
 801060c:	eb04 0803 	add.w	r8, r4, r3
 8010610:	f000 fcda 	bl	8010fc8 <_sbrk_r>
 8010614:	4580      	cmp	r8, r0
 8010616:	d13a      	bne.n	801068e <_malloc_r+0xd2>
 8010618:	6821      	ldr	r1, [r4, #0]
 801061a:	3503      	adds	r5, #3
 801061c:	1a6d      	subs	r5, r5, r1
 801061e:	f025 0503 	bic.w	r5, r5, #3
 8010622:	3508      	adds	r5, #8
 8010624:	2d0c      	cmp	r5, #12
 8010626:	bf38      	it	cc
 8010628:	250c      	movcc	r5, #12
 801062a:	4629      	mov	r1, r5
 801062c:	4638      	mov	r0, r7
 801062e:	f7ff ffa5 	bl	801057c <sbrk_aligned>
 8010632:	3001      	adds	r0, #1
 8010634:	d02b      	beq.n	801068e <_malloc_r+0xd2>
 8010636:	6823      	ldr	r3, [r4, #0]
 8010638:	442b      	add	r3, r5
 801063a:	6023      	str	r3, [r4, #0]
 801063c:	e00e      	b.n	801065c <_malloc_r+0xa0>
 801063e:	6822      	ldr	r2, [r4, #0]
 8010640:	1b52      	subs	r2, r2, r5
 8010642:	d41e      	bmi.n	8010682 <_malloc_r+0xc6>
 8010644:	2a0b      	cmp	r2, #11
 8010646:	d916      	bls.n	8010676 <_malloc_r+0xba>
 8010648:	1961      	adds	r1, r4, r5
 801064a:	42a3      	cmp	r3, r4
 801064c:	6025      	str	r5, [r4, #0]
 801064e:	bf18      	it	ne
 8010650:	6059      	strne	r1, [r3, #4]
 8010652:	6863      	ldr	r3, [r4, #4]
 8010654:	bf08      	it	eq
 8010656:	6031      	streq	r1, [r6, #0]
 8010658:	5162      	str	r2, [r4, r5]
 801065a:	604b      	str	r3, [r1, #4]
 801065c:	4638      	mov	r0, r7
 801065e:	f104 060b 	add.w	r6, r4, #11
 8010662:	f001 f847 	bl	80116f4 <__malloc_unlock>
 8010666:	f026 0607 	bic.w	r6, r6, #7
 801066a:	1d23      	adds	r3, r4, #4
 801066c:	1af2      	subs	r2, r6, r3
 801066e:	d0b6      	beq.n	80105de <_malloc_r+0x22>
 8010670:	1b9b      	subs	r3, r3, r6
 8010672:	50a3      	str	r3, [r4, r2]
 8010674:	e7b3      	b.n	80105de <_malloc_r+0x22>
 8010676:	6862      	ldr	r2, [r4, #4]
 8010678:	42a3      	cmp	r3, r4
 801067a:	bf0c      	ite	eq
 801067c:	6032      	streq	r2, [r6, #0]
 801067e:	605a      	strne	r2, [r3, #4]
 8010680:	e7ec      	b.n	801065c <_malloc_r+0xa0>
 8010682:	4623      	mov	r3, r4
 8010684:	6864      	ldr	r4, [r4, #4]
 8010686:	e7b2      	b.n	80105ee <_malloc_r+0x32>
 8010688:	4634      	mov	r4, r6
 801068a:	6876      	ldr	r6, [r6, #4]
 801068c:	e7b9      	b.n	8010602 <_malloc_r+0x46>
 801068e:	230c      	movs	r3, #12
 8010690:	603b      	str	r3, [r7, #0]
 8010692:	4638      	mov	r0, r7
 8010694:	f001 f82e 	bl	80116f4 <__malloc_unlock>
 8010698:	e7a1      	b.n	80105de <_malloc_r+0x22>
 801069a:	6025      	str	r5, [r4, #0]
 801069c:	e7de      	b.n	801065c <_malloc_r+0xa0>
 801069e:	bf00      	nop
 80106a0:	20000f40 	.word	0x20000f40

080106a4 <__ssputs_r>:
 80106a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80106a8:	688e      	ldr	r6, [r1, #8]
 80106aa:	429e      	cmp	r6, r3
 80106ac:	4682      	mov	sl, r0
 80106ae:	460c      	mov	r4, r1
 80106b0:	4690      	mov	r8, r2
 80106b2:	461f      	mov	r7, r3
 80106b4:	d838      	bhi.n	8010728 <__ssputs_r+0x84>
 80106b6:	898a      	ldrh	r2, [r1, #12]
 80106b8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80106bc:	d032      	beq.n	8010724 <__ssputs_r+0x80>
 80106be:	6825      	ldr	r5, [r4, #0]
 80106c0:	6909      	ldr	r1, [r1, #16]
 80106c2:	eba5 0901 	sub.w	r9, r5, r1
 80106c6:	6965      	ldr	r5, [r4, #20]
 80106c8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80106cc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80106d0:	3301      	adds	r3, #1
 80106d2:	444b      	add	r3, r9
 80106d4:	106d      	asrs	r5, r5, #1
 80106d6:	429d      	cmp	r5, r3
 80106d8:	bf38      	it	cc
 80106da:	461d      	movcc	r5, r3
 80106dc:	0553      	lsls	r3, r2, #21
 80106de:	d531      	bpl.n	8010744 <__ssputs_r+0xa0>
 80106e0:	4629      	mov	r1, r5
 80106e2:	f7ff ff6b 	bl	80105bc <_malloc_r>
 80106e6:	4606      	mov	r6, r0
 80106e8:	b950      	cbnz	r0, 8010700 <__ssputs_r+0x5c>
 80106ea:	230c      	movs	r3, #12
 80106ec:	f8ca 3000 	str.w	r3, [sl]
 80106f0:	89a3      	ldrh	r3, [r4, #12]
 80106f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80106f6:	81a3      	strh	r3, [r4, #12]
 80106f8:	f04f 30ff 	mov.w	r0, #4294967295
 80106fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010700:	6921      	ldr	r1, [r4, #16]
 8010702:	464a      	mov	r2, r9
 8010704:	f7fd ff42 	bl	800e58c <memcpy>
 8010708:	89a3      	ldrh	r3, [r4, #12]
 801070a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801070e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010712:	81a3      	strh	r3, [r4, #12]
 8010714:	6126      	str	r6, [r4, #16]
 8010716:	6165      	str	r5, [r4, #20]
 8010718:	444e      	add	r6, r9
 801071a:	eba5 0509 	sub.w	r5, r5, r9
 801071e:	6026      	str	r6, [r4, #0]
 8010720:	60a5      	str	r5, [r4, #8]
 8010722:	463e      	mov	r6, r7
 8010724:	42be      	cmp	r6, r7
 8010726:	d900      	bls.n	801072a <__ssputs_r+0x86>
 8010728:	463e      	mov	r6, r7
 801072a:	6820      	ldr	r0, [r4, #0]
 801072c:	4632      	mov	r2, r6
 801072e:	4641      	mov	r1, r8
 8010730:	f000 ffc0 	bl	80116b4 <memmove>
 8010734:	68a3      	ldr	r3, [r4, #8]
 8010736:	1b9b      	subs	r3, r3, r6
 8010738:	60a3      	str	r3, [r4, #8]
 801073a:	6823      	ldr	r3, [r4, #0]
 801073c:	4433      	add	r3, r6
 801073e:	6023      	str	r3, [r4, #0]
 8010740:	2000      	movs	r0, #0
 8010742:	e7db      	b.n	80106fc <__ssputs_r+0x58>
 8010744:	462a      	mov	r2, r5
 8010746:	f000 ffdb 	bl	8011700 <_realloc_r>
 801074a:	4606      	mov	r6, r0
 801074c:	2800      	cmp	r0, #0
 801074e:	d1e1      	bne.n	8010714 <__ssputs_r+0x70>
 8010750:	6921      	ldr	r1, [r4, #16]
 8010752:	4650      	mov	r0, sl
 8010754:	f7ff fec6 	bl	80104e4 <_free_r>
 8010758:	e7c7      	b.n	80106ea <__ssputs_r+0x46>
	...

0801075c <_svfiprintf_r>:
 801075c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010760:	4698      	mov	r8, r3
 8010762:	898b      	ldrh	r3, [r1, #12]
 8010764:	061b      	lsls	r3, r3, #24
 8010766:	b09d      	sub	sp, #116	; 0x74
 8010768:	4607      	mov	r7, r0
 801076a:	460d      	mov	r5, r1
 801076c:	4614      	mov	r4, r2
 801076e:	d50e      	bpl.n	801078e <_svfiprintf_r+0x32>
 8010770:	690b      	ldr	r3, [r1, #16]
 8010772:	b963      	cbnz	r3, 801078e <_svfiprintf_r+0x32>
 8010774:	2140      	movs	r1, #64	; 0x40
 8010776:	f7ff ff21 	bl	80105bc <_malloc_r>
 801077a:	6028      	str	r0, [r5, #0]
 801077c:	6128      	str	r0, [r5, #16]
 801077e:	b920      	cbnz	r0, 801078a <_svfiprintf_r+0x2e>
 8010780:	230c      	movs	r3, #12
 8010782:	603b      	str	r3, [r7, #0]
 8010784:	f04f 30ff 	mov.w	r0, #4294967295
 8010788:	e0d1      	b.n	801092e <_svfiprintf_r+0x1d2>
 801078a:	2340      	movs	r3, #64	; 0x40
 801078c:	616b      	str	r3, [r5, #20]
 801078e:	2300      	movs	r3, #0
 8010790:	9309      	str	r3, [sp, #36]	; 0x24
 8010792:	2320      	movs	r3, #32
 8010794:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010798:	f8cd 800c 	str.w	r8, [sp, #12]
 801079c:	2330      	movs	r3, #48	; 0x30
 801079e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8010948 <_svfiprintf_r+0x1ec>
 80107a2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80107a6:	f04f 0901 	mov.w	r9, #1
 80107aa:	4623      	mov	r3, r4
 80107ac:	469a      	mov	sl, r3
 80107ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 80107b2:	b10a      	cbz	r2, 80107b8 <_svfiprintf_r+0x5c>
 80107b4:	2a25      	cmp	r2, #37	; 0x25
 80107b6:	d1f9      	bne.n	80107ac <_svfiprintf_r+0x50>
 80107b8:	ebba 0b04 	subs.w	fp, sl, r4
 80107bc:	d00b      	beq.n	80107d6 <_svfiprintf_r+0x7a>
 80107be:	465b      	mov	r3, fp
 80107c0:	4622      	mov	r2, r4
 80107c2:	4629      	mov	r1, r5
 80107c4:	4638      	mov	r0, r7
 80107c6:	f7ff ff6d 	bl	80106a4 <__ssputs_r>
 80107ca:	3001      	adds	r0, #1
 80107cc:	f000 80aa 	beq.w	8010924 <_svfiprintf_r+0x1c8>
 80107d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80107d2:	445a      	add	r2, fp
 80107d4:	9209      	str	r2, [sp, #36]	; 0x24
 80107d6:	f89a 3000 	ldrb.w	r3, [sl]
 80107da:	2b00      	cmp	r3, #0
 80107dc:	f000 80a2 	beq.w	8010924 <_svfiprintf_r+0x1c8>
 80107e0:	2300      	movs	r3, #0
 80107e2:	f04f 32ff 	mov.w	r2, #4294967295
 80107e6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80107ea:	f10a 0a01 	add.w	sl, sl, #1
 80107ee:	9304      	str	r3, [sp, #16]
 80107f0:	9307      	str	r3, [sp, #28]
 80107f2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80107f6:	931a      	str	r3, [sp, #104]	; 0x68
 80107f8:	4654      	mov	r4, sl
 80107fa:	2205      	movs	r2, #5
 80107fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010800:	4851      	ldr	r0, [pc, #324]	; (8010948 <_svfiprintf_r+0x1ec>)
 8010802:	f7ef fced 	bl	80001e0 <memchr>
 8010806:	9a04      	ldr	r2, [sp, #16]
 8010808:	b9d8      	cbnz	r0, 8010842 <_svfiprintf_r+0xe6>
 801080a:	06d0      	lsls	r0, r2, #27
 801080c:	bf44      	itt	mi
 801080e:	2320      	movmi	r3, #32
 8010810:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010814:	0711      	lsls	r1, r2, #28
 8010816:	bf44      	itt	mi
 8010818:	232b      	movmi	r3, #43	; 0x2b
 801081a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801081e:	f89a 3000 	ldrb.w	r3, [sl]
 8010822:	2b2a      	cmp	r3, #42	; 0x2a
 8010824:	d015      	beq.n	8010852 <_svfiprintf_r+0xf6>
 8010826:	9a07      	ldr	r2, [sp, #28]
 8010828:	4654      	mov	r4, sl
 801082a:	2000      	movs	r0, #0
 801082c:	f04f 0c0a 	mov.w	ip, #10
 8010830:	4621      	mov	r1, r4
 8010832:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010836:	3b30      	subs	r3, #48	; 0x30
 8010838:	2b09      	cmp	r3, #9
 801083a:	d94e      	bls.n	80108da <_svfiprintf_r+0x17e>
 801083c:	b1b0      	cbz	r0, 801086c <_svfiprintf_r+0x110>
 801083e:	9207      	str	r2, [sp, #28]
 8010840:	e014      	b.n	801086c <_svfiprintf_r+0x110>
 8010842:	eba0 0308 	sub.w	r3, r0, r8
 8010846:	fa09 f303 	lsl.w	r3, r9, r3
 801084a:	4313      	orrs	r3, r2
 801084c:	9304      	str	r3, [sp, #16]
 801084e:	46a2      	mov	sl, r4
 8010850:	e7d2      	b.n	80107f8 <_svfiprintf_r+0x9c>
 8010852:	9b03      	ldr	r3, [sp, #12]
 8010854:	1d19      	adds	r1, r3, #4
 8010856:	681b      	ldr	r3, [r3, #0]
 8010858:	9103      	str	r1, [sp, #12]
 801085a:	2b00      	cmp	r3, #0
 801085c:	bfbb      	ittet	lt
 801085e:	425b      	neglt	r3, r3
 8010860:	f042 0202 	orrlt.w	r2, r2, #2
 8010864:	9307      	strge	r3, [sp, #28]
 8010866:	9307      	strlt	r3, [sp, #28]
 8010868:	bfb8      	it	lt
 801086a:	9204      	strlt	r2, [sp, #16]
 801086c:	7823      	ldrb	r3, [r4, #0]
 801086e:	2b2e      	cmp	r3, #46	; 0x2e
 8010870:	d10c      	bne.n	801088c <_svfiprintf_r+0x130>
 8010872:	7863      	ldrb	r3, [r4, #1]
 8010874:	2b2a      	cmp	r3, #42	; 0x2a
 8010876:	d135      	bne.n	80108e4 <_svfiprintf_r+0x188>
 8010878:	9b03      	ldr	r3, [sp, #12]
 801087a:	1d1a      	adds	r2, r3, #4
 801087c:	681b      	ldr	r3, [r3, #0]
 801087e:	9203      	str	r2, [sp, #12]
 8010880:	2b00      	cmp	r3, #0
 8010882:	bfb8      	it	lt
 8010884:	f04f 33ff 	movlt.w	r3, #4294967295
 8010888:	3402      	adds	r4, #2
 801088a:	9305      	str	r3, [sp, #20]
 801088c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8010958 <_svfiprintf_r+0x1fc>
 8010890:	7821      	ldrb	r1, [r4, #0]
 8010892:	2203      	movs	r2, #3
 8010894:	4650      	mov	r0, sl
 8010896:	f7ef fca3 	bl	80001e0 <memchr>
 801089a:	b140      	cbz	r0, 80108ae <_svfiprintf_r+0x152>
 801089c:	2340      	movs	r3, #64	; 0x40
 801089e:	eba0 000a 	sub.w	r0, r0, sl
 80108a2:	fa03 f000 	lsl.w	r0, r3, r0
 80108a6:	9b04      	ldr	r3, [sp, #16]
 80108a8:	4303      	orrs	r3, r0
 80108aa:	3401      	adds	r4, #1
 80108ac:	9304      	str	r3, [sp, #16]
 80108ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80108b2:	4826      	ldr	r0, [pc, #152]	; (801094c <_svfiprintf_r+0x1f0>)
 80108b4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80108b8:	2206      	movs	r2, #6
 80108ba:	f7ef fc91 	bl	80001e0 <memchr>
 80108be:	2800      	cmp	r0, #0
 80108c0:	d038      	beq.n	8010934 <_svfiprintf_r+0x1d8>
 80108c2:	4b23      	ldr	r3, [pc, #140]	; (8010950 <_svfiprintf_r+0x1f4>)
 80108c4:	bb1b      	cbnz	r3, 801090e <_svfiprintf_r+0x1b2>
 80108c6:	9b03      	ldr	r3, [sp, #12]
 80108c8:	3307      	adds	r3, #7
 80108ca:	f023 0307 	bic.w	r3, r3, #7
 80108ce:	3308      	adds	r3, #8
 80108d0:	9303      	str	r3, [sp, #12]
 80108d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80108d4:	4433      	add	r3, r6
 80108d6:	9309      	str	r3, [sp, #36]	; 0x24
 80108d8:	e767      	b.n	80107aa <_svfiprintf_r+0x4e>
 80108da:	fb0c 3202 	mla	r2, ip, r2, r3
 80108de:	460c      	mov	r4, r1
 80108e0:	2001      	movs	r0, #1
 80108e2:	e7a5      	b.n	8010830 <_svfiprintf_r+0xd4>
 80108e4:	2300      	movs	r3, #0
 80108e6:	3401      	adds	r4, #1
 80108e8:	9305      	str	r3, [sp, #20]
 80108ea:	4619      	mov	r1, r3
 80108ec:	f04f 0c0a 	mov.w	ip, #10
 80108f0:	4620      	mov	r0, r4
 80108f2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80108f6:	3a30      	subs	r2, #48	; 0x30
 80108f8:	2a09      	cmp	r2, #9
 80108fa:	d903      	bls.n	8010904 <_svfiprintf_r+0x1a8>
 80108fc:	2b00      	cmp	r3, #0
 80108fe:	d0c5      	beq.n	801088c <_svfiprintf_r+0x130>
 8010900:	9105      	str	r1, [sp, #20]
 8010902:	e7c3      	b.n	801088c <_svfiprintf_r+0x130>
 8010904:	fb0c 2101 	mla	r1, ip, r1, r2
 8010908:	4604      	mov	r4, r0
 801090a:	2301      	movs	r3, #1
 801090c:	e7f0      	b.n	80108f0 <_svfiprintf_r+0x194>
 801090e:	ab03      	add	r3, sp, #12
 8010910:	9300      	str	r3, [sp, #0]
 8010912:	462a      	mov	r2, r5
 8010914:	4b0f      	ldr	r3, [pc, #60]	; (8010954 <_svfiprintf_r+0x1f8>)
 8010916:	a904      	add	r1, sp, #16
 8010918:	4638      	mov	r0, r7
 801091a:	f7fd feed 	bl	800e6f8 <_printf_float>
 801091e:	1c42      	adds	r2, r0, #1
 8010920:	4606      	mov	r6, r0
 8010922:	d1d6      	bne.n	80108d2 <_svfiprintf_r+0x176>
 8010924:	89ab      	ldrh	r3, [r5, #12]
 8010926:	065b      	lsls	r3, r3, #25
 8010928:	f53f af2c 	bmi.w	8010784 <_svfiprintf_r+0x28>
 801092c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801092e:	b01d      	add	sp, #116	; 0x74
 8010930:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010934:	ab03      	add	r3, sp, #12
 8010936:	9300      	str	r3, [sp, #0]
 8010938:	462a      	mov	r2, r5
 801093a:	4b06      	ldr	r3, [pc, #24]	; (8010954 <_svfiprintf_r+0x1f8>)
 801093c:	a904      	add	r1, sp, #16
 801093e:	4638      	mov	r0, r7
 8010940:	f7fe f97e 	bl	800ec40 <_printf_i>
 8010944:	e7eb      	b.n	801091e <_svfiprintf_r+0x1c2>
 8010946:	bf00      	nop
 8010948:	080135fc 	.word	0x080135fc
 801094c:	08013606 	.word	0x08013606
 8010950:	0800e6f9 	.word	0x0800e6f9
 8010954:	080106a5 	.word	0x080106a5
 8010958:	08013602 	.word	0x08013602

0801095c <_sungetc_r>:
 801095c:	b538      	push	{r3, r4, r5, lr}
 801095e:	1c4b      	adds	r3, r1, #1
 8010960:	4614      	mov	r4, r2
 8010962:	d103      	bne.n	801096c <_sungetc_r+0x10>
 8010964:	f04f 35ff 	mov.w	r5, #4294967295
 8010968:	4628      	mov	r0, r5
 801096a:	bd38      	pop	{r3, r4, r5, pc}
 801096c:	8993      	ldrh	r3, [r2, #12]
 801096e:	f023 0320 	bic.w	r3, r3, #32
 8010972:	8193      	strh	r3, [r2, #12]
 8010974:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010976:	6852      	ldr	r2, [r2, #4]
 8010978:	b2cd      	uxtb	r5, r1
 801097a:	b18b      	cbz	r3, 80109a0 <_sungetc_r+0x44>
 801097c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801097e:	4293      	cmp	r3, r2
 8010980:	dd08      	ble.n	8010994 <_sungetc_r+0x38>
 8010982:	6823      	ldr	r3, [r4, #0]
 8010984:	1e5a      	subs	r2, r3, #1
 8010986:	6022      	str	r2, [r4, #0]
 8010988:	f803 5c01 	strb.w	r5, [r3, #-1]
 801098c:	6863      	ldr	r3, [r4, #4]
 801098e:	3301      	adds	r3, #1
 8010990:	6063      	str	r3, [r4, #4]
 8010992:	e7e9      	b.n	8010968 <_sungetc_r+0xc>
 8010994:	4621      	mov	r1, r4
 8010996:	f000 fc57 	bl	8011248 <__submore>
 801099a:	2800      	cmp	r0, #0
 801099c:	d0f1      	beq.n	8010982 <_sungetc_r+0x26>
 801099e:	e7e1      	b.n	8010964 <_sungetc_r+0x8>
 80109a0:	6921      	ldr	r1, [r4, #16]
 80109a2:	6823      	ldr	r3, [r4, #0]
 80109a4:	b151      	cbz	r1, 80109bc <_sungetc_r+0x60>
 80109a6:	4299      	cmp	r1, r3
 80109a8:	d208      	bcs.n	80109bc <_sungetc_r+0x60>
 80109aa:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80109ae:	42a9      	cmp	r1, r5
 80109b0:	d104      	bne.n	80109bc <_sungetc_r+0x60>
 80109b2:	3b01      	subs	r3, #1
 80109b4:	3201      	adds	r2, #1
 80109b6:	6023      	str	r3, [r4, #0]
 80109b8:	6062      	str	r2, [r4, #4]
 80109ba:	e7d5      	b.n	8010968 <_sungetc_r+0xc>
 80109bc:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 80109c0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80109c4:	6363      	str	r3, [r4, #52]	; 0x34
 80109c6:	2303      	movs	r3, #3
 80109c8:	63a3      	str	r3, [r4, #56]	; 0x38
 80109ca:	4623      	mov	r3, r4
 80109cc:	f803 5f46 	strb.w	r5, [r3, #70]!
 80109d0:	6023      	str	r3, [r4, #0]
 80109d2:	2301      	movs	r3, #1
 80109d4:	e7dc      	b.n	8010990 <_sungetc_r+0x34>

080109d6 <__ssrefill_r>:
 80109d6:	b510      	push	{r4, lr}
 80109d8:	460c      	mov	r4, r1
 80109da:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80109dc:	b169      	cbz	r1, 80109fa <__ssrefill_r+0x24>
 80109de:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80109e2:	4299      	cmp	r1, r3
 80109e4:	d001      	beq.n	80109ea <__ssrefill_r+0x14>
 80109e6:	f7ff fd7d 	bl	80104e4 <_free_r>
 80109ea:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80109ec:	6063      	str	r3, [r4, #4]
 80109ee:	2000      	movs	r0, #0
 80109f0:	6360      	str	r0, [r4, #52]	; 0x34
 80109f2:	b113      	cbz	r3, 80109fa <__ssrefill_r+0x24>
 80109f4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80109f6:	6023      	str	r3, [r4, #0]
 80109f8:	bd10      	pop	{r4, pc}
 80109fa:	6923      	ldr	r3, [r4, #16]
 80109fc:	6023      	str	r3, [r4, #0]
 80109fe:	2300      	movs	r3, #0
 8010a00:	6063      	str	r3, [r4, #4]
 8010a02:	89a3      	ldrh	r3, [r4, #12]
 8010a04:	f043 0320 	orr.w	r3, r3, #32
 8010a08:	81a3      	strh	r3, [r4, #12]
 8010a0a:	f04f 30ff 	mov.w	r0, #4294967295
 8010a0e:	e7f3      	b.n	80109f8 <__ssrefill_r+0x22>

08010a10 <__ssvfiscanf_r>:
 8010a10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010a14:	460c      	mov	r4, r1
 8010a16:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8010a1a:	2100      	movs	r1, #0
 8010a1c:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8010a20:	49a6      	ldr	r1, [pc, #664]	; (8010cbc <__ssvfiscanf_r+0x2ac>)
 8010a22:	91a0      	str	r1, [sp, #640]	; 0x280
 8010a24:	f10d 0804 	add.w	r8, sp, #4
 8010a28:	49a5      	ldr	r1, [pc, #660]	; (8010cc0 <__ssvfiscanf_r+0x2b0>)
 8010a2a:	4fa6      	ldr	r7, [pc, #664]	; (8010cc4 <__ssvfiscanf_r+0x2b4>)
 8010a2c:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8010cc8 <__ssvfiscanf_r+0x2b8>
 8010a30:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8010a34:	4606      	mov	r6, r0
 8010a36:	91a1      	str	r1, [sp, #644]	; 0x284
 8010a38:	9300      	str	r3, [sp, #0]
 8010a3a:	7813      	ldrb	r3, [r2, #0]
 8010a3c:	2b00      	cmp	r3, #0
 8010a3e:	f000 815a 	beq.w	8010cf6 <__ssvfiscanf_r+0x2e6>
 8010a42:	5dd9      	ldrb	r1, [r3, r7]
 8010a44:	f011 0108 	ands.w	r1, r1, #8
 8010a48:	f102 0501 	add.w	r5, r2, #1
 8010a4c:	d019      	beq.n	8010a82 <__ssvfiscanf_r+0x72>
 8010a4e:	6863      	ldr	r3, [r4, #4]
 8010a50:	2b00      	cmp	r3, #0
 8010a52:	dd0f      	ble.n	8010a74 <__ssvfiscanf_r+0x64>
 8010a54:	6823      	ldr	r3, [r4, #0]
 8010a56:	781a      	ldrb	r2, [r3, #0]
 8010a58:	5cba      	ldrb	r2, [r7, r2]
 8010a5a:	0712      	lsls	r2, r2, #28
 8010a5c:	d401      	bmi.n	8010a62 <__ssvfiscanf_r+0x52>
 8010a5e:	462a      	mov	r2, r5
 8010a60:	e7eb      	b.n	8010a3a <__ssvfiscanf_r+0x2a>
 8010a62:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8010a64:	3201      	adds	r2, #1
 8010a66:	9245      	str	r2, [sp, #276]	; 0x114
 8010a68:	6862      	ldr	r2, [r4, #4]
 8010a6a:	3301      	adds	r3, #1
 8010a6c:	3a01      	subs	r2, #1
 8010a6e:	6062      	str	r2, [r4, #4]
 8010a70:	6023      	str	r3, [r4, #0]
 8010a72:	e7ec      	b.n	8010a4e <__ssvfiscanf_r+0x3e>
 8010a74:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8010a76:	4621      	mov	r1, r4
 8010a78:	4630      	mov	r0, r6
 8010a7a:	4798      	blx	r3
 8010a7c:	2800      	cmp	r0, #0
 8010a7e:	d0e9      	beq.n	8010a54 <__ssvfiscanf_r+0x44>
 8010a80:	e7ed      	b.n	8010a5e <__ssvfiscanf_r+0x4e>
 8010a82:	2b25      	cmp	r3, #37	; 0x25
 8010a84:	d012      	beq.n	8010aac <__ssvfiscanf_r+0x9c>
 8010a86:	469a      	mov	sl, r3
 8010a88:	6863      	ldr	r3, [r4, #4]
 8010a8a:	2b00      	cmp	r3, #0
 8010a8c:	f340 8091 	ble.w	8010bb2 <__ssvfiscanf_r+0x1a2>
 8010a90:	6822      	ldr	r2, [r4, #0]
 8010a92:	7813      	ldrb	r3, [r2, #0]
 8010a94:	4553      	cmp	r3, sl
 8010a96:	f040 812e 	bne.w	8010cf6 <__ssvfiscanf_r+0x2e6>
 8010a9a:	6863      	ldr	r3, [r4, #4]
 8010a9c:	3b01      	subs	r3, #1
 8010a9e:	6063      	str	r3, [r4, #4]
 8010aa0:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8010aa2:	3201      	adds	r2, #1
 8010aa4:	3301      	adds	r3, #1
 8010aa6:	6022      	str	r2, [r4, #0]
 8010aa8:	9345      	str	r3, [sp, #276]	; 0x114
 8010aaa:	e7d8      	b.n	8010a5e <__ssvfiscanf_r+0x4e>
 8010aac:	9141      	str	r1, [sp, #260]	; 0x104
 8010aae:	9143      	str	r1, [sp, #268]	; 0x10c
 8010ab0:	7853      	ldrb	r3, [r2, #1]
 8010ab2:	2b2a      	cmp	r3, #42	; 0x2a
 8010ab4:	bf02      	ittt	eq
 8010ab6:	2310      	moveq	r3, #16
 8010ab8:	1c95      	addeq	r5, r2, #2
 8010aba:	9341      	streq	r3, [sp, #260]	; 0x104
 8010abc:	220a      	movs	r2, #10
 8010abe:	46aa      	mov	sl, r5
 8010ac0:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8010ac4:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8010ac8:	2b09      	cmp	r3, #9
 8010aca:	d91d      	bls.n	8010b08 <__ssvfiscanf_r+0xf8>
 8010acc:	487e      	ldr	r0, [pc, #504]	; (8010cc8 <__ssvfiscanf_r+0x2b8>)
 8010ace:	2203      	movs	r2, #3
 8010ad0:	f7ef fb86 	bl	80001e0 <memchr>
 8010ad4:	b140      	cbz	r0, 8010ae8 <__ssvfiscanf_r+0xd8>
 8010ad6:	2301      	movs	r3, #1
 8010ad8:	eba0 0009 	sub.w	r0, r0, r9
 8010adc:	fa03 f000 	lsl.w	r0, r3, r0
 8010ae0:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8010ae2:	4318      	orrs	r0, r3
 8010ae4:	9041      	str	r0, [sp, #260]	; 0x104
 8010ae6:	4655      	mov	r5, sl
 8010ae8:	f815 3b01 	ldrb.w	r3, [r5], #1
 8010aec:	2b78      	cmp	r3, #120	; 0x78
 8010aee:	d806      	bhi.n	8010afe <__ssvfiscanf_r+0xee>
 8010af0:	2b57      	cmp	r3, #87	; 0x57
 8010af2:	d810      	bhi.n	8010b16 <__ssvfiscanf_r+0x106>
 8010af4:	2b25      	cmp	r3, #37	; 0x25
 8010af6:	d0c6      	beq.n	8010a86 <__ssvfiscanf_r+0x76>
 8010af8:	d856      	bhi.n	8010ba8 <__ssvfiscanf_r+0x198>
 8010afa:	2b00      	cmp	r3, #0
 8010afc:	d064      	beq.n	8010bc8 <__ssvfiscanf_r+0x1b8>
 8010afe:	2303      	movs	r3, #3
 8010b00:	9347      	str	r3, [sp, #284]	; 0x11c
 8010b02:	230a      	movs	r3, #10
 8010b04:	9342      	str	r3, [sp, #264]	; 0x108
 8010b06:	e071      	b.n	8010bec <__ssvfiscanf_r+0x1dc>
 8010b08:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8010b0a:	fb02 1103 	mla	r1, r2, r3, r1
 8010b0e:	3930      	subs	r1, #48	; 0x30
 8010b10:	9143      	str	r1, [sp, #268]	; 0x10c
 8010b12:	4655      	mov	r5, sl
 8010b14:	e7d3      	b.n	8010abe <__ssvfiscanf_r+0xae>
 8010b16:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8010b1a:	2a20      	cmp	r2, #32
 8010b1c:	d8ef      	bhi.n	8010afe <__ssvfiscanf_r+0xee>
 8010b1e:	a101      	add	r1, pc, #4	; (adr r1, 8010b24 <__ssvfiscanf_r+0x114>)
 8010b20:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8010b24:	08010bd7 	.word	0x08010bd7
 8010b28:	08010aff 	.word	0x08010aff
 8010b2c:	08010aff 	.word	0x08010aff
 8010b30:	08010c35 	.word	0x08010c35
 8010b34:	08010aff 	.word	0x08010aff
 8010b38:	08010aff 	.word	0x08010aff
 8010b3c:	08010aff 	.word	0x08010aff
 8010b40:	08010aff 	.word	0x08010aff
 8010b44:	08010aff 	.word	0x08010aff
 8010b48:	08010aff 	.word	0x08010aff
 8010b4c:	08010aff 	.word	0x08010aff
 8010b50:	08010c4b 	.word	0x08010c4b
 8010b54:	08010c21 	.word	0x08010c21
 8010b58:	08010baf 	.word	0x08010baf
 8010b5c:	08010baf 	.word	0x08010baf
 8010b60:	08010baf 	.word	0x08010baf
 8010b64:	08010aff 	.word	0x08010aff
 8010b68:	08010c25 	.word	0x08010c25
 8010b6c:	08010aff 	.word	0x08010aff
 8010b70:	08010aff 	.word	0x08010aff
 8010b74:	08010aff 	.word	0x08010aff
 8010b78:	08010aff 	.word	0x08010aff
 8010b7c:	08010c5b 	.word	0x08010c5b
 8010b80:	08010c2d 	.word	0x08010c2d
 8010b84:	08010bcf 	.word	0x08010bcf
 8010b88:	08010aff 	.word	0x08010aff
 8010b8c:	08010aff 	.word	0x08010aff
 8010b90:	08010c57 	.word	0x08010c57
 8010b94:	08010aff 	.word	0x08010aff
 8010b98:	08010c21 	.word	0x08010c21
 8010b9c:	08010aff 	.word	0x08010aff
 8010ba0:	08010aff 	.word	0x08010aff
 8010ba4:	08010bd7 	.word	0x08010bd7
 8010ba8:	3b45      	subs	r3, #69	; 0x45
 8010baa:	2b02      	cmp	r3, #2
 8010bac:	d8a7      	bhi.n	8010afe <__ssvfiscanf_r+0xee>
 8010bae:	2305      	movs	r3, #5
 8010bb0:	e01b      	b.n	8010bea <__ssvfiscanf_r+0x1da>
 8010bb2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8010bb4:	4621      	mov	r1, r4
 8010bb6:	4630      	mov	r0, r6
 8010bb8:	4798      	blx	r3
 8010bba:	2800      	cmp	r0, #0
 8010bbc:	f43f af68 	beq.w	8010a90 <__ssvfiscanf_r+0x80>
 8010bc0:	9844      	ldr	r0, [sp, #272]	; 0x110
 8010bc2:	2800      	cmp	r0, #0
 8010bc4:	f040 808d 	bne.w	8010ce2 <__ssvfiscanf_r+0x2d2>
 8010bc8:	f04f 30ff 	mov.w	r0, #4294967295
 8010bcc:	e08f      	b.n	8010cee <__ssvfiscanf_r+0x2de>
 8010bce:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8010bd0:	f042 0220 	orr.w	r2, r2, #32
 8010bd4:	9241      	str	r2, [sp, #260]	; 0x104
 8010bd6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8010bd8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8010bdc:	9241      	str	r2, [sp, #260]	; 0x104
 8010bde:	2210      	movs	r2, #16
 8010be0:	2b6f      	cmp	r3, #111	; 0x6f
 8010be2:	9242      	str	r2, [sp, #264]	; 0x108
 8010be4:	bf34      	ite	cc
 8010be6:	2303      	movcc	r3, #3
 8010be8:	2304      	movcs	r3, #4
 8010bea:	9347      	str	r3, [sp, #284]	; 0x11c
 8010bec:	6863      	ldr	r3, [r4, #4]
 8010bee:	2b00      	cmp	r3, #0
 8010bf0:	dd42      	ble.n	8010c78 <__ssvfiscanf_r+0x268>
 8010bf2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8010bf4:	0659      	lsls	r1, r3, #25
 8010bf6:	d404      	bmi.n	8010c02 <__ssvfiscanf_r+0x1f2>
 8010bf8:	6823      	ldr	r3, [r4, #0]
 8010bfa:	781a      	ldrb	r2, [r3, #0]
 8010bfc:	5cba      	ldrb	r2, [r7, r2]
 8010bfe:	0712      	lsls	r2, r2, #28
 8010c00:	d441      	bmi.n	8010c86 <__ssvfiscanf_r+0x276>
 8010c02:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8010c04:	2b02      	cmp	r3, #2
 8010c06:	dc50      	bgt.n	8010caa <__ssvfiscanf_r+0x29a>
 8010c08:	466b      	mov	r3, sp
 8010c0a:	4622      	mov	r2, r4
 8010c0c:	a941      	add	r1, sp, #260	; 0x104
 8010c0e:	4630      	mov	r0, r6
 8010c10:	f000 f876 	bl	8010d00 <_scanf_chars>
 8010c14:	2801      	cmp	r0, #1
 8010c16:	d06e      	beq.n	8010cf6 <__ssvfiscanf_r+0x2e6>
 8010c18:	2802      	cmp	r0, #2
 8010c1a:	f47f af20 	bne.w	8010a5e <__ssvfiscanf_r+0x4e>
 8010c1e:	e7cf      	b.n	8010bc0 <__ssvfiscanf_r+0x1b0>
 8010c20:	220a      	movs	r2, #10
 8010c22:	e7dd      	b.n	8010be0 <__ssvfiscanf_r+0x1d0>
 8010c24:	2300      	movs	r3, #0
 8010c26:	9342      	str	r3, [sp, #264]	; 0x108
 8010c28:	2303      	movs	r3, #3
 8010c2a:	e7de      	b.n	8010bea <__ssvfiscanf_r+0x1da>
 8010c2c:	2308      	movs	r3, #8
 8010c2e:	9342      	str	r3, [sp, #264]	; 0x108
 8010c30:	2304      	movs	r3, #4
 8010c32:	e7da      	b.n	8010bea <__ssvfiscanf_r+0x1da>
 8010c34:	4629      	mov	r1, r5
 8010c36:	4640      	mov	r0, r8
 8010c38:	f000 f9d6 	bl	8010fe8 <__sccl>
 8010c3c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8010c3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010c42:	9341      	str	r3, [sp, #260]	; 0x104
 8010c44:	4605      	mov	r5, r0
 8010c46:	2301      	movs	r3, #1
 8010c48:	e7cf      	b.n	8010bea <__ssvfiscanf_r+0x1da>
 8010c4a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8010c4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010c50:	9341      	str	r3, [sp, #260]	; 0x104
 8010c52:	2300      	movs	r3, #0
 8010c54:	e7c9      	b.n	8010bea <__ssvfiscanf_r+0x1da>
 8010c56:	2302      	movs	r3, #2
 8010c58:	e7c7      	b.n	8010bea <__ssvfiscanf_r+0x1da>
 8010c5a:	9841      	ldr	r0, [sp, #260]	; 0x104
 8010c5c:	06c3      	lsls	r3, r0, #27
 8010c5e:	f53f aefe 	bmi.w	8010a5e <__ssvfiscanf_r+0x4e>
 8010c62:	9b00      	ldr	r3, [sp, #0]
 8010c64:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8010c66:	1d19      	adds	r1, r3, #4
 8010c68:	9100      	str	r1, [sp, #0]
 8010c6a:	681b      	ldr	r3, [r3, #0]
 8010c6c:	f010 0f01 	tst.w	r0, #1
 8010c70:	bf14      	ite	ne
 8010c72:	801a      	strhne	r2, [r3, #0]
 8010c74:	601a      	streq	r2, [r3, #0]
 8010c76:	e6f2      	b.n	8010a5e <__ssvfiscanf_r+0x4e>
 8010c78:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8010c7a:	4621      	mov	r1, r4
 8010c7c:	4630      	mov	r0, r6
 8010c7e:	4798      	blx	r3
 8010c80:	2800      	cmp	r0, #0
 8010c82:	d0b6      	beq.n	8010bf2 <__ssvfiscanf_r+0x1e2>
 8010c84:	e79c      	b.n	8010bc0 <__ssvfiscanf_r+0x1b0>
 8010c86:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8010c88:	3201      	adds	r2, #1
 8010c8a:	9245      	str	r2, [sp, #276]	; 0x114
 8010c8c:	6862      	ldr	r2, [r4, #4]
 8010c8e:	3a01      	subs	r2, #1
 8010c90:	2a00      	cmp	r2, #0
 8010c92:	6062      	str	r2, [r4, #4]
 8010c94:	dd02      	ble.n	8010c9c <__ssvfiscanf_r+0x28c>
 8010c96:	3301      	adds	r3, #1
 8010c98:	6023      	str	r3, [r4, #0]
 8010c9a:	e7ad      	b.n	8010bf8 <__ssvfiscanf_r+0x1e8>
 8010c9c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8010c9e:	4621      	mov	r1, r4
 8010ca0:	4630      	mov	r0, r6
 8010ca2:	4798      	blx	r3
 8010ca4:	2800      	cmp	r0, #0
 8010ca6:	d0a7      	beq.n	8010bf8 <__ssvfiscanf_r+0x1e8>
 8010ca8:	e78a      	b.n	8010bc0 <__ssvfiscanf_r+0x1b0>
 8010caa:	2b04      	cmp	r3, #4
 8010cac:	dc0e      	bgt.n	8010ccc <__ssvfiscanf_r+0x2bc>
 8010cae:	466b      	mov	r3, sp
 8010cb0:	4622      	mov	r2, r4
 8010cb2:	a941      	add	r1, sp, #260	; 0x104
 8010cb4:	4630      	mov	r0, r6
 8010cb6:	f000 f87d 	bl	8010db4 <_scanf_i>
 8010cba:	e7ab      	b.n	8010c14 <__ssvfiscanf_r+0x204>
 8010cbc:	0801095d 	.word	0x0801095d
 8010cc0:	080109d7 	.word	0x080109d7
 8010cc4:	08013665 	.word	0x08013665
 8010cc8:	08013602 	.word	0x08013602
 8010ccc:	4b0b      	ldr	r3, [pc, #44]	; (8010cfc <__ssvfiscanf_r+0x2ec>)
 8010cce:	2b00      	cmp	r3, #0
 8010cd0:	f43f aec5 	beq.w	8010a5e <__ssvfiscanf_r+0x4e>
 8010cd4:	466b      	mov	r3, sp
 8010cd6:	4622      	mov	r2, r4
 8010cd8:	a941      	add	r1, sp, #260	; 0x104
 8010cda:	4630      	mov	r0, r6
 8010cdc:	f3af 8000 	nop.w
 8010ce0:	e798      	b.n	8010c14 <__ssvfiscanf_r+0x204>
 8010ce2:	89a3      	ldrh	r3, [r4, #12]
 8010ce4:	f013 0f40 	tst.w	r3, #64	; 0x40
 8010ce8:	bf18      	it	ne
 8010cea:	f04f 30ff 	movne.w	r0, #4294967295
 8010cee:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8010cf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010cf6:	9844      	ldr	r0, [sp, #272]	; 0x110
 8010cf8:	e7f9      	b.n	8010cee <__ssvfiscanf_r+0x2de>
 8010cfa:	bf00      	nop
 8010cfc:	00000000 	.word	0x00000000

08010d00 <_scanf_chars>:
 8010d00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010d04:	4615      	mov	r5, r2
 8010d06:	688a      	ldr	r2, [r1, #8]
 8010d08:	4680      	mov	r8, r0
 8010d0a:	460c      	mov	r4, r1
 8010d0c:	b932      	cbnz	r2, 8010d1c <_scanf_chars+0x1c>
 8010d0e:	698a      	ldr	r2, [r1, #24]
 8010d10:	2a00      	cmp	r2, #0
 8010d12:	bf0c      	ite	eq
 8010d14:	2201      	moveq	r2, #1
 8010d16:	f04f 32ff 	movne.w	r2, #4294967295
 8010d1a:	608a      	str	r2, [r1, #8]
 8010d1c:	6822      	ldr	r2, [r4, #0]
 8010d1e:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8010db0 <_scanf_chars+0xb0>
 8010d22:	06d1      	lsls	r1, r2, #27
 8010d24:	bf5f      	itttt	pl
 8010d26:	681a      	ldrpl	r2, [r3, #0]
 8010d28:	1d11      	addpl	r1, r2, #4
 8010d2a:	6019      	strpl	r1, [r3, #0]
 8010d2c:	6816      	ldrpl	r6, [r2, #0]
 8010d2e:	2700      	movs	r7, #0
 8010d30:	69a0      	ldr	r0, [r4, #24]
 8010d32:	b188      	cbz	r0, 8010d58 <_scanf_chars+0x58>
 8010d34:	2801      	cmp	r0, #1
 8010d36:	d107      	bne.n	8010d48 <_scanf_chars+0x48>
 8010d38:	682a      	ldr	r2, [r5, #0]
 8010d3a:	7811      	ldrb	r1, [r2, #0]
 8010d3c:	6962      	ldr	r2, [r4, #20]
 8010d3e:	5c52      	ldrb	r2, [r2, r1]
 8010d40:	b952      	cbnz	r2, 8010d58 <_scanf_chars+0x58>
 8010d42:	2f00      	cmp	r7, #0
 8010d44:	d031      	beq.n	8010daa <_scanf_chars+0xaa>
 8010d46:	e022      	b.n	8010d8e <_scanf_chars+0x8e>
 8010d48:	2802      	cmp	r0, #2
 8010d4a:	d120      	bne.n	8010d8e <_scanf_chars+0x8e>
 8010d4c:	682b      	ldr	r3, [r5, #0]
 8010d4e:	781b      	ldrb	r3, [r3, #0]
 8010d50:	f813 3009 	ldrb.w	r3, [r3, r9]
 8010d54:	071b      	lsls	r3, r3, #28
 8010d56:	d41a      	bmi.n	8010d8e <_scanf_chars+0x8e>
 8010d58:	6823      	ldr	r3, [r4, #0]
 8010d5a:	06da      	lsls	r2, r3, #27
 8010d5c:	bf5e      	ittt	pl
 8010d5e:	682b      	ldrpl	r3, [r5, #0]
 8010d60:	781b      	ldrbpl	r3, [r3, #0]
 8010d62:	f806 3b01 	strbpl.w	r3, [r6], #1
 8010d66:	682a      	ldr	r2, [r5, #0]
 8010d68:	686b      	ldr	r3, [r5, #4]
 8010d6a:	3201      	adds	r2, #1
 8010d6c:	602a      	str	r2, [r5, #0]
 8010d6e:	68a2      	ldr	r2, [r4, #8]
 8010d70:	3b01      	subs	r3, #1
 8010d72:	3a01      	subs	r2, #1
 8010d74:	606b      	str	r3, [r5, #4]
 8010d76:	3701      	adds	r7, #1
 8010d78:	60a2      	str	r2, [r4, #8]
 8010d7a:	b142      	cbz	r2, 8010d8e <_scanf_chars+0x8e>
 8010d7c:	2b00      	cmp	r3, #0
 8010d7e:	dcd7      	bgt.n	8010d30 <_scanf_chars+0x30>
 8010d80:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8010d84:	4629      	mov	r1, r5
 8010d86:	4640      	mov	r0, r8
 8010d88:	4798      	blx	r3
 8010d8a:	2800      	cmp	r0, #0
 8010d8c:	d0d0      	beq.n	8010d30 <_scanf_chars+0x30>
 8010d8e:	6823      	ldr	r3, [r4, #0]
 8010d90:	f013 0310 	ands.w	r3, r3, #16
 8010d94:	d105      	bne.n	8010da2 <_scanf_chars+0xa2>
 8010d96:	68e2      	ldr	r2, [r4, #12]
 8010d98:	3201      	adds	r2, #1
 8010d9a:	60e2      	str	r2, [r4, #12]
 8010d9c:	69a2      	ldr	r2, [r4, #24]
 8010d9e:	b102      	cbz	r2, 8010da2 <_scanf_chars+0xa2>
 8010da0:	7033      	strb	r3, [r6, #0]
 8010da2:	6923      	ldr	r3, [r4, #16]
 8010da4:	443b      	add	r3, r7
 8010da6:	6123      	str	r3, [r4, #16]
 8010da8:	2000      	movs	r0, #0
 8010daa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010dae:	bf00      	nop
 8010db0:	08013665 	.word	0x08013665

08010db4 <_scanf_i>:
 8010db4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010db8:	4698      	mov	r8, r3
 8010dba:	4b76      	ldr	r3, [pc, #472]	; (8010f94 <_scanf_i+0x1e0>)
 8010dbc:	460c      	mov	r4, r1
 8010dbe:	4682      	mov	sl, r0
 8010dc0:	4616      	mov	r6, r2
 8010dc2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8010dc6:	b087      	sub	sp, #28
 8010dc8:	ab03      	add	r3, sp, #12
 8010dca:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8010dce:	4b72      	ldr	r3, [pc, #456]	; (8010f98 <_scanf_i+0x1e4>)
 8010dd0:	69a1      	ldr	r1, [r4, #24]
 8010dd2:	4a72      	ldr	r2, [pc, #456]	; (8010f9c <_scanf_i+0x1e8>)
 8010dd4:	2903      	cmp	r1, #3
 8010dd6:	bf18      	it	ne
 8010dd8:	461a      	movne	r2, r3
 8010dda:	68a3      	ldr	r3, [r4, #8]
 8010ddc:	9201      	str	r2, [sp, #4]
 8010dde:	1e5a      	subs	r2, r3, #1
 8010de0:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8010de4:	bf88      	it	hi
 8010de6:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8010dea:	4627      	mov	r7, r4
 8010dec:	bf82      	ittt	hi
 8010dee:	eb03 0905 	addhi.w	r9, r3, r5
 8010df2:	f240 135d 	movwhi	r3, #349	; 0x15d
 8010df6:	60a3      	strhi	r3, [r4, #8]
 8010df8:	f857 3b1c 	ldr.w	r3, [r7], #28
 8010dfc:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8010e00:	bf98      	it	ls
 8010e02:	f04f 0900 	movls.w	r9, #0
 8010e06:	6023      	str	r3, [r4, #0]
 8010e08:	463d      	mov	r5, r7
 8010e0a:	f04f 0b00 	mov.w	fp, #0
 8010e0e:	6831      	ldr	r1, [r6, #0]
 8010e10:	ab03      	add	r3, sp, #12
 8010e12:	7809      	ldrb	r1, [r1, #0]
 8010e14:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8010e18:	2202      	movs	r2, #2
 8010e1a:	f7ef f9e1 	bl	80001e0 <memchr>
 8010e1e:	b328      	cbz	r0, 8010e6c <_scanf_i+0xb8>
 8010e20:	f1bb 0f01 	cmp.w	fp, #1
 8010e24:	d159      	bne.n	8010eda <_scanf_i+0x126>
 8010e26:	6862      	ldr	r2, [r4, #4]
 8010e28:	b92a      	cbnz	r2, 8010e36 <_scanf_i+0x82>
 8010e2a:	6822      	ldr	r2, [r4, #0]
 8010e2c:	2308      	movs	r3, #8
 8010e2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8010e32:	6063      	str	r3, [r4, #4]
 8010e34:	6022      	str	r2, [r4, #0]
 8010e36:	6822      	ldr	r2, [r4, #0]
 8010e38:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8010e3c:	6022      	str	r2, [r4, #0]
 8010e3e:	68a2      	ldr	r2, [r4, #8]
 8010e40:	1e51      	subs	r1, r2, #1
 8010e42:	60a1      	str	r1, [r4, #8]
 8010e44:	b192      	cbz	r2, 8010e6c <_scanf_i+0xb8>
 8010e46:	6832      	ldr	r2, [r6, #0]
 8010e48:	1c51      	adds	r1, r2, #1
 8010e4a:	6031      	str	r1, [r6, #0]
 8010e4c:	7812      	ldrb	r2, [r2, #0]
 8010e4e:	f805 2b01 	strb.w	r2, [r5], #1
 8010e52:	6872      	ldr	r2, [r6, #4]
 8010e54:	3a01      	subs	r2, #1
 8010e56:	2a00      	cmp	r2, #0
 8010e58:	6072      	str	r2, [r6, #4]
 8010e5a:	dc07      	bgt.n	8010e6c <_scanf_i+0xb8>
 8010e5c:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8010e60:	4631      	mov	r1, r6
 8010e62:	4650      	mov	r0, sl
 8010e64:	4790      	blx	r2
 8010e66:	2800      	cmp	r0, #0
 8010e68:	f040 8085 	bne.w	8010f76 <_scanf_i+0x1c2>
 8010e6c:	f10b 0b01 	add.w	fp, fp, #1
 8010e70:	f1bb 0f03 	cmp.w	fp, #3
 8010e74:	d1cb      	bne.n	8010e0e <_scanf_i+0x5a>
 8010e76:	6863      	ldr	r3, [r4, #4]
 8010e78:	b90b      	cbnz	r3, 8010e7e <_scanf_i+0xca>
 8010e7a:	230a      	movs	r3, #10
 8010e7c:	6063      	str	r3, [r4, #4]
 8010e7e:	6863      	ldr	r3, [r4, #4]
 8010e80:	4947      	ldr	r1, [pc, #284]	; (8010fa0 <_scanf_i+0x1ec>)
 8010e82:	6960      	ldr	r0, [r4, #20]
 8010e84:	1ac9      	subs	r1, r1, r3
 8010e86:	f000 f8af 	bl	8010fe8 <__sccl>
 8010e8a:	f04f 0b00 	mov.w	fp, #0
 8010e8e:	68a3      	ldr	r3, [r4, #8]
 8010e90:	6822      	ldr	r2, [r4, #0]
 8010e92:	2b00      	cmp	r3, #0
 8010e94:	d03d      	beq.n	8010f12 <_scanf_i+0x15e>
 8010e96:	6831      	ldr	r1, [r6, #0]
 8010e98:	6960      	ldr	r0, [r4, #20]
 8010e9a:	f891 c000 	ldrb.w	ip, [r1]
 8010e9e:	f810 000c 	ldrb.w	r0, [r0, ip]
 8010ea2:	2800      	cmp	r0, #0
 8010ea4:	d035      	beq.n	8010f12 <_scanf_i+0x15e>
 8010ea6:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8010eaa:	d124      	bne.n	8010ef6 <_scanf_i+0x142>
 8010eac:	0510      	lsls	r0, r2, #20
 8010eae:	d522      	bpl.n	8010ef6 <_scanf_i+0x142>
 8010eb0:	f10b 0b01 	add.w	fp, fp, #1
 8010eb4:	f1b9 0f00 	cmp.w	r9, #0
 8010eb8:	d003      	beq.n	8010ec2 <_scanf_i+0x10e>
 8010eba:	3301      	adds	r3, #1
 8010ebc:	f109 39ff 	add.w	r9, r9, #4294967295
 8010ec0:	60a3      	str	r3, [r4, #8]
 8010ec2:	6873      	ldr	r3, [r6, #4]
 8010ec4:	3b01      	subs	r3, #1
 8010ec6:	2b00      	cmp	r3, #0
 8010ec8:	6073      	str	r3, [r6, #4]
 8010eca:	dd1b      	ble.n	8010f04 <_scanf_i+0x150>
 8010ecc:	6833      	ldr	r3, [r6, #0]
 8010ece:	3301      	adds	r3, #1
 8010ed0:	6033      	str	r3, [r6, #0]
 8010ed2:	68a3      	ldr	r3, [r4, #8]
 8010ed4:	3b01      	subs	r3, #1
 8010ed6:	60a3      	str	r3, [r4, #8]
 8010ed8:	e7d9      	b.n	8010e8e <_scanf_i+0xda>
 8010eda:	f1bb 0f02 	cmp.w	fp, #2
 8010ede:	d1ae      	bne.n	8010e3e <_scanf_i+0x8a>
 8010ee0:	6822      	ldr	r2, [r4, #0]
 8010ee2:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8010ee6:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8010eea:	d1bf      	bne.n	8010e6c <_scanf_i+0xb8>
 8010eec:	2310      	movs	r3, #16
 8010eee:	6063      	str	r3, [r4, #4]
 8010ef0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8010ef4:	e7a2      	b.n	8010e3c <_scanf_i+0x88>
 8010ef6:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8010efa:	6022      	str	r2, [r4, #0]
 8010efc:	780b      	ldrb	r3, [r1, #0]
 8010efe:	f805 3b01 	strb.w	r3, [r5], #1
 8010f02:	e7de      	b.n	8010ec2 <_scanf_i+0x10e>
 8010f04:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8010f08:	4631      	mov	r1, r6
 8010f0a:	4650      	mov	r0, sl
 8010f0c:	4798      	blx	r3
 8010f0e:	2800      	cmp	r0, #0
 8010f10:	d0df      	beq.n	8010ed2 <_scanf_i+0x11e>
 8010f12:	6823      	ldr	r3, [r4, #0]
 8010f14:	05db      	lsls	r3, r3, #23
 8010f16:	d50d      	bpl.n	8010f34 <_scanf_i+0x180>
 8010f18:	42bd      	cmp	r5, r7
 8010f1a:	d909      	bls.n	8010f30 <_scanf_i+0x17c>
 8010f1c:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8010f20:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010f24:	4632      	mov	r2, r6
 8010f26:	4650      	mov	r0, sl
 8010f28:	4798      	blx	r3
 8010f2a:	f105 39ff 	add.w	r9, r5, #4294967295
 8010f2e:	464d      	mov	r5, r9
 8010f30:	42bd      	cmp	r5, r7
 8010f32:	d02d      	beq.n	8010f90 <_scanf_i+0x1dc>
 8010f34:	6822      	ldr	r2, [r4, #0]
 8010f36:	f012 0210 	ands.w	r2, r2, #16
 8010f3a:	d113      	bne.n	8010f64 <_scanf_i+0x1b0>
 8010f3c:	702a      	strb	r2, [r5, #0]
 8010f3e:	6863      	ldr	r3, [r4, #4]
 8010f40:	9e01      	ldr	r6, [sp, #4]
 8010f42:	4639      	mov	r1, r7
 8010f44:	4650      	mov	r0, sl
 8010f46:	47b0      	blx	r6
 8010f48:	6821      	ldr	r1, [r4, #0]
 8010f4a:	f8d8 3000 	ldr.w	r3, [r8]
 8010f4e:	f011 0f20 	tst.w	r1, #32
 8010f52:	d013      	beq.n	8010f7c <_scanf_i+0x1c8>
 8010f54:	1d1a      	adds	r2, r3, #4
 8010f56:	f8c8 2000 	str.w	r2, [r8]
 8010f5a:	681b      	ldr	r3, [r3, #0]
 8010f5c:	6018      	str	r0, [r3, #0]
 8010f5e:	68e3      	ldr	r3, [r4, #12]
 8010f60:	3301      	adds	r3, #1
 8010f62:	60e3      	str	r3, [r4, #12]
 8010f64:	1bed      	subs	r5, r5, r7
 8010f66:	44ab      	add	fp, r5
 8010f68:	6925      	ldr	r5, [r4, #16]
 8010f6a:	445d      	add	r5, fp
 8010f6c:	6125      	str	r5, [r4, #16]
 8010f6e:	2000      	movs	r0, #0
 8010f70:	b007      	add	sp, #28
 8010f72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010f76:	f04f 0b00 	mov.w	fp, #0
 8010f7a:	e7ca      	b.n	8010f12 <_scanf_i+0x15e>
 8010f7c:	1d1a      	adds	r2, r3, #4
 8010f7e:	f8c8 2000 	str.w	r2, [r8]
 8010f82:	681b      	ldr	r3, [r3, #0]
 8010f84:	f011 0f01 	tst.w	r1, #1
 8010f88:	bf14      	ite	ne
 8010f8a:	8018      	strhne	r0, [r3, #0]
 8010f8c:	6018      	streq	r0, [r3, #0]
 8010f8e:	e7e6      	b.n	8010f5e <_scanf_i+0x1aa>
 8010f90:	2001      	movs	r0, #1
 8010f92:	e7ed      	b.n	8010f70 <_scanf_i+0x1bc>
 8010f94:	08013384 	.word	0x08013384
 8010f98:	08011245 	.word	0x08011245
 8010f9c:	0801115d 	.word	0x0801115d
 8010fa0:	08013626 	.word	0x08013626

08010fa4 <_read_r>:
 8010fa4:	b538      	push	{r3, r4, r5, lr}
 8010fa6:	4d07      	ldr	r5, [pc, #28]	; (8010fc4 <_read_r+0x20>)
 8010fa8:	4604      	mov	r4, r0
 8010faa:	4608      	mov	r0, r1
 8010fac:	4611      	mov	r1, r2
 8010fae:	2200      	movs	r2, #0
 8010fb0:	602a      	str	r2, [r5, #0]
 8010fb2:	461a      	mov	r2, r3
 8010fb4:	f7f1 f99e 	bl	80022f4 <_read>
 8010fb8:	1c43      	adds	r3, r0, #1
 8010fba:	d102      	bne.n	8010fc2 <_read_r+0x1e>
 8010fbc:	682b      	ldr	r3, [r5, #0]
 8010fbe:	b103      	cbz	r3, 8010fc2 <_read_r+0x1e>
 8010fc0:	6023      	str	r3, [r4, #0]
 8010fc2:	bd38      	pop	{r3, r4, r5, pc}
 8010fc4:	20000f48 	.word	0x20000f48

08010fc8 <_sbrk_r>:
 8010fc8:	b538      	push	{r3, r4, r5, lr}
 8010fca:	4d06      	ldr	r5, [pc, #24]	; (8010fe4 <_sbrk_r+0x1c>)
 8010fcc:	2300      	movs	r3, #0
 8010fce:	4604      	mov	r4, r0
 8010fd0:	4608      	mov	r0, r1
 8010fd2:	602b      	str	r3, [r5, #0]
 8010fd4:	f7f1 f9fc 	bl	80023d0 <_sbrk>
 8010fd8:	1c43      	adds	r3, r0, #1
 8010fda:	d102      	bne.n	8010fe2 <_sbrk_r+0x1a>
 8010fdc:	682b      	ldr	r3, [r5, #0]
 8010fde:	b103      	cbz	r3, 8010fe2 <_sbrk_r+0x1a>
 8010fe0:	6023      	str	r3, [r4, #0]
 8010fe2:	bd38      	pop	{r3, r4, r5, pc}
 8010fe4:	20000f48 	.word	0x20000f48

08010fe8 <__sccl>:
 8010fe8:	b570      	push	{r4, r5, r6, lr}
 8010fea:	780b      	ldrb	r3, [r1, #0]
 8010fec:	4604      	mov	r4, r0
 8010fee:	2b5e      	cmp	r3, #94	; 0x5e
 8010ff0:	bf0b      	itete	eq
 8010ff2:	784b      	ldrbeq	r3, [r1, #1]
 8010ff4:	1c48      	addne	r0, r1, #1
 8010ff6:	1c88      	addeq	r0, r1, #2
 8010ff8:	2200      	movne	r2, #0
 8010ffa:	bf08      	it	eq
 8010ffc:	2201      	moveq	r2, #1
 8010ffe:	1e61      	subs	r1, r4, #1
 8011000:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8011004:	f801 2f01 	strb.w	r2, [r1, #1]!
 8011008:	42a9      	cmp	r1, r5
 801100a:	d1fb      	bne.n	8011004 <__sccl+0x1c>
 801100c:	b90b      	cbnz	r3, 8011012 <__sccl+0x2a>
 801100e:	3801      	subs	r0, #1
 8011010:	bd70      	pop	{r4, r5, r6, pc}
 8011012:	f082 0201 	eor.w	r2, r2, #1
 8011016:	54e2      	strb	r2, [r4, r3]
 8011018:	4605      	mov	r5, r0
 801101a:	4628      	mov	r0, r5
 801101c:	f810 1b01 	ldrb.w	r1, [r0], #1
 8011020:	292d      	cmp	r1, #45	; 0x2d
 8011022:	d006      	beq.n	8011032 <__sccl+0x4a>
 8011024:	295d      	cmp	r1, #93	; 0x5d
 8011026:	d0f3      	beq.n	8011010 <__sccl+0x28>
 8011028:	b909      	cbnz	r1, 801102e <__sccl+0x46>
 801102a:	4628      	mov	r0, r5
 801102c:	e7f0      	b.n	8011010 <__sccl+0x28>
 801102e:	460b      	mov	r3, r1
 8011030:	e7f1      	b.n	8011016 <__sccl+0x2e>
 8011032:	786e      	ldrb	r6, [r5, #1]
 8011034:	2e5d      	cmp	r6, #93	; 0x5d
 8011036:	d0fa      	beq.n	801102e <__sccl+0x46>
 8011038:	42b3      	cmp	r3, r6
 801103a:	dcf8      	bgt.n	801102e <__sccl+0x46>
 801103c:	3502      	adds	r5, #2
 801103e:	4619      	mov	r1, r3
 8011040:	3101      	adds	r1, #1
 8011042:	428e      	cmp	r6, r1
 8011044:	5462      	strb	r2, [r4, r1]
 8011046:	dcfb      	bgt.n	8011040 <__sccl+0x58>
 8011048:	1af1      	subs	r1, r6, r3
 801104a:	3901      	subs	r1, #1
 801104c:	1c58      	adds	r0, r3, #1
 801104e:	42b3      	cmp	r3, r6
 8011050:	bfa8      	it	ge
 8011052:	2100      	movge	r1, #0
 8011054:	1843      	adds	r3, r0, r1
 8011056:	e7e0      	b.n	801101a <__sccl+0x32>

08011058 <_strtol_l.constprop.0>:
 8011058:	2b01      	cmp	r3, #1
 801105a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801105e:	d001      	beq.n	8011064 <_strtol_l.constprop.0+0xc>
 8011060:	2b24      	cmp	r3, #36	; 0x24
 8011062:	d906      	bls.n	8011072 <_strtol_l.constprop.0+0x1a>
 8011064:	f7fd fa68 	bl	800e538 <__errno>
 8011068:	2316      	movs	r3, #22
 801106a:	6003      	str	r3, [r0, #0]
 801106c:	2000      	movs	r0, #0
 801106e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011072:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8011158 <_strtol_l.constprop.0+0x100>
 8011076:	460d      	mov	r5, r1
 8011078:	462e      	mov	r6, r5
 801107a:	f815 4b01 	ldrb.w	r4, [r5], #1
 801107e:	f814 700c 	ldrb.w	r7, [r4, ip]
 8011082:	f017 0708 	ands.w	r7, r7, #8
 8011086:	d1f7      	bne.n	8011078 <_strtol_l.constprop.0+0x20>
 8011088:	2c2d      	cmp	r4, #45	; 0x2d
 801108a:	d132      	bne.n	80110f2 <_strtol_l.constprop.0+0x9a>
 801108c:	782c      	ldrb	r4, [r5, #0]
 801108e:	2701      	movs	r7, #1
 8011090:	1cb5      	adds	r5, r6, #2
 8011092:	2b00      	cmp	r3, #0
 8011094:	d05b      	beq.n	801114e <_strtol_l.constprop.0+0xf6>
 8011096:	2b10      	cmp	r3, #16
 8011098:	d109      	bne.n	80110ae <_strtol_l.constprop.0+0x56>
 801109a:	2c30      	cmp	r4, #48	; 0x30
 801109c:	d107      	bne.n	80110ae <_strtol_l.constprop.0+0x56>
 801109e:	782c      	ldrb	r4, [r5, #0]
 80110a0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80110a4:	2c58      	cmp	r4, #88	; 0x58
 80110a6:	d14d      	bne.n	8011144 <_strtol_l.constprop.0+0xec>
 80110a8:	786c      	ldrb	r4, [r5, #1]
 80110aa:	2310      	movs	r3, #16
 80110ac:	3502      	adds	r5, #2
 80110ae:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80110b2:	f108 38ff 	add.w	r8, r8, #4294967295
 80110b6:	f04f 0c00 	mov.w	ip, #0
 80110ba:	fbb8 f9f3 	udiv	r9, r8, r3
 80110be:	4666      	mov	r6, ip
 80110c0:	fb03 8a19 	mls	sl, r3, r9, r8
 80110c4:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80110c8:	f1be 0f09 	cmp.w	lr, #9
 80110cc:	d816      	bhi.n	80110fc <_strtol_l.constprop.0+0xa4>
 80110ce:	4674      	mov	r4, lr
 80110d0:	42a3      	cmp	r3, r4
 80110d2:	dd24      	ble.n	801111e <_strtol_l.constprop.0+0xc6>
 80110d4:	f1bc 0f00 	cmp.w	ip, #0
 80110d8:	db1e      	blt.n	8011118 <_strtol_l.constprop.0+0xc0>
 80110da:	45b1      	cmp	r9, r6
 80110dc:	d31c      	bcc.n	8011118 <_strtol_l.constprop.0+0xc0>
 80110de:	d101      	bne.n	80110e4 <_strtol_l.constprop.0+0x8c>
 80110e0:	45a2      	cmp	sl, r4
 80110e2:	db19      	blt.n	8011118 <_strtol_l.constprop.0+0xc0>
 80110e4:	fb06 4603 	mla	r6, r6, r3, r4
 80110e8:	f04f 0c01 	mov.w	ip, #1
 80110ec:	f815 4b01 	ldrb.w	r4, [r5], #1
 80110f0:	e7e8      	b.n	80110c4 <_strtol_l.constprop.0+0x6c>
 80110f2:	2c2b      	cmp	r4, #43	; 0x2b
 80110f4:	bf04      	itt	eq
 80110f6:	782c      	ldrbeq	r4, [r5, #0]
 80110f8:	1cb5      	addeq	r5, r6, #2
 80110fa:	e7ca      	b.n	8011092 <_strtol_l.constprop.0+0x3a>
 80110fc:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8011100:	f1be 0f19 	cmp.w	lr, #25
 8011104:	d801      	bhi.n	801110a <_strtol_l.constprop.0+0xb2>
 8011106:	3c37      	subs	r4, #55	; 0x37
 8011108:	e7e2      	b.n	80110d0 <_strtol_l.constprop.0+0x78>
 801110a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 801110e:	f1be 0f19 	cmp.w	lr, #25
 8011112:	d804      	bhi.n	801111e <_strtol_l.constprop.0+0xc6>
 8011114:	3c57      	subs	r4, #87	; 0x57
 8011116:	e7db      	b.n	80110d0 <_strtol_l.constprop.0+0x78>
 8011118:	f04f 3cff 	mov.w	ip, #4294967295
 801111c:	e7e6      	b.n	80110ec <_strtol_l.constprop.0+0x94>
 801111e:	f1bc 0f00 	cmp.w	ip, #0
 8011122:	da05      	bge.n	8011130 <_strtol_l.constprop.0+0xd8>
 8011124:	2322      	movs	r3, #34	; 0x22
 8011126:	6003      	str	r3, [r0, #0]
 8011128:	4646      	mov	r6, r8
 801112a:	b942      	cbnz	r2, 801113e <_strtol_l.constprop.0+0xe6>
 801112c:	4630      	mov	r0, r6
 801112e:	e79e      	b.n	801106e <_strtol_l.constprop.0+0x16>
 8011130:	b107      	cbz	r7, 8011134 <_strtol_l.constprop.0+0xdc>
 8011132:	4276      	negs	r6, r6
 8011134:	2a00      	cmp	r2, #0
 8011136:	d0f9      	beq.n	801112c <_strtol_l.constprop.0+0xd4>
 8011138:	f1bc 0f00 	cmp.w	ip, #0
 801113c:	d000      	beq.n	8011140 <_strtol_l.constprop.0+0xe8>
 801113e:	1e69      	subs	r1, r5, #1
 8011140:	6011      	str	r1, [r2, #0]
 8011142:	e7f3      	b.n	801112c <_strtol_l.constprop.0+0xd4>
 8011144:	2430      	movs	r4, #48	; 0x30
 8011146:	2b00      	cmp	r3, #0
 8011148:	d1b1      	bne.n	80110ae <_strtol_l.constprop.0+0x56>
 801114a:	2308      	movs	r3, #8
 801114c:	e7af      	b.n	80110ae <_strtol_l.constprop.0+0x56>
 801114e:	2c30      	cmp	r4, #48	; 0x30
 8011150:	d0a5      	beq.n	801109e <_strtol_l.constprop.0+0x46>
 8011152:	230a      	movs	r3, #10
 8011154:	e7ab      	b.n	80110ae <_strtol_l.constprop.0+0x56>
 8011156:	bf00      	nop
 8011158:	08013665 	.word	0x08013665

0801115c <_strtol_r>:
 801115c:	f7ff bf7c 	b.w	8011058 <_strtol_l.constprop.0>

08011160 <_strtoul_l.constprop.0>:
 8011160:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011164:	4f36      	ldr	r7, [pc, #216]	; (8011240 <_strtoul_l.constprop.0+0xe0>)
 8011166:	4686      	mov	lr, r0
 8011168:	460d      	mov	r5, r1
 801116a:	4628      	mov	r0, r5
 801116c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011170:	5de6      	ldrb	r6, [r4, r7]
 8011172:	f016 0608 	ands.w	r6, r6, #8
 8011176:	d1f8      	bne.n	801116a <_strtoul_l.constprop.0+0xa>
 8011178:	2c2d      	cmp	r4, #45	; 0x2d
 801117a:	d12f      	bne.n	80111dc <_strtoul_l.constprop.0+0x7c>
 801117c:	782c      	ldrb	r4, [r5, #0]
 801117e:	2601      	movs	r6, #1
 8011180:	1c85      	adds	r5, r0, #2
 8011182:	2b00      	cmp	r3, #0
 8011184:	d057      	beq.n	8011236 <_strtoul_l.constprop.0+0xd6>
 8011186:	2b10      	cmp	r3, #16
 8011188:	d109      	bne.n	801119e <_strtoul_l.constprop.0+0x3e>
 801118a:	2c30      	cmp	r4, #48	; 0x30
 801118c:	d107      	bne.n	801119e <_strtoul_l.constprop.0+0x3e>
 801118e:	7828      	ldrb	r0, [r5, #0]
 8011190:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8011194:	2858      	cmp	r0, #88	; 0x58
 8011196:	d149      	bne.n	801122c <_strtoul_l.constprop.0+0xcc>
 8011198:	786c      	ldrb	r4, [r5, #1]
 801119a:	2310      	movs	r3, #16
 801119c:	3502      	adds	r5, #2
 801119e:	f04f 38ff 	mov.w	r8, #4294967295
 80111a2:	2700      	movs	r7, #0
 80111a4:	fbb8 f8f3 	udiv	r8, r8, r3
 80111a8:	fb03 f908 	mul.w	r9, r3, r8
 80111ac:	ea6f 0909 	mvn.w	r9, r9
 80111b0:	4638      	mov	r0, r7
 80111b2:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80111b6:	f1bc 0f09 	cmp.w	ip, #9
 80111ba:	d814      	bhi.n	80111e6 <_strtoul_l.constprop.0+0x86>
 80111bc:	4664      	mov	r4, ip
 80111be:	42a3      	cmp	r3, r4
 80111c0:	dd22      	ble.n	8011208 <_strtoul_l.constprop.0+0xa8>
 80111c2:	2f00      	cmp	r7, #0
 80111c4:	db1d      	blt.n	8011202 <_strtoul_l.constprop.0+0xa2>
 80111c6:	4580      	cmp	r8, r0
 80111c8:	d31b      	bcc.n	8011202 <_strtoul_l.constprop.0+0xa2>
 80111ca:	d101      	bne.n	80111d0 <_strtoul_l.constprop.0+0x70>
 80111cc:	45a1      	cmp	r9, r4
 80111ce:	db18      	blt.n	8011202 <_strtoul_l.constprop.0+0xa2>
 80111d0:	fb00 4003 	mla	r0, r0, r3, r4
 80111d4:	2701      	movs	r7, #1
 80111d6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80111da:	e7ea      	b.n	80111b2 <_strtoul_l.constprop.0+0x52>
 80111dc:	2c2b      	cmp	r4, #43	; 0x2b
 80111de:	bf04      	itt	eq
 80111e0:	782c      	ldrbeq	r4, [r5, #0]
 80111e2:	1c85      	addeq	r5, r0, #2
 80111e4:	e7cd      	b.n	8011182 <_strtoul_l.constprop.0+0x22>
 80111e6:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80111ea:	f1bc 0f19 	cmp.w	ip, #25
 80111ee:	d801      	bhi.n	80111f4 <_strtoul_l.constprop.0+0x94>
 80111f0:	3c37      	subs	r4, #55	; 0x37
 80111f2:	e7e4      	b.n	80111be <_strtoul_l.constprop.0+0x5e>
 80111f4:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80111f8:	f1bc 0f19 	cmp.w	ip, #25
 80111fc:	d804      	bhi.n	8011208 <_strtoul_l.constprop.0+0xa8>
 80111fe:	3c57      	subs	r4, #87	; 0x57
 8011200:	e7dd      	b.n	80111be <_strtoul_l.constprop.0+0x5e>
 8011202:	f04f 37ff 	mov.w	r7, #4294967295
 8011206:	e7e6      	b.n	80111d6 <_strtoul_l.constprop.0+0x76>
 8011208:	2f00      	cmp	r7, #0
 801120a:	da07      	bge.n	801121c <_strtoul_l.constprop.0+0xbc>
 801120c:	2322      	movs	r3, #34	; 0x22
 801120e:	f8ce 3000 	str.w	r3, [lr]
 8011212:	f04f 30ff 	mov.w	r0, #4294967295
 8011216:	b932      	cbnz	r2, 8011226 <_strtoul_l.constprop.0+0xc6>
 8011218:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801121c:	b106      	cbz	r6, 8011220 <_strtoul_l.constprop.0+0xc0>
 801121e:	4240      	negs	r0, r0
 8011220:	2a00      	cmp	r2, #0
 8011222:	d0f9      	beq.n	8011218 <_strtoul_l.constprop.0+0xb8>
 8011224:	b107      	cbz	r7, 8011228 <_strtoul_l.constprop.0+0xc8>
 8011226:	1e69      	subs	r1, r5, #1
 8011228:	6011      	str	r1, [r2, #0]
 801122a:	e7f5      	b.n	8011218 <_strtoul_l.constprop.0+0xb8>
 801122c:	2430      	movs	r4, #48	; 0x30
 801122e:	2b00      	cmp	r3, #0
 8011230:	d1b5      	bne.n	801119e <_strtoul_l.constprop.0+0x3e>
 8011232:	2308      	movs	r3, #8
 8011234:	e7b3      	b.n	801119e <_strtoul_l.constprop.0+0x3e>
 8011236:	2c30      	cmp	r4, #48	; 0x30
 8011238:	d0a9      	beq.n	801118e <_strtoul_l.constprop.0+0x2e>
 801123a:	230a      	movs	r3, #10
 801123c:	e7af      	b.n	801119e <_strtoul_l.constprop.0+0x3e>
 801123e:	bf00      	nop
 8011240:	08013665 	.word	0x08013665

08011244 <_strtoul_r>:
 8011244:	f7ff bf8c 	b.w	8011160 <_strtoul_l.constprop.0>

08011248 <__submore>:
 8011248:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801124c:	460c      	mov	r4, r1
 801124e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8011250:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011254:	4299      	cmp	r1, r3
 8011256:	d11d      	bne.n	8011294 <__submore+0x4c>
 8011258:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801125c:	f7ff f9ae 	bl	80105bc <_malloc_r>
 8011260:	b918      	cbnz	r0, 801126a <__submore+0x22>
 8011262:	f04f 30ff 	mov.w	r0, #4294967295
 8011266:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801126a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801126e:	63a3      	str	r3, [r4, #56]	; 0x38
 8011270:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8011274:	6360      	str	r0, [r4, #52]	; 0x34
 8011276:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 801127a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 801127e:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8011282:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8011286:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 801128a:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 801128e:	6020      	str	r0, [r4, #0]
 8011290:	2000      	movs	r0, #0
 8011292:	e7e8      	b.n	8011266 <__submore+0x1e>
 8011294:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8011296:	0077      	lsls	r7, r6, #1
 8011298:	463a      	mov	r2, r7
 801129a:	f000 fa31 	bl	8011700 <_realloc_r>
 801129e:	4605      	mov	r5, r0
 80112a0:	2800      	cmp	r0, #0
 80112a2:	d0de      	beq.n	8011262 <__submore+0x1a>
 80112a4:	eb00 0806 	add.w	r8, r0, r6
 80112a8:	4601      	mov	r1, r0
 80112aa:	4632      	mov	r2, r6
 80112ac:	4640      	mov	r0, r8
 80112ae:	f7fd f96d 	bl	800e58c <memcpy>
 80112b2:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 80112b6:	f8c4 8000 	str.w	r8, [r4]
 80112ba:	e7e9      	b.n	8011290 <__submore+0x48>

080112bc <__assert_func>:
 80112bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80112be:	4614      	mov	r4, r2
 80112c0:	461a      	mov	r2, r3
 80112c2:	4b09      	ldr	r3, [pc, #36]	; (80112e8 <__assert_func+0x2c>)
 80112c4:	681b      	ldr	r3, [r3, #0]
 80112c6:	4605      	mov	r5, r0
 80112c8:	68d8      	ldr	r0, [r3, #12]
 80112ca:	b14c      	cbz	r4, 80112e0 <__assert_func+0x24>
 80112cc:	4b07      	ldr	r3, [pc, #28]	; (80112ec <__assert_func+0x30>)
 80112ce:	9100      	str	r1, [sp, #0]
 80112d0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80112d4:	4906      	ldr	r1, [pc, #24]	; (80112f0 <__assert_func+0x34>)
 80112d6:	462b      	mov	r3, r5
 80112d8:	f000 f9a6 	bl	8011628 <fiprintf>
 80112dc:	f000 fc66 	bl	8011bac <abort>
 80112e0:	4b04      	ldr	r3, [pc, #16]	; (80112f4 <__assert_func+0x38>)
 80112e2:	461c      	mov	r4, r3
 80112e4:	e7f3      	b.n	80112ce <__assert_func+0x12>
 80112e6:	bf00      	nop
 80112e8:	20000050 	.word	0x20000050
 80112ec:	08013628 	.word	0x08013628
 80112f0:	08013635 	.word	0x08013635
 80112f4:	08013663 	.word	0x08013663

080112f8 <__sflush_r>:
 80112f8:	898a      	ldrh	r2, [r1, #12]
 80112fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80112fe:	4605      	mov	r5, r0
 8011300:	0710      	lsls	r0, r2, #28
 8011302:	460c      	mov	r4, r1
 8011304:	d458      	bmi.n	80113b8 <__sflush_r+0xc0>
 8011306:	684b      	ldr	r3, [r1, #4]
 8011308:	2b00      	cmp	r3, #0
 801130a:	dc05      	bgt.n	8011318 <__sflush_r+0x20>
 801130c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801130e:	2b00      	cmp	r3, #0
 8011310:	dc02      	bgt.n	8011318 <__sflush_r+0x20>
 8011312:	2000      	movs	r0, #0
 8011314:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011318:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801131a:	2e00      	cmp	r6, #0
 801131c:	d0f9      	beq.n	8011312 <__sflush_r+0x1a>
 801131e:	2300      	movs	r3, #0
 8011320:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8011324:	682f      	ldr	r7, [r5, #0]
 8011326:	602b      	str	r3, [r5, #0]
 8011328:	d032      	beq.n	8011390 <__sflush_r+0x98>
 801132a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801132c:	89a3      	ldrh	r3, [r4, #12]
 801132e:	075a      	lsls	r2, r3, #29
 8011330:	d505      	bpl.n	801133e <__sflush_r+0x46>
 8011332:	6863      	ldr	r3, [r4, #4]
 8011334:	1ac0      	subs	r0, r0, r3
 8011336:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011338:	b10b      	cbz	r3, 801133e <__sflush_r+0x46>
 801133a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801133c:	1ac0      	subs	r0, r0, r3
 801133e:	2300      	movs	r3, #0
 8011340:	4602      	mov	r2, r0
 8011342:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011344:	6a21      	ldr	r1, [r4, #32]
 8011346:	4628      	mov	r0, r5
 8011348:	47b0      	blx	r6
 801134a:	1c43      	adds	r3, r0, #1
 801134c:	89a3      	ldrh	r3, [r4, #12]
 801134e:	d106      	bne.n	801135e <__sflush_r+0x66>
 8011350:	6829      	ldr	r1, [r5, #0]
 8011352:	291d      	cmp	r1, #29
 8011354:	d82c      	bhi.n	80113b0 <__sflush_r+0xb8>
 8011356:	4a2a      	ldr	r2, [pc, #168]	; (8011400 <__sflush_r+0x108>)
 8011358:	40ca      	lsrs	r2, r1
 801135a:	07d6      	lsls	r6, r2, #31
 801135c:	d528      	bpl.n	80113b0 <__sflush_r+0xb8>
 801135e:	2200      	movs	r2, #0
 8011360:	6062      	str	r2, [r4, #4]
 8011362:	04d9      	lsls	r1, r3, #19
 8011364:	6922      	ldr	r2, [r4, #16]
 8011366:	6022      	str	r2, [r4, #0]
 8011368:	d504      	bpl.n	8011374 <__sflush_r+0x7c>
 801136a:	1c42      	adds	r2, r0, #1
 801136c:	d101      	bne.n	8011372 <__sflush_r+0x7a>
 801136e:	682b      	ldr	r3, [r5, #0]
 8011370:	b903      	cbnz	r3, 8011374 <__sflush_r+0x7c>
 8011372:	6560      	str	r0, [r4, #84]	; 0x54
 8011374:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011376:	602f      	str	r7, [r5, #0]
 8011378:	2900      	cmp	r1, #0
 801137a:	d0ca      	beq.n	8011312 <__sflush_r+0x1a>
 801137c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011380:	4299      	cmp	r1, r3
 8011382:	d002      	beq.n	801138a <__sflush_r+0x92>
 8011384:	4628      	mov	r0, r5
 8011386:	f7ff f8ad 	bl	80104e4 <_free_r>
 801138a:	2000      	movs	r0, #0
 801138c:	6360      	str	r0, [r4, #52]	; 0x34
 801138e:	e7c1      	b.n	8011314 <__sflush_r+0x1c>
 8011390:	6a21      	ldr	r1, [r4, #32]
 8011392:	2301      	movs	r3, #1
 8011394:	4628      	mov	r0, r5
 8011396:	47b0      	blx	r6
 8011398:	1c41      	adds	r1, r0, #1
 801139a:	d1c7      	bne.n	801132c <__sflush_r+0x34>
 801139c:	682b      	ldr	r3, [r5, #0]
 801139e:	2b00      	cmp	r3, #0
 80113a0:	d0c4      	beq.n	801132c <__sflush_r+0x34>
 80113a2:	2b1d      	cmp	r3, #29
 80113a4:	d001      	beq.n	80113aa <__sflush_r+0xb2>
 80113a6:	2b16      	cmp	r3, #22
 80113a8:	d101      	bne.n	80113ae <__sflush_r+0xb6>
 80113aa:	602f      	str	r7, [r5, #0]
 80113ac:	e7b1      	b.n	8011312 <__sflush_r+0x1a>
 80113ae:	89a3      	ldrh	r3, [r4, #12]
 80113b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80113b4:	81a3      	strh	r3, [r4, #12]
 80113b6:	e7ad      	b.n	8011314 <__sflush_r+0x1c>
 80113b8:	690f      	ldr	r7, [r1, #16]
 80113ba:	2f00      	cmp	r7, #0
 80113bc:	d0a9      	beq.n	8011312 <__sflush_r+0x1a>
 80113be:	0793      	lsls	r3, r2, #30
 80113c0:	680e      	ldr	r6, [r1, #0]
 80113c2:	bf08      	it	eq
 80113c4:	694b      	ldreq	r3, [r1, #20]
 80113c6:	600f      	str	r7, [r1, #0]
 80113c8:	bf18      	it	ne
 80113ca:	2300      	movne	r3, #0
 80113cc:	eba6 0807 	sub.w	r8, r6, r7
 80113d0:	608b      	str	r3, [r1, #8]
 80113d2:	f1b8 0f00 	cmp.w	r8, #0
 80113d6:	dd9c      	ble.n	8011312 <__sflush_r+0x1a>
 80113d8:	6a21      	ldr	r1, [r4, #32]
 80113da:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80113dc:	4643      	mov	r3, r8
 80113de:	463a      	mov	r2, r7
 80113e0:	4628      	mov	r0, r5
 80113e2:	47b0      	blx	r6
 80113e4:	2800      	cmp	r0, #0
 80113e6:	dc06      	bgt.n	80113f6 <__sflush_r+0xfe>
 80113e8:	89a3      	ldrh	r3, [r4, #12]
 80113ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80113ee:	81a3      	strh	r3, [r4, #12]
 80113f0:	f04f 30ff 	mov.w	r0, #4294967295
 80113f4:	e78e      	b.n	8011314 <__sflush_r+0x1c>
 80113f6:	4407      	add	r7, r0
 80113f8:	eba8 0800 	sub.w	r8, r8, r0
 80113fc:	e7e9      	b.n	80113d2 <__sflush_r+0xda>
 80113fe:	bf00      	nop
 8011400:	20400001 	.word	0x20400001

08011404 <_fflush_r>:
 8011404:	b538      	push	{r3, r4, r5, lr}
 8011406:	690b      	ldr	r3, [r1, #16]
 8011408:	4605      	mov	r5, r0
 801140a:	460c      	mov	r4, r1
 801140c:	b913      	cbnz	r3, 8011414 <_fflush_r+0x10>
 801140e:	2500      	movs	r5, #0
 8011410:	4628      	mov	r0, r5
 8011412:	bd38      	pop	{r3, r4, r5, pc}
 8011414:	b118      	cbz	r0, 801141e <_fflush_r+0x1a>
 8011416:	6983      	ldr	r3, [r0, #24]
 8011418:	b90b      	cbnz	r3, 801141e <_fflush_r+0x1a>
 801141a:	f000 f887 	bl	801152c <__sinit>
 801141e:	4b14      	ldr	r3, [pc, #80]	; (8011470 <_fflush_r+0x6c>)
 8011420:	429c      	cmp	r4, r3
 8011422:	d11b      	bne.n	801145c <_fflush_r+0x58>
 8011424:	686c      	ldr	r4, [r5, #4]
 8011426:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801142a:	2b00      	cmp	r3, #0
 801142c:	d0ef      	beq.n	801140e <_fflush_r+0xa>
 801142e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8011430:	07d0      	lsls	r0, r2, #31
 8011432:	d404      	bmi.n	801143e <_fflush_r+0x3a>
 8011434:	0599      	lsls	r1, r3, #22
 8011436:	d402      	bmi.n	801143e <_fflush_r+0x3a>
 8011438:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801143a:	f000 f927 	bl	801168c <__retarget_lock_acquire_recursive>
 801143e:	4628      	mov	r0, r5
 8011440:	4621      	mov	r1, r4
 8011442:	f7ff ff59 	bl	80112f8 <__sflush_r>
 8011446:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011448:	07da      	lsls	r2, r3, #31
 801144a:	4605      	mov	r5, r0
 801144c:	d4e0      	bmi.n	8011410 <_fflush_r+0xc>
 801144e:	89a3      	ldrh	r3, [r4, #12]
 8011450:	059b      	lsls	r3, r3, #22
 8011452:	d4dd      	bmi.n	8011410 <_fflush_r+0xc>
 8011454:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011456:	f000 f91a 	bl	801168e <__retarget_lock_release_recursive>
 801145a:	e7d9      	b.n	8011410 <_fflush_r+0xc>
 801145c:	4b05      	ldr	r3, [pc, #20]	; (8011474 <_fflush_r+0x70>)
 801145e:	429c      	cmp	r4, r3
 8011460:	d101      	bne.n	8011466 <_fflush_r+0x62>
 8011462:	68ac      	ldr	r4, [r5, #8]
 8011464:	e7df      	b.n	8011426 <_fflush_r+0x22>
 8011466:	4b04      	ldr	r3, [pc, #16]	; (8011478 <_fflush_r+0x74>)
 8011468:	429c      	cmp	r4, r3
 801146a:	bf08      	it	eq
 801146c:	68ec      	ldreq	r4, [r5, #12]
 801146e:	e7da      	b.n	8011426 <_fflush_r+0x22>
 8011470:	08013788 	.word	0x08013788
 8011474:	080137a8 	.word	0x080137a8
 8011478:	08013768 	.word	0x08013768

0801147c <std>:
 801147c:	2300      	movs	r3, #0
 801147e:	b510      	push	{r4, lr}
 8011480:	4604      	mov	r4, r0
 8011482:	e9c0 3300 	strd	r3, r3, [r0]
 8011486:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801148a:	6083      	str	r3, [r0, #8]
 801148c:	8181      	strh	r1, [r0, #12]
 801148e:	6643      	str	r3, [r0, #100]	; 0x64
 8011490:	81c2      	strh	r2, [r0, #14]
 8011492:	6183      	str	r3, [r0, #24]
 8011494:	4619      	mov	r1, r3
 8011496:	2208      	movs	r2, #8
 8011498:	305c      	adds	r0, #92	; 0x5c
 801149a:	f7fd f885 	bl	800e5a8 <memset>
 801149e:	4b05      	ldr	r3, [pc, #20]	; (80114b4 <std+0x38>)
 80114a0:	6263      	str	r3, [r4, #36]	; 0x24
 80114a2:	4b05      	ldr	r3, [pc, #20]	; (80114b8 <std+0x3c>)
 80114a4:	62a3      	str	r3, [r4, #40]	; 0x28
 80114a6:	4b05      	ldr	r3, [pc, #20]	; (80114bc <std+0x40>)
 80114a8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80114aa:	4b05      	ldr	r3, [pc, #20]	; (80114c0 <std+0x44>)
 80114ac:	6224      	str	r4, [r4, #32]
 80114ae:	6323      	str	r3, [r4, #48]	; 0x30
 80114b0:	bd10      	pop	{r4, pc}
 80114b2:	bf00      	nop
 80114b4:	0800ef8d 	.word	0x0800ef8d
 80114b8:	0800efb3 	.word	0x0800efb3
 80114bc:	0800efeb 	.word	0x0800efeb
 80114c0:	0800f00f 	.word	0x0800f00f

080114c4 <_cleanup_r>:
 80114c4:	4901      	ldr	r1, [pc, #4]	; (80114cc <_cleanup_r+0x8>)
 80114c6:	f000 b8c1 	b.w	801164c <_fwalk_reent>
 80114ca:	bf00      	nop
 80114cc:	08011405 	.word	0x08011405

080114d0 <__sfmoreglue>:
 80114d0:	b570      	push	{r4, r5, r6, lr}
 80114d2:	2268      	movs	r2, #104	; 0x68
 80114d4:	1e4d      	subs	r5, r1, #1
 80114d6:	4355      	muls	r5, r2
 80114d8:	460e      	mov	r6, r1
 80114da:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80114de:	f7ff f86d 	bl	80105bc <_malloc_r>
 80114e2:	4604      	mov	r4, r0
 80114e4:	b140      	cbz	r0, 80114f8 <__sfmoreglue+0x28>
 80114e6:	2100      	movs	r1, #0
 80114e8:	e9c0 1600 	strd	r1, r6, [r0]
 80114ec:	300c      	adds	r0, #12
 80114ee:	60a0      	str	r0, [r4, #8]
 80114f0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80114f4:	f7fd f858 	bl	800e5a8 <memset>
 80114f8:	4620      	mov	r0, r4
 80114fa:	bd70      	pop	{r4, r5, r6, pc}

080114fc <__sfp_lock_acquire>:
 80114fc:	4801      	ldr	r0, [pc, #4]	; (8011504 <__sfp_lock_acquire+0x8>)
 80114fe:	f000 b8c5 	b.w	801168c <__retarget_lock_acquire_recursive>
 8011502:	bf00      	nop
 8011504:	20000f4d 	.word	0x20000f4d

08011508 <__sfp_lock_release>:
 8011508:	4801      	ldr	r0, [pc, #4]	; (8011510 <__sfp_lock_release+0x8>)
 801150a:	f000 b8c0 	b.w	801168e <__retarget_lock_release_recursive>
 801150e:	bf00      	nop
 8011510:	20000f4d 	.word	0x20000f4d

08011514 <__sinit_lock_acquire>:
 8011514:	4801      	ldr	r0, [pc, #4]	; (801151c <__sinit_lock_acquire+0x8>)
 8011516:	f000 b8b9 	b.w	801168c <__retarget_lock_acquire_recursive>
 801151a:	bf00      	nop
 801151c:	20000f4e 	.word	0x20000f4e

08011520 <__sinit_lock_release>:
 8011520:	4801      	ldr	r0, [pc, #4]	; (8011528 <__sinit_lock_release+0x8>)
 8011522:	f000 b8b4 	b.w	801168e <__retarget_lock_release_recursive>
 8011526:	bf00      	nop
 8011528:	20000f4e 	.word	0x20000f4e

0801152c <__sinit>:
 801152c:	b510      	push	{r4, lr}
 801152e:	4604      	mov	r4, r0
 8011530:	f7ff fff0 	bl	8011514 <__sinit_lock_acquire>
 8011534:	69a3      	ldr	r3, [r4, #24]
 8011536:	b11b      	cbz	r3, 8011540 <__sinit+0x14>
 8011538:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801153c:	f7ff bff0 	b.w	8011520 <__sinit_lock_release>
 8011540:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8011544:	6523      	str	r3, [r4, #80]	; 0x50
 8011546:	4b13      	ldr	r3, [pc, #76]	; (8011594 <__sinit+0x68>)
 8011548:	4a13      	ldr	r2, [pc, #76]	; (8011598 <__sinit+0x6c>)
 801154a:	681b      	ldr	r3, [r3, #0]
 801154c:	62a2      	str	r2, [r4, #40]	; 0x28
 801154e:	42a3      	cmp	r3, r4
 8011550:	bf04      	itt	eq
 8011552:	2301      	moveq	r3, #1
 8011554:	61a3      	streq	r3, [r4, #24]
 8011556:	4620      	mov	r0, r4
 8011558:	f000 f820 	bl	801159c <__sfp>
 801155c:	6060      	str	r0, [r4, #4]
 801155e:	4620      	mov	r0, r4
 8011560:	f000 f81c 	bl	801159c <__sfp>
 8011564:	60a0      	str	r0, [r4, #8]
 8011566:	4620      	mov	r0, r4
 8011568:	f000 f818 	bl	801159c <__sfp>
 801156c:	2200      	movs	r2, #0
 801156e:	60e0      	str	r0, [r4, #12]
 8011570:	2104      	movs	r1, #4
 8011572:	6860      	ldr	r0, [r4, #4]
 8011574:	f7ff ff82 	bl	801147c <std>
 8011578:	68a0      	ldr	r0, [r4, #8]
 801157a:	2201      	movs	r2, #1
 801157c:	2109      	movs	r1, #9
 801157e:	f7ff ff7d 	bl	801147c <std>
 8011582:	68e0      	ldr	r0, [r4, #12]
 8011584:	2202      	movs	r2, #2
 8011586:	2112      	movs	r1, #18
 8011588:	f7ff ff78 	bl	801147c <std>
 801158c:	2301      	movs	r3, #1
 801158e:	61a3      	str	r3, [r4, #24]
 8011590:	e7d2      	b.n	8011538 <__sinit+0xc>
 8011592:	bf00      	nop
 8011594:	080133d8 	.word	0x080133d8
 8011598:	080114c5 	.word	0x080114c5

0801159c <__sfp>:
 801159c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801159e:	4607      	mov	r7, r0
 80115a0:	f7ff ffac 	bl	80114fc <__sfp_lock_acquire>
 80115a4:	4b1e      	ldr	r3, [pc, #120]	; (8011620 <__sfp+0x84>)
 80115a6:	681e      	ldr	r6, [r3, #0]
 80115a8:	69b3      	ldr	r3, [r6, #24]
 80115aa:	b913      	cbnz	r3, 80115b2 <__sfp+0x16>
 80115ac:	4630      	mov	r0, r6
 80115ae:	f7ff ffbd 	bl	801152c <__sinit>
 80115b2:	3648      	adds	r6, #72	; 0x48
 80115b4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80115b8:	3b01      	subs	r3, #1
 80115ba:	d503      	bpl.n	80115c4 <__sfp+0x28>
 80115bc:	6833      	ldr	r3, [r6, #0]
 80115be:	b30b      	cbz	r3, 8011604 <__sfp+0x68>
 80115c0:	6836      	ldr	r6, [r6, #0]
 80115c2:	e7f7      	b.n	80115b4 <__sfp+0x18>
 80115c4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80115c8:	b9d5      	cbnz	r5, 8011600 <__sfp+0x64>
 80115ca:	4b16      	ldr	r3, [pc, #88]	; (8011624 <__sfp+0x88>)
 80115cc:	60e3      	str	r3, [r4, #12]
 80115ce:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80115d2:	6665      	str	r5, [r4, #100]	; 0x64
 80115d4:	f000 f859 	bl	801168a <__retarget_lock_init_recursive>
 80115d8:	f7ff ff96 	bl	8011508 <__sfp_lock_release>
 80115dc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80115e0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80115e4:	6025      	str	r5, [r4, #0]
 80115e6:	61a5      	str	r5, [r4, #24]
 80115e8:	2208      	movs	r2, #8
 80115ea:	4629      	mov	r1, r5
 80115ec:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80115f0:	f7fc ffda 	bl	800e5a8 <memset>
 80115f4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80115f8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80115fc:	4620      	mov	r0, r4
 80115fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011600:	3468      	adds	r4, #104	; 0x68
 8011602:	e7d9      	b.n	80115b8 <__sfp+0x1c>
 8011604:	2104      	movs	r1, #4
 8011606:	4638      	mov	r0, r7
 8011608:	f7ff ff62 	bl	80114d0 <__sfmoreglue>
 801160c:	4604      	mov	r4, r0
 801160e:	6030      	str	r0, [r6, #0]
 8011610:	2800      	cmp	r0, #0
 8011612:	d1d5      	bne.n	80115c0 <__sfp+0x24>
 8011614:	f7ff ff78 	bl	8011508 <__sfp_lock_release>
 8011618:	230c      	movs	r3, #12
 801161a:	603b      	str	r3, [r7, #0]
 801161c:	e7ee      	b.n	80115fc <__sfp+0x60>
 801161e:	bf00      	nop
 8011620:	080133d8 	.word	0x080133d8
 8011624:	ffff0001 	.word	0xffff0001

08011628 <fiprintf>:
 8011628:	b40e      	push	{r1, r2, r3}
 801162a:	b503      	push	{r0, r1, lr}
 801162c:	4601      	mov	r1, r0
 801162e:	ab03      	add	r3, sp, #12
 8011630:	4805      	ldr	r0, [pc, #20]	; (8011648 <fiprintf+0x20>)
 8011632:	f853 2b04 	ldr.w	r2, [r3], #4
 8011636:	6800      	ldr	r0, [r0, #0]
 8011638:	9301      	str	r3, [sp, #4]
 801163a:	f000 f8b9 	bl	80117b0 <_vfiprintf_r>
 801163e:	b002      	add	sp, #8
 8011640:	f85d eb04 	ldr.w	lr, [sp], #4
 8011644:	b003      	add	sp, #12
 8011646:	4770      	bx	lr
 8011648:	20000050 	.word	0x20000050

0801164c <_fwalk_reent>:
 801164c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011650:	4606      	mov	r6, r0
 8011652:	4688      	mov	r8, r1
 8011654:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8011658:	2700      	movs	r7, #0
 801165a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801165e:	f1b9 0901 	subs.w	r9, r9, #1
 8011662:	d505      	bpl.n	8011670 <_fwalk_reent+0x24>
 8011664:	6824      	ldr	r4, [r4, #0]
 8011666:	2c00      	cmp	r4, #0
 8011668:	d1f7      	bne.n	801165a <_fwalk_reent+0xe>
 801166a:	4638      	mov	r0, r7
 801166c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011670:	89ab      	ldrh	r3, [r5, #12]
 8011672:	2b01      	cmp	r3, #1
 8011674:	d907      	bls.n	8011686 <_fwalk_reent+0x3a>
 8011676:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801167a:	3301      	adds	r3, #1
 801167c:	d003      	beq.n	8011686 <_fwalk_reent+0x3a>
 801167e:	4629      	mov	r1, r5
 8011680:	4630      	mov	r0, r6
 8011682:	47c0      	blx	r8
 8011684:	4307      	orrs	r7, r0
 8011686:	3568      	adds	r5, #104	; 0x68
 8011688:	e7e9      	b.n	801165e <_fwalk_reent+0x12>

0801168a <__retarget_lock_init_recursive>:
 801168a:	4770      	bx	lr

0801168c <__retarget_lock_acquire_recursive>:
 801168c:	4770      	bx	lr

0801168e <__retarget_lock_release_recursive>:
 801168e:	4770      	bx	lr

08011690 <__ascii_mbtowc>:
 8011690:	b082      	sub	sp, #8
 8011692:	b901      	cbnz	r1, 8011696 <__ascii_mbtowc+0x6>
 8011694:	a901      	add	r1, sp, #4
 8011696:	b142      	cbz	r2, 80116aa <__ascii_mbtowc+0x1a>
 8011698:	b14b      	cbz	r3, 80116ae <__ascii_mbtowc+0x1e>
 801169a:	7813      	ldrb	r3, [r2, #0]
 801169c:	600b      	str	r3, [r1, #0]
 801169e:	7812      	ldrb	r2, [r2, #0]
 80116a0:	1e10      	subs	r0, r2, #0
 80116a2:	bf18      	it	ne
 80116a4:	2001      	movne	r0, #1
 80116a6:	b002      	add	sp, #8
 80116a8:	4770      	bx	lr
 80116aa:	4610      	mov	r0, r2
 80116ac:	e7fb      	b.n	80116a6 <__ascii_mbtowc+0x16>
 80116ae:	f06f 0001 	mvn.w	r0, #1
 80116b2:	e7f8      	b.n	80116a6 <__ascii_mbtowc+0x16>

080116b4 <memmove>:
 80116b4:	4288      	cmp	r0, r1
 80116b6:	b510      	push	{r4, lr}
 80116b8:	eb01 0402 	add.w	r4, r1, r2
 80116bc:	d902      	bls.n	80116c4 <memmove+0x10>
 80116be:	4284      	cmp	r4, r0
 80116c0:	4623      	mov	r3, r4
 80116c2:	d807      	bhi.n	80116d4 <memmove+0x20>
 80116c4:	1e43      	subs	r3, r0, #1
 80116c6:	42a1      	cmp	r1, r4
 80116c8:	d008      	beq.n	80116dc <memmove+0x28>
 80116ca:	f811 2b01 	ldrb.w	r2, [r1], #1
 80116ce:	f803 2f01 	strb.w	r2, [r3, #1]!
 80116d2:	e7f8      	b.n	80116c6 <memmove+0x12>
 80116d4:	4402      	add	r2, r0
 80116d6:	4601      	mov	r1, r0
 80116d8:	428a      	cmp	r2, r1
 80116da:	d100      	bne.n	80116de <memmove+0x2a>
 80116dc:	bd10      	pop	{r4, pc}
 80116de:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80116e2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80116e6:	e7f7      	b.n	80116d8 <memmove+0x24>

080116e8 <__malloc_lock>:
 80116e8:	4801      	ldr	r0, [pc, #4]	; (80116f0 <__malloc_lock+0x8>)
 80116ea:	f7ff bfcf 	b.w	801168c <__retarget_lock_acquire_recursive>
 80116ee:	bf00      	nop
 80116f0:	20000f4c 	.word	0x20000f4c

080116f4 <__malloc_unlock>:
 80116f4:	4801      	ldr	r0, [pc, #4]	; (80116fc <__malloc_unlock+0x8>)
 80116f6:	f7ff bfca 	b.w	801168e <__retarget_lock_release_recursive>
 80116fa:	bf00      	nop
 80116fc:	20000f4c 	.word	0x20000f4c

08011700 <_realloc_r>:
 8011700:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011704:	4680      	mov	r8, r0
 8011706:	4614      	mov	r4, r2
 8011708:	460e      	mov	r6, r1
 801170a:	b921      	cbnz	r1, 8011716 <_realloc_r+0x16>
 801170c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011710:	4611      	mov	r1, r2
 8011712:	f7fe bf53 	b.w	80105bc <_malloc_r>
 8011716:	b92a      	cbnz	r2, 8011724 <_realloc_r+0x24>
 8011718:	f7fe fee4 	bl	80104e4 <_free_r>
 801171c:	4625      	mov	r5, r4
 801171e:	4628      	mov	r0, r5
 8011720:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011724:	f000 faae 	bl	8011c84 <_malloc_usable_size_r>
 8011728:	4284      	cmp	r4, r0
 801172a:	4607      	mov	r7, r0
 801172c:	d802      	bhi.n	8011734 <_realloc_r+0x34>
 801172e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8011732:	d812      	bhi.n	801175a <_realloc_r+0x5a>
 8011734:	4621      	mov	r1, r4
 8011736:	4640      	mov	r0, r8
 8011738:	f7fe ff40 	bl	80105bc <_malloc_r>
 801173c:	4605      	mov	r5, r0
 801173e:	2800      	cmp	r0, #0
 8011740:	d0ed      	beq.n	801171e <_realloc_r+0x1e>
 8011742:	42bc      	cmp	r4, r7
 8011744:	4622      	mov	r2, r4
 8011746:	4631      	mov	r1, r6
 8011748:	bf28      	it	cs
 801174a:	463a      	movcs	r2, r7
 801174c:	f7fc ff1e 	bl	800e58c <memcpy>
 8011750:	4631      	mov	r1, r6
 8011752:	4640      	mov	r0, r8
 8011754:	f7fe fec6 	bl	80104e4 <_free_r>
 8011758:	e7e1      	b.n	801171e <_realloc_r+0x1e>
 801175a:	4635      	mov	r5, r6
 801175c:	e7df      	b.n	801171e <_realloc_r+0x1e>

0801175e <__sfputc_r>:
 801175e:	6893      	ldr	r3, [r2, #8]
 8011760:	3b01      	subs	r3, #1
 8011762:	2b00      	cmp	r3, #0
 8011764:	b410      	push	{r4}
 8011766:	6093      	str	r3, [r2, #8]
 8011768:	da08      	bge.n	801177c <__sfputc_r+0x1e>
 801176a:	6994      	ldr	r4, [r2, #24]
 801176c:	42a3      	cmp	r3, r4
 801176e:	db01      	blt.n	8011774 <__sfputc_r+0x16>
 8011770:	290a      	cmp	r1, #10
 8011772:	d103      	bne.n	801177c <__sfputc_r+0x1e>
 8011774:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011778:	f000 b94a 	b.w	8011a10 <__swbuf_r>
 801177c:	6813      	ldr	r3, [r2, #0]
 801177e:	1c58      	adds	r0, r3, #1
 8011780:	6010      	str	r0, [r2, #0]
 8011782:	7019      	strb	r1, [r3, #0]
 8011784:	4608      	mov	r0, r1
 8011786:	f85d 4b04 	ldr.w	r4, [sp], #4
 801178a:	4770      	bx	lr

0801178c <__sfputs_r>:
 801178c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801178e:	4606      	mov	r6, r0
 8011790:	460f      	mov	r7, r1
 8011792:	4614      	mov	r4, r2
 8011794:	18d5      	adds	r5, r2, r3
 8011796:	42ac      	cmp	r4, r5
 8011798:	d101      	bne.n	801179e <__sfputs_r+0x12>
 801179a:	2000      	movs	r0, #0
 801179c:	e007      	b.n	80117ae <__sfputs_r+0x22>
 801179e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80117a2:	463a      	mov	r2, r7
 80117a4:	4630      	mov	r0, r6
 80117a6:	f7ff ffda 	bl	801175e <__sfputc_r>
 80117aa:	1c43      	adds	r3, r0, #1
 80117ac:	d1f3      	bne.n	8011796 <__sfputs_r+0xa>
 80117ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080117b0 <_vfiprintf_r>:
 80117b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80117b4:	460d      	mov	r5, r1
 80117b6:	b09d      	sub	sp, #116	; 0x74
 80117b8:	4614      	mov	r4, r2
 80117ba:	4698      	mov	r8, r3
 80117bc:	4606      	mov	r6, r0
 80117be:	b118      	cbz	r0, 80117c8 <_vfiprintf_r+0x18>
 80117c0:	6983      	ldr	r3, [r0, #24]
 80117c2:	b90b      	cbnz	r3, 80117c8 <_vfiprintf_r+0x18>
 80117c4:	f7ff feb2 	bl	801152c <__sinit>
 80117c8:	4b89      	ldr	r3, [pc, #548]	; (80119f0 <_vfiprintf_r+0x240>)
 80117ca:	429d      	cmp	r5, r3
 80117cc:	d11b      	bne.n	8011806 <_vfiprintf_r+0x56>
 80117ce:	6875      	ldr	r5, [r6, #4]
 80117d0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80117d2:	07d9      	lsls	r1, r3, #31
 80117d4:	d405      	bmi.n	80117e2 <_vfiprintf_r+0x32>
 80117d6:	89ab      	ldrh	r3, [r5, #12]
 80117d8:	059a      	lsls	r2, r3, #22
 80117da:	d402      	bmi.n	80117e2 <_vfiprintf_r+0x32>
 80117dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80117de:	f7ff ff55 	bl	801168c <__retarget_lock_acquire_recursive>
 80117e2:	89ab      	ldrh	r3, [r5, #12]
 80117e4:	071b      	lsls	r3, r3, #28
 80117e6:	d501      	bpl.n	80117ec <_vfiprintf_r+0x3c>
 80117e8:	692b      	ldr	r3, [r5, #16]
 80117ea:	b9eb      	cbnz	r3, 8011828 <_vfiprintf_r+0x78>
 80117ec:	4629      	mov	r1, r5
 80117ee:	4630      	mov	r0, r6
 80117f0:	f000 f96e 	bl	8011ad0 <__swsetup_r>
 80117f4:	b1c0      	cbz	r0, 8011828 <_vfiprintf_r+0x78>
 80117f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80117f8:	07dc      	lsls	r4, r3, #31
 80117fa:	d50e      	bpl.n	801181a <_vfiprintf_r+0x6a>
 80117fc:	f04f 30ff 	mov.w	r0, #4294967295
 8011800:	b01d      	add	sp, #116	; 0x74
 8011802:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011806:	4b7b      	ldr	r3, [pc, #492]	; (80119f4 <_vfiprintf_r+0x244>)
 8011808:	429d      	cmp	r5, r3
 801180a:	d101      	bne.n	8011810 <_vfiprintf_r+0x60>
 801180c:	68b5      	ldr	r5, [r6, #8]
 801180e:	e7df      	b.n	80117d0 <_vfiprintf_r+0x20>
 8011810:	4b79      	ldr	r3, [pc, #484]	; (80119f8 <_vfiprintf_r+0x248>)
 8011812:	429d      	cmp	r5, r3
 8011814:	bf08      	it	eq
 8011816:	68f5      	ldreq	r5, [r6, #12]
 8011818:	e7da      	b.n	80117d0 <_vfiprintf_r+0x20>
 801181a:	89ab      	ldrh	r3, [r5, #12]
 801181c:	0598      	lsls	r0, r3, #22
 801181e:	d4ed      	bmi.n	80117fc <_vfiprintf_r+0x4c>
 8011820:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011822:	f7ff ff34 	bl	801168e <__retarget_lock_release_recursive>
 8011826:	e7e9      	b.n	80117fc <_vfiprintf_r+0x4c>
 8011828:	2300      	movs	r3, #0
 801182a:	9309      	str	r3, [sp, #36]	; 0x24
 801182c:	2320      	movs	r3, #32
 801182e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011832:	f8cd 800c 	str.w	r8, [sp, #12]
 8011836:	2330      	movs	r3, #48	; 0x30
 8011838:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80119fc <_vfiprintf_r+0x24c>
 801183c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011840:	f04f 0901 	mov.w	r9, #1
 8011844:	4623      	mov	r3, r4
 8011846:	469a      	mov	sl, r3
 8011848:	f813 2b01 	ldrb.w	r2, [r3], #1
 801184c:	b10a      	cbz	r2, 8011852 <_vfiprintf_r+0xa2>
 801184e:	2a25      	cmp	r2, #37	; 0x25
 8011850:	d1f9      	bne.n	8011846 <_vfiprintf_r+0x96>
 8011852:	ebba 0b04 	subs.w	fp, sl, r4
 8011856:	d00b      	beq.n	8011870 <_vfiprintf_r+0xc0>
 8011858:	465b      	mov	r3, fp
 801185a:	4622      	mov	r2, r4
 801185c:	4629      	mov	r1, r5
 801185e:	4630      	mov	r0, r6
 8011860:	f7ff ff94 	bl	801178c <__sfputs_r>
 8011864:	3001      	adds	r0, #1
 8011866:	f000 80aa 	beq.w	80119be <_vfiprintf_r+0x20e>
 801186a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801186c:	445a      	add	r2, fp
 801186e:	9209      	str	r2, [sp, #36]	; 0x24
 8011870:	f89a 3000 	ldrb.w	r3, [sl]
 8011874:	2b00      	cmp	r3, #0
 8011876:	f000 80a2 	beq.w	80119be <_vfiprintf_r+0x20e>
 801187a:	2300      	movs	r3, #0
 801187c:	f04f 32ff 	mov.w	r2, #4294967295
 8011880:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011884:	f10a 0a01 	add.w	sl, sl, #1
 8011888:	9304      	str	r3, [sp, #16]
 801188a:	9307      	str	r3, [sp, #28]
 801188c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011890:	931a      	str	r3, [sp, #104]	; 0x68
 8011892:	4654      	mov	r4, sl
 8011894:	2205      	movs	r2, #5
 8011896:	f814 1b01 	ldrb.w	r1, [r4], #1
 801189a:	4858      	ldr	r0, [pc, #352]	; (80119fc <_vfiprintf_r+0x24c>)
 801189c:	f7ee fca0 	bl	80001e0 <memchr>
 80118a0:	9a04      	ldr	r2, [sp, #16]
 80118a2:	b9d8      	cbnz	r0, 80118dc <_vfiprintf_r+0x12c>
 80118a4:	06d1      	lsls	r1, r2, #27
 80118a6:	bf44      	itt	mi
 80118a8:	2320      	movmi	r3, #32
 80118aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80118ae:	0713      	lsls	r3, r2, #28
 80118b0:	bf44      	itt	mi
 80118b2:	232b      	movmi	r3, #43	; 0x2b
 80118b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80118b8:	f89a 3000 	ldrb.w	r3, [sl]
 80118bc:	2b2a      	cmp	r3, #42	; 0x2a
 80118be:	d015      	beq.n	80118ec <_vfiprintf_r+0x13c>
 80118c0:	9a07      	ldr	r2, [sp, #28]
 80118c2:	4654      	mov	r4, sl
 80118c4:	2000      	movs	r0, #0
 80118c6:	f04f 0c0a 	mov.w	ip, #10
 80118ca:	4621      	mov	r1, r4
 80118cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80118d0:	3b30      	subs	r3, #48	; 0x30
 80118d2:	2b09      	cmp	r3, #9
 80118d4:	d94e      	bls.n	8011974 <_vfiprintf_r+0x1c4>
 80118d6:	b1b0      	cbz	r0, 8011906 <_vfiprintf_r+0x156>
 80118d8:	9207      	str	r2, [sp, #28]
 80118da:	e014      	b.n	8011906 <_vfiprintf_r+0x156>
 80118dc:	eba0 0308 	sub.w	r3, r0, r8
 80118e0:	fa09 f303 	lsl.w	r3, r9, r3
 80118e4:	4313      	orrs	r3, r2
 80118e6:	9304      	str	r3, [sp, #16]
 80118e8:	46a2      	mov	sl, r4
 80118ea:	e7d2      	b.n	8011892 <_vfiprintf_r+0xe2>
 80118ec:	9b03      	ldr	r3, [sp, #12]
 80118ee:	1d19      	adds	r1, r3, #4
 80118f0:	681b      	ldr	r3, [r3, #0]
 80118f2:	9103      	str	r1, [sp, #12]
 80118f4:	2b00      	cmp	r3, #0
 80118f6:	bfbb      	ittet	lt
 80118f8:	425b      	neglt	r3, r3
 80118fa:	f042 0202 	orrlt.w	r2, r2, #2
 80118fe:	9307      	strge	r3, [sp, #28]
 8011900:	9307      	strlt	r3, [sp, #28]
 8011902:	bfb8      	it	lt
 8011904:	9204      	strlt	r2, [sp, #16]
 8011906:	7823      	ldrb	r3, [r4, #0]
 8011908:	2b2e      	cmp	r3, #46	; 0x2e
 801190a:	d10c      	bne.n	8011926 <_vfiprintf_r+0x176>
 801190c:	7863      	ldrb	r3, [r4, #1]
 801190e:	2b2a      	cmp	r3, #42	; 0x2a
 8011910:	d135      	bne.n	801197e <_vfiprintf_r+0x1ce>
 8011912:	9b03      	ldr	r3, [sp, #12]
 8011914:	1d1a      	adds	r2, r3, #4
 8011916:	681b      	ldr	r3, [r3, #0]
 8011918:	9203      	str	r2, [sp, #12]
 801191a:	2b00      	cmp	r3, #0
 801191c:	bfb8      	it	lt
 801191e:	f04f 33ff 	movlt.w	r3, #4294967295
 8011922:	3402      	adds	r4, #2
 8011924:	9305      	str	r3, [sp, #20]
 8011926:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8011a0c <_vfiprintf_r+0x25c>
 801192a:	7821      	ldrb	r1, [r4, #0]
 801192c:	2203      	movs	r2, #3
 801192e:	4650      	mov	r0, sl
 8011930:	f7ee fc56 	bl	80001e0 <memchr>
 8011934:	b140      	cbz	r0, 8011948 <_vfiprintf_r+0x198>
 8011936:	2340      	movs	r3, #64	; 0x40
 8011938:	eba0 000a 	sub.w	r0, r0, sl
 801193c:	fa03 f000 	lsl.w	r0, r3, r0
 8011940:	9b04      	ldr	r3, [sp, #16]
 8011942:	4303      	orrs	r3, r0
 8011944:	3401      	adds	r4, #1
 8011946:	9304      	str	r3, [sp, #16]
 8011948:	f814 1b01 	ldrb.w	r1, [r4], #1
 801194c:	482c      	ldr	r0, [pc, #176]	; (8011a00 <_vfiprintf_r+0x250>)
 801194e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011952:	2206      	movs	r2, #6
 8011954:	f7ee fc44 	bl	80001e0 <memchr>
 8011958:	2800      	cmp	r0, #0
 801195a:	d03f      	beq.n	80119dc <_vfiprintf_r+0x22c>
 801195c:	4b29      	ldr	r3, [pc, #164]	; (8011a04 <_vfiprintf_r+0x254>)
 801195e:	bb1b      	cbnz	r3, 80119a8 <_vfiprintf_r+0x1f8>
 8011960:	9b03      	ldr	r3, [sp, #12]
 8011962:	3307      	adds	r3, #7
 8011964:	f023 0307 	bic.w	r3, r3, #7
 8011968:	3308      	adds	r3, #8
 801196a:	9303      	str	r3, [sp, #12]
 801196c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801196e:	443b      	add	r3, r7
 8011970:	9309      	str	r3, [sp, #36]	; 0x24
 8011972:	e767      	b.n	8011844 <_vfiprintf_r+0x94>
 8011974:	fb0c 3202 	mla	r2, ip, r2, r3
 8011978:	460c      	mov	r4, r1
 801197a:	2001      	movs	r0, #1
 801197c:	e7a5      	b.n	80118ca <_vfiprintf_r+0x11a>
 801197e:	2300      	movs	r3, #0
 8011980:	3401      	adds	r4, #1
 8011982:	9305      	str	r3, [sp, #20]
 8011984:	4619      	mov	r1, r3
 8011986:	f04f 0c0a 	mov.w	ip, #10
 801198a:	4620      	mov	r0, r4
 801198c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011990:	3a30      	subs	r2, #48	; 0x30
 8011992:	2a09      	cmp	r2, #9
 8011994:	d903      	bls.n	801199e <_vfiprintf_r+0x1ee>
 8011996:	2b00      	cmp	r3, #0
 8011998:	d0c5      	beq.n	8011926 <_vfiprintf_r+0x176>
 801199a:	9105      	str	r1, [sp, #20]
 801199c:	e7c3      	b.n	8011926 <_vfiprintf_r+0x176>
 801199e:	fb0c 2101 	mla	r1, ip, r1, r2
 80119a2:	4604      	mov	r4, r0
 80119a4:	2301      	movs	r3, #1
 80119a6:	e7f0      	b.n	801198a <_vfiprintf_r+0x1da>
 80119a8:	ab03      	add	r3, sp, #12
 80119aa:	9300      	str	r3, [sp, #0]
 80119ac:	462a      	mov	r2, r5
 80119ae:	4b16      	ldr	r3, [pc, #88]	; (8011a08 <_vfiprintf_r+0x258>)
 80119b0:	a904      	add	r1, sp, #16
 80119b2:	4630      	mov	r0, r6
 80119b4:	f7fc fea0 	bl	800e6f8 <_printf_float>
 80119b8:	4607      	mov	r7, r0
 80119ba:	1c78      	adds	r0, r7, #1
 80119bc:	d1d6      	bne.n	801196c <_vfiprintf_r+0x1bc>
 80119be:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80119c0:	07d9      	lsls	r1, r3, #31
 80119c2:	d405      	bmi.n	80119d0 <_vfiprintf_r+0x220>
 80119c4:	89ab      	ldrh	r3, [r5, #12]
 80119c6:	059a      	lsls	r2, r3, #22
 80119c8:	d402      	bmi.n	80119d0 <_vfiprintf_r+0x220>
 80119ca:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80119cc:	f7ff fe5f 	bl	801168e <__retarget_lock_release_recursive>
 80119d0:	89ab      	ldrh	r3, [r5, #12]
 80119d2:	065b      	lsls	r3, r3, #25
 80119d4:	f53f af12 	bmi.w	80117fc <_vfiprintf_r+0x4c>
 80119d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80119da:	e711      	b.n	8011800 <_vfiprintf_r+0x50>
 80119dc:	ab03      	add	r3, sp, #12
 80119de:	9300      	str	r3, [sp, #0]
 80119e0:	462a      	mov	r2, r5
 80119e2:	4b09      	ldr	r3, [pc, #36]	; (8011a08 <_vfiprintf_r+0x258>)
 80119e4:	a904      	add	r1, sp, #16
 80119e6:	4630      	mov	r0, r6
 80119e8:	f7fd f92a 	bl	800ec40 <_printf_i>
 80119ec:	e7e4      	b.n	80119b8 <_vfiprintf_r+0x208>
 80119ee:	bf00      	nop
 80119f0:	08013788 	.word	0x08013788
 80119f4:	080137a8 	.word	0x080137a8
 80119f8:	08013768 	.word	0x08013768
 80119fc:	080135fc 	.word	0x080135fc
 8011a00:	08013606 	.word	0x08013606
 8011a04:	0800e6f9 	.word	0x0800e6f9
 8011a08:	0801178d 	.word	0x0801178d
 8011a0c:	08013602 	.word	0x08013602

08011a10 <__swbuf_r>:
 8011a10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011a12:	460e      	mov	r6, r1
 8011a14:	4614      	mov	r4, r2
 8011a16:	4605      	mov	r5, r0
 8011a18:	b118      	cbz	r0, 8011a22 <__swbuf_r+0x12>
 8011a1a:	6983      	ldr	r3, [r0, #24]
 8011a1c:	b90b      	cbnz	r3, 8011a22 <__swbuf_r+0x12>
 8011a1e:	f7ff fd85 	bl	801152c <__sinit>
 8011a22:	4b21      	ldr	r3, [pc, #132]	; (8011aa8 <__swbuf_r+0x98>)
 8011a24:	429c      	cmp	r4, r3
 8011a26:	d12b      	bne.n	8011a80 <__swbuf_r+0x70>
 8011a28:	686c      	ldr	r4, [r5, #4]
 8011a2a:	69a3      	ldr	r3, [r4, #24]
 8011a2c:	60a3      	str	r3, [r4, #8]
 8011a2e:	89a3      	ldrh	r3, [r4, #12]
 8011a30:	071a      	lsls	r2, r3, #28
 8011a32:	d52f      	bpl.n	8011a94 <__swbuf_r+0x84>
 8011a34:	6923      	ldr	r3, [r4, #16]
 8011a36:	b36b      	cbz	r3, 8011a94 <__swbuf_r+0x84>
 8011a38:	6923      	ldr	r3, [r4, #16]
 8011a3a:	6820      	ldr	r0, [r4, #0]
 8011a3c:	1ac0      	subs	r0, r0, r3
 8011a3e:	6963      	ldr	r3, [r4, #20]
 8011a40:	b2f6      	uxtb	r6, r6
 8011a42:	4283      	cmp	r3, r0
 8011a44:	4637      	mov	r7, r6
 8011a46:	dc04      	bgt.n	8011a52 <__swbuf_r+0x42>
 8011a48:	4621      	mov	r1, r4
 8011a4a:	4628      	mov	r0, r5
 8011a4c:	f7ff fcda 	bl	8011404 <_fflush_r>
 8011a50:	bb30      	cbnz	r0, 8011aa0 <__swbuf_r+0x90>
 8011a52:	68a3      	ldr	r3, [r4, #8]
 8011a54:	3b01      	subs	r3, #1
 8011a56:	60a3      	str	r3, [r4, #8]
 8011a58:	6823      	ldr	r3, [r4, #0]
 8011a5a:	1c5a      	adds	r2, r3, #1
 8011a5c:	6022      	str	r2, [r4, #0]
 8011a5e:	701e      	strb	r6, [r3, #0]
 8011a60:	6963      	ldr	r3, [r4, #20]
 8011a62:	3001      	adds	r0, #1
 8011a64:	4283      	cmp	r3, r0
 8011a66:	d004      	beq.n	8011a72 <__swbuf_r+0x62>
 8011a68:	89a3      	ldrh	r3, [r4, #12]
 8011a6a:	07db      	lsls	r3, r3, #31
 8011a6c:	d506      	bpl.n	8011a7c <__swbuf_r+0x6c>
 8011a6e:	2e0a      	cmp	r6, #10
 8011a70:	d104      	bne.n	8011a7c <__swbuf_r+0x6c>
 8011a72:	4621      	mov	r1, r4
 8011a74:	4628      	mov	r0, r5
 8011a76:	f7ff fcc5 	bl	8011404 <_fflush_r>
 8011a7a:	b988      	cbnz	r0, 8011aa0 <__swbuf_r+0x90>
 8011a7c:	4638      	mov	r0, r7
 8011a7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011a80:	4b0a      	ldr	r3, [pc, #40]	; (8011aac <__swbuf_r+0x9c>)
 8011a82:	429c      	cmp	r4, r3
 8011a84:	d101      	bne.n	8011a8a <__swbuf_r+0x7a>
 8011a86:	68ac      	ldr	r4, [r5, #8]
 8011a88:	e7cf      	b.n	8011a2a <__swbuf_r+0x1a>
 8011a8a:	4b09      	ldr	r3, [pc, #36]	; (8011ab0 <__swbuf_r+0xa0>)
 8011a8c:	429c      	cmp	r4, r3
 8011a8e:	bf08      	it	eq
 8011a90:	68ec      	ldreq	r4, [r5, #12]
 8011a92:	e7ca      	b.n	8011a2a <__swbuf_r+0x1a>
 8011a94:	4621      	mov	r1, r4
 8011a96:	4628      	mov	r0, r5
 8011a98:	f000 f81a 	bl	8011ad0 <__swsetup_r>
 8011a9c:	2800      	cmp	r0, #0
 8011a9e:	d0cb      	beq.n	8011a38 <__swbuf_r+0x28>
 8011aa0:	f04f 37ff 	mov.w	r7, #4294967295
 8011aa4:	e7ea      	b.n	8011a7c <__swbuf_r+0x6c>
 8011aa6:	bf00      	nop
 8011aa8:	08013788 	.word	0x08013788
 8011aac:	080137a8 	.word	0x080137a8
 8011ab0:	08013768 	.word	0x08013768

08011ab4 <__ascii_wctomb>:
 8011ab4:	b149      	cbz	r1, 8011aca <__ascii_wctomb+0x16>
 8011ab6:	2aff      	cmp	r2, #255	; 0xff
 8011ab8:	bf85      	ittet	hi
 8011aba:	238a      	movhi	r3, #138	; 0x8a
 8011abc:	6003      	strhi	r3, [r0, #0]
 8011abe:	700a      	strbls	r2, [r1, #0]
 8011ac0:	f04f 30ff 	movhi.w	r0, #4294967295
 8011ac4:	bf98      	it	ls
 8011ac6:	2001      	movls	r0, #1
 8011ac8:	4770      	bx	lr
 8011aca:	4608      	mov	r0, r1
 8011acc:	4770      	bx	lr
	...

08011ad0 <__swsetup_r>:
 8011ad0:	4b32      	ldr	r3, [pc, #200]	; (8011b9c <__swsetup_r+0xcc>)
 8011ad2:	b570      	push	{r4, r5, r6, lr}
 8011ad4:	681d      	ldr	r5, [r3, #0]
 8011ad6:	4606      	mov	r6, r0
 8011ad8:	460c      	mov	r4, r1
 8011ada:	b125      	cbz	r5, 8011ae6 <__swsetup_r+0x16>
 8011adc:	69ab      	ldr	r3, [r5, #24]
 8011ade:	b913      	cbnz	r3, 8011ae6 <__swsetup_r+0x16>
 8011ae0:	4628      	mov	r0, r5
 8011ae2:	f7ff fd23 	bl	801152c <__sinit>
 8011ae6:	4b2e      	ldr	r3, [pc, #184]	; (8011ba0 <__swsetup_r+0xd0>)
 8011ae8:	429c      	cmp	r4, r3
 8011aea:	d10f      	bne.n	8011b0c <__swsetup_r+0x3c>
 8011aec:	686c      	ldr	r4, [r5, #4]
 8011aee:	89a3      	ldrh	r3, [r4, #12]
 8011af0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011af4:	0719      	lsls	r1, r3, #28
 8011af6:	d42c      	bmi.n	8011b52 <__swsetup_r+0x82>
 8011af8:	06dd      	lsls	r5, r3, #27
 8011afa:	d411      	bmi.n	8011b20 <__swsetup_r+0x50>
 8011afc:	2309      	movs	r3, #9
 8011afe:	6033      	str	r3, [r6, #0]
 8011b00:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8011b04:	81a3      	strh	r3, [r4, #12]
 8011b06:	f04f 30ff 	mov.w	r0, #4294967295
 8011b0a:	e03e      	b.n	8011b8a <__swsetup_r+0xba>
 8011b0c:	4b25      	ldr	r3, [pc, #148]	; (8011ba4 <__swsetup_r+0xd4>)
 8011b0e:	429c      	cmp	r4, r3
 8011b10:	d101      	bne.n	8011b16 <__swsetup_r+0x46>
 8011b12:	68ac      	ldr	r4, [r5, #8]
 8011b14:	e7eb      	b.n	8011aee <__swsetup_r+0x1e>
 8011b16:	4b24      	ldr	r3, [pc, #144]	; (8011ba8 <__swsetup_r+0xd8>)
 8011b18:	429c      	cmp	r4, r3
 8011b1a:	bf08      	it	eq
 8011b1c:	68ec      	ldreq	r4, [r5, #12]
 8011b1e:	e7e6      	b.n	8011aee <__swsetup_r+0x1e>
 8011b20:	0758      	lsls	r0, r3, #29
 8011b22:	d512      	bpl.n	8011b4a <__swsetup_r+0x7a>
 8011b24:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011b26:	b141      	cbz	r1, 8011b3a <__swsetup_r+0x6a>
 8011b28:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011b2c:	4299      	cmp	r1, r3
 8011b2e:	d002      	beq.n	8011b36 <__swsetup_r+0x66>
 8011b30:	4630      	mov	r0, r6
 8011b32:	f7fe fcd7 	bl	80104e4 <_free_r>
 8011b36:	2300      	movs	r3, #0
 8011b38:	6363      	str	r3, [r4, #52]	; 0x34
 8011b3a:	89a3      	ldrh	r3, [r4, #12]
 8011b3c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8011b40:	81a3      	strh	r3, [r4, #12]
 8011b42:	2300      	movs	r3, #0
 8011b44:	6063      	str	r3, [r4, #4]
 8011b46:	6923      	ldr	r3, [r4, #16]
 8011b48:	6023      	str	r3, [r4, #0]
 8011b4a:	89a3      	ldrh	r3, [r4, #12]
 8011b4c:	f043 0308 	orr.w	r3, r3, #8
 8011b50:	81a3      	strh	r3, [r4, #12]
 8011b52:	6923      	ldr	r3, [r4, #16]
 8011b54:	b94b      	cbnz	r3, 8011b6a <__swsetup_r+0x9a>
 8011b56:	89a3      	ldrh	r3, [r4, #12]
 8011b58:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8011b5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011b60:	d003      	beq.n	8011b6a <__swsetup_r+0x9a>
 8011b62:	4621      	mov	r1, r4
 8011b64:	4630      	mov	r0, r6
 8011b66:	f000 f84d 	bl	8011c04 <__smakebuf_r>
 8011b6a:	89a0      	ldrh	r0, [r4, #12]
 8011b6c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011b70:	f010 0301 	ands.w	r3, r0, #1
 8011b74:	d00a      	beq.n	8011b8c <__swsetup_r+0xbc>
 8011b76:	2300      	movs	r3, #0
 8011b78:	60a3      	str	r3, [r4, #8]
 8011b7a:	6963      	ldr	r3, [r4, #20]
 8011b7c:	425b      	negs	r3, r3
 8011b7e:	61a3      	str	r3, [r4, #24]
 8011b80:	6923      	ldr	r3, [r4, #16]
 8011b82:	b943      	cbnz	r3, 8011b96 <__swsetup_r+0xc6>
 8011b84:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8011b88:	d1ba      	bne.n	8011b00 <__swsetup_r+0x30>
 8011b8a:	bd70      	pop	{r4, r5, r6, pc}
 8011b8c:	0781      	lsls	r1, r0, #30
 8011b8e:	bf58      	it	pl
 8011b90:	6963      	ldrpl	r3, [r4, #20]
 8011b92:	60a3      	str	r3, [r4, #8]
 8011b94:	e7f4      	b.n	8011b80 <__swsetup_r+0xb0>
 8011b96:	2000      	movs	r0, #0
 8011b98:	e7f7      	b.n	8011b8a <__swsetup_r+0xba>
 8011b9a:	bf00      	nop
 8011b9c:	20000050 	.word	0x20000050
 8011ba0:	08013788 	.word	0x08013788
 8011ba4:	080137a8 	.word	0x080137a8
 8011ba8:	08013768 	.word	0x08013768

08011bac <abort>:
 8011bac:	b508      	push	{r3, lr}
 8011bae:	2006      	movs	r0, #6
 8011bb0:	f000 f898 	bl	8011ce4 <raise>
 8011bb4:	2001      	movs	r0, #1
 8011bb6:	f7f0 fb93 	bl	80022e0 <_exit>

08011bba <__swhatbuf_r>:
 8011bba:	b570      	push	{r4, r5, r6, lr}
 8011bbc:	460e      	mov	r6, r1
 8011bbe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011bc2:	2900      	cmp	r1, #0
 8011bc4:	b096      	sub	sp, #88	; 0x58
 8011bc6:	4614      	mov	r4, r2
 8011bc8:	461d      	mov	r5, r3
 8011bca:	da08      	bge.n	8011bde <__swhatbuf_r+0x24>
 8011bcc:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8011bd0:	2200      	movs	r2, #0
 8011bd2:	602a      	str	r2, [r5, #0]
 8011bd4:	061a      	lsls	r2, r3, #24
 8011bd6:	d410      	bmi.n	8011bfa <__swhatbuf_r+0x40>
 8011bd8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011bdc:	e00e      	b.n	8011bfc <__swhatbuf_r+0x42>
 8011bde:	466a      	mov	r2, sp
 8011be0:	f000 f89c 	bl	8011d1c <_fstat_r>
 8011be4:	2800      	cmp	r0, #0
 8011be6:	dbf1      	blt.n	8011bcc <__swhatbuf_r+0x12>
 8011be8:	9a01      	ldr	r2, [sp, #4]
 8011bea:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8011bee:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8011bf2:	425a      	negs	r2, r3
 8011bf4:	415a      	adcs	r2, r3
 8011bf6:	602a      	str	r2, [r5, #0]
 8011bf8:	e7ee      	b.n	8011bd8 <__swhatbuf_r+0x1e>
 8011bfa:	2340      	movs	r3, #64	; 0x40
 8011bfc:	2000      	movs	r0, #0
 8011bfe:	6023      	str	r3, [r4, #0]
 8011c00:	b016      	add	sp, #88	; 0x58
 8011c02:	bd70      	pop	{r4, r5, r6, pc}

08011c04 <__smakebuf_r>:
 8011c04:	898b      	ldrh	r3, [r1, #12]
 8011c06:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011c08:	079d      	lsls	r5, r3, #30
 8011c0a:	4606      	mov	r6, r0
 8011c0c:	460c      	mov	r4, r1
 8011c0e:	d507      	bpl.n	8011c20 <__smakebuf_r+0x1c>
 8011c10:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011c14:	6023      	str	r3, [r4, #0]
 8011c16:	6123      	str	r3, [r4, #16]
 8011c18:	2301      	movs	r3, #1
 8011c1a:	6163      	str	r3, [r4, #20]
 8011c1c:	b002      	add	sp, #8
 8011c1e:	bd70      	pop	{r4, r5, r6, pc}
 8011c20:	ab01      	add	r3, sp, #4
 8011c22:	466a      	mov	r2, sp
 8011c24:	f7ff ffc9 	bl	8011bba <__swhatbuf_r>
 8011c28:	9900      	ldr	r1, [sp, #0]
 8011c2a:	4605      	mov	r5, r0
 8011c2c:	4630      	mov	r0, r6
 8011c2e:	f7fe fcc5 	bl	80105bc <_malloc_r>
 8011c32:	b948      	cbnz	r0, 8011c48 <__smakebuf_r+0x44>
 8011c34:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011c38:	059a      	lsls	r2, r3, #22
 8011c3a:	d4ef      	bmi.n	8011c1c <__smakebuf_r+0x18>
 8011c3c:	f023 0303 	bic.w	r3, r3, #3
 8011c40:	f043 0302 	orr.w	r3, r3, #2
 8011c44:	81a3      	strh	r3, [r4, #12]
 8011c46:	e7e3      	b.n	8011c10 <__smakebuf_r+0xc>
 8011c48:	4b0d      	ldr	r3, [pc, #52]	; (8011c80 <__smakebuf_r+0x7c>)
 8011c4a:	62b3      	str	r3, [r6, #40]	; 0x28
 8011c4c:	89a3      	ldrh	r3, [r4, #12]
 8011c4e:	6020      	str	r0, [r4, #0]
 8011c50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011c54:	81a3      	strh	r3, [r4, #12]
 8011c56:	9b00      	ldr	r3, [sp, #0]
 8011c58:	6163      	str	r3, [r4, #20]
 8011c5a:	9b01      	ldr	r3, [sp, #4]
 8011c5c:	6120      	str	r0, [r4, #16]
 8011c5e:	b15b      	cbz	r3, 8011c78 <__smakebuf_r+0x74>
 8011c60:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011c64:	4630      	mov	r0, r6
 8011c66:	f000 f86b 	bl	8011d40 <_isatty_r>
 8011c6a:	b128      	cbz	r0, 8011c78 <__smakebuf_r+0x74>
 8011c6c:	89a3      	ldrh	r3, [r4, #12]
 8011c6e:	f023 0303 	bic.w	r3, r3, #3
 8011c72:	f043 0301 	orr.w	r3, r3, #1
 8011c76:	81a3      	strh	r3, [r4, #12]
 8011c78:	89a0      	ldrh	r0, [r4, #12]
 8011c7a:	4305      	orrs	r5, r0
 8011c7c:	81a5      	strh	r5, [r4, #12]
 8011c7e:	e7cd      	b.n	8011c1c <__smakebuf_r+0x18>
 8011c80:	080114c5 	.word	0x080114c5

08011c84 <_malloc_usable_size_r>:
 8011c84:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011c88:	1f18      	subs	r0, r3, #4
 8011c8a:	2b00      	cmp	r3, #0
 8011c8c:	bfbc      	itt	lt
 8011c8e:	580b      	ldrlt	r3, [r1, r0]
 8011c90:	18c0      	addlt	r0, r0, r3
 8011c92:	4770      	bx	lr

08011c94 <_raise_r>:
 8011c94:	291f      	cmp	r1, #31
 8011c96:	b538      	push	{r3, r4, r5, lr}
 8011c98:	4604      	mov	r4, r0
 8011c9a:	460d      	mov	r5, r1
 8011c9c:	d904      	bls.n	8011ca8 <_raise_r+0x14>
 8011c9e:	2316      	movs	r3, #22
 8011ca0:	6003      	str	r3, [r0, #0]
 8011ca2:	f04f 30ff 	mov.w	r0, #4294967295
 8011ca6:	bd38      	pop	{r3, r4, r5, pc}
 8011ca8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8011caa:	b112      	cbz	r2, 8011cb2 <_raise_r+0x1e>
 8011cac:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011cb0:	b94b      	cbnz	r3, 8011cc6 <_raise_r+0x32>
 8011cb2:	4620      	mov	r0, r4
 8011cb4:	f000 f830 	bl	8011d18 <_getpid_r>
 8011cb8:	462a      	mov	r2, r5
 8011cba:	4601      	mov	r1, r0
 8011cbc:	4620      	mov	r0, r4
 8011cbe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011cc2:	f000 b817 	b.w	8011cf4 <_kill_r>
 8011cc6:	2b01      	cmp	r3, #1
 8011cc8:	d00a      	beq.n	8011ce0 <_raise_r+0x4c>
 8011cca:	1c59      	adds	r1, r3, #1
 8011ccc:	d103      	bne.n	8011cd6 <_raise_r+0x42>
 8011cce:	2316      	movs	r3, #22
 8011cd0:	6003      	str	r3, [r0, #0]
 8011cd2:	2001      	movs	r0, #1
 8011cd4:	e7e7      	b.n	8011ca6 <_raise_r+0x12>
 8011cd6:	2400      	movs	r4, #0
 8011cd8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8011cdc:	4628      	mov	r0, r5
 8011cde:	4798      	blx	r3
 8011ce0:	2000      	movs	r0, #0
 8011ce2:	e7e0      	b.n	8011ca6 <_raise_r+0x12>

08011ce4 <raise>:
 8011ce4:	4b02      	ldr	r3, [pc, #8]	; (8011cf0 <raise+0xc>)
 8011ce6:	4601      	mov	r1, r0
 8011ce8:	6818      	ldr	r0, [r3, #0]
 8011cea:	f7ff bfd3 	b.w	8011c94 <_raise_r>
 8011cee:	bf00      	nop
 8011cf0:	20000050 	.word	0x20000050

08011cf4 <_kill_r>:
 8011cf4:	b538      	push	{r3, r4, r5, lr}
 8011cf6:	4d07      	ldr	r5, [pc, #28]	; (8011d14 <_kill_r+0x20>)
 8011cf8:	2300      	movs	r3, #0
 8011cfa:	4604      	mov	r4, r0
 8011cfc:	4608      	mov	r0, r1
 8011cfe:	4611      	mov	r1, r2
 8011d00:	602b      	str	r3, [r5, #0]
 8011d02:	f7f0 fadd 	bl	80022c0 <_kill>
 8011d06:	1c43      	adds	r3, r0, #1
 8011d08:	d102      	bne.n	8011d10 <_kill_r+0x1c>
 8011d0a:	682b      	ldr	r3, [r5, #0]
 8011d0c:	b103      	cbz	r3, 8011d10 <_kill_r+0x1c>
 8011d0e:	6023      	str	r3, [r4, #0]
 8011d10:	bd38      	pop	{r3, r4, r5, pc}
 8011d12:	bf00      	nop
 8011d14:	20000f48 	.word	0x20000f48

08011d18 <_getpid_r>:
 8011d18:	f7f0 baca 	b.w	80022b0 <_getpid>

08011d1c <_fstat_r>:
 8011d1c:	b538      	push	{r3, r4, r5, lr}
 8011d1e:	4d07      	ldr	r5, [pc, #28]	; (8011d3c <_fstat_r+0x20>)
 8011d20:	2300      	movs	r3, #0
 8011d22:	4604      	mov	r4, r0
 8011d24:	4608      	mov	r0, r1
 8011d26:	4611      	mov	r1, r2
 8011d28:	602b      	str	r3, [r5, #0]
 8011d2a:	f7f0 fb28 	bl	800237e <_fstat>
 8011d2e:	1c43      	adds	r3, r0, #1
 8011d30:	d102      	bne.n	8011d38 <_fstat_r+0x1c>
 8011d32:	682b      	ldr	r3, [r5, #0]
 8011d34:	b103      	cbz	r3, 8011d38 <_fstat_r+0x1c>
 8011d36:	6023      	str	r3, [r4, #0]
 8011d38:	bd38      	pop	{r3, r4, r5, pc}
 8011d3a:	bf00      	nop
 8011d3c:	20000f48 	.word	0x20000f48

08011d40 <_isatty_r>:
 8011d40:	b538      	push	{r3, r4, r5, lr}
 8011d42:	4d06      	ldr	r5, [pc, #24]	; (8011d5c <_isatty_r+0x1c>)
 8011d44:	2300      	movs	r3, #0
 8011d46:	4604      	mov	r4, r0
 8011d48:	4608      	mov	r0, r1
 8011d4a:	602b      	str	r3, [r5, #0]
 8011d4c:	f7f0 fb27 	bl	800239e <_isatty>
 8011d50:	1c43      	adds	r3, r0, #1
 8011d52:	d102      	bne.n	8011d5a <_isatty_r+0x1a>
 8011d54:	682b      	ldr	r3, [r5, #0]
 8011d56:	b103      	cbz	r3, 8011d5a <_isatty_r+0x1a>
 8011d58:	6023      	str	r3, [r4, #0]
 8011d5a:	bd38      	pop	{r3, r4, r5, pc}
 8011d5c:	20000f48 	.word	0x20000f48

08011d60 <sin>:
 8011d60:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011d62:	ec53 2b10 	vmov	r2, r3, d0
 8011d66:	4828      	ldr	r0, [pc, #160]	; (8011e08 <sin+0xa8>)
 8011d68:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8011d6c:	4281      	cmp	r1, r0
 8011d6e:	dc07      	bgt.n	8011d80 <sin+0x20>
 8011d70:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8011e00 <sin+0xa0>
 8011d74:	2000      	movs	r0, #0
 8011d76:	b005      	add	sp, #20
 8011d78:	f85d eb04 	ldr.w	lr, [sp], #4
 8011d7c:	f000 be6c 	b.w	8012a58 <__kernel_sin>
 8011d80:	4822      	ldr	r0, [pc, #136]	; (8011e0c <sin+0xac>)
 8011d82:	4281      	cmp	r1, r0
 8011d84:	dd09      	ble.n	8011d9a <sin+0x3a>
 8011d86:	ee10 0a10 	vmov	r0, s0
 8011d8a:	4619      	mov	r1, r3
 8011d8c:	f7ee fa7c 	bl	8000288 <__aeabi_dsub>
 8011d90:	ec41 0b10 	vmov	d0, r0, r1
 8011d94:	b005      	add	sp, #20
 8011d96:	f85d fb04 	ldr.w	pc, [sp], #4
 8011d9a:	4668      	mov	r0, sp
 8011d9c:	f000 f838 	bl	8011e10 <__ieee754_rem_pio2>
 8011da0:	f000 0003 	and.w	r0, r0, #3
 8011da4:	2801      	cmp	r0, #1
 8011da6:	d00c      	beq.n	8011dc2 <sin+0x62>
 8011da8:	2802      	cmp	r0, #2
 8011daa:	d011      	beq.n	8011dd0 <sin+0x70>
 8011dac:	b9f0      	cbnz	r0, 8011dec <sin+0x8c>
 8011dae:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011db2:	ed9d 0b00 	vldr	d0, [sp]
 8011db6:	2001      	movs	r0, #1
 8011db8:	f000 fe4e 	bl	8012a58 <__kernel_sin>
 8011dbc:	ec51 0b10 	vmov	r0, r1, d0
 8011dc0:	e7e6      	b.n	8011d90 <sin+0x30>
 8011dc2:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011dc6:	ed9d 0b00 	vldr	d0, [sp]
 8011dca:	f000 fa2d 	bl	8012228 <__kernel_cos>
 8011dce:	e7f5      	b.n	8011dbc <sin+0x5c>
 8011dd0:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011dd4:	ed9d 0b00 	vldr	d0, [sp]
 8011dd8:	2001      	movs	r0, #1
 8011dda:	f000 fe3d 	bl	8012a58 <__kernel_sin>
 8011dde:	ec53 2b10 	vmov	r2, r3, d0
 8011de2:	ee10 0a10 	vmov	r0, s0
 8011de6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8011dea:	e7d1      	b.n	8011d90 <sin+0x30>
 8011dec:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011df0:	ed9d 0b00 	vldr	d0, [sp]
 8011df4:	f000 fa18 	bl	8012228 <__kernel_cos>
 8011df8:	e7f1      	b.n	8011dde <sin+0x7e>
 8011dfa:	bf00      	nop
 8011dfc:	f3af 8000 	nop.w
	...
 8011e08:	3fe921fb 	.word	0x3fe921fb
 8011e0c:	7fefffff 	.word	0x7fefffff

08011e10 <__ieee754_rem_pio2>:
 8011e10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011e14:	ed2d 8b02 	vpush	{d8}
 8011e18:	ec55 4b10 	vmov	r4, r5, d0
 8011e1c:	4bca      	ldr	r3, [pc, #808]	; (8012148 <__ieee754_rem_pio2+0x338>)
 8011e1e:	b08b      	sub	sp, #44	; 0x2c
 8011e20:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8011e24:	4598      	cmp	r8, r3
 8011e26:	4682      	mov	sl, r0
 8011e28:	9502      	str	r5, [sp, #8]
 8011e2a:	dc08      	bgt.n	8011e3e <__ieee754_rem_pio2+0x2e>
 8011e2c:	2200      	movs	r2, #0
 8011e2e:	2300      	movs	r3, #0
 8011e30:	ed80 0b00 	vstr	d0, [r0]
 8011e34:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8011e38:	f04f 0b00 	mov.w	fp, #0
 8011e3c:	e028      	b.n	8011e90 <__ieee754_rem_pio2+0x80>
 8011e3e:	4bc3      	ldr	r3, [pc, #780]	; (801214c <__ieee754_rem_pio2+0x33c>)
 8011e40:	4598      	cmp	r8, r3
 8011e42:	dc78      	bgt.n	8011f36 <__ieee754_rem_pio2+0x126>
 8011e44:	9b02      	ldr	r3, [sp, #8]
 8011e46:	4ec2      	ldr	r6, [pc, #776]	; (8012150 <__ieee754_rem_pio2+0x340>)
 8011e48:	2b00      	cmp	r3, #0
 8011e4a:	ee10 0a10 	vmov	r0, s0
 8011e4e:	a3b0      	add	r3, pc, #704	; (adr r3, 8012110 <__ieee754_rem_pio2+0x300>)
 8011e50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e54:	4629      	mov	r1, r5
 8011e56:	dd39      	ble.n	8011ecc <__ieee754_rem_pio2+0xbc>
 8011e58:	f7ee fa16 	bl	8000288 <__aeabi_dsub>
 8011e5c:	45b0      	cmp	r8, r6
 8011e5e:	4604      	mov	r4, r0
 8011e60:	460d      	mov	r5, r1
 8011e62:	d01b      	beq.n	8011e9c <__ieee754_rem_pio2+0x8c>
 8011e64:	a3ac      	add	r3, pc, #688	; (adr r3, 8012118 <__ieee754_rem_pio2+0x308>)
 8011e66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e6a:	f7ee fa0d 	bl	8000288 <__aeabi_dsub>
 8011e6e:	4602      	mov	r2, r0
 8011e70:	460b      	mov	r3, r1
 8011e72:	e9ca 2300 	strd	r2, r3, [sl]
 8011e76:	4620      	mov	r0, r4
 8011e78:	4629      	mov	r1, r5
 8011e7a:	f7ee fa05 	bl	8000288 <__aeabi_dsub>
 8011e7e:	a3a6      	add	r3, pc, #664	; (adr r3, 8012118 <__ieee754_rem_pio2+0x308>)
 8011e80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e84:	f7ee fa00 	bl	8000288 <__aeabi_dsub>
 8011e88:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8011e8c:	f04f 0b01 	mov.w	fp, #1
 8011e90:	4658      	mov	r0, fp
 8011e92:	b00b      	add	sp, #44	; 0x2c
 8011e94:	ecbd 8b02 	vpop	{d8}
 8011e98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011e9c:	a3a0      	add	r3, pc, #640	; (adr r3, 8012120 <__ieee754_rem_pio2+0x310>)
 8011e9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ea2:	f7ee f9f1 	bl	8000288 <__aeabi_dsub>
 8011ea6:	a3a0      	add	r3, pc, #640	; (adr r3, 8012128 <__ieee754_rem_pio2+0x318>)
 8011ea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011eac:	4604      	mov	r4, r0
 8011eae:	460d      	mov	r5, r1
 8011eb0:	f7ee f9ea 	bl	8000288 <__aeabi_dsub>
 8011eb4:	4602      	mov	r2, r0
 8011eb6:	460b      	mov	r3, r1
 8011eb8:	e9ca 2300 	strd	r2, r3, [sl]
 8011ebc:	4620      	mov	r0, r4
 8011ebe:	4629      	mov	r1, r5
 8011ec0:	f7ee f9e2 	bl	8000288 <__aeabi_dsub>
 8011ec4:	a398      	add	r3, pc, #608	; (adr r3, 8012128 <__ieee754_rem_pio2+0x318>)
 8011ec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011eca:	e7db      	b.n	8011e84 <__ieee754_rem_pio2+0x74>
 8011ecc:	f7ee f9de 	bl	800028c <__adddf3>
 8011ed0:	45b0      	cmp	r8, r6
 8011ed2:	4604      	mov	r4, r0
 8011ed4:	460d      	mov	r5, r1
 8011ed6:	d016      	beq.n	8011f06 <__ieee754_rem_pio2+0xf6>
 8011ed8:	a38f      	add	r3, pc, #572	; (adr r3, 8012118 <__ieee754_rem_pio2+0x308>)
 8011eda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ede:	f7ee f9d5 	bl	800028c <__adddf3>
 8011ee2:	4602      	mov	r2, r0
 8011ee4:	460b      	mov	r3, r1
 8011ee6:	e9ca 2300 	strd	r2, r3, [sl]
 8011eea:	4620      	mov	r0, r4
 8011eec:	4629      	mov	r1, r5
 8011eee:	f7ee f9cb 	bl	8000288 <__aeabi_dsub>
 8011ef2:	a389      	add	r3, pc, #548	; (adr r3, 8012118 <__ieee754_rem_pio2+0x308>)
 8011ef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ef8:	f7ee f9c8 	bl	800028c <__adddf3>
 8011efc:	f04f 3bff 	mov.w	fp, #4294967295
 8011f00:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8011f04:	e7c4      	b.n	8011e90 <__ieee754_rem_pio2+0x80>
 8011f06:	a386      	add	r3, pc, #536	; (adr r3, 8012120 <__ieee754_rem_pio2+0x310>)
 8011f08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f0c:	f7ee f9be 	bl	800028c <__adddf3>
 8011f10:	a385      	add	r3, pc, #532	; (adr r3, 8012128 <__ieee754_rem_pio2+0x318>)
 8011f12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f16:	4604      	mov	r4, r0
 8011f18:	460d      	mov	r5, r1
 8011f1a:	f7ee f9b7 	bl	800028c <__adddf3>
 8011f1e:	4602      	mov	r2, r0
 8011f20:	460b      	mov	r3, r1
 8011f22:	e9ca 2300 	strd	r2, r3, [sl]
 8011f26:	4620      	mov	r0, r4
 8011f28:	4629      	mov	r1, r5
 8011f2a:	f7ee f9ad 	bl	8000288 <__aeabi_dsub>
 8011f2e:	a37e      	add	r3, pc, #504	; (adr r3, 8012128 <__ieee754_rem_pio2+0x318>)
 8011f30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f34:	e7e0      	b.n	8011ef8 <__ieee754_rem_pio2+0xe8>
 8011f36:	4b87      	ldr	r3, [pc, #540]	; (8012154 <__ieee754_rem_pio2+0x344>)
 8011f38:	4598      	cmp	r8, r3
 8011f3a:	f300 80d9 	bgt.w	80120f0 <__ieee754_rem_pio2+0x2e0>
 8011f3e:	f000 fe49 	bl	8012bd4 <fabs>
 8011f42:	ec55 4b10 	vmov	r4, r5, d0
 8011f46:	ee10 0a10 	vmov	r0, s0
 8011f4a:	a379      	add	r3, pc, #484	; (adr r3, 8012130 <__ieee754_rem_pio2+0x320>)
 8011f4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f50:	4629      	mov	r1, r5
 8011f52:	f7ee fb51 	bl	80005f8 <__aeabi_dmul>
 8011f56:	4b80      	ldr	r3, [pc, #512]	; (8012158 <__ieee754_rem_pio2+0x348>)
 8011f58:	2200      	movs	r2, #0
 8011f5a:	f7ee f997 	bl	800028c <__adddf3>
 8011f5e:	f7ee fdfb 	bl	8000b58 <__aeabi_d2iz>
 8011f62:	4683      	mov	fp, r0
 8011f64:	f7ee fade 	bl	8000524 <__aeabi_i2d>
 8011f68:	4602      	mov	r2, r0
 8011f6a:	460b      	mov	r3, r1
 8011f6c:	ec43 2b18 	vmov	d8, r2, r3
 8011f70:	a367      	add	r3, pc, #412	; (adr r3, 8012110 <__ieee754_rem_pio2+0x300>)
 8011f72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f76:	f7ee fb3f 	bl	80005f8 <__aeabi_dmul>
 8011f7a:	4602      	mov	r2, r0
 8011f7c:	460b      	mov	r3, r1
 8011f7e:	4620      	mov	r0, r4
 8011f80:	4629      	mov	r1, r5
 8011f82:	f7ee f981 	bl	8000288 <__aeabi_dsub>
 8011f86:	a364      	add	r3, pc, #400	; (adr r3, 8012118 <__ieee754_rem_pio2+0x308>)
 8011f88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f8c:	4606      	mov	r6, r0
 8011f8e:	460f      	mov	r7, r1
 8011f90:	ec51 0b18 	vmov	r0, r1, d8
 8011f94:	f7ee fb30 	bl	80005f8 <__aeabi_dmul>
 8011f98:	f1bb 0f1f 	cmp.w	fp, #31
 8011f9c:	4604      	mov	r4, r0
 8011f9e:	460d      	mov	r5, r1
 8011fa0:	dc0d      	bgt.n	8011fbe <__ieee754_rem_pio2+0x1ae>
 8011fa2:	4b6e      	ldr	r3, [pc, #440]	; (801215c <__ieee754_rem_pio2+0x34c>)
 8011fa4:	f10b 32ff 	add.w	r2, fp, #4294967295
 8011fa8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011fac:	4543      	cmp	r3, r8
 8011fae:	d006      	beq.n	8011fbe <__ieee754_rem_pio2+0x1ae>
 8011fb0:	4622      	mov	r2, r4
 8011fb2:	462b      	mov	r3, r5
 8011fb4:	4630      	mov	r0, r6
 8011fb6:	4639      	mov	r1, r7
 8011fb8:	f7ee f966 	bl	8000288 <__aeabi_dsub>
 8011fbc:	e00f      	b.n	8011fde <__ieee754_rem_pio2+0x1ce>
 8011fbe:	462b      	mov	r3, r5
 8011fc0:	4622      	mov	r2, r4
 8011fc2:	4630      	mov	r0, r6
 8011fc4:	4639      	mov	r1, r7
 8011fc6:	f7ee f95f 	bl	8000288 <__aeabi_dsub>
 8011fca:	ea4f 5328 	mov.w	r3, r8, asr #20
 8011fce:	9303      	str	r3, [sp, #12]
 8011fd0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8011fd4:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8011fd8:	f1b8 0f10 	cmp.w	r8, #16
 8011fdc:	dc02      	bgt.n	8011fe4 <__ieee754_rem_pio2+0x1d4>
 8011fde:	e9ca 0100 	strd	r0, r1, [sl]
 8011fe2:	e039      	b.n	8012058 <__ieee754_rem_pio2+0x248>
 8011fe4:	a34e      	add	r3, pc, #312	; (adr r3, 8012120 <__ieee754_rem_pio2+0x310>)
 8011fe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011fea:	ec51 0b18 	vmov	r0, r1, d8
 8011fee:	f7ee fb03 	bl	80005f8 <__aeabi_dmul>
 8011ff2:	4604      	mov	r4, r0
 8011ff4:	460d      	mov	r5, r1
 8011ff6:	4602      	mov	r2, r0
 8011ff8:	460b      	mov	r3, r1
 8011ffa:	4630      	mov	r0, r6
 8011ffc:	4639      	mov	r1, r7
 8011ffe:	f7ee f943 	bl	8000288 <__aeabi_dsub>
 8012002:	4602      	mov	r2, r0
 8012004:	460b      	mov	r3, r1
 8012006:	4680      	mov	r8, r0
 8012008:	4689      	mov	r9, r1
 801200a:	4630      	mov	r0, r6
 801200c:	4639      	mov	r1, r7
 801200e:	f7ee f93b 	bl	8000288 <__aeabi_dsub>
 8012012:	4622      	mov	r2, r4
 8012014:	462b      	mov	r3, r5
 8012016:	f7ee f937 	bl	8000288 <__aeabi_dsub>
 801201a:	a343      	add	r3, pc, #268	; (adr r3, 8012128 <__ieee754_rem_pio2+0x318>)
 801201c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012020:	4604      	mov	r4, r0
 8012022:	460d      	mov	r5, r1
 8012024:	ec51 0b18 	vmov	r0, r1, d8
 8012028:	f7ee fae6 	bl	80005f8 <__aeabi_dmul>
 801202c:	4622      	mov	r2, r4
 801202e:	462b      	mov	r3, r5
 8012030:	f7ee f92a 	bl	8000288 <__aeabi_dsub>
 8012034:	4602      	mov	r2, r0
 8012036:	460b      	mov	r3, r1
 8012038:	4604      	mov	r4, r0
 801203a:	460d      	mov	r5, r1
 801203c:	4640      	mov	r0, r8
 801203e:	4649      	mov	r1, r9
 8012040:	f7ee f922 	bl	8000288 <__aeabi_dsub>
 8012044:	9a03      	ldr	r2, [sp, #12]
 8012046:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801204a:	1ad3      	subs	r3, r2, r3
 801204c:	2b31      	cmp	r3, #49	; 0x31
 801204e:	dc24      	bgt.n	801209a <__ieee754_rem_pio2+0x28a>
 8012050:	e9ca 0100 	strd	r0, r1, [sl]
 8012054:	4646      	mov	r6, r8
 8012056:	464f      	mov	r7, r9
 8012058:	e9da 8900 	ldrd	r8, r9, [sl]
 801205c:	4630      	mov	r0, r6
 801205e:	4642      	mov	r2, r8
 8012060:	464b      	mov	r3, r9
 8012062:	4639      	mov	r1, r7
 8012064:	f7ee f910 	bl	8000288 <__aeabi_dsub>
 8012068:	462b      	mov	r3, r5
 801206a:	4622      	mov	r2, r4
 801206c:	f7ee f90c 	bl	8000288 <__aeabi_dsub>
 8012070:	9b02      	ldr	r3, [sp, #8]
 8012072:	2b00      	cmp	r3, #0
 8012074:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8012078:	f6bf af0a 	bge.w	8011e90 <__ieee754_rem_pio2+0x80>
 801207c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8012080:	f8ca 3004 	str.w	r3, [sl, #4]
 8012084:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012088:	f8ca 8000 	str.w	r8, [sl]
 801208c:	f8ca 0008 	str.w	r0, [sl, #8]
 8012090:	f8ca 300c 	str.w	r3, [sl, #12]
 8012094:	f1cb 0b00 	rsb	fp, fp, #0
 8012098:	e6fa      	b.n	8011e90 <__ieee754_rem_pio2+0x80>
 801209a:	a327      	add	r3, pc, #156	; (adr r3, 8012138 <__ieee754_rem_pio2+0x328>)
 801209c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80120a0:	ec51 0b18 	vmov	r0, r1, d8
 80120a4:	f7ee faa8 	bl	80005f8 <__aeabi_dmul>
 80120a8:	4604      	mov	r4, r0
 80120aa:	460d      	mov	r5, r1
 80120ac:	4602      	mov	r2, r0
 80120ae:	460b      	mov	r3, r1
 80120b0:	4640      	mov	r0, r8
 80120b2:	4649      	mov	r1, r9
 80120b4:	f7ee f8e8 	bl	8000288 <__aeabi_dsub>
 80120b8:	4602      	mov	r2, r0
 80120ba:	460b      	mov	r3, r1
 80120bc:	4606      	mov	r6, r0
 80120be:	460f      	mov	r7, r1
 80120c0:	4640      	mov	r0, r8
 80120c2:	4649      	mov	r1, r9
 80120c4:	f7ee f8e0 	bl	8000288 <__aeabi_dsub>
 80120c8:	4622      	mov	r2, r4
 80120ca:	462b      	mov	r3, r5
 80120cc:	f7ee f8dc 	bl	8000288 <__aeabi_dsub>
 80120d0:	a31b      	add	r3, pc, #108	; (adr r3, 8012140 <__ieee754_rem_pio2+0x330>)
 80120d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80120d6:	4604      	mov	r4, r0
 80120d8:	460d      	mov	r5, r1
 80120da:	ec51 0b18 	vmov	r0, r1, d8
 80120de:	f7ee fa8b 	bl	80005f8 <__aeabi_dmul>
 80120e2:	4622      	mov	r2, r4
 80120e4:	462b      	mov	r3, r5
 80120e6:	f7ee f8cf 	bl	8000288 <__aeabi_dsub>
 80120ea:	4604      	mov	r4, r0
 80120ec:	460d      	mov	r5, r1
 80120ee:	e75f      	b.n	8011fb0 <__ieee754_rem_pio2+0x1a0>
 80120f0:	4b1b      	ldr	r3, [pc, #108]	; (8012160 <__ieee754_rem_pio2+0x350>)
 80120f2:	4598      	cmp	r8, r3
 80120f4:	dd36      	ble.n	8012164 <__ieee754_rem_pio2+0x354>
 80120f6:	ee10 2a10 	vmov	r2, s0
 80120fa:	462b      	mov	r3, r5
 80120fc:	4620      	mov	r0, r4
 80120fe:	4629      	mov	r1, r5
 8012100:	f7ee f8c2 	bl	8000288 <__aeabi_dsub>
 8012104:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8012108:	e9ca 0100 	strd	r0, r1, [sl]
 801210c:	e694      	b.n	8011e38 <__ieee754_rem_pio2+0x28>
 801210e:	bf00      	nop
 8012110:	54400000 	.word	0x54400000
 8012114:	3ff921fb 	.word	0x3ff921fb
 8012118:	1a626331 	.word	0x1a626331
 801211c:	3dd0b461 	.word	0x3dd0b461
 8012120:	1a600000 	.word	0x1a600000
 8012124:	3dd0b461 	.word	0x3dd0b461
 8012128:	2e037073 	.word	0x2e037073
 801212c:	3ba3198a 	.word	0x3ba3198a
 8012130:	6dc9c883 	.word	0x6dc9c883
 8012134:	3fe45f30 	.word	0x3fe45f30
 8012138:	2e000000 	.word	0x2e000000
 801213c:	3ba3198a 	.word	0x3ba3198a
 8012140:	252049c1 	.word	0x252049c1
 8012144:	397b839a 	.word	0x397b839a
 8012148:	3fe921fb 	.word	0x3fe921fb
 801214c:	4002d97b 	.word	0x4002d97b
 8012150:	3ff921fb 	.word	0x3ff921fb
 8012154:	413921fb 	.word	0x413921fb
 8012158:	3fe00000 	.word	0x3fe00000
 801215c:	080137d4 	.word	0x080137d4
 8012160:	7fefffff 	.word	0x7fefffff
 8012164:	ea4f 5428 	mov.w	r4, r8, asr #20
 8012168:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 801216c:	ee10 0a10 	vmov	r0, s0
 8012170:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 8012174:	ee10 6a10 	vmov	r6, s0
 8012178:	460f      	mov	r7, r1
 801217a:	f7ee fced 	bl	8000b58 <__aeabi_d2iz>
 801217e:	f7ee f9d1 	bl	8000524 <__aeabi_i2d>
 8012182:	4602      	mov	r2, r0
 8012184:	460b      	mov	r3, r1
 8012186:	4630      	mov	r0, r6
 8012188:	4639      	mov	r1, r7
 801218a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801218e:	f7ee f87b 	bl	8000288 <__aeabi_dsub>
 8012192:	4b23      	ldr	r3, [pc, #140]	; (8012220 <__ieee754_rem_pio2+0x410>)
 8012194:	2200      	movs	r2, #0
 8012196:	f7ee fa2f 	bl	80005f8 <__aeabi_dmul>
 801219a:	460f      	mov	r7, r1
 801219c:	4606      	mov	r6, r0
 801219e:	f7ee fcdb 	bl	8000b58 <__aeabi_d2iz>
 80121a2:	f7ee f9bf 	bl	8000524 <__aeabi_i2d>
 80121a6:	4602      	mov	r2, r0
 80121a8:	460b      	mov	r3, r1
 80121aa:	4630      	mov	r0, r6
 80121ac:	4639      	mov	r1, r7
 80121ae:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80121b2:	f7ee f869 	bl	8000288 <__aeabi_dsub>
 80121b6:	4b1a      	ldr	r3, [pc, #104]	; (8012220 <__ieee754_rem_pio2+0x410>)
 80121b8:	2200      	movs	r2, #0
 80121ba:	f7ee fa1d 	bl	80005f8 <__aeabi_dmul>
 80121be:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80121c2:	ad04      	add	r5, sp, #16
 80121c4:	f04f 0803 	mov.w	r8, #3
 80121c8:	46a9      	mov	r9, r5
 80121ca:	2600      	movs	r6, #0
 80121cc:	2700      	movs	r7, #0
 80121ce:	4632      	mov	r2, r6
 80121d0:	463b      	mov	r3, r7
 80121d2:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 80121d6:	46c3      	mov	fp, r8
 80121d8:	3d08      	subs	r5, #8
 80121da:	f108 38ff 	add.w	r8, r8, #4294967295
 80121de:	f7ee fc73 	bl	8000ac8 <__aeabi_dcmpeq>
 80121e2:	2800      	cmp	r0, #0
 80121e4:	d1f3      	bne.n	80121ce <__ieee754_rem_pio2+0x3be>
 80121e6:	4b0f      	ldr	r3, [pc, #60]	; (8012224 <__ieee754_rem_pio2+0x414>)
 80121e8:	9301      	str	r3, [sp, #4]
 80121ea:	2302      	movs	r3, #2
 80121ec:	9300      	str	r3, [sp, #0]
 80121ee:	4622      	mov	r2, r4
 80121f0:	465b      	mov	r3, fp
 80121f2:	4651      	mov	r1, sl
 80121f4:	4648      	mov	r0, r9
 80121f6:	f000 f8df 	bl	80123b8 <__kernel_rem_pio2>
 80121fa:	9b02      	ldr	r3, [sp, #8]
 80121fc:	2b00      	cmp	r3, #0
 80121fe:	4683      	mov	fp, r0
 8012200:	f6bf ae46 	bge.w	8011e90 <__ieee754_rem_pio2+0x80>
 8012204:	e9da 2100 	ldrd	r2, r1, [sl]
 8012208:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801220c:	e9ca 2300 	strd	r2, r3, [sl]
 8012210:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8012214:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012218:	e9ca 2302 	strd	r2, r3, [sl, #8]
 801221c:	e73a      	b.n	8012094 <__ieee754_rem_pio2+0x284>
 801221e:	bf00      	nop
 8012220:	41700000 	.word	0x41700000
 8012224:	08013854 	.word	0x08013854

08012228 <__kernel_cos>:
 8012228:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801222c:	ec57 6b10 	vmov	r6, r7, d0
 8012230:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8012234:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8012238:	ed8d 1b00 	vstr	d1, [sp]
 801223c:	da07      	bge.n	801224e <__kernel_cos+0x26>
 801223e:	ee10 0a10 	vmov	r0, s0
 8012242:	4639      	mov	r1, r7
 8012244:	f7ee fc88 	bl	8000b58 <__aeabi_d2iz>
 8012248:	2800      	cmp	r0, #0
 801224a:	f000 8088 	beq.w	801235e <__kernel_cos+0x136>
 801224e:	4632      	mov	r2, r6
 8012250:	463b      	mov	r3, r7
 8012252:	4630      	mov	r0, r6
 8012254:	4639      	mov	r1, r7
 8012256:	f7ee f9cf 	bl	80005f8 <__aeabi_dmul>
 801225a:	4b51      	ldr	r3, [pc, #324]	; (80123a0 <__kernel_cos+0x178>)
 801225c:	2200      	movs	r2, #0
 801225e:	4604      	mov	r4, r0
 8012260:	460d      	mov	r5, r1
 8012262:	f7ee f9c9 	bl	80005f8 <__aeabi_dmul>
 8012266:	a340      	add	r3, pc, #256	; (adr r3, 8012368 <__kernel_cos+0x140>)
 8012268:	e9d3 2300 	ldrd	r2, r3, [r3]
 801226c:	4682      	mov	sl, r0
 801226e:	468b      	mov	fp, r1
 8012270:	4620      	mov	r0, r4
 8012272:	4629      	mov	r1, r5
 8012274:	f7ee f9c0 	bl	80005f8 <__aeabi_dmul>
 8012278:	a33d      	add	r3, pc, #244	; (adr r3, 8012370 <__kernel_cos+0x148>)
 801227a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801227e:	f7ee f805 	bl	800028c <__adddf3>
 8012282:	4622      	mov	r2, r4
 8012284:	462b      	mov	r3, r5
 8012286:	f7ee f9b7 	bl	80005f8 <__aeabi_dmul>
 801228a:	a33b      	add	r3, pc, #236	; (adr r3, 8012378 <__kernel_cos+0x150>)
 801228c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012290:	f7ed fffa 	bl	8000288 <__aeabi_dsub>
 8012294:	4622      	mov	r2, r4
 8012296:	462b      	mov	r3, r5
 8012298:	f7ee f9ae 	bl	80005f8 <__aeabi_dmul>
 801229c:	a338      	add	r3, pc, #224	; (adr r3, 8012380 <__kernel_cos+0x158>)
 801229e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122a2:	f7ed fff3 	bl	800028c <__adddf3>
 80122a6:	4622      	mov	r2, r4
 80122a8:	462b      	mov	r3, r5
 80122aa:	f7ee f9a5 	bl	80005f8 <__aeabi_dmul>
 80122ae:	a336      	add	r3, pc, #216	; (adr r3, 8012388 <__kernel_cos+0x160>)
 80122b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122b4:	f7ed ffe8 	bl	8000288 <__aeabi_dsub>
 80122b8:	4622      	mov	r2, r4
 80122ba:	462b      	mov	r3, r5
 80122bc:	f7ee f99c 	bl	80005f8 <__aeabi_dmul>
 80122c0:	a333      	add	r3, pc, #204	; (adr r3, 8012390 <__kernel_cos+0x168>)
 80122c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122c6:	f7ed ffe1 	bl	800028c <__adddf3>
 80122ca:	4622      	mov	r2, r4
 80122cc:	462b      	mov	r3, r5
 80122ce:	f7ee f993 	bl	80005f8 <__aeabi_dmul>
 80122d2:	4622      	mov	r2, r4
 80122d4:	462b      	mov	r3, r5
 80122d6:	f7ee f98f 	bl	80005f8 <__aeabi_dmul>
 80122da:	e9dd 2300 	ldrd	r2, r3, [sp]
 80122de:	4604      	mov	r4, r0
 80122e0:	460d      	mov	r5, r1
 80122e2:	4630      	mov	r0, r6
 80122e4:	4639      	mov	r1, r7
 80122e6:	f7ee f987 	bl	80005f8 <__aeabi_dmul>
 80122ea:	460b      	mov	r3, r1
 80122ec:	4602      	mov	r2, r0
 80122ee:	4629      	mov	r1, r5
 80122f0:	4620      	mov	r0, r4
 80122f2:	f7ed ffc9 	bl	8000288 <__aeabi_dsub>
 80122f6:	4b2b      	ldr	r3, [pc, #172]	; (80123a4 <__kernel_cos+0x17c>)
 80122f8:	4598      	cmp	r8, r3
 80122fa:	4606      	mov	r6, r0
 80122fc:	460f      	mov	r7, r1
 80122fe:	dc10      	bgt.n	8012322 <__kernel_cos+0xfa>
 8012300:	4602      	mov	r2, r0
 8012302:	460b      	mov	r3, r1
 8012304:	4650      	mov	r0, sl
 8012306:	4659      	mov	r1, fp
 8012308:	f7ed ffbe 	bl	8000288 <__aeabi_dsub>
 801230c:	460b      	mov	r3, r1
 801230e:	4926      	ldr	r1, [pc, #152]	; (80123a8 <__kernel_cos+0x180>)
 8012310:	4602      	mov	r2, r0
 8012312:	2000      	movs	r0, #0
 8012314:	f7ed ffb8 	bl	8000288 <__aeabi_dsub>
 8012318:	ec41 0b10 	vmov	d0, r0, r1
 801231c:	b003      	add	sp, #12
 801231e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012322:	4b22      	ldr	r3, [pc, #136]	; (80123ac <__kernel_cos+0x184>)
 8012324:	4920      	ldr	r1, [pc, #128]	; (80123a8 <__kernel_cos+0x180>)
 8012326:	4598      	cmp	r8, r3
 8012328:	bfcc      	ite	gt
 801232a:	4d21      	ldrgt	r5, [pc, #132]	; (80123b0 <__kernel_cos+0x188>)
 801232c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8012330:	2400      	movs	r4, #0
 8012332:	4622      	mov	r2, r4
 8012334:	462b      	mov	r3, r5
 8012336:	2000      	movs	r0, #0
 8012338:	f7ed ffa6 	bl	8000288 <__aeabi_dsub>
 801233c:	4622      	mov	r2, r4
 801233e:	4680      	mov	r8, r0
 8012340:	4689      	mov	r9, r1
 8012342:	462b      	mov	r3, r5
 8012344:	4650      	mov	r0, sl
 8012346:	4659      	mov	r1, fp
 8012348:	f7ed ff9e 	bl	8000288 <__aeabi_dsub>
 801234c:	4632      	mov	r2, r6
 801234e:	463b      	mov	r3, r7
 8012350:	f7ed ff9a 	bl	8000288 <__aeabi_dsub>
 8012354:	4602      	mov	r2, r0
 8012356:	460b      	mov	r3, r1
 8012358:	4640      	mov	r0, r8
 801235a:	4649      	mov	r1, r9
 801235c:	e7da      	b.n	8012314 <__kernel_cos+0xec>
 801235e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8012398 <__kernel_cos+0x170>
 8012362:	e7db      	b.n	801231c <__kernel_cos+0xf4>
 8012364:	f3af 8000 	nop.w
 8012368:	be8838d4 	.word	0xbe8838d4
 801236c:	bda8fae9 	.word	0xbda8fae9
 8012370:	bdb4b1c4 	.word	0xbdb4b1c4
 8012374:	3e21ee9e 	.word	0x3e21ee9e
 8012378:	809c52ad 	.word	0x809c52ad
 801237c:	3e927e4f 	.word	0x3e927e4f
 8012380:	19cb1590 	.word	0x19cb1590
 8012384:	3efa01a0 	.word	0x3efa01a0
 8012388:	16c15177 	.word	0x16c15177
 801238c:	3f56c16c 	.word	0x3f56c16c
 8012390:	5555554c 	.word	0x5555554c
 8012394:	3fa55555 	.word	0x3fa55555
 8012398:	00000000 	.word	0x00000000
 801239c:	3ff00000 	.word	0x3ff00000
 80123a0:	3fe00000 	.word	0x3fe00000
 80123a4:	3fd33332 	.word	0x3fd33332
 80123a8:	3ff00000 	.word	0x3ff00000
 80123ac:	3fe90000 	.word	0x3fe90000
 80123b0:	3fd20000 	.word	0x3fd20000
 80123b4:	00000000 	.word	0x00000000

080123b8 <__kernel_rem_pio2>:
 80123b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80123bc:	ed2d 8b02 	vpush	{d8}
 80123c0:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 80123c4:	f112 0f14 	cmn.w	r2, #20
 80123c8:	9308      	str	r3, [sp, #32]
 80123ca:	9101      	str	r1, [sp, #4]
 80123cc:	4bc4      	ldr	r3, [pc, #784]	; (80126e0 <__kernel_rem_pio2+0x328>)
 80123ce:	99a6      	ldr	r1, [sp, #664]	; 0x298
 80123d0:	900b      	str	r0, [sp, #44]	; 0x2c
 80123d2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80123d6:	9302      	str	r3, [sp, #8]
 80123d8:	9b08      	ldr	r3, [sp, #32]
 80123da:	f103 33ff 	add.w	r3, r3, #4294967295
 80123de:	bfa8      	it	ge
 80123e0:	1ed4      	subge	r4, r2, #3
 80123e2:	9306      	str	r3, [sp, #24]
 80123e4:	bfb2      	itee	lt
 80123e6:	2400      	movlt	r4, #0
 80123e8:	2318      	movge	r3, #24
 80123ea:	fb94 f4f3 	sdivge	r4, r4, r3
 80123ee:	f06f 0317 	mvn.w	r3, #23
 80123f2:	fb04 3303 	mla	r3, r4, r3, r3
 80123f6:	eb03 0a02 	add.w	sl, r3, r2
 80123fa:	9b02      	ldr	r3, [sp, #8]
 80123fc:	9a06      	ldr	r2, [sp, #24]
 80123fe:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 80126d0 <__kernel_rem_pio2+0x318>
 8012402:	eb03 0802 	add.w	r8, r3, r2
 8012406:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8012408:	1aa7      	subs	r7, r4, r2
 801240a:	ae22      	add	r6, sp, #136	; 0x88
 801240c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8012410:	2500      	movs	r5, #0
 8012412:	4545      	cmp	r5, r8
 8012414:	dd13      	ble.n	801243e <__kernel_rem_pio2+0x86>
 8012416:	9b08      	ldr	r3, [sp, #32]
 8012418:	ed9f 8bad 	vldr	d8, [pc, #692]	; 80126d0 <__kernel_rem_pio2+0x318>
 801241c:	aa22      	add	r2, sp, #136	; 0x88
 801241e:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8012422:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8012426:	f04f 0800 	mov.w	r8, #0
 801242a:	9b02      	ldr	r3, [sp, #8]
 801242c:	4598      	cmp	r8, r3
 801242e:	dc2f      	bgt.n	8012490 <__kernel_rem_pio2+0xd8>
 8012430:	ed8d 8b04 	vstr	d8, [sp, #16]
 8012434:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8012438:	462f      	mov	r7, r5
 801243a:	2600      	movs	r6, #0
 801243c:	e01b      	b.n	8012476 <__kernel_rem_pio2+0xbe>
 801243e:	42ef      	cmn	r7, r5
 8012440:	d407      	bmi.n	8012452 <__kernel_rem_pio2+0x9a>
 8012442:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8012446:	f7ee f86d 	bl	8000524 <__aeabi_i2d>
 801244a:	e8e6 0102 	strd	r0, r1, [r6], #8
 801244e:	3501      	adds	r5, #1
 8012450:	e7df      	b.n	8012412 <__kernel_rem_pio2+0x5a>
 8012452:	ec51 0b18 	vmov	r0, r1, d8
 8012456:	e7f8      	b.n	801244a <__kernel_rem_pio2+0x92>
 8012458:	e9d7 2300 	ldrd	r2, r3, [r7]
 801245c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8012460:	f7ee f8ca 	bl	80005f8 <__aeabi_dmul>
 8012464:	4602      	mov	r2, r0
 8012466:	460b      	mov	r3, r1
 8012468:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801246c:	f7ed ff0e 	bl	800028c <__adddf3>
 8012470:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8012474:	3601      	adds	r6, #1
 8012476:	9b06      	ldr	r3, [sp, #24]
 8012478:	429e      	cmp	r6, r3
 801247a:	f1a7 0708 	sub.w	r7, r7, #8
 801247e:	ddeb      	ble.n	8012458 <__kernel_rem_pio2+0xa0>
 8012480:	ed9d 7b04 	vldr	d7, [sp, #16]
 8012484:	f108 0801 	add.w	r8, r8, #1
 8012488:	ecab 7b02 	vstmia	fp!, {d7}
 801248c:	3508      	adds	r5, #8
 801248e:	e7cc      	b.n	801242a <__kernel_rem_pio2+0x72>
 8012490:	9b02      	ldr	r3, [sp, #8]
 8012492:	aa0e      	add	r2, sp, #56	; 0x38
 8012494:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8012498:	930d      	str	r3, [sp, #52]	; 0x34
 801249a:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 801249c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80124a0:	9c02      	ldr	r4, [sp, #8]
 80124a2:	930c      	str	r3, [sp, #48]	; 0x30
 80124a4:	00e3      	lsls	r3, r4, #3
 80124a6:	930a      	str	r3, [sp, #40]	; 0x28
 80124a8:	ab9a      	add	r3, sp, #616	; 0x268
 80124aa:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80124ae:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 80124b2:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 80124b6:	ab72      	add	r3, sp, #456	; 0x1c8
 80124b8:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 80124bc:	46c3      	mov	fp, r8
 80124be:	46a1      	mov	r9, r4
 80124c0:	f1b9 0f00 	cmp.w	r9, #0
 80124c4:	f1a5 0508 	sub.w	r5, r5, #8
 80124c8:	dc77      	bgt.n	80125ba <__kernel_rem_pio2+0x202>
 80124ca:	ec47 6b10 	vmov	d0, r6, r7
 80124ce:	4650      	mov	r0, sl
 80124d0:	f000 fc0a 	bl	8012ce8 <scalbn>
 80124d4:	ec57 6b10 	vmov	r6, r7, d0
 80124d8:	2200      	movs	r2, #0
 80124da:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80124de:	ee10 0a10 	vmov	r0, s0
 80124e2:	4639      	mov	r1, r7
 80124e4:	f7ee f888 	bl	80005f8 <__aeabi_dmul>
 80124e8:	ec41 0b10 	vmov	d0, r0, r1
 80124ec:	f000 fb7c 	bl	8012be8 <floor>
 80124f0:	4b7c      	ldr	r3, [pc, #496]	; (80126e4 <__kernel_rem_pio2+0x32c>)
 80124f2:	ec51 0b10 	vmov	r0, r1, d0
 80124f6:	2200      	movs	r2, #0
 80124f8:	f7ee f87e 	bl	80005f8 <__aeabi_dmul>
 80124fc:	4602      	mov	r2, r0
 80124fe:	460b      	mov	r3, r1
 8012500:	4630      	mov	r0, r6
 8012502:	4639      	mov	r1, r7
 8012504:	f7ed fec0 	bl	8000288 <__aeabi_dsub>
 8012508:	460f      	mov	r7, r1
 801250a:	4606      	mov	r6, r0
 801250c:	f7ee fb24 	bl	8000b58 <__aeabi_d2iz>
 8012510:	9004      	str	r0, [sp, #16]
 8012512:	f7ee f807 	bl	8000524 <__aeabi_i2d>
 8012516:	4602      	mov	r2, r0
 8012518:	460b      	mov	r3, r1
 801251a:	4630      	mov	r0, r6
 801251c:	4639      	mov	r1, r7
 801251e:	f7ed feb3 	bl	8000288 <__aeabi_dsub>
 8012522:	f1ba 0f00 	cmp.w	sl, #0
 8012526:	4606      	mov	r6, r0
 8012528:	460f      	mov	r7, r1
 801252a:	dd6d      	ble.n	8012608 <__kernel_rem_pio2+0x250>
 801252c:	1e62      	subs	r2, r4, #1
 801252e:	ab0e      	add	r3, sp, #56	; 0x38
 8012530:	9d04      	ldr	r5, [sp, #16]
 8012532:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8012536:	f1ca 0118 	rsb	r1, sl, #24
 801253a:	fa40 f301 	asr.w	r3, r0, r1
 801253e:	441d      	add	r5, r3
 8012540:	408b      	lsls	r3, r1
 8012542:	1ac0      	subs	r0, r0, r3
 8012544:	ab0e      	add	r3, sp, #56	; 0x38
 8012546:	9504      	str	r5, [sp, #16]
 8012548:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 801254c:	f1ca 0317 	rsb	r3, sl, #23
 8012550:	fa40 fb03 	asr.w	fp, r0, r3
 8012554:	f1bb 0f00 	cmp.w	fp, #0
 8012558:	dd65      	ble.n	8012626 <__kernel_rem_pio2+0x26e>
 801255a:	9b04      	ldr	r3, [sp, #16]
 801255c:	2200      	movs	r2, #0
 801255e:	3301      	adds	r3, #1
 8012560:	9304      	str	r3, [sp, #16]
 8012562:	4615      	mov	r5, r2
 8012564:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8012568:	4294      	cmp	r4, r2
 801256a:	f300 809c 	bgt.w	80126a6 <__kernel_rem_pio2+0x2ee>
 801256e:	f1ba 0f00 	cmp.w	sl, #0
 8012572:	dd07      	ble.n	8012584 <__kernel_rem_pio2+0x1cc>
 8012574:	f1ba 0f01 	cmp.w	sl, #1
 8012578:	f000 80c0 	beq.w	80126fc <__kernel_rem_pio2+0x344>
 801257c:	f1ba 0f02 	cmp.w	sl, #2
 8012580:	f000 80c6 	beq.w	8012710 <__kernel_rem_pio2+0x358>
 8012584:	f1bb 0f02 	cmp.w	fp, #2
 8012588:	d14d      	bne.n	8012626 <__kernel_rem_pio2+0x26e>
 801258a:	4632      	mov	r2, r6
 801258c:	463b      	mov	r3, r7
 801258e:	4956      	ldr	r1, [pc, #344]	; (80126e8 <__kernel_rem_pio2+0x330>)
 8012590:	2000      	movs	r0, #0
 8012592:	f7ed fe79 	bl	8000288 <__aeabi_dsub>
 8012596:	4606      	mov	r6, r0
 8012598:	460f      	mov	r7, r1
 801259a:	2d00      	cmp	r5, #0
 801259c:	d043      	beq.n	8012626 <__kernel_rem_pio2+0x26e>
 801259e:	4650      	mov	r0, sl
 80125a0:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 80126d8 <__kernel_rem_pio2+0x320>
 80125a4:	f000 fba0 	bl	8012ce8 <scalbn>
 80125a8:	4630      	mov	r0, r6
 80125aa:	4639      	mov	r1, r7
 80125ac:	ec53 2b10 	vmov	r2, r3, d0
 80125b0:	f7ed fe6a 	bl	8000288 <__aeabi_dsub>
 80125b4:	4606      	mov	r6, r0
 80125b6:	460f      	mov	r7, r1
 80125b8:	e035      	b.n	8012626 <__kernel_rem_pio2+0x26e>
 80125ba:	4b4c      	ldr	r3, [pc, #304]	; (80126ec <__kernel_rem_pio2+0x334>)
 80125bc:	2200      	movs	r2, #0
 80125be:	4630      	mov	r0, r6
 80125c0:	4639      	mov	r1, r7
 80125c2:	f7ee f819 	bl	80005f8 <__aeabi_dmul>
 80125c6:	f7ee fac7 	bl	8000b58 <__aeabi_d2iz>
 80125ca:	f7ed ffab 	bl	8000524 <__aeabi_i2d>
 80125ce:	4602      	mov	r2, r0
 80125d0:	460b      	mov	r3, r1
 80125d2:	ec43 2b18 	vmov	d8, r2, r3
 80125d6:	4b46      	ldr	r3, [pc, #280]	; (80126f0 <__kernel_rem_pio2+0x338>)
 80125d8:	2200      	movs	r2, #0
 80125da:	f7ee f80d 	bl	80005f8 <__aeabi_dmul>
 80125de:	4602      	mov	r2, r0
 80125e0:	460b      	mov	r3, r1
 80125e2:	4630      	mov	r0, r6
 80125e4:	4639      	mov	r1, r7
 80125e6:	f7ed fe4f 	bl	8000288 <__aeabi_dsub>
 80125ea:	f7ee fab5 	bl	8000b58 <__aeabi_d2iz>
 80125ee:	e9d5 2300 	ldrd	r2, r3, [r5]
 80125f2:	f84b 0b04 	str.w	r0, [fp], #4
 80125f6:	ec51 0b18 	vmov	r0, r1, d8
 80125fa:	f7ed fe47 	bl	800028c <__adddf3>
 80125fe:	f109 39ff 	add.w	r9, r9, #4294967295
 8012602:	4606      	mov	r6, r0
 8012604:	460f      	mov	r7, r1
 8012606:	e75b      	b.n	80124c0 <__kernel_rem_pio2+0x108>
 8012608:	d106      	bne.n	8012618 <__kernel_rem_pio2+0x260>
 801260a:	1e63      	subs	r3, r4, #1
 801260c:	aa0e      	add	r2, sp, #56	; 0x38
 801260e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8012612:	ea4f 5be0 	mov.w	fp, r0, asr #23
 8012616:	e79d      	b.n	8012554 <__kernel_rem_pio2+0x19c>
 8012618:	4b36      	ldr	r3, [pc, #216]	; (80126f4 <__kernel_rem_pio2+0x33c>)
 801261a:	2200      	movs	r2, #0
 801261c:	f7ee fa72 	bl	8000b04 <__aeabi_dcmpge>
 8012620:	2800      	cmp	r0, #0
 8012622:	d13d      	bne.n	80126a0 <__kernel_rem_pio2+0x2e8>
 8012624:	4683      	mov	fp, r0
 8012626:	2200      	movs	r2, #0
 8012628:	2300      	movs	r3, #0
 801262a:	4630      	mov	r0, r6
 801262c:	4639      	mov	r1, r7
 801262e:	f7ee fa4b 	bl	8000ac8 <__aeabi_dcmpeq>
 8012632:	2800      	cmp	r0, #0
 8012634:	f000 80c0 	beq.w	80127b8 <__kernel_rem_pio2+0x400>
 8012638:	1e65      	subs	r5, r4, #1
 801263a:	462b      	mov	r3, r5
 801263c:	2200      	movs	r2, #0
 801263e:	9902      	ldr	r1, [sp, #8]
 8012640:	428b      	cmp	r3, r1
 8012642:	da6c      	bge.n	801271e <__kernel_rem_pio2+0x366>
 8012644:	2a00      	cmp	r2, #0
 8012646:	f000 8089 	beq.w	801275c <__kernel_rem_pio2+0x3a4>
 801264a:	ab0e      	add	r3, sp, #56	; 0x38
 801264c:	f1aa 0a18 	sub.w	sl, sl, #24
 8012650:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8012654:	2b00      	cmp	r3, #0
 8012656:	f000 80ad 	beq.w	80127b4 <__kernel_rem_pio2+0x3fc>
 801265a:	4650      	mov	r0, sl
 801265c:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 80126d8 <__kernel_rem_pio2+0x320>
 8012660:	f000 fb42 	bl	8012ce8 <scalbn>
 8012664:	ab9a      	add	r3, sp, #616	; 0x268
 8012666:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801266a:	ec57 6b10 	vmov	r6, r7, d0
 801266e:	00ec      	lsls	r4, r5, #3
 8012670:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 8012674:	46aa      	mov	sl, r5
 8012676:	f1ba 0f00 	cmp.w	sl, #0
 801267a:	f280 80d6 	bge.w	801282a <__kernel_rem_pio2+0x472>
 801267e:	ed9f 8b14 	vldr	d8, [pc, #80]	; 80126d0 <__kernel_rem_pio2+0x318>
 8012682:	462e      	mov	r6, r5
 8012684:	2e00      	cmp	r6, #0
 8012686:	f2c0 8104 	blt.w	8012892 <__kernel_rem_pio2+0x4da>
 801268a:	ab72      	add	r3, sp, #456	; 0x1c8
 801268c:	ed8d 8b06 	vstr	d8, [sp, #24]
 8012690:	f8df a064 	ldr.w	sl, [pc, #100]	; 80126f8 <__kernel_rem_pio2+0x340>
 8012694:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 8012698:	f04f 0800 	mov.w	r8, #0
 801269c:	1baf      	subs	r7, r5, r6
 801269e:	e0ea      	b.n	8012876 <__kernel_rem_pio2+0x4be>
 80126a0:	f04f 0b02 	mov.w	fp, #2
 80126a4:	e759      	b.n	801255a <__kernel_rem_pio2+0x1a2>
 80126a6:	f8d8 3000 	ldr.w	r3, [r8]
 80126aa:	b955      	cbnz	r5, 80126c2 <__kernel_rem_pio2+0x30a>
 80126ac:	b123      	cbz	r3, 80126b8 <__kernel_rem_pio2+0x300>
 80126ae:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 80126b2:	f8c8 3000 	str.w	r3, [r8]
 80126b6:	2301      	movs	r3, #1
 80126b8:	3201      	adds	r2, #1
 80126ba:	f108 0804 	add.w	r8, r8, #4
 80126be:	461d      	mov	r5, r3
 80126c0:	e752      	b.n	8012568 <__kernel_rem_pio2+0x1b0>
 80126c2:	1acb      	subs	r3, r1, r3
 80126c4:	f8c8 3000 	str.w	r3, [r8]
 80126c8:	462b      	mov	r3, r5
 80126ca:	e7f5      	b.n	80126b8 <__kernel_rem_pio2+0x300>
 80126cc:	f3af 8000 	nop.w
	...
 80126dc:	3ff00000 	.word	0x3ff00000
 80126e0:	080139a0 	.word	0x080139a0
 80126e4:	40200000 	.word	0x40200000
 80126e8:	3ff00000 	.word	0x3ff00000
 80126ec:	3e700000 	.word	0x3e700000
 80126f0:	41700000 	.word	0x41700000
 80126f4:	3fe00000 	.word	0x3fe00000
 80126f8:	08013960 	.word	0x08013960
 80126fc:	1e62      	subs	r2, r4, #1
 80126fe:	ab0e      	add	r3, sp, #56	; 0x38
 8012700:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012704:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8012708:	a90e      	add	r1, sp, #56	; 0x38
 801270a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 801270e:	e739      	b.n	8012584 <__kernel_rem_pio2+0x1cc>
 8012710:	1e62      	subs	r2, r4, #1
 8012712:	ab0e      	add	r3, sp, #56	; 0x38
 8012714:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012718:	f3c3 0315 	ubfx	r3, r3, #0, #22
 801271c:	e7f4      	b.n	8012708 <__kernel_rem_pio2+0x350>
 801271e:	a90e      	add	r1, sp, #56	; 0x38
 8012720:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8012724:	3b01      	subs	r3, #1
 8012726:	430a      	orrs	r2, r1
 8012728:	e789      	b.n	801263e <__kernel_rem_pio2+0x286>
 801272a:	3301      	adds	r3, #1
 801272c:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8012730:	2900      	cmp	r1, #0
 8012732:	d0fa      	beq.n	801272a <__kernel_rem_pio2+0x372>
 8012734:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012736:	f502 721a 	add.w	r2, r2, #616	; 0x268
 801273a:	446a      	add	r2, sp
 801273c:	3a98      	subs	r2, #152	; 0x98
 801273e:	920a      	str	r2, [sp, #40]	; 0x28
 8012740:	9a08      	ldr	r2, [sp, #32]
 8012742:	18e3      	adds	r3, r4, r3
 8012744:	18a5      	adds	r5, r4, r2
 8012746:	aa22      	add	r2, sp, #136	; 0x88
 8012748:	f104 0801 	add.w	r8, r4, #1
 801274c:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8012750:	9304      	str	r3, [sp, #16]
 8012752:	9b04      	ldr	r3, [sp, #16]
 8012754:	4543      	cmp	r3, r8
 8012756:	da04      	bge.n	8012762 <__kernel_rem_pio2+0x3aa>
 8012758:	461c      	mov	r4, r3
 801275a:	e6a3      	b.n	80124a4 <__kernel_rem_pio2+0xec>
 801275c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801275e:	2301      	movs	r3, #1
 8012760:	e7e4      	b.n	801272c <__kernel_rem_pio2+0x374>
 8012762:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012764:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8012768:	f7ed fedc 	bl	8000524 <__aeabi_i2d>
 801276c:	e8e5 0102 	strd	r0, r1, [r5], #8
 8012770:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012772:	46ab      	mov	fp, r5
 8012774:	461c      	mov	r4, r3
 8012776:	f04f 0900 	mov.w	r9, #0
 801277a:	2600      	movs	r6, #0
 801277c:	2700      	movs	r7, #0
 801277e:	9b06      	ldr	r3, [sp, #24]
 8012780:	4599      	cmp	r9, r3
 8012782:	dd06      	ble.n	8012792 <__kernel_rem_pio2+0x3da>
 8012784:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012786:	e8e3 6702 	strd	r6, r7, [r3], #8
 801278a:	f108 0801 	add.w	r8, r8, #1
 801278e:	930a      	str	r3, [sp, #40]	; 0x28
 8012790:	e7df      	b.n	8012752 <__kernel_rem_pio2+0x39a>
 8012792:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8012796:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 801279a:	f7ed ff2d 	bl	80005f8 <__aeabi_dmul>
 801279e:	4602      	mov	r2, r0
 80127a0:	460b      	mov	r3, r1
 80127a2:	4630      	mov	r0, r6
 80127a4:	4639      	mov	r1, r7
 80127a6:	f7ed fd71 	bl	800028c <__adddf3>
 80127aa:	f109 0901 	add.w	r9, r9, #1
 80127ae:	4606      	mov	r6, r0
 80127b0:	460f      	mov	r7, r1
 80127b2:	e7e4      	b.n	801277e <__kernel_rem_pio2+0x3c6>
 80127b4:	3d01      	subs	r5, #1
 80127b6:	e748      	b.n	801264a <__kernel_rem_pio2+0x292>
 80127b8:	ec47 6b10 	vmov	d0, r6, r7
 80127bc:	f1ca 0000 	rsb	r0, sl, #0
 80127c0:	f000 fa92 	bl	8012ce8 <scalbn>
 80127c4:	ec57 6b10 	vmov	r6, r7, d0
 80127c8:	4ba0      	ldr	r3, [pc, #640]	; (8012a4c <__kernel_rem_pio2+0x694>)
 80127ca:	ee10 0a10 	vmov	r0, s0
 80127ce:	2200      	movs	r2, #0
 80127d0:	4639      	mov	r1, r7
 80127d2:	f7ee f997 	bl	8000b04 <__aeabi_dcmpge>
 80127d6:	b1f8      	cbz	r0, 8012818 <__kernel_rem_pio2+0x460>
 80127d8:	4b9d      	ldr	r3, [pc, #628]	; (8012a50 <__kernel_rem_pio2+0x698>)
 80127da:	2200      	movs	r2, #0
 80127dc:	4630      	mov	r0, r6
 80127de:	4639      	mov	r1, r7
 80127e0:	f7ed ff0a 	bl	80005f8 <__aeabi_dmul>
 80127e4:	f7ee f9b8 	bl	8000b58 <__aeabi_d2iz>
 80127e8:	4680      	mov	r8, r0
 80127ea:	f7ed fe9b 	bl	8000524 <__aeabi_i2d>
 80127ee:	4b97      	ldr	r3, [pc, #604]	; (8012a4c <__kernel_rem_pio2+0x694>)
 80127f0:	2200      	movs	r2, #0
 80127f2:	f7ed ff01 	bl	80005f8 <__aeabi_dmul>
 80127f6:	460b      	mov	r3, r1
 80127f8:	4602      	mov	r2, r0
 80127fa:	4639      	mov	r1, r7
 80127fc:	4630      	mov	r0, r6
 80127fe:	f7ed fd43 	bl	8000288 <__aeabi_dsub>
 8012802:	f7ee f9a9 	bl	8000b58 <__aeabi_d2iz>
 8012806:	1c65      	adds	r5, r4, #1
 8012808:	ab0e      	add	r3, sp, #56	; 0x38
 801280a:	f10a 0a18 	add.w	sl, sl, #24
 801280e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8012812:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8012816:	e720      	b.n	801265a <__kernel_rem_pio2+0x2a2>
 8012818:	4630      	mov	r0, r6
 801281a:	4639      	mov	r1, r7
 801281c:	f7ee f99c 	bl	8000b58 <__aeabi_d2iz>
 8012820:	ab0e      	add	r3, sp, #56	; 0x38
 8012822:	4625      	mov	r5, r4
 8012824:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8012828:	e717      	b.n	801265a <__kernel_rem_pio2+0x2a2>
 801282a:	ab0e      	add	r3, sp, #56	; 0x38
 801282c:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8012830:	f7ed fe78 	bl	8000524 <__aeabi_i2d>
 8012834:	4632      	mov	r2, r6
 8012836:	463b      	mov	r3, r7
 8012838:	f7ed fede 	bl	80005f8 <__aeabi_dmul>
 801283c:	4b84      	ldr	r3, [pc, #528]	; (8012a50 <__kernel_rem_pio2+0x698>)
 801283e:	e968 0102 	strd	r0, r1, [r8, #-8]!
 8012842:	2200      	movs	r2, #0
 8012844:	4630      	mov	r0, r6
 8012846:	4639      	mov	r1, r7
 8012848:	f7ed fed6 	bl	80005f8 <__aeabi_dmul>
 801284c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8012850:	4606      	mov	r6, r0
 8012852:	460f      	mov	r7, r1
 8012854:	e70f      	b.n	8012676 <__kernel_rem_pio2+0x2be>
 8012856:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 801285a:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 801285e:	f7ed fecb 	bl	80005f8 <__aeabi_dmul>
 8012862:	4602      	mov	r2, r0
 8012864:	460b      	mov	r3, r1
 8012866:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801286a:	f7ed fd0f 	bl	800028c <__adddf3>
 801286e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8012872:	f108 0801 	add.w	r8, r8, #1
 8012876:	9b02      	ldr	r3, [sp, #8]
 8012878:	4598      	cmp	r8, r3
 801287a:	dc01      	bgt.n	8012880 <__kernel_rem_pio2+0x4c8>
 801287c:	45b8      	cmp	r8, r7
 801287e:	ddea      	ble.n	8012856 <__kernel_rem_pio2+0x49e>
 8012880:	ed9d 7b06 	vldr	d7, [sp, #24]
 8012884:	ab4a      	add	r3, sp, #296	; 0x128
 8012886:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 801288a:	ed87 7b00 	vstr	d7, [r7]
 801288e:	3e01      	subs	r6, #1
 8012890:	e6f8      	b.n	8012684 <__kernel_rem_pio2+0x2cc>
 8012892:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8012894:	2b02      	cmp	r3, #2
 8012896:	dc0b      	bgt.n	80128b0 <__kernel_rem_pio2+0x4f8>
 8012898:	2b00      	cmp	r3, #0
 801289a:	dc35      	bgt.n	8012908 <__kernel_rem_pio2+0x550>
 801289c:	d059      	beq.n	8012952 <__kernel_rem_pio2+0x59a>
 801289e:	9b04      	ldr	r3, [sp, #16]
 80128a0:	f003 0007 	and.w	r0, r3, #7
 80128a4:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 80128a8:	ecbd 8b02 	vpop	{d8}
 80128ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80128b0:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 80128b2:	2b03      	cmp	r3, #3
 80128b4:	d1f3      	bne.n	801289e <__kernel_rem_pio2+0x4e6>
 80128b6:	ab4a      	add	r3, sp, #296	; 0x128
 80128b8:	4423      	add	r3, r4
 80128ba:	9306      	str	r3, [sp, #24]
 80128bc:	461c      	mov	r4, r3
 80128be:	469a      	mov	sl, r3
 80128c0:	9502      	str	r5, [sp, #8]
 80128c2:	9b02      	ldr	r3, [sp, #8]
 80128c4:	2b00      	cmp	r3, #0
 80128c6:	f1aa 0a08 	sub.w	sl, sl, #8
 80128ca:	dc6b      	bgt.n	80129a4 <__kernel_rem_pio2+0x5ec>
 80128cc:	46aa      	mov	sl, r5
 80128ce:	f1ba 0f01 	cmp.w	sl, #1
 80128d2:	f1a4 0408 	sub.w	r4, r4, #8
 80128d6:	f300 8085 	bgt.w	80129e4 <__kernel_rem_pio2+0x62c>
 80128da:	9c06      	ldr	r4, [sp, #24]
 80128dc:	2000      	movs	r0, #0
 80128de:	3408      	adds	r4, #8
 80128e0:	2100      	movs	r1, #0
 80128e2:	2d01      	cmp	r5, #1
 80128e4:	f300 809d 	bgt.w	8012a22 <__kernel_rem_pio2+0x66a>
 80128e8:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 80128ec:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 80128f0:	f1bb 0f00 	cmp.w	fp, #0
 80128f4:	f040 809b 	bne.w	8012a2e <__kernel_rem_pio2+0x676>
 80128f8:	9b01      	ldr	r3, [sp, #4]
 80128fa:	e9c3 5600 	strd	r5, r6, [r3]
 80128fe:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8012902:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8012906:	e7ca      	b.n	801289e <__kernel_rem_pio2+0x4e6>
 8012908:	3408      	adds	r4, #8
 801290a:	ab4a      	add	r3, sp, #296	; 0x128
 801290c:	441c      	add	r4, r3
 801290e:	462e      	mov	r6, r5
 8012910:	2000      	movs	r0, #0
 8012912:	2100      	movs	r1, #0
 8012914:	2e00      	cmp	r6, #0
 8012916:	da36      	bge.n	8012986 <__kernel_rem_pio2+0x5ce>
 8012918:	f1bb 0f00 	cmp.w	fp, #0
 801291c:	d039      	beq.n	8012992 <__kernel_rem_pio2+0x5da>
 801291e:	4602      	mov	r2, r0
 8012920:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012924:	9c01      	ldr	r4, [sp, #4]
 8012926:	e9c4 2300 	strd	r2, r3, [r4]
 801292a:	4602      	mov	r2, r0
 801292c:	460b      	mov	r3, r1
 801292e:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8012932:	f7ed fca9 	bl	8000288 <__aeabi_dsub>
 8012936:	ae4c      	add	r6, sp, #304	; 0x130
 8012938:	2401      	movs	r4, #1
 801293a:	42a5      	cmp	r5, r4
 801293c:	da2c      	bge.n	8012998 <__kernel_rem_pio2+0x5e0>
 801293e:	f1bb 0f00 	cmp.w	fp, #0
 8012942:	d002      	beq.n	801294a <__kernel_rem_pio2+0x592>
 8012944:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012948:	4619      	mov	r1, r3
 801294a:	9b01      	ldr	r3, [sp, #4]
 801294c:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8012950:	e7a5      	b.n	801289e <__kernel_rem_pio2+0x4e6>
 8012952:	f504 731a 	add.w	r3, r4, #616	; 0x268
 8012956:	eb0d 0403 	add.w	r4, sp, r3
 801295a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 801295e:	2000      	movs	r0, #0
 8012960:	2100      	movs	r1, #0
 8012962:	2d00      	cmp	r5, #0
 8012964:	da09      	bge.n	801297a <__kernel_rem_pio2+0x5c2>
 8012966:	f1bb 0f00 	cmp.w	fp, #0
 801296a:	d002      	beq.n	8012972 <__kernel_rem_pio2+0x5ba>
 801296c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012970:	4619      	mov	r1, r3
 8012972:	9b01      	ldr	r3, [sp, #4]
 8012974:	e9c3 0100 	strd	r0, r1, [r3]
 8012978:	e791      	b.n	801289e <__kernel_rem_pio2+0x4e6>
 801297a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801297e:	f7ed fc85 	bl	800028c <__adddf3>
 8012982:	3d01      	subs	r5, #1
 8012984:	e7ed      	b.n	8012962 <__kernel_rem_pio2+0x5aa>
 8012986:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801298a:	f7ed fc7f 	bl	800028c <__adddf3>
 801298e:	3e01      	subs	r6, #1
 8012990:	e7c0      	b.n	8012914 <__kernel_rem_pio2+0x55c>
 8012992:	4602      	mov	r2, r0
 8012994:	460b      	mov	r3, r1
 8012996:	e7c5      	b.n	8012924 <__kernel_rem_pio2+0x56c>
 8012998:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 801299c:	f7ed fc76 	bl	800028c <__adddf3>
 80129a0:	3401      	adds	r4, #1
 80129a2:	e7ca      	b.n	801293a <__kernel_rem_pio2+0x582>
 80129a4:	e9da 8900 	ldrd	r8, r9, [sl]
 80129a8:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 80129ac:	9b02      	ldr	r3, [sp, #8]
 80129ae:	3b01      	subs	r3, #1
 80129b0:	9302      	str	r3, [sp, #8]
 80129b2:	4632      	mov	r2, r6
 80129b4:	463b      	mov	r3, r7
 80129b6:	4640      	mov	r0, r8
 80129b8:	4649      	mov	r1, r9
 80129ba:	f7ed fc67 	bl	800028c <__adddf3>
 80129be:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80129c2:	4602      	mov	r2, r0
 80129c4:	460b      	mov	r3, r1
 80129c6:	4640      	mov	r0, r8
 80129c8:	4649      	mov	r1, r9
 80129ca:	f7ed fc5d 	bl	8000288 <__aeabi_dsub>
 80129ce:	4632      	mov	r2, r6
 80129d0:	463b      	mov	r3, r7
 80129d2:	f7ed fc5b 	bl	800028c <__adddf3>
 80129d6:	ed9d 7b08 	vldr	d7, [sp, #32]
 80129da:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80129de:	ed8a 7b00 	vstr	d7, [sl]
 80129e2:	e76e      	b.n	80128c2 <__kernel_rem_pio2+0x50a>
 80129e4:	e9d4 8900 	ldrd	r8, r9, [r4]
 80129e8:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 80129ec:	4640      	mov	r0, r8
 80129ee:	4632      	mov	r2, r6
 80129f0:	463b      	mov	r3, r7
 80129f2:	4649      	mov	r1, r9
 80129f4:	f7ed fc4a 	bl	800028c <__adddf3>
 80129f8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80129fc:	4602      	mov	r2, r0
 80129fe:	460b      	mov	r3, r1
 8012a00:	4640      	mov	r0, r8
 8012a02:	4649      	mov	r1, r9
 8012a04:	f7ed fc40 	bl	8000288 <__aeabi_dsub>
 8012a08:	4632      	mov	r2, r6
 8012a0a:	463b      	mov	r3, r7
 8012a0c:	f7ed fc3e 	bl	800028c <__adddf3>
 8012a10:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012a14:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8012a18:	ed84 7b00 	vstr	d7, [r4]
 8012a1c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8012a20:	e755      	b.n	80128ce <__kernel_rem_pio2+0x516>
 8012a22:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8012a26:	f7ed fc31 	bl	800028c <__adddf3>
 8012a2a:	3d01      	subs	r5, #1
 8012a2c:	e759      	b.n	80128e2 <__kernel_rem_pio2+0x52a>
 8012a2e:	9b01      	ldr	r3, [sp, #4]
 8012a30:	9a01      	ldr	r2, [sp, #4]
 8012a32:	601d      	str	r5, [r3, #0]
 8012a34:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8012a38:	605c      	str	r4, [r3, #4]
 8012a3a:	609f      	str	r7, [r3, #8]
 8012a3c:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8012a40:	60d3      	str	r3, [r2, #12]
 8012a42:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012a46:	6110      	str	r0, [r2, #16]
 8012a48:	6153      	str	r3, [r2, #20]
 8012a4a:	e728      	b.n	801289e <__kernel_rem_pio2+0x4e6>
 8012a4c:	41700000 	.word	0x41700000
 8012a50:	3e700000 	.word	0x3e700000
 8012a54:	00000000 	.word	0x00000000

08012a58 <__kernel_sin>:
 8012a58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012a5c:	ed2d 8b04 	vpush	{d8-d9}
 8012a60:	eeb0 8a41 	vmov.f32	s16, s2
 8012a64:	eef0 8a61 	vmov.f32	s17, s3
 8012a68:	ec55 4b10 	vmov	r4, r5, d0
 8012a6c:	b083      	sub	sp, #12
 8012a6e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8012a72:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8012a76:	9001      	str	r0, [sp, #4]
 8012a78:	da06      	bge.n	8012a88 <__kernel_sin+0x30>
 8012a7a:	ee10 0a10 	vmov	r0, s0
 8012a7e:	4629      	mov	r1, r5
 8012a80:	f7ee f86a 	bl	8000b58 <__aeabi_d2iz>
 8012a84:	2800      	cmp	r0, #0
 8012a86:	d051      	beq.n	8012b2c <__kernel_sin+0xd4>
 8012a88:	4622      	mov	r2, r4
 8012a8a:	462b      	mov	r3, r5
 8012a8c:	4620      	mov	r0, r4
 8012a8e:	4629      	mov	r1, r5
 8012a90:	f7ed fdb2 	bl	80005f8 <__aeabi_dmul>
 8012a94:	4682      	mov	sl, r0
 8012a96:	468b      	mov	fp, r1
 8012a98:	4602      	mov	r2, r0
 8012a9a:	460b      	mov	r3, r1
 8012a9c:	4620      	mov	r0, r4
 8012a9e:	4629      	mov	r1, r5
 8012aa0:	f7ed fdaa 	bl	80005f8 <__aeabi_dmul>
 8012aa4:	a341      	add	r3, pc, #260	; (adr r3, 8012bac <__kernel_sin+0x154>)
 8012aa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012aaa:	4680      	mov	r8, r0
 8012aac:	4689      	mov	r9, r1
 8012aae:	4650      	mov	r0, sl
 8012ab0:	4659      	mov	r1, fp
 8012ab2:	f7ed fda1 	bl	80005f8 <__aeabi_dmul>
 8012ab6:	a33f      	add	r3, pc, #252	; (adr r3, 8012bb4 <__kernel_sin+0x15c>)
 8012ab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012abc:	f7ed fbe4 	bl	8000288 <__aeabi_dsub>
 8012ac0:	4652      	mov	r2, sl
 8012ac2:	465b      	mov	r3, fp
 8012ac4:	f7ed fd98 	bl	80005f8 <__aeabi_dmul>
 8012ac8:	a33c      	add	r3, pc, #240	; (adr r3, 8012bbc <__kernel_sin+0x164>)
 8012aca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ace:	f7ed fbdd 	bl	800028c <__adddf3>
 8012ad2:	4652      	mov	r2, sl
 8012ad4:	465b      	mov	r3, fp
 8012ad6:	f7ed fd8f 	bl	80005f8 <__aeabi_dmul>
 8012ada:	a33a      	add	r3, pc, #232	; (adr r3, 8012bc4 <__kernel_sin+0x16c>)
 8012adc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ae0:	f7ed fbd2 	bl	8000288 <__aeabi_dsub>
 8012ae4:	4652      	mov	r2, sl
 8012ae6:	465b      	mov	r3, fp
 8012ae8:	f7ed fd86 	bl	80005f8 <__aeabi_dmul>
 8012aec:	a337      	add	r3, pc, #220	; (adr r3, 8012bcc <__kernel_sin+0x174>)
 8012aee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012af2:	f7ed fbcb 	bl	800028c <__adddf3>
 8012af6:	9b01      	ldr	r3, [sp, #4]
 8012af8:	4606      	mov	r6, r0
 8012afa:	460f      	mov	r7, r1
 8012afc:	b9eb      	cbnz	r3, 8012b3a <__kernel_sin+0xe2>
 8012afe:	4602      	mov	r2, r0
 8012b00:	460b      	mov	r3, r1
 8012b02:	4650      	mov	r0, sl
 8012b04:	4659      	mov	r1, fp
 8012b06:	f7ed fd77 	bl	80005f8 <__aeabi_dmul>
 8012b0a:	a325      	add	r3, pc, #148	; (adr r3, 8012ba0 <__kernel_sin+0x148>)
 8012b0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b10:	f7ed fbba 	bl	8000288 <__aeabi_dsub>
 8012b14:	4642      	mov	r2, r8
 8012b16:	464b      	mov	r3, r9
 8012b18:	f7ed fd6e 	bl	80005f8 <__aeabi_dmul>
 8012b1c:	4602      	mov	r2, r0
 8012b1e:	460b      	mov	r3, r1
 8012b20:	4620      	mov	r0, r4
 8012b22:	4629      	mov	r1, r5
 8012b24:	f7ed fbb2 	bl	800028c <__adddf3>
 8012b28:	4604      	mov	r4, r0
 8012b2a:	460d      	mov	r5, r1
 8012b2c:	ec45 4b10 	vmov	d0, r4, r5
 8012b30:	b003      	add	sp, #12
 8012b32:	ecbd 8b04 	vpop	{d8-d9}
 8012b36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012b3a:	4b1b      	ldr	r3, [pc, #108]	; (8012ba8 <__kernel_sin+0x150>)
 8012b3c:	ec51 0b18 	vmov	r0, r1, d8
 8012b40:	2200      	movs	r2, #0
 8012b42:	f7ed fd59 	bl	80005f8 <__aeabi_dmul>
 8012b46:	4632      	mov	r2, r6
 8012b48:	ec41 0b19 	vmov	d9, r0, r1
 8012b4c:	463b      	mov	r3, r7
 8012b4e:	4640      	mov	r0, r8
 8012b50:	4649      	mov	r1, r9
 8012b52:	f7ed fd51 	bl	80005f8 <__aeabi_dmul>
 8012b56:	4602      	mov	r2, r0
 8012b58:	460b      	mov	r3, r1
 8012b5a:	ec51 0b19 	vmov	r0, r1, d9
 8012b5e:	f7ed fb93 	bl	8000288 <__aeabi_dsub>
 8012b62:	4652      	mov	r2, sl
 8012b64:	465b      	mov	r3, fp
 8012b66:	f7ed fd47 	bl	80005f8 <__aeabi_dmul>
 8012b6a:	ec53 2b18 	vmov	r2, r3, d8
 8012b6e:	f7ed fb8b 	bl	8000288 <__aeabi_dsub>
 8012b72:	a30b      	add	r3, pc, #44	; (adr r3, 8012ba0 <__kernel_sin+0x148>)
 8012b74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b78:	4606      	mov	r6, r0
 8012b7a:	460f      	mov	r7, r1
 8012b7c:	4640      	mov	r0, r8
 8012b7e:	4649      	mov	r1, r9
 8012b80:	f7ed fd3a 	bl	80005f8 <__aeabi_dmul>
 8012b84:	4602      	mov	r2, r0
 8012b86:	460b      	mov	r3, r1
 8012b88:	4630      	mov	r0, r6
 8012b8a:	4639      	mov	r1, r7
 8012b8c:	f7ed fb7e 	bl	800028c <__adddf3>
 8012b90:	4602      	mov	r2, r0
 8012b92:	460b      	mov	r3, r1
 8012b94:	4620      	mov	r0, r4
 8012b96:	4629      	mov	r1, r5
 8012b98:	f7ed fb76 	bl	8000288 <__aeabi_dsub>
 8012b9c:	e7c4      	b.n	8012b28 <__kernel_sin+0xd0>
 8012b9e:	bf00      	nop
 8012ba0:	55555549 	.word	0x55555549
 8012ba4:	3fc55555 	.word	0x3fc55555
 8012ba8:	3fe00000 	.word	0x3fe00000
 8012bac:	5acfd57c 	.word	0x5acfd57c
 8012bb0:	3de5d93a 	.word	0x3de5d93a
 8012bb4:	8a2b9ceb 	.word	0x8a2b9ceb
 8012bb8:	3e5ae5e6 	.word	0x3e5ae5e6
 8012bbc:	57b1fe7d 	.word	0x57b1fe7d
 8012bc0:	3ec71de3 	.word	0x3ec71de3
 8012bc4:	19c161d5 	.word	0x19c161d5
 8012bc8:	3f2a01a0 	.word	0x3f2a01a0
 8012bcc:	1110f8a6 	.word	0x1110f8a6
 8012bd0:	3f811111 	.word	0x3f811111

08012bd4 <fabs>:
 8012bd4:	ec51 0b10 	vmov	r0, r1, d0
 8012bd8:	ee10 2a10 	vmov	r2, s0
 8012bdc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8012be0:	ec43 2b10 	vmov	d0, r2, r3
 8012be4:	4770      	bx	lr
	...

08012be8 <floor>:
 8012be8:	ec51 0b10 	vmov	r0, r1, d0
 8012bec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012bf0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8012bf4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8012bf8:	2e13      	cmp	r6, #19
 8012bfa:	ee10 5a10 	vmov	r5, s0
 8012bfe:	ee10 8a10 	vmov	r8, s0
 8012c02:	460c      	mov	r4, r1
 8012c04:	dc32      	bgt.n	8012c6c <floor+0x84>
 8012c06:	2e00      	cmp	r6, #0
 8012c08:	da14      	bge.n	8012c34 <floor+0x4c>
 8012c0a:	a333      	add	r3, pc, #204	; (adr r3, 8012cd8 <floor+0xf0>)
 8012c0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c10:	f7ed fb3c 	bl	800028c <__adddf3>
 8012c14:	2200      	movs	r2, #0
 8012c16:	2300      	movs	r3, #0
 8012c18:	f7ed ff7e 	bl	8000b18 <__aeabi_dcmpgt>
 8012c1c:	b138      	cbz	r0, 8012c2e <floor+0x46>
 8012c1e:	2c00      	cmp	r4, #0
 8012c20:	da57      	bge.n	8012cd2 <floor+0xea>
 8012c22:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8012c26:	431d      	orrs	r5, r3
 8012c28:	d001      	beq.n	8012c2e <floor+0x46>
 8012c2a:	4c2d      	ldr	r4, [pc, #180]	; (8012ce0 <floor+0xf8>)
 8012c2c:	2500      	movs	r5, #0
 8012c2e:	4621      	mov	r1, r4
 8012c30:	4628      	mov	r0, r5
 8012c32:	e025      	b.n	8012c80 <floor+0x98>
 8012c34:	4f2b      	ldr	r7, [pc, #172]	; (8012ce4 <floor+0xfc>)
 8012c36:	4137      	asrs	r7, r6
 8012c38:	ea01 0307 	and.w	r3, r1, r7
 8012c3c:	4303      	orrs	r3, r0
 8012c3e:	d01f      	beq.n	8012c80 <floor+0x98>
 8012c40:	a325      	add	r3, pc, #148	; (adr r3, 8012cd8 <floor+0xf0>)
 8012c42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c46:	f7ed fb21 	bl	800028c <__adddf3>
 8012c4a:	2200      	movs	r2, #0
 8012c4c:	2300      	movs	r3, #0
 8012c4e:	f7ed ff63 	bl	8000b18 <__aeabi_dcmpgt>
 8012c52:	2800      	cmp	r0, #0
 8012c54:	d0eb      	beq.n	8012c2e <floor+0x46>
 8012c56:	2c00      	cmp	r4, #0
 8012c58:	bfbe      	ittt	lt
 8012c5a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8012c5e:	fa43 f606 	asrlt.w	r6, r3, r6
 8012c62:	19a4      	addlt	r4, r4, r6
 8012c64:	ea24 0407 	bic.w	r4, r4, r7
 8012c68:	2500      	movs	r5, #0
 8012c6a:	e7e0      	b.n	8012c2e <floor+0x46>
 8012c6c:	2e33      	cmp	r6, #51	; 0x33
 8012c6e:	dd0b      	ble.n	8012c88 <floor+0xa0>
 8012c70:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8012c74:	d104      	bne.n	8012c80 <floor+0x98>
 8012c76:	ee10 2a10 	vmov	r2, s0
 8012c7a:	460b      	mov	r3, r1
 8012c7c:	f7ed fb06 	bl	800028c <__adddf3>
 8012c80:	ec41 0b10 	vmov	d0, r0, r1
 8012c84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012c88:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8012c8c:	f04f 33ff 	mov.w	r3, #4294967295
 8012c90:	fa23 f707 	lsr.w	r7, r3, r7
 8012c94:	4207      	tst	r7, r0
 8012c96:	d0f3      	beq.n	8012c80 <floor+0x98>
 8012c98:	a30f      	add	r3, pc, #60	; (adr r3, 8012cd8 <floor+0xf0>)
 8012c9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c9e:	f7ed faf5 	bl	800028c <__adddf3>
 8012ca2:	2200      	movs	r2, #0
 8012ca4:	2300      	movs	r3, #0
 8012ca6:	f7ed ff37 	bl	8000b18 <__aeabi_dcmpgt>
 8012caa:	2800      	cmp	r0, #0
 8012cac:	d0bf      	beq.n	8012c2e <floor+0x46>
 8012cae:	2c00      	cmp	r4, #0
 8012cb0:	da02      	bge.n	8012cb8 <floor+0xd0>
 8012cb2:	2e14      	cmp	r6, #20
 8012cb4:	d103      	bne.n	8012cbe <floor+0xd6>
 8012cb6:	3401      	adds	r4, #1
 8012cb8:	ea25 0507 	bic.w	r5, r5, r7
 8012cbc:	e7b7      	b.n	8012c2e <floor+0x46>
 8012cbe:	2301      	movs	r3, #1
 8012cc0:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8012cc4:	fa03 f606 	lsl.w	r6, r3, r6
 8012cc8:	4435      	add	r5, r6
 8012cca:	4545      	cmp	r5, r8
 8012ccc:	bf38      	it	cc
 8012cce:	18e4      	addcc	r4, r4, r3
 8012cd0:	e7f2      	b.n	8012cb8 <floor+0xd0>
 8012cd2:	2500      	movs	r5, #0
 8012cd4:	462c      	mov	r4, r5
 8012cd6:	e7aa      	b.n	8012c2e <floor+0x46>
 8012cd8:	8800759c 	.word	0x8800759c
 8012cdc:	7e37e43c 	.word	0x7e37e43c
 8012ce0:	bff00000 	.word	0xbff00000
 8012ce4:	000fffff 	.word	0x000fffff

08012ce8 <scalbn>:
 8012ce8:	b570      	push	{r4, r5, r6, lr}
 8012cea:	ec55 4b10 	vmov	r4, r5, d0
 8012cee:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8012cf2:	4606      	mov	r6, r0
 8012cf4:	462b      	mov	r3, r5
 8012cf6:	b99a      	cbnz	r2, 8012d20 <scalbn+0x38>
 8012cf8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8012cfc:	4323      	orrs	r3, r4
 8012cfe:	d036      	beq.n	8012d6e <scalbn+0x86>
 8012d00:	4b39      	ldr	r3, [pc, #228]	; (8012de8 <scalbn+0x100>)
 8012d02:	4629      	mov	r1, r5
 8012d04:	ee10 0a10 	vmov	r0, s0
 8012d08:	2200      	movs	r2, #0
 8012d0a:	f7ed fc75 	bl	80005f8 <__aeabi_dmul>
 8012d0e:	4b37      	ldr	r3, [pc, #220]	; (8012dec <scalbn+0x104>)
 8012d10:	429e      	cmp	r6, r3
 8012d12:	4604      	mov	r4, r0
 8012d14:	460d      	mov	r5, r1
 8012d16:	da10      	bge.n	8012d3a <scalbn+0x52>
 8012d18:	a32b      	add	r3, pc, #172	; (adr r3, 8012dc8 <scalbn+0xe0>)
 8012d1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d1e:	e03a      	b.n	8012d96 <scalbn+0xae>
 8012d20:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8012d24:	428a      	cmp	r2, r1
 8012d26:	d10c      	bne.n	8012d42 <scalbn+0x5a>
 8012d28:	ee10 2a10 	vmov	r2, s0
 8012d2c:	4620      	mov	r0, r4
 8012d2e:	4629      	mov	r1, r5
 8012d30:	f7ed faac 	bl	800028c <__adddf3>
 8012d34:	4604      	mov	r4, r0
 8012d36:	460d      	mov	r5, r1
 8012d38:	e019      	b.n	8012d6e <scalbn+0x86>
 8012d3a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8012d3e:	460b      	mov	r3, r1
 8012d40:	3a36      	subs	r2, #54	; 0x36
 8012d42:	4432      	add	r2, r6
 8012d44:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8012d48:	428a      	cmp	r2, r1
 8012d4a:	dd08      	ble.n	8012d5e <scalbn+0x76>
 8012d4c:	2d00      	cmp	r5, #0
 8012d4e:	a120      	add	r1, pc, #128	; (adr r1, 8012dd0 <scalbn+0xe8>)
 8012d50:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012d54:	da1c      	bge.n	8012d90 <scalbn+0xa8>
 8012d56:	a120      	add	r1, pc, #128	; (adr r1, 8012dd8 <scalbn+0xf0>)
 8012d58:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012d5c:	e018      	b.n	8012d90 <scalbn+0xa8>
 8012d5e:	2a00      	cmp	r2, #0
 8012d60:	dd08      	ble.n	8012d74 <scalbn+0x8c>
 8012d62:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8012d66:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8012d6a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8012d6e:	ec45 4b10 	vmov	d0, r4, r5
 8012d72:	bd70      	pop	{r4, r5, r6, pc}
 8012d74:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8012d78:	da19      	bge.n	8012dae <scalbn+0xc6>
 8012d7a:	f24c 3350 	movw	r3, #50000	; 0xc350
 8012d7e:	429e      	cmp	r6, r3
 8012d80:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8012d84:	dd0a      	ble.n	8012d9c <scalbn+0xb4>
 8012d86:	a112      	add	r1, pc, #72	; (adr r1, 8012dd0 <scalbn+0xe8>)
 8012d88:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012d8c:	2b00      	cmp	r3, #0
 8012d8e:	d1e2      	bne.n	8012d56 <scalbn+0x6e>
 8012d90:	a30f      	add	r3, pc, #60	; (adr r3, 8012dd0 <scalbn+0xe8>)
 8012d92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d96:	f7ed fc2f 	bl	80005f8 <__aeabi_dmul>
 8012d9a:	e7cb      	b.n	8012d34 <scalbn+0x4c>
 8012d9c:	a10a      	add	r1, pc, #40	; (adr r1, 8012dc8 <scalbn+0xe0>)
 8012d9e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012da2:	2b00      	cmp	r3, #0
 8012da4:	d0b8      	beq.n	8012d18 <scalbn+0x30>
 8012da6:	a10e      	add	r1, pc, #56	; (adr r1, 8012de0 <scalbn+0xf8>)
 8012da8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012dac:	e7b4      	b.n	8012d18 <scalbn+0x30>
 8012dae:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8012db2:	3236      	adds	r2, #54	; 0x36
 8012db4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8012db8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8012dbc:	4620      	mov	r0, r4
 8012dbe:	4b0c      	ldr	r3, [pc, #48]	; (8012df0 <scalbn+0x108>)
 8012dc0:	2200      	movs	r2, #0
 8012dc2:	e7e8      	b.n	8012d96 <scalbn+0xae>
 8012dc4:	f3af 8000 	nop.w
 8012dc8:	c2f8f359 	.word	0xc2f8f359
 8012dcc:	01a56e1f 	.word	0x01a56e1f
 8012dd0:	8800759c 	.word	0x8800759c
 8012dd4:	7e37e43c 	.word	0x7e37e43c
 8012dd8:	8800759c 	.word	0x8800759c
 8012ddc:	fe37e43c 	.word	0xfe37e43c
 8012de0:	c2f8f359 	.word	0xc2f8f359
 8012de4:	81a56e1f 	.word	0x81a56e1f
 8012de8:	43500000 	.word	0x43500000
 8012dec:	ffff3cb0 	.word	0xffff3cb0
 8012df0:	3c900000 	.word	0x3c900000

08012df4 <_init>:
 8012df4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012df6:	bf00      	nop
 8012df8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012dfa:	bc08      	pop	{r3}
 8012dfc:	469e      	mov	lr, r3
 8012dfe:	4770      	bx	lr

08012e00 <_fini>:
 8012e00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012e02:	bf00      	nop
 8012e04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012e06:	bc08      	pop	{r3}
 8012e08:	469e      	mov	lr, r3
 8012e0a:	4770      	bx	lr
